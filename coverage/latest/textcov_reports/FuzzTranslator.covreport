$s14FuzzTranslator0A5Checkys5Int32VSPys5UInt8VG_SitF:
    5|    616|public func FuzzCheck(_ start: UnsafePointer<UInt8>, _ count: Int) -> CInt {
    6|    616|    let bytes = Array(UnsafeBufferPointer(start: start, count: count))
    7|    616|    do {
    8|    616|        try fuzzInstantiation(bytes: bytes)
    9|    613|    } catch {
   10|    613|        // Ignore errors
   11|    616|    }
   12|    616|    return 0
   13|    616|}

$s14WasmKitFuzzing21FuzzerResourceLimiterVACycfC:
    7|    591|    public init() {}
$s14WasmKitFuzzing21FuzzerResourceLimiterV17limitMemoryGrowth2toSbSi_tKF:
    9|  50.6k|    public func limitMemoryGrowth(to desired: Int) throws -> Bool {
   10|  50.6k|        return desired < 1024 * 1024 * 1024
   11|  50.6k|    }
$s14WasmKitFuzzing17fuzzInstantiation5bytesySays5UInt8VG_tKF:
   20|    616|public func fuzzInstantiation(bytes: [UInt8]) throws {
   21|    616|    let module = try WasmKit.parseWasm(bytes: bytes)
   22|    591|    let engine = Engine(configuration: EngineConfiguration(compilationMode: .eager))
   23|    591|    let store = Store(engine: engine)
   24|    591|    store.resourceLimiter = FuzzerResourceLimiter()
   25|    591|
   26|    591|    // Prepare dummy imports
   27|    591|    var imports = Imports()
   28|    591|    for importEntry in module.imports {
   29|     76|        let value: ExternalValueConvertible
   30|     76|        switch importEntry.descriptor {
   31|     76|        case .function(let typeIndex):
   32|      2|            guard typeIndex < module.types.count else {
   33|      0|                // Skip if import type index is out of bounds
   34|      0|                return
   35|      2|            }
   36|      2|            let type = module.types[Int(typeIndex)]
   37|      2|            value = Function(store: store, type: type) { _, _ in
   38|      2|                // Provide "start function" with empty results
   39|      2|                if type.results.isEmpty { return [] }
   40|      2|                fatalError("Unexpected function call")
   41|      2|            }
   42|     76|        case .global(let globalType):
   43|      0|            value = try Global(store: store, type: globalType, value: .i32(0))
   44|     76|        case .memory(let memoryType):
   45|     74|            value = try Memory(store: store, type: memoryType)
   46|     76|        case .table(let tableType):
   47|      0|            value = try Table(store: store, type: tableType)
   48|     76|        }
   49|     75|        imports.define(module: importEntry.module, name: importEntry.name, value.externalValue)
   50|    590|    }
   51|    590|
   52|    590|    // Instantiate the module
   53|    590|    _ = try module.instantiate(store: store, imports: imports)
   54|      3|}

$s7WasmKit6EngineC13configuration11interceptorAcA0C13ConfigurationV_AA0C11Interceptor_pSgtcfc:
   21|    591|    public init(configuration: EngineConfiguration = EngineConfiguration(), interceptor: EngineInterceptor? = nil) {
   22|    591|        self.configuration = configuration
   23|    591|        self.interceptor = interceptor
   24|    591|        self.funcTypeInterner = Interner()
   25|    591|    }
$s7WasmKit19EngineConfigurationV14ThreadingModelO21useDirectThreadedCodeSbvgZ:
   46|    591|        static var useDirectThreadedCode: Bool {
   47|    591|            return WASMKIT_USE_DIRECT_THREADED_CODE == 1
   48|    591|        }
$s7WasmKit19EngineConfigurationV14ThreadingModelO25defaultForCurrentPlatformAEvgZ:
   50|    591|        static var defaultForCurrentPlatform: ThreadingModel {
   51|       |            #if os(WASI)
   52|       |                return .token
   53|       |            #else
   54|    591|                return useDirectThreadedCode ? .direct : .token
   55|       |            #endif
   56|    591|        }
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfC:
  113|    591|    ) {
  114|    591|        self.threadingModel = threadingModel ?? .defaultForCurrentPlatform
  115|    591|        self.compilationMode = compilationMode ?? .lazy
  116|    591|        self.stackSize = stackSize ?? (1 << 19)
  117|    591|        self.features = features
  118|    591|    }
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfcAIyKXEfu_:
  114|    591|        self.threadingModel = threadingModel ?? .defaultForCurrentPlatform
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfcSiyKXEfu1_:
  116|    591|        self.stackSize = stackSize ?? (1 << 19)
$s7WasmKit6EngineC11resolveTypey0A5Types08FunctionE0VAA8InternedVyAGGF:
  122|  1.59k|    func resolveType(_ type: InternedFuncType) -> FunctionType {
  123|  1.59k|        return funcTypeInterner.resolve(type)
  124|  1.59k|    }
$s7WasmKit6EngineC10internTypeyAA8InternedVy0A5Types08FunctionE0VGAIF:
  125|  2.72k|    func internType(_ type: FunctionType) -> InternedFuncType {
  126|  2.72k|        return funcTypeInterner.intern(type)
  127|  2.72k|    }

$s7WasmKit22ConstEvaluationContextV9functions7globals20onFunctionReferencedAcA14ImmutableArrayVyAA08InternalI0VG_Say0A5Types5ValueOGyAJcSgtcfC:
   17|  1.17k|    ) {
   18|  1.17k|        self.functions = functions
   19|  1.17k|        self.globals = globals
   20|  1.17k|        self.onFunctionReferenced = onFunctionReferenced
   21|  1.17k|    }
$s7WasmKit22ConstEvaluationContextV8instance13moduleImportsAcA12EntityHandleVyAA08InstanceI0VG_AA06ModuleH0VtcfC:
   23|    589|    init(instance: InternalInstance, moduleImports: ModuleImports) {
   24|    589|        // Constant expressions can only reference imported globals
   25|    589|        let externalGlobals = instance.globals
   26|    589|            .prefix(moduleImports.numberOfGlobals)
   27|    589|            .map { $0.value }
   28|    589|        self.init(functions: instance.functions, globals: Array(externalGlobals))
   29|    589|    }
$sSa7WasmKit0A6Parser11InstructionORszlE8evaluate7context12expectedType0A5Types5ValueOqd___AH0jH0OtKAA30ConstEvaluationContextProtocolRd__lF:
   45|  2.83k|    func evaluate<C: ConstEvaluationContextProtocol>(context: C, expectedType: WasmTypes.ValueType) throws -> Value {
   46|  2.83k|        let result = try self._evaluate(context: context)
   47|  2.83k|        try result.checkType(expectedType)
   48|  2.83k|        return result
   49|  2.83k|    }
$sSa7WasmKit0A6Parser11InstructionORszlE9_evaluate33_4813626859827C7082EA5FE0B7501990LL7context0A5Types5ValueOqd___tKAA30ConstEvaluationContextProtocolRd__lF:
   51|  2.83k|    private func _evaluate<C: ConstEvaluationContextProtocol>(context: C) throws -> Value {
   52|  2.83k|        guard self.last == .end, self.count == 2 else {
   53|      0|            throw ValidationError(.expectedEndAtOffsetExpression)
   54|  2.83k|        }
   55|  2.83k|        let constInst = self[0]
   56|  2.83k|        switch constInst {
   57|  2.83k|        case .i32Const(let value): return .i32(UInt32(bitPattern: value))
   58|  2.83k|        case .i64Const(let value): return .i64(UInt64(bitPattern: value))
   59|  2.83k|        case .f32Const(let value): return .f32(value.bitPattern)
   60|  2.83k|        case .f64Const(let value): return .f64(value.bitPattern)
   61|  2.83k|        case .globalGet(let globalIndex):
   62|      0|            return try context.globalValue(globalIndex)
   63|  2.83k|        case .refNull(let type):
   64|      0|            switch type {
   65|      0|            case .externRef: return .ref(.extern(nil))
   66|      0|            case .funcRef: return .ref(.function(nil))
   67|      0|            }
   68|  2.83k|        case .refFunc(let functionIndex):
   69|      0|            return try .ref(context.functionRef(functionIndex))
   70|  2.83k|        default:
   71|      0|            throw ValidationError(.illegalConstExpressionInstruction(constInst))
   72|  2.83k|        }
   73|  2.83k|    }

wasmkit_execute_copyStack:
  239|   116k|    mutating func execute_copyStack(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  240|   116k|        let immediate = Instruction.CopyStackOperand.load(from: &pc.pointee)
  241|   116k|        self.copyStack(sp: sp.pointee, immediate: immediate)
  242|   116k|        let next = pc.pointee.pointee
  243|   116k|        pc.pointee = pc.pointee.advanced(by: 1)
  244|   116k|        return next
  245|   116k|    }
wasmkit_execute_globalGet:
  247|  75.5k|    mutating func execute_globalGet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  248|  75.5k|        let immediate = Instruction.GlobalAndVRegOperand.load(from: &pc.pointee)
  249|  75.5k|        self.globalGet(sp: sp.pointee, immediate: immediate)
  250|  75.5k|        let next = pc.pointee.pointee
  251|  75.5k|        pc.pointee = pc.pointee.advanced(by: 1)
  252|  75.5k|        return next
  253|  75.5k|    }
wasmkit_execute_globalSet:
  255|  5.89k|    mutating func execute_globalSet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  256|  5.89k|        let immediate = Instruction.GlobalAndVRegOperand.load(from: &pc.pointee)
  257|  5.89k|        self.globalSet(sp: sp.pointee, immediate: immediate)
  258|  5.89k|        let next = pc.pointee.pointee
  259|  5.89k|        pc.pointee = pc.pointee.advanced(by: 1)
  260|  5.89k|        return next
  261|  5.89k|    }
wasmkit_execute_compilingCall:
  270|  1.08k|    mutating func execute_compilingCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  271|  1.08k|        let immediate = Instruction.CallOperand.load(from: &pc.pointee)
  272|  1.08k|        let next: CodeSlot
  273|  1.08k|        (pc.pointee, next) = try self.compilingCall(sp: &sp.pointee, pc: pc.pointee, immediate: immediate)
  274|  1.08k|        return next
  275|  1.08k|    }
wasmkit_execute_internalCall:
  277|   520k|    mutating func execute_internalCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  278|   520k|        let immediate = Instruction.CallOperand.load(from: &pc.pointee)
  279|   520k|        let next: CodeSlot
  280|   520k|        (pc.pointee, next) = try self.internalCall(sp: &sp.pointee, pc: pc.pointee, immediate: immediate)
  281|   519k|        return next
  282|   520k|    }
wasmkit_execute_returnCall:
  299|    159|    mutating func execute_returnCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  300|    159|        let immediate = Instruction.ReturnCallOperand.load(from: &pc.pointee)
  301|    159|        let next: CodeSlot
  302|    159|        (pc.pointee, next) = try self.returnCall(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
  303|    159|        return next
  304|    159|    }
wasmkit_execute_unreachable:
  313|     57|    mutating func execute_unreachable(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  314|     57|        let next: CodeSlot
  315|     57|        (pc.pointee, next) = try self.unreachable(sp: sp.pointee, pc: pc.pointee)
  316|      0|        return next
  317|     57|    }
wasmkit_execute_nop:
  319|   100k|    mutating func execute_nop(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  320|   100k|        self.nop(sp: sp.pointee)
  321|   100k|        let next = pc.pointee.pointee
  322|   100k|        pc.pointee = pc.pointee.advanced(by: 1)
  323|   100k|        return next
  324|   100k|    }
wasmkit_execute_br:
  326|  2.26k|    mutating func execute_br(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  327|  2.26k|        let immediate = Instruction.BrOperand.load(from: &pc.pointee)
  328|  2.26k|        let next: CodeSlot
  329|  2.26k|        (pc.pointee, next) = self.br(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  330|  2.26k|        return next
  331|  2.26k|    }
wasmkit_execute_brIf:
  333|  8.28k|    mutating func execute_brIf(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  334|  8.28k|        let immediate = Instruction.BrIfOperand.load(from: &pc.pointee)
  335|  8.28k|        let next: CodeSlot
  336|  8.28k|        (pc.pointee, next) = self.brIf(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  337|  8.28k|        return next
  338|  8.28k|    }
wasmkit_execute_brIfNot:
  340|  1.31k|    mutating func execute_brIfNot(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  341|  1.31k|        let immediate = Instruction.BrIfOperand.load(from: &pc.pointee)
  342|  1.31k|        let next: CodeSlot
  343|  1.31k|        (pc.pointee, next) = self.brIfNot(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  344|  1.31k|        return next
  345|  1.31k|    }
wasmkit_execute_brTable:
  347|  11.8k|    mutating func execute_brTable(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  348|  11.8k|        let immediate = Instruction.BrTableOperand.load(from: &pc.pointee)
  349|  11.8k|        let next: CodeSlot
  350|  11.8k|        (pc.pointee, next) = self.brTable(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  351|  11.8k|        return next
  352|  11.8k|    }
wasmkit_execute__return:
  354|   290k|    mutating func execute__return(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  355|   290k|        let next: CodeSlot
  356|   290k|        (pc.pointee, next) = self._return(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee)
  357|   290k|        return next
  358|   290k|    }
wasmkit_execute_endOfExecution:
  360|     12|    mutating func execute_endOfExecution(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  361|     12|        let next: CodeSlot
  362|     12|        (pc.pointee, next) = try self.endOfExecution(sp: &sp.pointee, pc: pc.pointee)
  363|      0|        return next
  364|     12|    }
wasmkit_execute_i32Load:
  366|  4.26k|    mutating func execute_i32Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  367|  4.26k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  368|  4.26k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i32($0) })
  369|  4.26k|        let next = pc.pointee.pointee
  370|  4.26k|        pc.pointee = pc.pointee.advanced(by: 1)
  371|  4.26k|        return next
  372|  4.26k|    }
$s7WasmKit9ExecutionV15execute_i32Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  368|  4.26k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i32($0) })
wasmkit_execute_i64Load:
  374|  3.20k|    mutating func execute_i64Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  375|  3.20k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  376|  3.20k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .i64($0) })
  377|  3.20k|        let next = pc.pointee.pointee
  378|  3.20k|        pc.pointee = pc.pointee.advanced(by: 1)
  379|  3.20k|        return next
  380|  3.20k|    }
$s7WasmKit9ExecutionV15execute_i64Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVAJXEfU_:
  376|  3.20k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .i64($0) })
wasmkit_execute_f32Load:
  382|  5.19k|    mutating func execute_f32Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  383|  5.19k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  384|  5.19k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .rawF32($0) })
  385|  5.19k|        let next = pc.pointee.pointee
  386|  5.19k|        pc.pointee = pc.pointee.advanced(by: 1)
  387|  5.19k|        return next
  388|  5.19k|    }
$s7WasmKit9ExecutionV15execute_f32Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  384|  5.19k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .rawF32($0) })
wasmkit_execute_f64Load:
  390|   309k|    mutating func execute_f64Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  391|   309k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  392|   309k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .rawF64($0) })
  393|   309k|        let next = pc.pointee.pointee
  394|   309k|        pc.pointee = pc.pointee.advanced(by: 1)
  395|   309k|        return next
  396|   309k|    }
$s7WasmKit9ExecutionV15execute_f64Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVAJXEfU_:
  392|   309k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .rawF64($0) })
wasmkit_execute_i32Load8S:
  398|  91.3k|    mutating func execute_i32Load8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  399|  91.3k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  400|  91.3k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int32($0)) })
  401|  91.3k|        let next = pc.pointee.pointee
  402|  91.3k|        pc.pointee = pc.pointee.advanced(by: 1)
  403|  91.3k|        return next
  404|  91.3k|    }
$s7WasmKit9ExecutionV17execute_i32Load8S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs4Int8VXEfU_:
  400|  91.3k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int32($0)) })
wasmkit_execute_i32Load8U:
  406|  6.76k|    mutating func execute_i32Load8U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  407|  6.76k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  408|  6.76k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i32(UInt32($0)) })
  409|  6.76k|        let next = pc.pointee.pointee
  410|  6.76k|        pc.pointee = pc.pointee.advanced(by: 1)
  411|  6.76k|        return next
  412|  6.76k|    }
$s7WasmKit9ExecutionV17execute_i32Load8U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5UInt8VXEfU_:
  408|  6.76k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i32(UInt32($0)) })
wasmkit_execute_i32Load16S:
  414|  80.2k|    mutating func execute_i32Load16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  415|  80.2k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  416|  80.2k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int32($0)) })
  417|  80.2k|        let next = pc.pointee.pointee
  418|  80.2k|        pc.pointee = pc.pointee.advanced(by: 1)
  419|  80.2k|        return next
  420|  80.2k|    }
$s7WasmKit9ExecutionV18execute_i32Load16S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int16VXEfU_:
  416|  80.2k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int32($0)) })
wasmkit_execute_i32Load16U:
  422|  4.20k|    mutating func execute_i32Load16U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  423|  4.20k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  424|  4.20k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i32(UInt32($0)) })
  425|  4.20k|        let next = pc.pointee.pointee
  426|  4.20k|        pc.pointee = pc.pointee.advanced(by: 1)
  427|  4.20k|        return next
  428|  4.20k|    }
$s7WasmKit9ExecutionV18execute_i32Load16U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt16VXEfU_:
  424|  4.20k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i32(UInt32($0)) })
wasmkit_execute_i64Load8S:
  430|  6.99k|    mutating func execute_i64Load8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  431|  6.99k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  432|  6.99k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int64($0)) })
  433|  6.99k|        let next = pc.pointee.pointee
  434|  6.99k|        pc.pointee = pc.pointee.advanced(by: 1)
  435|  6.99k|        return next
  436|  6.99k|    }
$s7WasmKit9ExecutionV17execute_i64Load8S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs4Int8VXEfU_:
  432|  6.99k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load8U:
  438|  17.2k|    mutating func execute_i64Load8U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  439|  17.2k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  440|  17.2k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i64(UInt64($0)) })
  441|  17.2k|        let next = pc.pointee.pointee
  442|  17.2k|        pc.pointee = pc.pointee.advanced(by: 1)
  443|  17.2k|        return next
  444|  17.2k|    }
$s7WasmKit9ExecutionV17execute_i64Load8U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5UInt8VXEfU_:
  440|  17.2k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i64Load16S:
  446|  70.7k|    mutating func execute_i64Load16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  447|  70.7k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  448|  70.7k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int64($0)) })
  449|  70.7k|        let next = pc.pointee.pointee
  450|  70.7k|        pc.pointee = pc.pointee.advanced(by: 1)
  451|  70.7k|        return next
  452|  70.7k|    }
$s7WasmKit9ExecutionV18execute_i64Load16S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int16VXEfU_:
  448|  70.7k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load16U:
  454|  7.97k|    mutating func execute_i64Load16U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  455|  7.97k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  456|  7.97k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i64(UInt64($0)) })
  457|  7.97k|        let next = pc.pointee.pointee
  458|  7.97k|        pc.pointee = pc.pointee.advanced(by: 1)
  459|  7.97k|        return next
  460|  7.97k|    }
$s7WasmKit9ExecutionV18execute_i64Load16U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt16VXEfU_:
  456|  7.97k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i64Load32S:
  462|   514k|    mutating func execute_i64Load32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  463|   514k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  464|   514k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int32.self, castToValue: { .init(signed: Int64($0)) })
  465|   514k|        let next = pc.pointee.pointee
  466|   514k|        pc.pointee = pc.pointee.advanced(by: 1)
  467|   514k|        return next
  468|   514k|    }
$s7WasmKit9ExecutionV18execute_i64Load32S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int32VXEfU_:
  464|   514k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int32.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load32U:
  470|  6.90k|    mutating func execute_i64Load32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  471|  6.90k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  472|  6.90k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i64(UInt64($0)) })
  473|  6.90k|        let next = pc.pointee.pointee
  474|  6.90k|        pc.pointee = pc.pointee.advanced(by: 1)
  475|  6.90k|        return next
  476|  6.90k|    }
$s7WasmKit9ExecutionV18execute_i64Load32U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  472|  6.90k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i32Store:
  478|  4.42k|    mutating func execute_i32Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  479|  4.42k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  480|  4.42k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i32 })
  481|  4.42k|        let next = pc.pointee.pointee
  482|  4.42k|        pc.pointee = pc.pointee.advanced(by: 1)
  483|  4.42k|        return next
  484|  4.42k|    }
$s7WasmKit9ExecutionV16execute_i32Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  480|  4.42k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i32 })
wasmkit_execute_i64Store:
  486|  1.28k|    mutating func execute_i64Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  487|  1.28k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  488|  1.28k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i64 })
  489|  1.28k|        let next = pc.pointee.pointee
  490|  1.28k|        pc.pointee = pc.pointee.advanced(by: 1)
  491|  1.28k|        return next
  492|  1.28k|    }
$s7WasmKit9ExecutionV16execute_i64Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAjA12UntypedValueVXEfU_:
  488|  1.28k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i64 })
wasmkit_execute_f32Store:
  494|  1.27k|    mutating func execute_f32Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  495|  1.27k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  496|  1.27k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF32 })
  497|  1.27k|        let next = pc.pointee.pointee
  498|  1.27k|        pc.pointee = pc.pointee.advanced(by: 1)
  499|  1.27k|        return next
  500|  1.27k|    }
$s7WasmKit9ExecutionV16execute_f32Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  496|  1.27k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF32 })
wasmkit_execute_f64Store:
  502|      1|    mutating func execute_f64Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  503|      1|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  504|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF64 })
  505|      1|        let next = pc.pointee.pointee
  506|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  507|      1|        return next
  508|      1|    }
$s7WasmKit9ExecutionV16execute_f64Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAjA12UntypedValueVXEfU_:
  504|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF64 })
wasmkit_execute_i32Store8:
  510|  3.08k|    mutating func execute_i32Store8(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  511|  3.08k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  512|  3.08k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
  513|  3.08k|        let next = pc.pointee.pointee
  514|  3.08k|        pc.pointee = pc.pointee.advanced(by: 1)
  515|  3.08k|        return next
  516|  3.08k|    }
$s7WasmKit9ExecutionV17execute_i32Store82sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs5UInt8VAA12UntypedValueVXEfU_:
  512|  3.08k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
wasmkit_execute_i32Store16:
  518|  11.6k|    mutating func execute_i32Store16(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  519|  11.6k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  520|  11.6k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
  521|  11.6k|        let next = pc.pointee.pointee
  522|  11.6k|        pc.pointee = pc.pointee.advanced(by: 1)
  523|  11.6k|        return next
  524|  11.6k|    }
$s7WasmKit9ExecutionV18execute_i32Store162sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt16VAA12UntypedValueVXEfU_:
  520|  11.6k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
wasmkit_execute_i64Store8:
  526|  5.03k|    mutating func execute_i64Store8(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  527|  5.03k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  528|  5.03k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
  529|  5.03k|        let next = pc.pointee.pointee
  530|  5.03k|        pc.pointee = pc.pointee.advanced(by: 1)
  531|  5.03k|        return next
  532|  5.03k|    }
$s7WasmKit9ExecutionV17execute_i64Store82sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs5UInt8VAA12UntypedValueVXEfU_:
  528|  5.03k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
wasmkit_execute_i64Store16:
  534|  2.33k|    mutating func execute_i64Store16(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  535|  2.33k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  536|  2.33k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
  537|  2.33k|        let next = pc.pointee.pointee
  538|  2.33k|        pc.pointee = pc.pointee.advanced(by: 1)
  539|  2.33k|        return next
  540|  2.33k|    }
$s7WasmKit9ExecutionV18execute_i64Store162sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt16VAA12UntypedValueVXEfU_:
  536|  2.33k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
wasmkit_execute_i64Store32:
  542|  4.10k|    mutating func execute_i64Store32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  543|  4.10k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  544|  4.10k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
  545|  4.10k|        let next = pc.pointee.pointee
  546|  4.10k|        pc.pointee = pc.pointee.advanced(by: 1)
  547|  4.10k|        return next
  548|  4.10k|    }
$s7WasmKit9ExecutionV18execute_i64Store322sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  544|  4.10k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
wasmkit_execute_memorySize:
  550|   432k|    mutating func execute_memorySize(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  551|   432k|        let immediate = Instruction.MemorySizeOperand.load(from: &pc.pointee)
  552|   432k|        self.memorySize(sp: sp.pointee, immediate: immediate)
  553|   432k|        let next = pc.pointee.pointee
  554|   432k|        pc.pointee = pc.pointee.advanced(by: 1)
  555|   432k|        return next
  556|   432k|    }
wasmkit_execute_memoryGrow:
  558|  54.0k|    mutating func execute_memoryGrow(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  559|  54.0k|        let immediate = Instruction.MemoryGrowOperand.load(from: &pc.pointee)
  560|  54.0k|        try self.memoryGrow(sp: sp.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
  561|  54.0k|        let next = pc.pointee.pointee
  562|  54.0k|        pc.pointee = pc.pointee.advanced(by: 1)
  563|  54.0k|        return next
  564|  54.0k|    }
wasmkit_execute_const32:
  598|  64.6k|    mutating func execute_const32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  599|  64.6k|        let immediate = Instruction.Const32Operand.load(from: &pc.pointee)
  600|  64.6k|        self.const32(sp: sp.pointee, immediate: immediate)
  601|  64.6k|        let next = pc.pointee.pointee
  602|  64.6k|        pc.pointee = pc.pointee.advanced(by: 1)
  603|  64.6k|        return next
  604|  64.6k|    }
wasmkit_execute_const64:
  606|    320|    mutating func execute_const64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  607|    320|        let immediate = Instruction.Const64Operand.load(from: &pc.pointee)
  608|    320|        self.const64(sp: sp.pointee, immediate: immediate)
  609|    320|        let next = pc.pointee.pointee
  610|    320|        pc.pointee = pc.pointee.advanced(by: 1)
  611|    320|        return next
  612|    320|    }
wasmkit_execute_i32Add:
  614|  3.36k|    mutating func execute_i32Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  615|  3.36k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  616|  3.36k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].add(sp.pointee[i32: immediate.rhs])
  617|  3.36k|        let next = pc.pointee.pointee
  618|  3.36k|        pc.pointee = pc.pointee.advanced(by: 1)
  619|  3.36k|        return next
  620|  3.36k|    }
wasmkit_execute_i64Add:
  622|  3.46k|    mutating func execute_i64Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  623|  3.46k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  624|  3.46k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].add(sp.pointee[i64: immediate.rhs])
  625|  3.46k|        let next = pc.pointee.pointee
  626|  3.46k|        pc.pointee = pc.pointee.advanced(by: 1)
  627|  3.46k|        return next
  628|  3.46k|    }
wasmkit_execute_i32Sub:
  630|  1.92k|    mutating func execute_i32Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  631|  1.92k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  632|  1.92k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].sub(sp.pointee[i32: immediate.rhs])
  633|  1.92k|        let next = pc.pointee.pointee
  634|  1.92k|        pc.pointee = pc.pointee.advanced(by: 1)
  635|  1.92k|        return next
  636|  1.92k|    }
wasmkit_execute_i64Sub:
  638|   130k|    mutating func execute_i64Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  639|   130k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  640|   130k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].sub(sp.pointee[i64: immediate.rhs])
  641|   130k|        let next = pc.pointee.pointee
  642|   130k|        pc.pointee = pc.pointee.advanced(by: 1)
  643|   130k|        return next
  644|   130k|    }
wasmkit_execute_i32Mul:
  646|  4.69k|    mutating func execute_i32Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  647|  4.69k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  648|  4.69k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].mul(sp.pointee[i32: immediate.rhs])
  649|  4.69k|        let next = pc.pointee.pointee
  650|  4.69k|        pc.pointee = pc.pointee.advanced(by: 1)
  651|  4.69k|        return next
  652|  4.69k|    }
wasmkit_execute_i64Mul:
  654|  2.37k|    mutating func execute_i64Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  655|  2.37k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  656|  2.37k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].mul(sp.pointee[i64: immediate.rhs])
  657|  2.37k|        let next = pc.pointee.pointee
  658|  2.37k|        pc.pointee = pc.pointee.advanced(by: 1)
  659|  2.37k|        return next
  660|  2.37k|    }
wasmkit_execute_i32And:
  662|  2.38k|    mutating func execute_i32And(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  663|  2.38k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  664|  2.38k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].and(sp.pointee[i32: immediate.rhs])
  665|  2.38k|        let next = pc.pointee.pointee
  666|  2.38k|        pc.pointee = pc.pointee.advanced(by: 1)
  667|  2.38k|        return next
  668|  2.38k|    }
wasmkit_execute_i64And:
  670|  1.64k|    mutating func execute_i64And(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  671|  1.64k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  672|  1.64k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].and(sp.pointee[i64: immediate.rhs])
  673|  1.64k|        let next = pc.pointee.pointee
  674|  1.64k|        pc.pointee = pc.pointee.advanced(by: 1)
  675|  1.64k|        return next
  676|  1.64k|    }
wasmkit_execute_i32Or:
  678|  3.60k|    mutating func execute_i32Or(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  679|  3.60k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  680|  3.60k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].or(sp.pointee[i32: immediate.rhs])
  681|  3.60k|        let next = pc.pointee.pointee
  682|  3.60k|        pc.pointee = pc.pointee.advanced(by: 1)
  683|  3.60k|        return next
  684|  3.60k|    }
wasmkit_execute_i64Or:
  686|  96.2k|    mutating func execute_i64Or(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  687|  96.2k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  688|  96.2k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].or(sp.pointee[i64: immediate.rhs])
  689|  96.2k|        let next = pc.pointee.pointee
  690|  96.2k|        pc.pointee = pc.pointee.advanced(by: 1)
  691|  96.2k|        return next
  692|  96.2k|    }
wasmkit_execute_i32Xor:
  694|  3.11k|    mutating func execute_i32Xor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  695|  3.11k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  696|  3.11k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].xor(sp.pointee[i32: immediate.rhs])
  697|  3.11k|        let next = pc.pointee.pointee
  698|  3.11k|        pc.pointee = pc.pointee.advanced(by: 1)
  699|  3.11k|        return next
  700|  3.11k|    }
wasmkit_execute_i64Xor:
  702|  5.31k|    mutating func execute_i64Xor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  703|  5.31k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  704|  5.31k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].xor(sp.pointee[i64: immediate.rhs])
  705|  5.31k|        let next = pc.pointee.pointee
  706|  5.31k|        pc.pointee = pc.pointee.advanced(by: 1)
  707|  5.31k|        return next
  708|  5.31k|    }
wasmkit_execute_i32Shl:
  710|  2.89k|    mutating func execute_i32Shl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  711|  2.89k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  712|  2.89k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shl(sp.pointee[i32: immediate.rhs])
  713|  2.89k|        let next = pc.pointee.pointee
  714|  2.89k|        pc.pointee = pc.pointee.advanced(by: 1)
  715|  2.89k|        return next
  716|  2.89k|    }
wasmkit_execute_i64Shl:
  718|  6.25k|    mutating func execute_i64Shl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  719|  6.25k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  720|  6.25k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shl(sp.pointee[i64: immediate.rhs])
  721|  6.25k|        let next = pc.pointee.pointee
  722|  6.25k|        pc.pointee = pc.pointee.advanced(by: 1)
  723|  6.25k|        return next
  724|  6.25k|    }
wasmkit_execute_i32ShrS:
  726|  1.56k|    mutating func execute_i32ShrS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  727|  1.56k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  728|  1.56k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shrS(sp.pointee[i32: immediate.rhs])
  729|  1.56k|        let next = pc.pointee.pointee
  730|  1.56k|        pc.pointee = pc.pointee.advanced(by: 1)
  731|  1.56k|        return next
  732|  1.56k|    }
wasmkit_execute_i64ShrS:
  734|  54.1k|    mutating func execute_i64ShrS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  735|  54.1k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  736|  54.1k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shrS(sp.pointee[i64: immediate.rhs])
  737|  54.1k|        let next = pc.pointee.pointee
  738|  54.1k|        pc.pointee = pc.pointee.advanced(by: 1)
  739|  54.1k|        return next
  740|  54.1k|    }
wasmkit_execute_i32ShrU:
  742|  1.86k|    mutating func execute_i32ShrU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  743|  1.86k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  744|  1.86k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shrU(sp.pointee[i32: immediate.rhs])
  745|  1.86k|        let next = pc.pointee.pointee
  746|  1.86k|        pc.pointee = pc.pointee.advanced(by: 1)
  747|  1.86k|        return next
  748|  1.86k|    }
wasmkit_execute_i64ShrU:
  750|  9.43k|    mutating func execute_i64ShrU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  751|  9.43k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  752|  9.43k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shrU(sp.pointee[i64: immediate.rhs])
  753|  9.43k|        let next = pc.pointee.pointee
  754|  9.43k|        pc.pointee = pc.pointee.advanced(by: 1)
  755|  9.43k|        return next
  756|  9.43k|    }
wasmkit_execute_i32Rotl:
  758|  4.67k|    mutating func execute_i32Rotl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  759|  4.67k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  760|  4.67k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].rotl(sp.pointee[i32: immediate.rhs])
  761|  4.67k|        let next = pc.pointee.pointee
  762|  4.67k|        pc.pointee = pc.pointee.advanced(by: 1)
  763|  4.67k|        return next
  764|  4.67k|    }
wasmkit_execute_i64Rotl:
  766|  3.14k|    mutating func execute_i64Rotl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  767|  3.14k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  768|  3.14k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].rotl(sp.pointee[i64: immediate.rhs])
  769|  3.14k|        let next = pc.pointee.pointee
  770|  3.14k|        pc.pointee = pc.pointee.advanced(by: 1)
  771|  3.14k|        return next
  772|  3.14k|    }
wasmkit_execute_i32Rotr:
  774|  4.03k|    mutating func execute_i32Rotr(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  775|  4.03k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  776|  4.03k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].rotr(sp.pointee[i32: immediate.rhs])
  777|  4.03k|        let next = pc.pointee.pointee
  778|  4.03k|        pc.pointee = pc.pointee.advanced(by: 1)
  779|  4.03k|        return next
  780|  4.03k|    }
wasmkit_execute_i64Rotr:
  782|  6.34k|    mutating func execute_i64Rotr(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  783|  6.34k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  784|  6.34k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].rotr(sp.pointee[i64: immediate.rhs])
  785|  6.34k|        let next = pc.pointee.pointee
  786|  6.34k|        pc.pointee = pc.pointee.advanced(by: 1)
  787|  6.34k|        return next
  788|  6.34k|    }
wasmkit_execute_i32DivS:
  790|  2.14k|    mutating func execute_i32DivS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  791|  2.14k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  792|  2.14k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].divS(sp.pointee[i32: immediate.rhs])
  793|  2.14k|        let next = pc.pointee.pointee
  794|  2.14k|        pc.pointee = pc.pointee.advanced(by: 1)
  795|  2.14k|        return next
  796|  2.14k|    }
wasmkit_execute_i64DivS:
  798|  30.4k|    mutating func execute_i64DivS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  799|  30.4k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  800|  30.4k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].divS(sp.pointee[i64: immediate.rhs])
  801|  30.4k|        let next = pc.pointee.pointee
  802|  30.4k|        pc.pointee = pc.pointee.advanced(by: 1)
  803|  30.4k|        return next
  804|  30.4k|    }
wasmkit_execute_i32DivU:
  806|  1.56k|    mutating func execute_i32DivU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  807|  1.56k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  808|  1.56k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].divU(sp.pointee[i32: immediate.rhs])
  809|  1.56k|        let next = pc.pointee.pointee
  810|  1.56k|        pc.pointee = pc.pointee.advanced(by: 1)
  811|  1.56k|        return next
  812|  1.56k|    }
wasmkit_execute_i64DivU:
  814|  7.83k|    mutating func execute_i64DivU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  815|  7.83k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  816|  7.83k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].divU(sp.pointee[i64: immediate.rhs])
  817|  7.83k|        let next = pc.pointee.pointee
  818|  7.83k|        pc.pointee = pc.pointee.advanced(by: 1)
  819|  7.83k|        return next
  820|  7.83k|    }
wasmkit_execute_i32RemS:
  822|  2.62k|    mutating func execute_i32RemS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  823|  2.62k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  824|  2.62k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].remS(sp.pointee[i32: immediate.rhs])
  825|  2.62k|        let next = pc.pointee.pointee
  826|  2.62k|        pc.pointee = pc.pointee.advanced(by: 1)
  827|  2.62k|        return next
  828|  2.62k|    }
wasmkit_execute_i64RemS:
  830|  3.10k|    mutating func execute_i64RemS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  831|  3.10k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  832|  3.10k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].remS(sp.pointee[i64: immediate.rhs])
  833|  3.10k|        let next = pc.pointee.pointee
  834|  3.10k|        pc.pointee = pc.pointee.advanced(by: 1)
  835|  3.10k|        return next
  836|  3.10k|    }
wasmkit_execute_i32RemU:
  838|  2.03k|    mutating func execute_i32RemU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  839|  2.03k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  840|  2.03k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].remU(sp.pointee[i32: immediate.rhs])
  841|  2.03k|        let next = pc.pointee.pointee
  842|  2.03k|        pc.pointee = pc.pointee.advanced(by: 1)
  843|  2.03k|        return next
  844|  2.03k|    }
wasmkit_execute_i64RemU:
  846|  16.9k|    mutating func execute_i64RemU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  847|  16.9k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  848|  16.9k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].remU(sp.pointee[i64: immediate.rhs])
  849|  16.9k|        let next = pc.pointee.pointee
  850|  16.9k|        pc.pointee = pc.pointee.advanced(by: 1)
  851|  16.9k|        return next
  852|  16.9k|    }
wasmkit_execute_i32Eq:
  854|  8.55k|    mutating func execute_i32Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  855|  8.55k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  856|  8.55k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].eq(sp.pointee[i32: immediate.rhs])
  857|  8.55k|        let next = pc.pointee.pointee
  858|  8.55k|        pc.pointee = pc.pointee.advanced(by: 1)
  859|  8.55k|        return next
  860|  8.55k|    }
wasmkit_execute_i64Eq:
  862|  2.65k|    mutating func execute_i64Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  863|  2.65k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  864|  2.65k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].eq(sp.pointee[i64: immediate.rhs])
  865|  2.65k|        let next = pc.pointee.pointee
  866|  2.65k|        pc.pointee = pc.pointee.advanced(by: 1)
  867|  2.65k|        return next
  868|  2.65k|    }
wasmkit_execute_i32Ne:
  870|  3.99k|    mutating func execute_i32Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  871|  3.99k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  872|  3.99k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ne(sp.pointee[i32: immediate.rhs])
  873|  3.99k|        let next = pc.pointee.pointee
  874|  3.99k|        pc.pointee = pc.pointee.advanced(by: 1)
  875|  3.99k|        return next
  876|  3.99k|    }
wasmkit_execute_i64Ne:
  878|  18.8k|    mutating func execute_i64Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  879|  18.8k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  880|  18.8k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ne(sp.pointee[i64: immediate.rhs])
  881|  18.8k|        let next = pc.pointee.pointee
  882|  18.8k|        pc.pointee = pc.pointee.advanced(by: 1)
  883|  18.8k|        return next
  884|  18.8k|    }
wasmkit_execute_i32LtS:
  886|  1.74k|    mutating func execute_i32LtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  887|  1.74k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  888|  1.74k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ltS(sp.pointee[i32: immediate.rhs])
  889|  1.74k|        let next = pc.pointee.pointee
  890|  1.74k|        pc.pointee = pc.pointee.advanced(by: 1)
  891|  1.74k|        return next
  892|  1.74k|    }
wasmkit_execute_i64LtS:
  894|  2.63k|    mutating func execute_i64LtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  895|  2.63k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  896|  2.63k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ltS(sp.pointee[i64: immediate.rhs])
  897|  2.63k|        let next = pc.pointee.pointee
  898|  2.63k|        pc.pointee = pc.pointee.advanced(by: 1)
  899|  2.63k|        return next
  900|  2.63k|    }
wasmkit_execute_i32LtU:
  902|  2.90k|    mutating func execute_i32LtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  903|  2.90k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  904|  2.90k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ltU(sp.pointee[i32: immediate.rhs])
  905|  2.90k|        let next = pc.pointee.pointee
  906|  2.90k|        pc.pointee = pc.pointee.advanced(by: 1)
  907|  2.90k|        return next
  908|  2.90k|    }
wasmkit_execute_i64LtU:
  910|  24.1k|    mutating func execute_i64LtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  911|  24.1k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  912|  24.1k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ltU(sp.pointee[i64: immediate.rhs])
  913|  24.1k|        let next = pc.pointee.pointee
  914|  24.1k|        pc.pointee = pc.pointee.advanced(by: 1)
  915|  24.1k|        return next
  916|  24.1k|    }
wasmkit_execute_i32GtS:
  918|  1.69k|    mutating func execute_i32GtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  919|  1.69k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  920|  1.69k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].gtS(sp.pointee[i32: immediate.rhs])
  921|  1.69k|        let next = pc.pointee.pointee
  922|  1.69k|        pc.pointee = pc.pointee.advanced(by: 1)
  923|  1.69k|        return next
  924|  1.69k|    }
wasmkit_execute_i64GtS:
  926|  6.10k|    mutating func execute_i64GtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  927|  6.10k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  928|  6.10k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].gtS(sp.pointee[i64: immediate.rhs])
  929|  6.10k|        let next = pc.pointee.pointee
  930|  6.10k|        pc.pointee = pc.pointee.advanced(by: 1)
  931|  6.10k|        return next
  932|  6.10k|    }
wasmkit_execute_i32GtU:
  934|  3.66k|    mutating func execute_i32GtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  935|  3.66k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  936|  3.66k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].gtU(sp.pointee[i32: immediate.rhs])
  937|  3.66k|        let next = pc.pointee.pointee
  938|  3.66k|        pc.pointee = pc.pointee.advanced(by: 1)
  939|  3.66k|        return next
  940|  3.66k|    }
wasmkit_execute_i64GtU:
  942|  2.88k|    mutating func execute_i64GtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  943|  2.88k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  944|  2.88k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].gtU(sp.pointee[i64: immediate.rhs])
  945|  2.88k|        let next = pc.pointee.pointee
  946|  2.88k|        pc.pointee = pc.pointee.advanced(by: 1)
  947|  2.88k|        return next
  948|  2.88k|    }
wasmkit_execute_i32LeS:
  950|  1.15k|    mutating func execute_i32LeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  951|  1.15k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  952|  1.15k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].leS(sp.pointee[i32: immediate.rhs])
  953|  1.15k|        let next = pc.pointee.pointee
  954|  1.15k|        pc.pointee = pc.pointee.advanced(by: 1)
  955|  1.15k|        return next
  956|  1.15k|    }
wasmkit_execute_i64LeS:
  958|  1.88k|    mutating func execute_i64LeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  959|  1.88k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  960|  1.88k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].leS(sp.pointee[i64: immediate.rhs])
  961|  1.88k|        let next = pc.pointee.pointee
  962|  1.88k|        pc.pointee = pc.pointee.advanced(by: 1)
  963|  1.88k|        return next
  964|  1.88k|    }
wasmkit_execute_i32LeU:
  966|  2.83k|    mutating func execute_i32LeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  967|  2.83k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  968|  2.83k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].leU(sp.pointee[i32: immediate.rhs])
  969|  2.83k|        let next = pc.pointee.pointee
  970|  2.83k|        pc.pointee = pc.pointee.advanced(by: 1)
  971|  2.83k|        return next
  972|  2.83k|    }
wasmkit_execute_i64LeU:
  974|  3.15k|    mutating func execute_i64LeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  975|  3.15k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  976|  3.15k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].leU(sp.pointee[i64: immediate.rhs])
  977|  3.15k|        let next = pc.pointee.pointee
  978|  3.15k|        pc.pointee = pc.pointee.advanced(by: 1)
  979|  3.15k|        return next
  980|  3.15k|    }
wasmkit_execute_i32GeS:
  982|  3.14k|    mutating func execute_i32GeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  983|  3.14k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  984|  3.14k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].geS(sp.pointee[i32: immediate.rhs])
  985|  3.14k|        let next = pc.pointee.pointee
  986|  3.14k|        pc.pointee = pc.pointee.advanced(by: 1)
  987|  3.14k|        return next
  988|  3.14k|    }
wasmkit_execute_i64GeS:
  990|  18.8k|    mutating func execute_i64GeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  991|  18.8k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  992|  18.8k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].geS(sp.pointee[i64: immediate.rhs])
  993|  18.8k|        let next = pc.pointee.pointee
  994|  18.8k|        pc.pointee = pc.pointee.advanced(by: 1)
  995|  18.8k|        return next
  996|  18.8k|    }
wasmkit_execute_i32GeU:
  998|  10.4k|    mutating func execute_i32GeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  999|  10.4k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1000|  10.4k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].geU(sp.pointee[i32: immediate.rhs])
 1001|  10.4k|        let next = pc.pointee.pointee
 1002|  10.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1003|  10.4k|        return next
 1004|  10.4k|    }
wasmkit_execute_i64GeU:
 1006|  7.14k|    mutating func execute_i64GeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1007|  7.14k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1008|  7.14k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].geU(sp.pointee[i64: immediate.rhs])
 1009|  7.14k|        let next = pc.pointee.pointee
 1010|  7.14k|        pc.pointee = pc.pointee.advanced(by: 1)
 1011|  7.14k|        return next
 1012|  7.14k|    }
wasmkit_execute_i32Clz:
 1014|  2.48k|    mutating func execute_i32Clz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1015|  2.48k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1016|  2.48k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].clz
 1017|  2.48k|        let next = pc.pointee.pointee
 1018|  2.48k|        pc.pointee = pc.pointee.advanced(by: 1)
 1019|  2.48k|        return next
 1020|  2.48k|    }
wasmkit_execute_i64Clz:
 1022|   212k|    mutating func execute_i64Clz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1023|   212k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1024|   212k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].clz
 1025|   212k|        let next = pc.pointee.pointee
 1026|   212k|        pc.pointee = pc.pointee.advanced(by: 1)
 1027|   212k|        return next
 1028|   212k|    }
wasmkit_execute_i32Ctz:
 1030|  1.96k|    mutating func execute_i32Ctz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1031|  1.96k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1032|  1.96k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].ctz
 1033|  1.96k|        let next = pc.pointee.pointee
 1034|  1.96k|        pc.pointee = pc.pointee.advanced(by: 1)
 1035|  1.96k|        return next
 1036|  1.96k|    }
wasmkit_execute_i64Ctz:
 1038|  9.82k|    mutating func execute_i64Ctz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1039|  9.82k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1040|  9.82k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].ctz
 1041|  9.82k|        let next = pc.pointee.pointee
 1042|  9.82k|        pc.pointee = pc.pointee.advanced(by: 1)
 1043|  9.82k|        return next
 1044|  9.82k|    }
wasmkit_execute_i32Popcnt:
 1046|  17.1k|    mutating func execute_i32Popcnt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1047|  17.1k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1048|  17.1k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].popcnt
 1049|  17.1k|        let next = pc.pointee.pointee
 1050|  17.1k|        pc.pointee = pc.pointee.advanced(by: 1)
 1051|  17.1k|        return next
 1052|  17.1k|    }
wasmkit_execute_i64Popcnt:
 1054|  73.3k|    mutating func execute_i64Popcnt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1055|  73.3k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1056|  73.3k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].popcnt
 1057|  73.3k|        let next = pc.pointee.pointee
 1058|  73.3k|        pc.pointee = pc.pointee.advanced(by: 1)
 1059|  73.3k|        return next
 1060|  73.3k|    }
wasmkit_execute_i32Eqz:
 1062|  3.73k|    mutating func execute_i32Eqz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1063|  3.73k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1064|  3.73k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].eqz
 1065|  3.73k|        let next = pc.pointee.pointee
 1066|  3.73k|        pc.pointee = pc.pointee.advanced(by: 1)
 1067|  3.73k|        return next
 1068|  3.73k|    }
wasmkit_execute_i64Eqz:
 1070|  2.65k|    mutating func execute_i64Eqz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1071|  2.65k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1072|  2.65k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.input].eqz
 1073|  2.65k|        let next = pc.pointee.pointee
 1074|  2.65k|        pc.pointee = pc.pointee.advanced(by: 1)
 1075|  2.65k|        return next
 1076|  2.65k|    }
wasmkit_execute_i32WrapI64:
 1078|  38.1k|    mutating func execute_i32WrapI64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1079|  38.1k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1080|  38.1k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.input].wrap
 1081|  38.1k|        let next = pc.pointee.pointee
 1082|  38.1k|        pc.pointee = pc.pointee.advanced(by: 1)
 1083|  38.1k|        return next
 1084|  38.1k|    }
wasmkit_execute_i64ExtendI32S:
 1086|  1.81k|    mutating func execute_i64ExtendI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1087|  1.81k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1088|  1.81k|        sp.pointee[i64: immediate.result] = sp.pointee[i32: immediate.input].extendI32S
 1089|  1.81k|        let next = pc.pointee.pointee
 1090|  1.81k|        pc.pointee = pc.pointee.advanced(by: 1)
 1091|  1.81k|        return next
 1092|  1.81k|    }
wasmkit_execute_i64ExtendI32U:
 1094|  11.8k|    mutating func execute_i64ExtendI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1095|  11.8k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1096|  11.8k|        sp.pointee[i64: immediate.result] = sp.pointee[i32: immediate.input].extendI32U
 1097|  11.8k|        let next = pc.pointee.pointee
 1098|  11.8k|        pc.pointee = pc.pointee.advanced(by: 1)
 1099|  11.8k|        return next
 1100|  11.8k|    }
wasmkit_execute_i32Extend8S:
 1102|   125k|    mutating func execute_i32Extend8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1103|   125k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1104|   125k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].extend8S
 1105|   125k|        let next = pc.pointee.pointee
 1106|   125k|        pc.pointee = pc.pointee.advanced(by: 1)
 1107|   125k|        return next
 1108|   125k|    }
wasmkit_execute_i64Extend8S:
 1110|  11.9k|    mutating func execute_i64Extend8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1111|  11.9k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1112|  11.9k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend8S
 1113|  11.9k|        let next = pc.pointee.pointee
 1114|  11.9k|        pc.pointee = pc.pointee.advanced(by: 1)
 1115|  11.9k|        return next
 1116|  11.9k|    }
wasmkit_execute_i32Extend16S:
 1118|  2.76k|    mutating func execute_i32Extend16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1119|  2.76k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1120|  2.76k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].extend16S
 1121|  2.76k|        let next = pc.pointee.pointee
 1122|  2.76k|        pc.pointee = pc.pointee.advanced(by: 1)
 1123|  2.76k|        return next
 1124|  2.76k|    }
wasmkit_execute_i64Extend16S:
 1126|  83.4k|    mutating func execute_i64Extend16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1127|  83.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1128|  83.4k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend16S
 1129|  83.4k|        let next = pc.pointee.pointee
 1130|  83.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1131|  83.4k|        return next
 1132|  83.4k|    }
wasmkit_execute_i64Extend32S:
 1134|  15.7k|    mutating func execute_i64Extend32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1135|  15.7k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1136|  15.7k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend32S
 1137|  15.7k|        let next = pc.pointee.pointee
 1138|  15.7k|        pc.pointee = pc.pointee.advanced(by: 1)
 1139|  15.7k|        return next
 1140|  15.7k|    }
wasmkit_execute_i32TruncF32S:
 1142|  5.20k|    mutating func execute_i32TruncF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1143|  5.20k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1144|  5.20k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncToI32S
 1145|  5.20k|        let next = pc.pointee.pointee
 1146|  5.20k|        pc.pointee = pc.pointee.advanced(by: 1)
 1147|  5.20k|        return next
 1148|  5.20k|    }
wasmkit_execute_i32TruncF32U:
 1150|  2.59k|    mutating func execute_i32TruncF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1151|  2.59k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1152|  2.59k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncToI32U
 1153|  2.59k|        let next = pc.pointee.pointee
 1154|  2.59k|        pc.pointee = pc.pointee.advanced(by: 1)
 1155|  2.59k|        return next
 1156|  2.59k|    }
wasmkit_execute_i32TruncSatF32S:
 1158|  8.16k|    mutating func execute_i32TruncSatF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1159|  8.16k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1160|  8.16k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI32S
 1161|  8.16k|        let next = pc.pointee.pointee
 1162|  8.16k|        pc.pointee = pc.pointee.advanced(by: 1)
 1163|  8.16k|        return next
 1164|  8.16k|    }
wasmkit_execute_i32TruncSatF32U:
 1166|  3.88k|    mutating func execute_i32TruncSatF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1167|  3.88k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1168|  3.88k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI32U
 1169|  3.88k|        let next = pc.pointee.pointee
 1170|  3.88k|        pc.pointee = pc.pointee.advanced(by: 1)
 1171|  3.88k|        return next
 1172|  3.88k|    }
wasmkit_execute_i32TruncF64S:
 1174|  5.84k|    mutating func execute_i32TruncF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1175|  5.84k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1176|  5.84k|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncToI32S
 1177|  5.84k|        let next = pc.pointee.pointee
 1178|  5.84k|        pc.pointee = pc.pointee.advanced(by: 1)
 1179|  5.84k|        return next
 1180|  5.84k|    }
wasmkit_execute_i32TruncF64U:
 1182|   215k|    mutating func execute_i32TruncF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1183|   215k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1184|   215k|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncToI32U
 1185|   215k|        let next = pc.pointee.pointee
 1186|   215k|        pc.pointee = pc.pointee.advanced(by: 1)
 1187|   215k|        return next
 1188|   215k|    }
wasmkit_execute_i32TruncSatF64S:
 1190|  1.55k|    mutating func execute_i32TruncSatF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1191|  1.55k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1192|  1.55k|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI32S
 1193|  1.55k|        let next = pc.pointee.pointee
 1194|  1.55k|        pc.pointee = pc.pointee.advanced(by: 1)
 1195|  1.55k|        return next
 1196|  1.55k|    }
wasmkit_execute_i32TruncSatF64U:
 1198|  1.12k|    mutating func execute_i32TruncSatF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1199|  1.12k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1200|  1.12k|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI32U
 1201|  1.12k|        let next = pc.pointee.pointee
 1202|  1.12k|        pc.pointee = pc.pointee.advanced(by: 1)
 1203|  1.12k|        return next
 1204|  1.12k|    }
wasmkit_execute_i64TruncF32S:
 1206|  2.03k|    mutating func execute_i64TruncF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1207|  2.03k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1208|  2.03k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncToI64S
 1209|  2.03k|        let next = pc.pointee.pointee
 1210|  2.03k|        pc.pointee = pc.pointee.advanced(by: 1)
 1211|  2.03k|        return next
 1212|  2.03k|    }
wasmkit_execute_i64TruncF32U:
 1214|  26.7k|    mutating func execute_i64TruncF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1215|  26.7k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1216|  26.7k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncToI64U
 1217|  26.7k|        let next = pc.pointee.pointee
 1218|  26.7k|        pc.pointee = pc.pointee.advanced(by: 1)
 1219|  26.7k|        return next
 1220|  26.7k|    }
wasmkit_execute_i64TruncSatF32S:
 1222|  2.04k|    mutating func execute_i64TruncSatF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1223|  2.04k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1224|  2.04k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI64S
 1225|  2.04k|        let next = pc.pointee.pointee
 1226|  2.04k|        pc.pointee = pc.pointee.advanced(by: 1)
 1227|  2.04k|        return next
 1228|  2.04k|    }
wasmkit_execute_i64TruncSatF32U:
 1230|  3.56k|    mutating func execute_i64TruncSatF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1231|  3.56k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1232|  3.56k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI64U
 1233|  3.56k|        let next = pc.pointee.pointee
 1234|  3.56k|        pc.pointee = pc.pointee.advanced(by: 1)
 1235|  3.56k|        return next
 1236|  3.56k|    }
wasmkit_execute_i64TruncF64S:
 1238|  3.56k|    mutating func execute_i64TruncF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1239|  3.56k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1240|  3.56k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncToI64S
 1241|  3.56k|        let next = pc.pointee.pointee
 1242|  3.56k|        pc.pointee = pc.pointee.advanced(by: 1)
 1243|  3.56k|        return next
 1244|  3.56k|    }
wasmkit_execute_i64TruncF64U:
 1246|  4.38k|    mutating func execute_i64TruncF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1247|  4.38k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1248|  4.38k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncToI64U
 1249|  4.38k|        let next = pc.pointee.pointee
 1250|  4.38k|        pc.pointee = pc.pointee.advanced(by: 1)
 1251|  4.38k|        return next
 1252|  4.38k|    }
wasmkit_execute_i64TruncSatF64S:
 1254|   292k|    mutating func execute_i64TruncSatF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1255|   292k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1256|   292k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI64S
 1257|   292k|        let next = pc.pointee.pointee
 1258|   292k|        pc.pointee = pc.pointee.advanced(by: 1)
 1259|   292k|        return next
 1260|   292k|    }
wasmkit_execute_i64TruncSatF64U:
 1262|  12.0k|    mutating func execute_i64TruncSatF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1263|  12.0k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1264|  12.0k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI64U
 1265|  12.0k|        let next = pc.pointee.pointee
 1266|  12.0k|        pc.pointee = pc.pointee.advanced(by: 1)
 1267|  12.0k|        return next
 1268|  12.0k|    }
wasmkit_execute_f32ConvertI32S:
 1270|  9.00k|    mutating func execute_f32ConvertI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1271|  9.00k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1272|  9.00k|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].convertToF32S
 1273|  9.00k|        let next = pc.pointee.pointee
 1274|  9.00k|        pc.pointee = pc.pointee.advanced(by: 1)
 1275|  9.00k|        return next
 1276|  9.00k|    }
wasmkit_execute_f32ConvertI32U:
 1278|  7.59k|    mutating func execute_f32ConvertI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1279|  7.59k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1280|  7.59k|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].convertToF32U
 1281|  7.59k|        let next = pc.pointee.pointee
 1282|  7.59k|        pc.pointee = pc.pointee.advanced(by: 1)
 1283|  7.59k|        return next
 1284|  7.59k|    }
wasmkit_execute_f32ConvertI64S:
 1286|  95.0k|    mutating func execute_f32ConvertI64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1287|  95.0k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1288|  95.0k|        sp.pointee[f32: immediate.result] = sp.pointee[i64: immediate.input].convertToF32S
 1289|  95.0k|        let next = pc.pointee.pointee
 1290|  95.0k|        pc.pointee = pc.pointee.advanced(by: 1)
 1291|  95.0k|        return next
 1292|  95.0k|    }
wasmkit_execute_f32ConvertI64U:
 1294|  17.2k|    mutating func execute_f32ConvertI64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1295|  17.2k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1296|  17.2k|        sp.pointee[f32: immediate.result] = sp.pointee[i64: immediate.input].convertToF32U
 1297|  17.2k|        let next = pc.pointee.pointee
 1298|  17.2k|        pc.pointee = pc.pointee.advanced(by: 1)
 1299|  17.2k|        return next
 1300|  17.2k|    }
wasmkit_execute_f64ConvertI32S:
 1302|  3.61k|    mutating func execute_f64ConvertI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1303|  3.61k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1304|  3.61k|        sp.pointee[f64: immediate.result] = sp.pointee[i32: immediate.input].convertToF64S
 1305|  3.61k|        let next = pc.pointee.pointee
 1306|  3.61k|        pc.pointee = pc.pointee.advanced(by: 1)
 1307|  3.61k|        return next
 1308|  3.61k|    }
wasmkit_execute_f64ConvertI32U:
 1310|  13.5k|    mutating func execute_f64ConvertI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1311|  13.5k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1312|  13.5k|        sp.pointee[f64: immediate.result] = sp.pointee[i32: immediate.input].convertToF64U
 1313|  13.5k|        let next = pc.pointee.pointee
 1314|  13.5k|        pc.pointee = pc.pointee.advanced(by: 1)
 1315|  13.5k|        return next
 1316|  13.5k|    }
wasmkit_execute_f64ConvertI64S:
 1318|  4.46k|    mutating func execute_f64ConvertI64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1319|  4.46k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1320|  4.46k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].convertToF64S
 1321|  4.46k|        let next = pc.pointee.pointee
 1322|  4.46k|        pc.pointee = pc.pointee.advanced(by: 1)
 1323|  4.46k|        return next
 1324|  4.46k|    }
wasmkit_execute_f64ConvertI64U:
 1326|  12.5k|    mutating func execute_f64ConvertI64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1327|  12.5k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1328|  12.5k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].convertToF64U
 1329|  12.5k|        let next = pc.pointee.pointee
 1330|  12.5k|        pc.pointee = pc.pointee.advanced(by: 1)
 1331|  12.5k|        return next
 1332|  12.5k|    }
wasmkit_execute_f32ReinterpretI32:
 1334|  54.2k|    mutating func execute_f32ReinterpretI32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1335|  54.2k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1336|  54.2k|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].reinterpretToF32
 1337|  54.2k|        let next = pc.pointee.pointee
 1338|  54.2k|        pc.pointee = pc.pointee.advanced(by: 1)
 1339|  54.2k|        return next
 1340|  54.2k|    }
wasmkit_execute_f64ReinterpretI64:
 1342|   265k|    mutating func execute_f64ReinterpretI64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1343|   265k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1344|   265k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].reinterpretToF64
 1345|   265k|        let next = pc.pointee.pointee
 1346|   265k|        pc.pointee = pc.pointee.advanced(by: 1)
 1347|   265k|        return next
 1348|   265k|    }
wasmkit_execute_i32ReinterpretF32:
 1350|  2.86k|    mutating func execute_i32ReinterpretF32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1351|  2.86k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1352|  2.86k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.input].reinterpretToI32
 1353|  2.86k|        let next = pc.pointee.pointee
 1354|  2.86k|        pc.pointee = pc.pointee.advanced(by: 1)
 1355|  2.86k|        return next
 1356|  2.86k|    }
wasmkit_execute_i64ReinterpretF64:
 1358|  2.17k|    mutating func execute_i64ReinterpretF64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1359|  2.17k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1360|  2.17k|        sp.pointee[i64: immediate.result] = sp.pointee[f64: immediate.input].reinterpretToI64
 1361|  2.17k|        let next = pc.pointee.pointee
 1362|  2.17k|        pc.pointee = pc.pointee.advanced(by: 1)
 1363|  2.17k|        return next
 1364|  2.17k|    }
wasmkit_execute_f32Add:
 1366|  1.60k|    mutating func execute_f32Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1367|  1.60k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1368|  1.60k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].add(sp.pointee[f32: immediate.rhs])
 1369|  1.60k|        let next = pc.pointee.pointee
 1370|  1.60k|        pc.pointee = pc.pointee.advanced(by: 1)
 1371|  1.60k|        return next
 1372|  1.60k|    }
wasmkit_execute_f64Add:
 1374|  1.64k|    mutating func execute_f64Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1375|  1.64k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1376|  1.64k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].add(sp.pointee[f64: immediate.rhs])
 1377|  1.64k|        let next = pc.pointee.pointee
 1378|  1.64k|        pc.pointee = pc.pointee.advanced(by: 1)
 1379|  1.64k|        return next
 1380|  1.64k|    }
wasmkit_execute_f32Sub:
 1382|  4.40k|    mutating func execute_f32Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1383|  4.40k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1384|  4.40k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].sub(sp.pointee[f32: immediate.rhs])
 1385|  4.40k|        let next = pc.pointee.pointee
 1386|  4.40k|        pc.pointee = pc.pointee.advanced(by: 1)
 1387|  4.40k|        return next
 1388|  4.40k|    }
wasmkit_execute_f64Sub:
 1390|  2.11k|    mutating func execute_f64Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1391|  2.11k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1392|  2.11k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].sub(sp.pointee[f64: immediate.rhs])
 1393|  2.11k|        let next = pc.pointee.pointee
 1394|  2.11k|        pc.pointee = pc.pointee.advanced(by: 1)
 1395|  2.11k|        return next
 1396|  2.11k|    }
wasmkit_execute_f32Mul:
 1398|  2.38k|    mutating func execute_f32Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1399|  2.38k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1400|  2.38k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].mul(sp.pointee[f32: immediate.rhs])
 1401|  2.38k|        let next = pc.pointee.pointee
 1402|  2.38k|        pc.pointee = pc.pointee.advanced(by: 1)
 1403|  2.38k|        return next
 1404|  2.38k|    }
wasmkit_execute_f64Mul:
 1406|  2.93k|    mutating func execute_f64Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1407|  2.93k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1408|  2.93k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].mul(sp.pointee[f64: immediate.rhs])
 1409|  2.93k|        let next = pc.pointee.pointee
 1410|  2.93k|        pc.pointee = pc.pointee.advanced(by: 1)
 1411|  2.93k|        return next
 1412|  2.93k|    }
wasmkit_execute_f32Div:
 1414|  3.90k|    mutating func execute_f32Div(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1415|  3.90k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1416|  3.90k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].div(sp.pointee[f32: immediate.rhs])
 1417|  3.90k|        let next = pc.pointee.pointee
 1418|  3.90k|        pc.pointee = pc.pointee.advanced(by: 1)
 1419|  3.90k|        return next
 1420|  3.90k|    }
wasmkit_execute_f64Div:
 1422|  2.12k|    mutating func execute_f64Div(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1423|  2.12k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1424|  2.12k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].div(sp.pointee[f64: immediate.rhs])
 1425|  2.12k|        let next = pc.pointee.pointee
 1426|  2.12k|        pc.pointee = pc.pointee.advanced(by: 1)
 1427|  2.12k|        return next
 1428|  2.12k|    }
wasmkit_execute_f32Min:
 1430|  5.71k|    mutating func execute_f32Min(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1431|  5.71k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1432|  5.71k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].min(sp.pointee[f32: immediate.rhs])
 1433|  5.71k|        let next = pc.pointee.pointee
 1434|  5.71k|        pc.pointee = pc.pointee.advanced(by: 1)
 1435|  5.71k|        return next
 1436|  5.71k|    }
wasmkit_execute_f64Min:
 1438|  3.14k|    mutating func execute_f64Min(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1439|  3.14k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1440|  3.14k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].min(sp.pointee[f64: immediate.rhs])
 1441|  3.14k|        let next = pc.pointee.pointee
 1442|  3.14k|        pc.pointee = pc.pointee.advanced(by: 1)
 1443|  3.14k|        return next
 1444|  3.14k|    }
wasmkit_execute_f32Max:
 1446|  5.48k|    mutating func execute_f32Max(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1447|  5.48k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1448|  5.48k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].max(sp.pointee[f32: immediate.rhs])
 1449|  5.48k|        let next = pc.pointee.pointee
 1450|  5.48k|        pc.pointee = pc.pointee.advanced(by: 1)
 1451|  5.48k|        return next
 1452|  5.48k|    }
wasmkit_execute_f64Max:
 1454|  7.33k|    mutating func execute_f64Max(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1455|  7.33k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1456|  7.33k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].max(sp.pointee[f64: immediate.rhs])
 1457|  7.33k|        let next = pc.pointee.pointee
 1458|  7.33k|        pc.pointee = pc.pointee.advanced(by: 1)
 1459|  7.33k|        return next
 1460|  7.33k|    }
wasmkit_execute_f32CopySign:
 1462|  2.64k|    mutating func execute_f32CopySign(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1463|  2.64k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1464|  2.64k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].copySign(sp.pointee[f32: immediate.rhs])
 1465|  2.64k|        let next = pc.pointee.pointee
 1466|  2.64k|        pc.pointee = pc.pointee.advanced(by: 1)
 1467|  2.64k|        return next
 1468|  2.64k|    }
wasmkit_execute_f64CopySign:
 1470|  2.63k|    mutating func execute_f64CopySign(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1471|  2.63k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1472|  2.63k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.lhs].copySign(sp.pointee[f64: immediate.rhs])
 1473|  2.63k|        let next = pc.pointee.pointee
 1474|  2.63k|        pc.pointee = pc.pointee.advanced(by: 1)
 1475|  2.63k|        return next
 1476|  2.63k|    }
wasmkit_execute_f32Eq:
 1478|  3.38k|    mutating func execute_f32Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1479|  3.38k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1480|  3.38k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].eq(sp.pointee[f32: immediate.rhs])
 1481|  3.38k|        let next = pc.pointee.pointee
 1482|  3.38k|        pc.pointee = pc.pointee.advanced(by: 1)
 1483|  3.38k|        return next
 1484|  3.38k|    }
wasmkit_execute_f64Eq:
 1486|  1.92k|    mutating func execute_f64Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1487|  1.92k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1488|  1.92k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].eq(sp.pointee[f64: immediate.rhs])
 1489|  1.92k|        let next = pc.pointee.pointee
 1490|  1.92k|        pc.pointee = pc.pointee.advanced(by: 1)
 1491|  1.92k|        return next
 1492|  1.92k|    }
wasmkit_execute_f32Ne:
 1494|  7.54k|    mutating func execute_f32Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1495|  7.54k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1496|  7.54k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].ne(sp.pointee[f32: immediate.rhs])
 1497|  7.54k|        let next = pc.pointee.pointee
 1498|  7.54k|        pc.pointee = pc.pointee.advanced(by: 1)
 1499|  7.54k|        return next
 1500|  7.54k|    }
wasmkit_execute_f64Ne:
 1502|  1.17k|    mutating func execute_f64Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1503|  1.17k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1504|  1.17k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].ne(sp.pointee[f64: immediate.rhs])
 1505|  1.17k|        let next = pc.pointee.pointee
 1506|  1.17k|        pc.pointee = pc.pointee.advanced(by: 1)
 1507|  1.17k|        return next
 1508|  1.17k|    }
wasmkit_execute_f32Lt:
 1510|  3.70k|    mutating func execute_f32Lt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1511|  3.70k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1512|  3.70k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].lt(sp.pointee[f32: immediate.rhs])
 1513|  3.70k|        let next = pc.pointee.pointee
 1514|  3.70k|        pc.pointee = pc.pointee.advanced(by: 1)
 1515|  3.70k|        return next
 1516|  3.70k|    }
wasmkit_execute_f64Lt:
 1518|  1.14k|    mutating func execute_f64Lt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1519|  1.14k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1520|  1.14k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].lt(sp.pointee[f64: immediate.rhs])
 1521|  1.14k|        let next = pc.pointee.pointee
 1522|  1.14k|        pc.pointee = pc.pointee.advanced(by: 1)
 1523|  1.14k|        return next
 1524|  1.14k|    }
wasmkit_execute_f32Gt:
 1526|  4.73k|    mutating func execute_f32Gt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1527|  4.73k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1528|  4.73k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].gt(sp.pointee[f32: immediate.rhs])
 1529|  4.73k|        let next = pc.pointee.pointee
 1530|  4.73k|        pc.pointee = pc.pointee.advanced(by: 1)
 1531|  4.73k|        return next
 1532|  4.73k|    }
wasmkit_execute_f64Gt:
 1534|  1.15k|    mutating func execute_f64Gt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1535|  1.15k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1536|  1.15k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].gt(sp.pointee[f64: immediate.rhs])
 1537|  1.15k|        let next = pc.pointee.pointee
 1538|  1.15k|        pc.pointee = pc.pointee.advanced(by: 1)
 1539|  1.15k|        return next
 1540|  1.15k|    }
wasmkit_execute_f32Le:
 1542|  2.59k|    mutating func execute_f32Le(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1543|  2.59k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1544|  2.59k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].le(sp.pointee[f32: immediate.rhs])
 1545|  2.59k|        let next = pc.pointee.pointee
 1546|  2.59k|        pc.pointee = pc.pointee.advanced(by: 1)
 1547|  2.59k|        return next
 1548|  2.59k|    }
wasmkit_execute_f64Le:
 1550|  2.89k|    mutating func execute_f64Le(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1551|  2.89k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1552|  2.89k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].le(sp.pointee[f64: immediate.rhs])
 1553|  2.89k|        let next = pc.pointee.pointee
 1554|  2.89k|        pc.pointee = pc.pointee.advanced(by: 1)
 1555|  2.89k|        return next
 1556|  2.89k|    }
wasmkit_execute_f32Ge:
 1558|  3.89k|    mutating func execute_f32Ge(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1559|  3.89k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1560|  3.89k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].ge(sp.pointee[f32: immediate.rhs])
 1561|  3.89k|        let next = pc.pointee.pointee
 1562|  3.89k|        pc.pointee = pc.pointee.advanced(by: 1)
 1563|  3.89k|        return next
 1564|  3.89k|    }
wasmkit_execute_f64Ge:
 1566|  1.32k|    mutating func execute_f64Ge(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1567|  1.32k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1568|  1.32k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].ge(sp.pointee[f64: immediate.rhs])
 1569|  1.32k|        let next = pc.pointee.pointee
 1570|  1.32k|        pc.pointee = pc.pointee.advanced(by: 1)
 1571|  1.32k|        return next
 1572|  1.32k|    }
wasmkit_execute_f32Abs:
 1574|  2.08k|    mutating func execute_f32Abs(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1575|  2.08k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1576|  2.08k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].abs
 1577|  2.08k|        let next = pc.pointee.pointee
 1578|  2.08k|        pc.pointee = pc.pointee.advanced(by: 1)
 1579|  2.08k|        return next
 1580|  2.08k|    }
wasmkit_execute_f64Abs:
 1582|  2.77k|    mutating func execute_f64Abs(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1583|  2.77k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1584|  2.77k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].abs
 1585|  2.77k|        let next = pc.pointee.pointee
 1586|  2.77k|        pc.pointee = pc.pointee.advanced(by: 1)
 1587|  2.77k|        return next
 1588|  2.77k|    }
wasmkit_execute_f32Neg:
 1590|  1.91k|    mutating func execute_f32Neg(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1591|  1.91k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1592|  1.91k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].neg
 1593|  1.91k|        let next = pc.pointee.pointee
 1594|  1.91k|        pc.pointee = pc.pointee.advanced(by: 1)
 1595|  1.91k|        return next
 1596|  1.91k|    }
wasmkit_execute_f64Neg:
 1598|  8.67k|    mutating func execute_f64Neg(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1599|  8.67k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1600|  8.67k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].neg
 1601|  8.67k|        let next = pc.pointee.pointee
 1602|  8.67k|        pc.pointee = pc.pointee.advanced(by: 1)
 1603|  8.67k|        return next
 1604|  8.67k|    }
wasmkit_execute_f32Ceil:
 1606|  2.09k|    mutating func execute_f32Ceil(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1607|  2.09k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1608|  2.09k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].ceil
 1609|  2.09k|        let next = pc.pointee.pointee
 1610|  2.09k|        pc.pointee = pc.pointee.advanced(by: 1)
 1611|  2.09k|        return next
 1612|  2.09k|    }
wasmkit_execute_f64Ceil:
 1614|  18.8k|    mutating func execute_f64Ceil(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1615|  18.8k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1616|  18.8k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].ceil
 1617|  18.8k|        let next = pc.pointee.pointee
 1618|  18.8k|        pc.pointee = pc.pointee.advanced(by: 1)
 1619|  18.8k|        return next
 1620|  18.8k|    }
wasmkit_execute_f32Floor:
 1622|  1.60k|    mutating func execute_f32Floor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1623|  1.60k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1624|  1.60k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].floor
 1625|  1.60k|        let next = pc.pointee.pointee
 1626|  1.60k|        pc.pointee = pc.pointee.advanced(by: 1)
 1627|  1.60k|        return next
 1628|  1.60k|    }
wasmkit_execute_f64Floor:
 1630|  74.2k|    mutating func execute_f64Floor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1631|  74.2k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1632|  74.2k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].floor
 1633|  74.2k|        let next = pc.pointee.pointee
 1634|  74.2k|        pc.pointee = pc.pointee.advanced(by: 1)
 1635|  74.2k|        return next
 1636|  74.2k|    }
wasmkit_execute_f32Trunc:
 1638|  7.68k|    mutating func execute_f32Trunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1639|  7.68k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1640|  7.68k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].trunc
 1641|  7.68k|        let next = pc.pointee.pointee
 1642|  7.68k|        pc.pointee = pc.pointee.advanced(by: 1)
 1643|  7.68k|        return next
 1644|  7.68k|    }
wasmkit_execute_f64Trunc:
 1646|   116k|    mutating func execute_f64Trunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1647|   116k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1648|   116k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].trunc
 1649|   116k|        let next = pc.pointee.pointee
 1650|   116k|        pc.pointee = pc.pointee.advanced(by: 1)
 1651|   116k|        return next
 1652|   116k|    }
wasmkit_execute_f32Nearest:
 1654|  3.17k|    mutating func execute_f32Nearest(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1655|  3.17k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1656|  3.17k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].nearest
 1657|  3.17k|        let next = pc.pointee.pointee
 1658|  3.17k|        pc.pointee = pc.pointee.advanced(by: 1)
 1659|  3.17k|        return next
 1660|  3.17k|    }
wasmkit_execute_f64Nearest:
 1662|  15.4k|    mutating func execute_f64Nearest(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1663|  15.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1664|  15.4k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].nearest
 1665|  15.4k|        let next = pc.pointee.pointee
 1666|  15.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1667|  15.4k|        return next
 1668|  15.4k|    }
wasmkit_execute_f32Sqrt:
 1670|  2.80k|    mutating func execute_f32Sqrt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1671|  2.80k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1672|  2.80k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].sqrt
 1673|  2.80k|        let next = pc.pointee.pointee
 1674|  2.80k|        pc.pointee = pc.pointee.advanced(by: 1)
 1675|  2.80k|        return next
 1676|  2.80k|    }
wasmkit_execute_f64Sqrt:
 1678|  4.41k|    mutating func execute_f64Sqrt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1679|  4.41k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1680|  4.41k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].sqrt
 1681|  4.41k|        let next = pc.pointee.pointee
 1682|  4.41k|        pc.pointee = pc.pointee.advanced(by: 1)
 1683|  4.41k|        return next
 1684|  4.41k|    }
wasmkit_execute_f64PromoteF32:
 1686|  2.80k|    mutating func execute_f64PromoteF32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1687|  2.80k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1688|  2.80k|        sp.pointee[f64: immediate.result] = sp.pointee[f32: immediate.input].promoteF32
 1689|  2.80k|        let next = pc.pointee.pointee
 1690|  2.80k|        pc.pointee = pc.pointee.advanced(by: 1)
 1691|  2.80k|        return next
 1692|  2.80k|    }
wasmkit_execute_f32DemoteF64:
 1694|      4|    mutating func execute_f32DemoteF64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1695|      4|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1696|      4|        sp.pointee[f32: immediate.result] = sp.pointee[f64: immediate.input].demoteF64
 1697|      4|        let next = pc.pointee.pointee
 1698|      4|        pc.pointee = pc.pointee.advanced(by: 1)
 1699|      4|        return next
 1700|      4|    }
wasmkit_execute_select:
 1702|  1.65k|    mutating func execute_select(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1703|  1.65k|        let immediate = Instruction.SelectOperand.load(from: &pc.pointee)
 1704|  1.65k|        self.select(sp: sp.pointee, immediate: immediate)
 1705|  1.65k|        let next = pc.pointee.pointee
 1706|  1.65k|        pc.pointee = pc.pointee.advanced(by: 1)
 1707|  1.65k|        return next
 1708|  1.65k|    }
wasmkit_execute_refNull:
 1710|  3.54k|    mutating func execute_refNull(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1711|  3.54k|        let immediate = Instruction.RefNullOperand.load(from: &pc.pointee)
 1712|  3.54k|        self.refNull(sp: sp.pointee, immediate: immediate)
 1713|  3.54k|        let next = pc.pointee.pointee
 1714|  3.54k|        pc.pointee = pc.pointee.advanced(by: 1)
 1715|  3.54k|        return next
 1716|  3.54k|    }
$s7WasmKit11InstructionO7handlerSuvg:
 1935|  88.6k|    var handler: UInt {
 1936|       |        #if os(WASI)
 1937|       |        fatalError("Direct threading is not supported on WASI")
 1938|       |        #else
 1939|  88.6k|        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
 1940|  88.6k|            let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
 1941|  88.6k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1942|  88.6k|                $0[Int(self.opcodeID)]
 1943|  88.6k|            }
 1944|  88.6k|        }
 1945|       |        #endif
 1946|  88.6k|    }
$s7WasmKit11InstructionO7handlerSuvgSuSPySu_S213utGXEfU_:
 1939|  88.6k|        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
 1940|  88.6k|            let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
 1941|  88.6k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1942|  88.6k|                $0[Int(self.opcodeID)]
 1943|  88.6k|            }
 1944|  88.6k|        }
$s7WasmKit11InstructionO7handlerSuvgSuSPySu_S213utGXEfU_SuSPySuGXEfU_:
 1941|  88.6k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1942|  88.6k|                $0[Int(self.opcodeID)]
 1943|  88.6k|            }

$s7WasmKit4TrapV_9backtraceAcA0C6ReasonO_AA9BacktraceVSgtcfC:
   33|    461|    init(_ code: TrapReason, backtrace: Backtrace? = nil) {
   34|    461|        self.reason = code
   35|    461|        self.backtrace = backtrace
   36|    461|    }
$s7WasmKit4TrapV13withBacktraceyAcA0E0VF:
   51|    461|    func withBacktrace(_ backtrace: Backtrace) -> Trap {
   52|    461|        var trap = self
   53|    461|        trap.backtrace = backtrace
   54|    461|        return trap
   55|    461|    }

$s7WasmKit9ExecutionV4trap33_46BE72AA5BC0E6798196575DFA250830LLSV5error_Spys6UInt64VG2sptSgvpfi:
   15|    514|    private var trap: (error: UnsafeRawPointer, sp: Sp)? = nil
$s7WasmKit9ExecutionV4with5store4bodyxAA8StoreRefV_xACz_Spys6UInt64VGtKXEtKlFZ:
   22|    514|    ) rethrows -> T {
   23|    514|        let limit = store.value.engine.configuration.stackSize / MemoryLayout<StackSlot>.stride
   24|    514|        let valueStack = UnsafeMutablePointer<StackSlot>.allocate(capacity: limit)
   25|    514|        defer {
   26|    514|            valueStack.deallocate()
   27|    514|        }
   28|    514|        var context = Execution(store: store, stackEnd: valueStack.advanced(by: limit))
   29|    514|        return try body(&context, valueStack)
   30|    514|    }
$s7WasmKit9ExecutionV15currentInstance2spAA12EntityHandleVyAA0eG0VGSpys6UInt64VG_tF:
   34|   486k|    func currentInstance(sp: Sp) -> InternalInstance {
   35|   486k|        sp.currentInstance.unsafelyUnwrapped
   36|   486k|    }
$s7WasmKit9ExecutionV13FrameIteratorV2spAESpys6UInt64VG_tcfC:
   48|    461|        init(sp: Sp) {
   49|    461|            self.sp = sp
   50|    461|        }
$s7WasmKit9ExecutionV13FrameIteratorV4nextAE7ElementVSgyF:
   52|   231k|        mutating func next() -> Element? {
   53|   231k|            guard let sp = self.sp, let pc = sp.returnPC else {
   54|    461|                // Reached the root frame, whose stack pointer is nil.
   55|    461|                return nil
   56|   231k|            }
   57|   231k|            self.sp = sp.previousSP
   58|   231k|            return Element(pc: pc, function: sp.currentFunction)
   59|   231k|        }
$s7WasmKit9ExecutionV16captureBacktrace2sp5storeAA0E0VSpys6UInt64VG_AA5StoreCtFZ:
   62|    461|    static func captureBacktrace(sp: Sp, store: Store) -> Backtrace {
   63|    461|        var frames = FrameIterator(sp: sp)
   64|    461|        var symbols: [Backtrace.Symbol?] = []
   65|   231k|        while let frame = frames.next() {
   66|   231k|            guard let function = frame.function else {
   67|    454|                symbols.append(nil)
   68|    454|                continue
   69|   230k|            }
   70|   230k|            let symbolName = store.nameRegistry.symbolicate(.wasm(function))
   71|   230k|            symbols.append(
   72|   230k|                Backtrace.Symbol(
   73|   230k|                    name: symbolName
   74|   230k|                )
   75|   230k|            )
   76|   230k|        }
   77|    461|        return Backtrace(symbols: symbols)
   78|    461|    }
$s7WasmKit9ExecutionV20initializeConstSlots33_46BE72AA5BC0E6798196575DFA250830LL2sp4iseq26numberOfNonParameterLocalsySpys6UInt64VG_AA19InstructionSequenceVSitF:
   83|   521k|    ) {
   84|   521k|        // Initialize the locals with zeros (all types of value have the same representation)
   85|   521k|        sp.initialize(repeating: UntypedValue.default.storage, count: numberOfNonParameterLocals)
   86|   521k|        if let constants = iseq.constants.baseAddress {
   87|   521k|            let count = iseq.constants.count
   88|   521k|            sp.advanced(by: numberOfNonParameterLocals).withMemoryRebound(to: UntypedValue.self, capacity: count) {
   89|   521k|                $0.initialize(from: constants, count: count)
   90|   521k|            }
   91|   521k|        }
   92|   521k|    }
$s7WasmKit9ExecutionV20initializeConstSlots33_46BE72AA5BC0E6798196575DFA250830LL2sp4iseq26numberOfNonParameterLocalsySpys6UInt64VG_AA19InstructionSequenceVSitFySpyAA12UntypedValueVGXEfU_:
   88|   521k|            sp.advanced(by: numberOfNonParameterLocals).withMemoryRebound(to: UntypedValue.self, capacity: count) {
   89|   521k|                $0.initialize(from: constants, count: count)
   90|   521k|            }
$s7WasmKit9ExecutionV9pushFrame4iseq8function26numberOfNonParameterLocals2sp8returnPC0M6AddendSpys6UInt64VGAA19InstructionSequenceV_AA12EntityHandleVyAA0a8FunctionT0VGSiA2Ms5Int16VtKF:
  102|   521k|    ) throws -> Sp {
  103|   521k|        let newSp = sp.advanced(by: Int(spAddend))
  104|   521k|        try checkStackBoundary(newSp.advanced(by: iseq.maxStackHeight))
  105|   521k|        initializeConstSlots(sp: newSp, iseq: iseq, numberOfNonParameterLocals: numberOfNonParameterLocals)
  106|   521k|        newSp.previousSP = sp
  107|   521k|        newSp.returnPC = returnPC
  108|   521k|        newSp.currentFunction = function
  109|   521k|        return newSp
  110|   521k|    }
$s7WasmKit9ExecutionV8popFrame2sp2pc2md2msySpys6UInt64VGz_AKzSvSgzSiztF:
  114|   290k|    func popFrame(sp: inout Sp, pc: inout Pc, md: inout Md, ms: inout Ms) {
  115|   290k|        let oldSp = sp
  116|   290k|        sp = oldSp.previousSP.unsafelyUnwrapped
  117|   290k|        pc = oldSp.returnPC.unsafelyUnwrapped
  118|   290k|        let toInstance = oldSp.currentInstance.unsafelyUnwrapped
  119|   290k|        let fromInstance = sp.currentInstance
  120|   290k|        CurrentMemory.mayUpdateCurrentInstance(instance: toInstance, from: fromInstance, md: &md, ms: &ms)
  121|   290k|    }
$s7WasmKit8StoreRefV5valueAA0C0Cvg:
  129|  58.1k|    var value: Store {
  130|  58.1k|        _value.takeUnretainedValue()
  131|  58.1k|    }
$s7WasmKit8StoreRefVyAcA0C0ChcfC:
  133|    601|    init(_ value: __shared Store) {
  134|    601|        self._value = .passUnretained(value)
  135|    601|    }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cs17FixedWidthIntegerRd__luig:
  162|  2.54M|        get {
  163|  2.54M|            return UntypedValue(storage: self[Int(index)])
  164|  2.54M|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cs17FixedWidthIntegerRd__luis:
  165|  1.18M|        nonmutating set {
  166|  1.18M|            self[Int(index)] = newValue.storage
  167|  1.18M|            return
  168|  1.18M|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cAA11ShiftedVRegRd__luig:
  172|   122k|        get {
  173|   122k|            return UntypedValue(storage: read(shifted: index))
  174|   122k|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cAA11ShiftedVRegRd__luis:
  175|   689k|        nonmutating set {
  176|   689k|            write(shifted: index, newValue)
  177|   689k|        }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LL7shiftedqd__qd_0__ts17FixedWidthIntegerRd__AA11ShiftedVRegRd_0_r0_lF:
  180|  2.08M|    private func read<T: FixedWidthInteger, R: ShiftedVReg>(shifted index: R) -> T {
  181|  2.08M|        return UnsafeRawPointer(self).advanced(by: Int(index.value)).withMemoryRebound(to: T.self, capacity: 1) {
  182|  2.08M|            $0.pointee
  183|  2.08M|        }
  184|  2.08M|    }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LL7shiftedqd__qd_0__ts17FixedWidthIntegerRd__AA11ShiftedVRegRd_0_r0_lFqd__SPyqd__GXEfU_:
  181|  2.08M|        return UnsafeRawPointer(self).advanced(by: Int(index.value)).withMemoryRebound(to: T.self, capacity: 1) {
  182|  2.08M|            $0.pointee
  183|  2.08M|        }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LLyqd__qd_0_s17FixedWidthIntegerRd__sAFRd_0_r0_lF:
  185|  1.27M|    private func read<T: FixedWidthInteger, R: FixedWidthInteger>(_ index: R) -> T {
  186|  1.27M|        return self.advanced(by: Int(index)).withMemoryRebound(to: T.self, capacity: 1) {
  187|  1.27M|            $0.pointee
  188|  1.27M|        }
  189|  1.27M|    }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LLyqd__qd_0_s17FixedWidthIntegerRd__sAFRd_0_r0_lFqd__Spyqd__GXEfU_:
  186|  1.27M|        return self.advanced(by: Int(index)).withMemoryRebound(to: T.self, capacity: 1) {
  187|  1.27M|            $0.pointee
  188|  1.27M|        }
$sSp7WasmKits6UInt64VRszlE5write33_46BE72AA5BC0E6798196575DFA250830LL7shifted_yqd___AA12UntypedValueVtAA11ShiftedVRegRd__lF:
  190|  3.27M|    private func write<R: ShiftedVReg>(shifted index: R, _ value: UntypedValue) {
  191|  3.27M|        UnsafeMutableRawPointer(self).advanced(by: Int(index.value)).storeBytes(of: value.storage, as: UInt64.self)
  192|  3.27M|    }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcAA11ShiftedVRegRd__luig:
  198|   264k|        get { return read(shifted: index) }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcAA11ShiftedVRegRd__luis:
  199|   646k|        nonmutating set { write(shifted: index, .i32(newValue)) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcAA11ShiftedVRegRd__luig:
  202|   841k|        get { return read(shifted: index) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcAA11ShiftedVRegRd__luis:
  203|  1.14M|        nonmutating set { write(shifted: index, .i64(newValue)) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcAA11ShiftedVRegRd__luig:
  206|  81.3k|        get { return Float32(bitPattern: read(shifted: index)) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcAA11ShiftedVRegRd__luis:
  207|   230k|        nonmutating set { write(shifted: index, .f32(newValue)) }
$sSp7WasmKits6UInt64VRszlE3f64Sdqd___tcAA11ShiftedVRegRd__luig:
  210|   779k|        get { return Float64(bitPattern: read(shifted: index)) }
$sSp7WasmKits6UInt64VRszlE3f64Sdqd___tcAA11ShiftedVRegRd__luis:
  211|   564k|        nonmutating set { write(shifted: index, .f64(newValue)) }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcs17FixedWidthIntegerRd__luig:
  215|   178k|        get { return read(index) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcs17FixedWidthIntegerRd__luig:
  219|   931k|        get { return read(index) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcs17FixedWidthIntegerRd__luig:
  223|   103k|        get { return Float32(bitPattern: read(index)) }
$sSp7WasmKits6UInt64VRszlE3f64Sdqd___tcs17FixedWidthIntegerRd__luig:
  227|  63.0k|        get { return Float64(bitPattern: read(index)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvg:
  235|  1.29M|        get { return EntityHandle<WasmFunctionEntity>(bitPattern: UInt(self[-3].i64)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvs:
  236|   522k|        nonmutating set { self[-3] = UInt64(UInt(bitPattern: newValue?.bitPattern ?? 0)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvsSiyKXEfu_:
  236|    514|        nonmutating set { self[-3] = UInt64(UInt(bitPattern: newValue?.bitPattern ?? 0)) }
$sSp7WasmKits6UInt64VRszlE8returnPC33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvg:
  241|   521k|        get { return Pc(bitPattern: UInt(self[-2])) }
$sSp7WasmKits6UInt64VRszlE8returnPC33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvs:
  242|   521k|        nonmutating set { self[-2] = UInt64(UInt(bitPattern: newValue)) }
$sSp7WasmKits6UInt64VRszlE10previousSP33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvg:
  247|   521k|        get { return Sp(bitPattern: UInt(self[-1])) }
$sSp7WasmKits6UInt64VRszlE10previousSP33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvs:
  248|   521k|        nonmutating set { self[-1] = UInt64(UInt(bitPattern: newValue)) }
$sSp7WasmKits6UInt64VRszlE15currentInstance33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0eK0VGSgvg:
  251|  1.06M|    fileprivate var currentInstance: InternalInstance? {
  252|  1.06M|        currentFunction?.instance
  253|  1.06M|    }
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlF:
  258|  6.82M|    mutating func read<T>(_: T.Type = T.self) -> T {
  259|  6.82M|        assert(MemoryLayout<T>.stride == 8)
  260|  6.82M|        let value = self.withMemoryRebound(to: T.self, capacity: 1) { $0.pointee }
  261|  6.82M|        self += 1
  262|  6.82M|        return value
  263|  6.82M|    }
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlFSbyXEfu_:
  259|  6.82M|        assert(MemoryLayout<T>.stride == 8)
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlFqd__Spyqd__GXEfU_:
  260|  6.82M|        let value = self.withMemoryRebound(to: T.self, capacity: 1) { $0.pointee }
$sSp7WasmKits6UInt64VRszlE4nextSpyACG_ACtyF:
  265|   835k|    func next() -> (Pc, CodeSlot) {
  266|   835k|        return (self.advanced(by: 1), pointee)
  267|   835k|    }
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKF:
  286|    514|) throws -> [Value] {
  287|    514|    // NOTE: `store` variable must not outlive this function
  288|    514|    let store = StoreRef(store)
  289|    514|    return try Execution.with(store: store) { (stack, sp) in
  290|    514|        // Advance the stack pointer to be able to reference negative indices
  291|    514|        // for saving slots.
  292|    514|        let sp = sp.advanced(by: FrameHeaderLayout.numberOfSavingSlots)
  293|    514|        // Mark root stack pointer and current function as nil.
  294|    514|        sp.previousSP = nil
  295|    514|        sp.currentFunction = nil
  296|    514|        for (index, argument) in arguments.enumerated() {
  297|    514|            sp[VReg(index)] = UntypedValue(argument)
  298|    514|        }
  299|    514|
  300|    514|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  301|    514|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  302|    514|                threadingModel: store.value.engine.configuration.threadingModel
  303|    514|            )
  304|    514|            try stack.execute(
  305|    514|                sp: sp,
  306|    514|                pc: rootISeq.baseAddress!,
  307|    514|                handle: handle,
  308|    514|                type: type
  309|    514|            )
  310|    514|        }
  311|    514|        return type.results.enumerated().map { (i, type) in
  312|    514|            sp[VReg(i)].cast(to: type)
  313|    514|        }
  314|    514|    }
  315|    514|}
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKFAkA9ExecutionVz_Spys6UInt64VGtKXEfU_:
  289|    514|    return try Execution.with(store: store) { (stack, sp) in
  290|    514|        // Advance the stack pointer to be able to reference negative indices
  291|    514|        // for saving slots.
  292|    514|        let sp = sp.advanced(by: FrameHeaderLayout.numberOfSavingSlots)
  293|    514|        // Mark root stack pointer and current function as nil.
  294|    514|        sp.previousSP = nil
  295|    514|        sp.currentFunction = nil
  296|    514|        for (index, argument) in arguments.enumerated() {
  297|      0|            sp[VReg(index)] = UntypedValue(argument)
  298|    514|        }
  299|    514|
  300|    514|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  301|    514|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  302|    514|                threadingModel: store.value.engine.configuration.threadingModel
  303|    514|            )
  304|    514|            try stack.execute(
  305|    514|                sp: sp,
  306|    514|                pc: rootISeq.baseAddress!,
  307|    514|                handle: handle,
  308|    514|                type: type
  309|    514|            )
  310|    514|        }
  311|     12|        return type.results.enumerated().map { (i, type) in
  312|     12|            sp[VReg(i)].cast(to: type)
  313|     12|        }
  314|    514|    }
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKFAkA9ExecutionVz_Spys6UInt64VGtKXEfU_ySryAZGKXEfU_:
  300|    514|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  301|    514|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  302|    514|                threadingModel: store.value.engine.configuration.threadingModel
  303|    514|            )
  304|    514|            try stack.execute(
  305|    514|                sp: sp,
  306|    514|                pc: rootISeq.baseAddress!,
  307|    514|                handle: handle,
  308|    514|                type: type
  309|    514|            )
  310|     12|        }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign33_46BE72AA5BC0E6798196575DFA250830LL2md2ms6memoryySvSgz_SizAA12EntityHandleVyAA0eO0VGtFZ:
  322|    484|        private static func assign(md: inout Md, ms: inout Ms, memory: InternalMemory) {
  323|    484|            memory.withValue { assign(md: &md, ms: &ms, memory: &$0) }
  324|    484|        }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign33_46BE72AA5BC0E6798196575DFA250830LL2md2ms6memoryySvSgz_SizAA12EntityHandleVyAA0eO0VGtFZyAOzXEfU_:
  323|    484|            memory.withValue { assign(md: &md, ms: &ms, memory: &$0) }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign2md2ms6memoryySvSgz_SizAA0E6EntityVztFZ:
  328|  54.4k|        static func assign(md: inout Md, ms: inout Ms, memory: inout MemoryEntity) {
  329|  54.4k|            md = UnsafeMutableRawPointer(memory.data._baseAddressIfContiguous)
  330|  54.4k|            ms = memory.data.count
  331|  54.4k|        }
$s7WasmKit9ExecutionV13CurrentMemoryO9assignNil33_46BE72AA5BC0E6798196575DFA250830LL2md2msySvSgz_SiztFZ:
  335|      2|        private static func assignNil(md: inout Md, ms: inout Ms) {
  336|      2|            md = nil
  337|      2|            ms = 0
  338|      2|        }
$s7WasmKit9ExecutionV13CurrentMemoryO09mayUpdateD8Instance8instance4from2md2msyAA12EntityHandleVyAA0hM0VG_AOSgSvSgzSiztFZ:
  346|   291k|        ) {
  347|   291k|            if lastInstance != instance {
  348|    486|                mayUpdateCurrentInstance(instance: instance, md: &md, ms: &ms)
  349|    486|            }
  350|   291k|        }
$s7WasmKit9ExecutionV13CurrentMemoryO09mayUpdateD8Instance8instance2md2msyAA12EntityHandleVyAA0hL0VG_SvSgzSiztFZ:
  354|    486|        static func mayUpdateCurrentInstance(instance: InternalInstance, md: inout Md, ms: inout Ms) {
  355|    486|            guard let memory = instance.memories.first else {
  356|      2|                assignNil(md: &md, ms: &ms)
  357|      2|                return
  358|    484|            }
  359|    484|            CurrentMemory.assign(md: &md, ms: &ms, memory: memory)
  360|    484|        }
$s7WasmKit9ExecutionV7execute2sp2pc6handle4typeySpys6UInt64VG_AkA16InternalFunctionV0A5Types0K4TypeVtKF:
  375|    514|    ) throws {
  376|    514|        var sp: Sp = sp
  377|    514|        var md: Md = nil
  378|    514|        var ms: Ms = 0
  379|    514|        var pc = pc
  380|    514|        (pc, sp) = try invoke(
  381|    514|            function: handle,
  382|    514|            callerInstance: nil,
  383|    514|            spAddend: FrameHeaderLayout.size(of: type),
  384|    514|            sp: sp, pc: pc, md: &md, ms: &ms
  385|    514|        )
  386|    474|        do {
  387|    474|            switch self.store.value.engine.configuration.threadingModel {
  388|    474|            case .direct:
  389|    474|                try runDirectThreaded(sp: sp, pc: pc, md: md, ms: ms)
  390|    474|            case .token:
  391|      0|                try runTokenThreaded(sp: &sp, pc: &pc, md: &md, ms: &ms)
  392|    474|            }
  393|     12|        } catch is EndOfExecution {
  394|     12|            return
  395|     12|        }
  396|      0|    }
$s7WasmKit9ExecutionV17runDirectThreaded2sp2pc2md2msySpys6UInt64VG_AKSvSgSitKF:
  402|    474|    ) throws {
  403|       |        #if os(WASI)
  404|       |            fatalError("Direct threading is not supported on WASI")
  405|       |        #else
  406|    474|            var pc = pc
  407|    474|            let handler = pc.read(wasmkit_tc_exec.self)
  408|    474|            wasmkit_tc_start(handler, sp, pc, md, ms, &self)
  409|    474|            if let (rawError, trappingSp) = self.trap {
  410|    474|                let error = unsafeBitCast(rawError, to: Error.self)
  411|    474|                // Manually release the error object because the trap is caught in C and
  412|    474|                // held as a raw pointer.
  413|    474|                wasmkit_swift_errorRelease(rawError)
  414|    474|
  415|    474|                guard let trap = error as? Trap else {
  416|     13|                    throw error
  417|    461|                }
  418|    461|                // Attach backtrace if the thrown error is a trap
  419|    461|                throw trap.withBacktrace(Self.captureBacktrace(sp: trappingSp, store: store.value))
  420|    474|            }
  421|       |        #endif
  422|      0|    }
wasmkit_execution_state_set_error:
  514|    474|    mutating func setError(_ rawError: UnsafeRawPointer, sp: Sp) {
  515|    474|        precondition(self.trap == nil)
  516|    474|        self.trap = (rawError, sp)
  517|    474|    }
$s7WasmKit9ExecutionV8setError_2spySV_Spys6UInt64VGtFSbyXEfu_:
  515|    474|        precondition(self.trap == nil)
$s7WasmKit9ExecutionV18checkStackBoundaryyySpys6UInt64VGKF:
  520|   521k|    func checkStackBoundary(_ sp: Sp) throws {
  521|   521k|        guard sp < stackEnd else { throw Trap(.callStackExhausted) }
  522|   521k|    }
$s7WasmKit9ExecutionV6invoke8function14callerInstance8spAddend0H02pc2md2msSpys6UInt64VG_ANtAA16InternalFunctionV_AA12EntityHandleVyAA0gP0VGSgs5Int16VA2NSvSgzSiztKF:
  531|    514|    ) throws -> (Pc, Sp) {
  532|    514|        if function.isWasm {
  533|    514|            return try invokeWasmFunction(
  534|    514|                function: function.wasm, callerInstance: callerInstance,
  535|    514|                spAddend: spAddend, sp: sp, pc: pc, md: &md, ms: &ms
  536|    514|            )
  537|    514|        } else {
  538|      0|            try invokeHostFunction(function: function.host, sp: sp, spAddend: spAddend)
  539|      0|            return (pc, sp)
  540|      0|        }
  541|    514|    }
$s7WasmKit9ExecutionV10tailInvoke8function14callerInstance2sp2pc2md2msSpys6UInt64VG_AMtAA16InternalFunctionV_AA12EntityHandleVyAA0hP0VGSgA2MSvSgzSiztKF:
  548|    159|    ) throws -> (Pc, Sp) {
  549|    159|        if function.isWasm {
  550|    159|            return try tailInvokeWasmFunction(
  551|    159|                function: function.wasm, callerInstance: callerInstance,
  552|    159|                sp: sp, md: &md, ms: &ms
  553|    159|            )
  554|    159|        } else {
  555|      0|            try invokeHostFunction(function: function.host, sp: sp, spAddend: 0)
  556|      0|            return (pc, sp)
  557|      0|        }
  558|    159|    }
$s7WasmKit9ExecutionV010tailInvokeA8Function33_46BE72AA5BC0E6798196575DFA250830LL8function14callerInstance2sp2md2msSpys6UInt64VG_AMtAA12EntityHandleVyAA0afS0VG_AOyAA0nS0VGSgAMSvSgzSiztKF:
  569|    159|    ) throws -> (Pc, Sp) {
  570|    159|        let iseq = try function.ensureCompiled(store: store)
  571|    159|        try checkStackBoundary(sp.advanced(by: iseq.maxStackHeight))
  572|    159|        sp.currentFunction = function
  573|    159|
  574|    159|        initializeConstSlots(sp: sp, iseq: iseq, numberOfNonParameterLocals: function.numberOfNonParameterLocals)
  575|    159|
  576|    159|        Execution.CurrentMemory.mayUpdateCurrentInstance(
  577|    159|            instance: function.instance,
  578|    159|            from: callerInstance, md: &md, ms: &ms
  579|    159|        )
  580|    159|        return (iseq.baseAddress, sp)
  581|    159|    }
$s7WasmKit9ExecutionV06invokeA8Function33_46BE72AA5BC0E6798196575DFA250830LL8function14callerInstance8spAddend0N02pc2md2msSpys6UInt64VG_AOtAA12EntityHandleVyAA0aeT0VG_AQyAA0mT0VGSgs5Int16VA2OSvSgzSiztKF:
  590|    514|    ) throws -> (Pc, Sp) {
  591|    514|        let iseq = try function.ensureCompiled(store: store)
  592|    474|
  593|    474|        let newSp = try pushFrame(
  594|    474|            iseq: iseq,
  595|    474|            function: function,
  596|    474|            numberOfNonParameterLocals: function.numberOfNonParameterLocals,
  597|    474|            sp: sp,
  598|    474|            returnPC: pc,
  599|    474|            spAddend: spAddend
  600|    474|        )
  601|    474|        Execution.CurrentMemory.mayUpdateCurrentInstance(
  602|    474|            instance: function.instance,
  603|    474|            from: callerInstance, md: &md, ms: &ms
  604|    474|        )
  605|    474|        return (iseq.baseAddress, newSp)
  606|    514|    }

$s7WasmKit8FunctionV6handle5storeAcA08InternalC0V_AA5StoreCtcfC:
   40|      2|    internal init(handle: InternalFunction, store: Store) {
   41|      2|        self.handle = handle
   42|      2|        self.store = store
   43|      2|    }
$s7WasmKit8FunctionV5store4type4bodyAcA5StoreC_0A5Types0C4TypeVSayAI5ValueOGAA6CallerV_ANtKctcfC:
   70|      2|    ) {
   71|      2|        self.init(handle: store.allocator.allocate(type: type, implementation: body, engine: store.engine), store: store)
   72|      2|    }
$s7WasmKit16InternalFunctionV10bitPatternSivg:
  121|   762k|    var bitPattern: Int { _storage }
$s7WasmKit16InternalFunctionV10bitPatternACSi_tcfC:
  123|  1.27M|    init(bitPattern: Int) {
  124|  1.27M|        _storage = bitPattern
  125|  1.27M|    }
$s7WasmKit16InternalFunctionV02isA0Sbvg:
  129|   237k|    var isWasm: Bool {
  130|   237k|        _storage & 0b1 == 0
  131|   237k|    }
$s7WasmKit16InternalFunctionV4typeAA8InternedVy0A5Types0D4TypeVGvg:
  133|  2.81k|    var type: InternedFuncType {
  134|  2.81k|        if isWasm {
  135|  2.81k|            return wasm.type
  136|  2.81k|        } else {
  137|      2|            return host.type
  138|      2|        }
  139|  2.81k|    }
$s7WasmKit16InternalFunctionV4wasmyAcA12EntityHandleVyAA0adF0VGFZ:
  141|   233k|    static func wasm(_ handle: EntityHandle<WasmFunctionEntity>) -> InternalFunction {
  142|   233k|        assert(MemoryLayout<WasmFunctionEntity>.alignment >= 2)
  143|   233k|        return InternalFunction(bitPattern: handle.bitPattern | 0b0)
  144|   233k|    }
$s7WasmKit16InternalFunctionV4wasmyAcA12EntityHandleVyAA0adF0VGFZSbyXEfu_:
  142|   233k|        assert(MemoryLayout<WasmFunctionEntity>.alignment >= 2)
$s7WasmKit16InternalFunctionV4hostyAcA12EntityHandleVyAA04HostdF0VGFZ:
  146|      2|    static func host(_ handle: EntityHandle<HostFunctionEntity>) -> InternalFunction {
  147|      2|        assert(MemoryLayout<HostFunctionEntity>.alignment >= 2)
  148|      2|        return InternalFunction(bitPattern: handle.bitPattern | 0b1)
  149|      2|    }
$s7WasmKit16InternalFunctionV4hostyAcA12EntityHandleVyAA04HostdF0VGFZSbyXEfu_:
  147|      2|        assert(MemoryLayout<HostFunctionEntity>.alignment >= 2)
$s7WasmKit16InternalFunctionV4wasmAA12EntityHandleVyAA0adF0VGvg:
  151|   760k|    var wasm: EntityHandle<WasmFunctionEntity> {
  152|   760k|        EntityHandle(unsafe: UnsafeMutablePointer(bitPattern: bitPattern & ~0b0)!)
  153|   760k|    }
$s7WasmKit16InternalFunctionV4hostAA12EntityHandleVyAA04HostdF0VGvg:
  154|      2|    var host: EntityHandle<HostFunctionEntity> {
  155|      2|        EntityHandle(unsafe: UnsafeMutablePointer(bitPattern: bitPattern & ~0b1)!)
  156|      2|    }
$s7WasmKit16InternalFunctionV6invoke_5storeSay0A5Types5ValueOGAI_AA5StoreCtKF:
  166|    514|    func invoke(_ arguments: [Value], store: Store) throws -> [Value] {
  167|    514|        if isWasm {
  168|    514|            let entity = wasm
  169|    514|            let resolvedType = store.engine.resolveType(entity.type)
  170|    514|            try check(functionType: resolvedType, parameters: arguments)
  171|    514|            return try executeWasm(
  172|    514|                store: store,
  173|    514|                function: self,
  174|    514|                type: resolvedType,
  175|    514|                arguments: arguments,
  176|    514|                callerInstance: entity.instance
  177|    514|            )
  178|    514|        } else {
  179|      0|            let entity = host
  180|      0|            let resolvedType = store.engine.resolveType(entity.type)
  181|      0|            try check(functionType: resolvedType, parameters: arguments)
  182|      0|            let caller = Caller(instanceHandle: nil, store: store)
  183|      0|            let results = try entity.implementation(caller, arguments)
  184|      0|            try check(functionType: resolvedType, results: results)
  185|      0|            return results
  186|      0|        }
  187|    514|    }
$s7WasmKit16InternalFunctionV5check33_9089726AEE4A690993C4A5B9E70A219ELL13expectedTypes6valuesSbSay0aN09ValueTypeOG_SayAH0P0OGtF:
  189|    514|    private func check(expectedTypes: [ValueType], values: [Value]) -> Bool {
  190|    514|        guard expectedTypes.count == values.count else { return false }
  191|    514|        for (expected, value) in zip(expectedTypes, values) {
  192|      0|            switch (expected, value) {
  193|      0|            case (.i32, .i32), (.i64, .i64), (.f32, .f32), (.f64, .f64),
  194|      0|                (.ref(.funcRef), .ref(.function)), (.ref(.externRef), .ref(.extern)):
  195|      0|                break
  196|      0|            default: return false
  197|      0|            }
  198|    514|        }
  199|    514|        return true
  200|    514|    }
$s7WasmKit16InternalFunctionV5check33_9089726AEE4A690993C4A5B9E70A219ELL12functionType10parametersy0A5Types0dN0V_SayAH5ValueOGtKF:
  202|    514|    private func check(functionType: FunctionType, parameters: [Value]) throws {
  203|    514|        guard check(expectedTypes: functionType.parameters, values: parameters) else {
  204|      0|            throw Trap(.parameterTypesMismatch(expected: functionType.parameters, got: parameters))
  205|    514|        }
  206|    514|    }
$s7WasmKit16InternalFunctionV14assumeCompiledAA19InstructionSequenceV_Si6localsAA12EntityHandleVyAA0adJ0VG8functiontyF:
  218|   521k|    ) {
  219|   521k|        let entity = self.wasm
  220|   521k|        guard case .compiled(let iseq) = entity.code else {
  221|      0|            preconditionFailure()
  222|   521k|        }
  223|   521k|        return (iseq, entity.numberOfNonParameterLocals, entity)
  224|   521k|    }
$s7WasmKit0A14FunctionEntityV5index4type4code8instanceACs6UInt32V_AA8InternedVy0A5Types0C4TypeVGAA0D6HandleVy0A6Parser4CodeVGAQyAA08InstanceD0VGtcfC:
  234|  2.72k|    init(index: FunctionIndex, type: InternedFuncType, code: InternalUncompiledCode, instance: InternalInstance) {
  235|  2.72k|        self.type = type
  236|  2.72k|        self.instance = instance
  237|  2.72k|        self.code = .uncompiled(code)
  238|  2.72k|        self.numberOfNonParameterLocals = code.locals.count
  239|  2.72k|        self.index = index
  240|  2.72k|    }
$s7WasmKit0A14FunctionEntityV7compile5store4codeAA19InstructionSequenceVAA8StoreRefV_AA0D6HandleVy0A6Parser4CodeVGtKF:
  252|  1.08k|    mutating func compile(store: StoreRef, code: InternalUncompiledCode) throws -> InstructionSequence {
  253|  1.08k|        let store = store.value
  254|  1.08k|        let engine = store.engine
  255|  1.08k|        let type = self.type
  256|  1.08k|        var translator = try InstructionTranslator(
  257|  1.08k|            allocator: store.allocator.iseqAllocator,
  258|  1.08k|            engineConfiguration: engine.configuration,
  259|  1.08k|            funcTypeInterner: engine.funcTypeInterner,
  260|  1.08k|            module: instance,
  261|  1.08k|            type: engine.resolveType(type),
  262|  1.08k|            locals: code.locals,
  263|  1.08k|            functionIndex: index,
  264|  1.08k|            codeSize: code.expression.count,
  265|  1.08k|            isIntercepting: engine.interceptor != nil
  266|  1.08k|        )
  267|  1.08k|        let iseq = try code.withValue { code in
  268|  1.08k|            try translator.translate(code: code)
  269|  1.08k|        }
  270|    957|        self.code = .compiled(iseq)
  271|    957|        return iseq
  272|  1.08k|    }
$s7WasmKit0A14FunctionEntityV7compile5store4codeAA19InstructionSequenceVAA8StoreRefV_AA0D6HandleVy0A6Parser4CodeVGtKFAhOzKXEfU_:
  267|  1.08k|        let iseq = try code.withValue { code in
  268|  1.08k|            try translator.translate(code: code)
  269|    957|        }
$s7WasmKit12EntityHandleVA2A0a8FunctionC0VRszlE14ensureCompiled5storeAA19InstructionSequenceVAA8StoreRefV_tKF:
  278|  1.88k|    func ensureCompiled(store: StoreRef) throws -> InstructionSequence {
  279|  1.88k|        switch self.code {
  280|  1.88k|        case .uncompiled(let code):
  281|  1.08k|            return try self.withValue {
  282|  1.08k|                let iseq = try $0.compile(store: store, code: code)
  283|  1.08k|                $0.code = .compiled(iseq)
  284|  1.08k|                return iseq
  285|  1.08k|            }
  286|  1.88k|        case .compiled(let iseq), .compiledAndPatchable(_, let iseq):
  287|    807|            return iseq
  288|  1.88k|        }
  289|  1.88k|    }
$s7WasmKit12EntityHandleVA2A0a8FunctionC0VRszlE14ensureCompiled5storeAA19InstructionSequenceVAA8StoreRefV_tKFAiEzKXEfU_:
  281|  1.08k|            return try self.withValue {
  282|  1.08k|                let iseq = try $0.compile(store: store, code: code)
  283|    957|                $0.code = .compiled(iseq)
  284|    957|                return iseq
  285|  1.08k|            }
$s7WasmKit19InstructionSequenceV12instructions14maxStackHeight9constantsACSrys6UInt64VG_SiSRyAA12UntypedValueVGtcfC:
  305|    957|    init(instructions: UnsafeMutableBufferPointer<CodeSlot>, maxStackHeight: Int, constants: UnsafeBufferPointer<UntypedValue>) {
  306|    957|        self.instructions = instructions
  307|    957|        self.maxStackHeight = maxStackHeight
  308|    957|        self.constants = constants
  309|    957|    }
$s7WasmKit19InstructionSequenceV11baseAddressSpys6UInt64VGvg:
  311|   521k|    var baseAddress: UnsafeMutablePointer<CodeSlot> {
  312|   521k|        self.instructions.baseAddress!
  313|   521k|    }

$s7WasmKit12EntityHandleV6unsafeACyxGSpyxG_tcfC:
   45|   769k|    init(unsafe pointer: UnsafeMutablePointer<T>) {
   46|   769k|        self.pointer = pointer
   47|   769k|    }
$s7WasmKit12EntityHandleV10bitPatternACyxGSgSu_tcfC:
   49|  1.37M|    init?(bitPattern: UInt) {
   50|  1.37M|        guard let pointer = UnsafeMutablePointer<T>(bitPattern: bitPattern) else { return nil }
   51|  1.37M|        self.pointer = pointer
   52|  1.37M|    }
$s7WasmKit12EntityHandleV13dynamicMemberqd__s7KeyPathCyxqd__G_tcluig:
   54|  3.78M|    subscript<R>(dynamicMember keyPath: KeyPath<T, R>) -> R {
   55|  3.78M|        pointer.pointee[keyPath: keyPath]
   56|  3.78M|    }
$s7WasmKit12EntityHandleV9withValueyqd__qd__xzKXEKlF:
   59|   138k|    func withValue<R>(_ body: (inout T) throws -> R) rethrows -> R {
   60|   138k|        return try body(&pointer.pointee)
   61|   138k|    }
$s7WasmKit12EntityHandleV10bitPatternSivg:
   63|   761k|    var bitPattern: Int {
   64|   761k|        return Int(bitPattern: pointer)
   65|   761k|    }
$s7WasmKit12EntityHandleVA2A011ValidatableC0RzlE22createOutOfBoundsError5index5counts0J0_pSi_SitFZ:
   69|      8|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
   70|      8|        T.createOutOfBoundsError(index: index, count: count)
   71|      8|    }
$s7WasmKit14InstanceEntityV19compileAllFunctions5storeyAA5StoreC_tKF:
  103|     87|    internal func compileAllFunctions(store: Store) throws {
  104|     87|        let store = StoreRef(store)
  105|    131|        for function in functions {
  106|    131|            guard function.isWasm else { continue }
  107|    129|            try function.wasm.ensureCompiled(store: store)
  108|     45|        }
  109|      3|    }
$s7WasmKit8InstanceV6handle5storeAcA12EntityHandleVyAA0cF0VG_AA5StoreCtcfC:
  182|      3|    init(handle: InternalInstance, store: Store) {
  183|      3|        self.handle = handle
  184|      3|        self.store = store
  185|      3|    }
$s7WasmKit12MemoryEntityV12maxPageCount10isMemory64s6UInt64VSb_tFZ:
  455|  1.24k|    static func maxPageCount(isMemory64: Bool) -> UInt64 {
  456|  1.24k|        isMemory64 ? UInt64.max : UInt64(1 << 32) / UInt64(pageSize)
  457|  1.24k|    }
$s7WasmKit12MemoryEntityV_15resourceLimiterAC0A6Parser6LimitsV_AA08ResourceF0_ptKcfC:
  463|    586|    init(_ memoryType: MemoryType, resourceLimiter: any ResourceLimiter) throws {
  464|    586|        let byteSize = Int(memoryType.min) * Self.pageSize
  465|    586|        guard try resourceLimiter.limitMemoryGrowth(to: byteSize) else {
  466|      0|            throw Trap(.initialMemorySizeExceedsLimit(byteSize: byteSize))
  467|    586|        }
  468|    586|        data = Array(repeating: 0, count: byteSize)
  469|    586|        let defaultMaxPageCount = Self.maxPageCount(isMemory64: memoryType.isMemory64)
  470|    586|        maxPageCount = memoryType.max ?? defaultMaxPageCount
  471|    586|        limit = memoryType
  472|    586|    }
$s7WasmKit12MemoryEntityV_15resourceLimiterAC0A6Parser6LimitsV_AA08ResourceF0_ptKcfcs6UInt64VyKXEfu_:
  470|    513|        maxPageCount = memoryType.max ?? defaultMaxPageCount
$s7WasmKit12MemoryEntityV4grow2by15resourceLimiter0A5Types5ValueOSi_AA08ResourceH0_ptKF:
  476|  54.0k|    mutating func grow(by pageCount: Int, resourceLimiter: any ResourceLimiter) throws -> Value {
  477|  54.0k|        let newPageCount = data.count / Self.pageSize + pageCount
  478|  54.0k|
  479|  54.0k|        guard newPageCount <= maxPageCount else {
  480|  4.00k|            return limit.isMemory64 ? .i64((-1 as Int64).unsigned) : .i32((-1 as Int32).unsigned)
  481|  50.0k|        }
  482|  50.0k|        guard try resourceLimiter.limitMemoryGrowth(to: newPageCount * Self.pageSize) else {
  483|    543|            return limit.isMemory64 ? .i64((-1 as Int64).unsigned) : .i32((-1 as Int32).unsigned)
  484|  49.4k|        }
  485|  49.4k|
  486|  49.4k|        let result = Int32(data.count / MemoryEntity.pageSize).unsigned
  487|  49.4k|        data.append(contentsOf: Array(repeating: 0, count: Int(pageCount) * MemoryEntity.pageSize))
  488|  49.4k|
  489|  49.4k|        return limit.isMemory64 ? .i64(UInt64(result)) : .i32(result)
  490|  54.0k|    }
$s7WasmKit12MemoryEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  541|      2|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  542|      2|        ValidationError(.indexOutOfBounds("memory", index, max: count))
  543|      2|    }
$s7WasmKit6MemoryV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  555|     73|    init(handle: InternalMemory, allocator: StoreAllocator) {
  556|     73|        self.handle = handle
  557|     73|        self.allocator = allocator
  558|     73|    }
$s7WasmKit6MemoryV5store4typeAcA5StoreC_0A6Parser6LimitsVtKcfC:
  582|     74|    public init(store: Store, type: MemoryType) throws {
  583|     74|        // Validate the memory type because the type is not validated at instantiation time.
  584|     74|        try ModuleValidator.checkMemoryType(type, features: store.engine.configuration.features)
  585|     73|
  586|     73|        self.init(
  587|     73|            handle: try store.allocator.allocate(memoryType: type, resourceLimiter: store.resourceLimiter),
  588|     73|            allocator: store.allocator
  589|     73|        )
  590|     73|    }
$s7WasmKit12GlobalEntityV10globalType12initialValueAC0A6Parser0cF0V_0A5Types0H0OtKcfC:
  627|  2.83k|    init(globalType: GlobalType, initialValue: Value) throws {
  628|  2.83k|        try initialValue.checkType(globalType.valueType)
  629|  2.83k|        rawValue = UntypedValue(initialValue)
  630|  2.83k|        self.globalType = globalType
  631|  2.83k|    }
$s7WasmKit12GlobalEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  635|      6|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  636|      6|        ValidationError(.indexOutOfBounds("global", index, max: count))
  637|      6|    }
$s7WasmKit13ExternalValueO11internalizeAA08InternalcD0O_AA14StoreAllocatorCtyF:
  762|     75|    func internalize() -> (InternalExternalValue, StoreAllocator) {
  763|     75|        switch self {
  764|     75|        case .function(let function):
  765|      2|            return (.function(function.handle), function.store.allocator)
  766|     75|        case .table(let table):
  767|      0|            return (.table(table.handle), table.allocator)
  768|     75|        case .memory(let memory):
  769|     73|            return (.memory(memory.handle), memory.allocator)
  770|     75|        case .global(let global):
  771|      0|            return (.global(global.handle), global.allocator)
  772|     75|        }
  773|     75|    }

$s7WasmKit9ExecutionV11unreachable2sp2pcSpys6UInt64VG_AHtAI_AItKF:
    4|     57|    func unreachable(sp: Sp, pc: Pc) throws -> (Pc, CodeSlot) {
    5|     57|        throw Trap(.unreachable)
    6|     57|    }
$s7WasmKit9ExecutionV3nop2spySpys6UInt64VG_tF:
    7|   100k|    mutating func nop(sp: Sp) {
    8|   100k|    }
$s7WasmKit9ExecutionV2br2sp2pc9immediateSpys6UInt64VG_AItAJ_AJs5Int32VtF:
   10|  2.26k|    mutating func br(sp: Sp, pc: Pc, immediate: Instruction.BrOperand) -> (Pc, CodeSlot) {
   11|  2.26k|        return pc.advanced(by: Int(immediate)).next()
   12|  2.26k|    }
$s7WasmKit9ExecutionV4brIf2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   13|  8.28k|    mutating func brIf(sp: Sp, pc: Pc, immediate: Instruction.BrIfOperand) -> (Pc, CodeSlot) {
   14|  8.28k|        // NOTE: Marked as `_fastPath` to teach the compiler not to use conditional
   15|  8.28k|        // instructions (e.g. csel) to utilize the branch prediction. Typically
   16|  8.28k|        // if-conversion is applied to optimize branches into conditional instructions
   17|  8.28k|        // but it's not always the best choice for performance when the branch is
   18|  8.28k|        // highly predictable:
   19|  8.28k|        //
   20|  8.28k|        // > Use branches when the condition is highly predictable. The cost of
   21|  8.28k|        // > mispredicts will be low, and the code will be executed with optimal
   22|  8.28k|        // > latency.
   23|  8.28k|        // >
   24|  8.28k|        // > Apple Silicon CPU Optimization Guide: 3.0 (Page 105)
   25|  8.28k|        //
   26|  8.28k|        // We prefer branch instructions over conditional instructions to provide
   27|  8.28k|        // the best performance when guest code is highly predictable.
   28|  8.28k|        guard _fastPath(sp[i32: immediate.condition] != 0) else {
   29|  6.46k|            return pc.next()
   30|  6.46k|        }
   31|  1.82k|        return pc.advanced(by: Int(immediate.offset)).next()
   32|  8.28k|    }
$s7WasmKit9ExecutionV7brIfNot2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   33|  1.31k|    mutating func brIfNot(sp: Sp, pc: Pc, immediate: Instruction.BrIfOperand) -> (Pc, CodeSlot) {
   34|  1.31k|        // NOTE: See `brIf` for the rationale.
   35|  1.31k|        guard _fastPath(sp[i32: immediate.condition] == 0) else {
   36|      0|            return pc.next()
   37|  1.31k|        }
   38|  1.31k|        return pc.advanced(by: Int(immediate.offset)).next()
   39|  1.31k|    }
$s7WasmKit9ExecutionV7brTable2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   40|  11.8k|    mutating func brTable(sp: Sp, pc: Pc, immediate: Instruction.BrTableOperand) -> (Pc, CodeSlot) {
   41|  11.8k|        let index = sp[i32: immediate.index]
   42|  11.8k|        let normalizedOffset = min(Int(index), Int(immediate.count - 1))
   43|  11.8k|        let entry = immediate.baseAddress[normalizedOffset]
   44|  11.8k|        return pc.advanced(by: Int(entry.offset)).next()
   45|  11.8k|    }
$s7WasmKit9ExecutionV7_return2sp2pc2md2msSpys6UInt64VG_AJtAKz_AKSvSgzSiztF:
   48|   290k|    mutating func _return(sp: inout Sp, pc: Pc, md: inout Md, ms: inout Ms) -> (Pc, CodeSlot) {
   49|   290k|        var pc = pc
   50|   290k|        popFrame(sp: &sp, pc: &pc, md: &md, ms: &ms)
   51|   290k|        return pc.next()
   52|   290k|    }
$s7WasmKit9ExecutionV05endOfC02sp2pcSpys6UInt64VG_AHtAIz_AItKF:
   54|     12|    mutating func endOfExecution(sp: inout Sp, pc: Pc) throws -> (Pc, CodeSlot) {
   55|     12|        throw EndOfExecution()
   56|     12|    }
$s7WasmKit9ExecutionV13_internalCall33_6B1266CB0931A942C36904C610F10643LL2sp2pc6callee0dE7OperandySpys6UInt64VGz_ALzAA16InternalFunctionVAA11InstructionO0eO0VtKF:
   77|   521k|    ) throws {
   78|   521k|        // The callee is known to be a function defined within the same module, so we can
   79|   521k|        // skip updating the current instance.
   80|   521k|        let (iseq, locals, instance) = internalCallOperand.callee.assumeCompiled()
   81|   521k|        sp = try pushFrame(
   82|   521k|            iseq: iseq,
   83|   521k|            function: instance,
   84|   521k|            numberOfNonParameterLocals: locals,
   85|   521k|            sp: sp, returnPC: pc,
   86|   521k|            spAddend: internalCallOperand.spAddend
   87|   521k|        )
   88|   520k|        pc = iseq.baseAddress
   89|   520k|    }
$s7WasmKit9ExecutionV12internalCall2sp2pc9immediateSpys6UInt64VG_AItAJz_AjA11InstructionO0E7OperandVtKF:
   92|   520k|    mutating func internalCall(sp: inout Sp, pc: Pc, immediate: Instruction.CallOperand) throws -> (Pc, CodeSlot) {
   93|   520k|        var pc = pc
   94|   520k|        let callee = immediate.callee
   95|   520k|        try _internalCall(sp: &sp, pc: &pc, callee: callee, internalCallOperand: immediate)
   96|   519k|        return pc.next()
   97|   520k|    }
$s7WasmKit9ExecutionV13compilingCall2sp2pc9immediateSpys6UInt64VG_AItAJz_AjA11InstructionO0E7OperandVtKF:
  100|  1.08k|    mutating func compilingCall(sp: inout Sp, pc: Pc, immediate: Instruction.CallOperand) throws -> (Pc, CodeSlot) {
  101|  1.08k|        var pc = pc
  102|  1.08k|        // NOTE: `CompilingCallOperand` consumes 2 slots, discriminator is at -3
  103|  1.08k|        let headSlotPc = pc.advanced(by: -3)
  104|  1.08k|        let callee = immediate.callee
  105|  1.08k|        try callee.wasm.ensureCompiled(store: store)
  106|  1.08k|        let replaced = Instruction.internalCall(immediate)
  107|  1.08k|        headSlotPc.pointee = replaced.headSlot(threadingModel: store.value.engine.configuration.threadingModel)
  108|  1.08k|        try _internalCall(sp: &sp, pc: &pc, callee: callee, internalCallOperand: immediate)
  109|  1.08k|        return pc.next()
  110|  1.08k|    }
$s7WasmKit9ExecutionV10returnCall2sp2pc2md2ms9immediateSpys6UInt64VG_AKtALz_ALSvSgzSizAA11InstructionO06ReturnE7OperandVtKF:
  155|    159|    mutating func returnCall(sp: inout Sp, pc: Pc, md: inout Md, ms: inout Ms, immediate: Instruction.ReturnCallOperand) throws -> (Pc, CodeSlot) {
  156|    159|        var pc = pc
  157|    159|        (pc, sp) = try tailInvoke(
  158|    159|            function: immediate.callee,
  159|    159|            callerInstance: currentInstance(sp: sp),
  160|    159|            sp: sp, pc: pc, md: &md, ms: &ms
  161|    159|        )
  162|    159|        return pc.next()
  163|    159|    }

$s7WasmKit11InstructionO16CopyStackOperandV4load4fromAESpys6UInt64VGz_tFZ:
  456|   116k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  457|   116k|            let (source, dest) = pc.read((LVReg, LVReg).self)
  458|   116k|            return Self(source: source, dest: dest)
  459|   116k|        }
$s7WasmKit11InstructionO16CopyStackOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  460|  3.06k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  461|  3.06k|            emitSlot { unsafeBitCast(($0.source, $0.dest) as (LVReg, LVReg), to: CodeSlot.self) }
  462|  3.06k|        }
$s7WasmKit11InstructionO16CopyStackOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  461|  3.06k|            emitSlot { unsafeBitCast(($0.source, $0.dest) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4load4fromAESpys6UInt64VGz_tFZ:
  468|  81.4k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  469|  81.4k|            let (reg) = pc.read((LLVReg).self)
  470|  81.4k|            let (rawGlobal) = pc.read((UInt64).self)
  471|  81.4k|            return Self(reg: reg, rawGlobal: rawGlobal)
  472|  81.4k|        }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  473|  6.50k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  474|  6.50k|            emitSlot { unsafeBitCast(($0.reg) as (LLVReg), to: CodeSlot.self) }
  475|  6.50k|            emitSlot { $0.rawGlobal }
  476|  6.50k|        }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  474|  6.50k|            emitSlot { unsafeBitCast(($0.reg) as (LLVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  475|  6.50k|            emitSlot { $0.rawGlobal }
$s7WasmKit11InstructionO11CallOperandV4load4fromAESpys6UInt64VGz_tFZ:
  482|   521k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  483|   521k|            let (rawCallee) = pc.read((UInt64).self)
  484|   521k|            let (spAddend, _, _, _, _, _, _) = pc.read((VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8).self)
  485|   521k|            return Self(rawCallee: rawCallee, spAddend: spAddend)
  486|   521k|        }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  487|  2.80k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  488|  2.80k|            emitSlot { $0.rawCallee }
  489|  2.80k|            emitSlot { unsafeBitCast(($0.spAddend, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  490|  2.80k|        }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  488|  2.80k|            emitSlot { $0.rawCallee }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  489|  2.80k|            emitSlot { unsafeBitCast(($0.spAddend, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO17ReturnCallOperandV4load4fromAESpys6UInt64VGz_tFZ:
  523|    159|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  524|    159|            let (rawCallee) = pc.read((UInt64).self)
  525|    159|            return Self(rawCallee: rawCallee)
  526|    159|        }
$s7WasmKit11InstructionO17ReturnCallOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  527|      4|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  528|      4|            emitSlot { $0.rawCallee }
  529|      4|        }
$s7WasmKit11InstructionO17ReturnCallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  528|      4|            emitSlot { $0.rawCallee }
$s7WasmKit11InstructionO11BrIfOperandV4load4fromAESpys6UInt64VGz_tFZ:
  550|  9.60k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  551|  9.60k|            let (condition, offset) = pc.read((LVReg, Int32).self)
  552|  9.60k|            return Self(condition: condition, offset: offset)
  553|  9.60k|        }
$s7WasmKit11InstructionO11BrIfOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  554|     46|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  555|     46|            emitSlot { unsafeBitCast(($0.condition, $0.offset) as (LVReg, Int32), to: CodeSlot.self) }
  556|     46|        }
$s7WasmKit11InstructionO11BrIfOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  555|     22|            emitSlot { unsafeBitCast(($0.condition, $0.offset) as (LVReg, Int32), to: CodeSlot.self) }
$s7WasmKit11InstructionO14BrTableOperandV4load4fromAESpys6UInt64VGz_tFZ:
  563|  11.8k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  564|  11.8k|            let (rawBaseAddress) = pc.read((UInt64).self)
  565|  11.8k|            let (count, index, _, _, _, _) = pc.read((UInt16, VReg, UInt8, UInt8, UInt8, UInt8).self)
  566|  11.8k|            return Self(rawBaseAddress: rawBaseAddress, count: count, index: index)
  567|  11.8k|        }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  568|    421|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  569|    421|            emitSlot { $0.rawBaseAddress }
  570|    421|            emitSlot { unsafeBitCast(($0.count, $0.index, 0, 0, 0, 0) as (UInt16, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  571|    421|        }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  569|    421|            emitSlot { $0.rawBaseAddress }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  570|    421|            emitSlot { unsafeBitCast(($0.count, $0.index, 0, 0, 0, 0) as (UInt16, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO11LoadOperandV4load4fromAESpys6UInt64VGz_tFZ:
  578|  1.12M|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  579|  1.12M|            let (offset) = pc.read((UInt64).self)
  580|  1.12M|            let (pointer, result, _, _, _, _) = pc.read((VReg, VReg, UInt8, UInt8, UInt8, UInt8).self)
  581|  1.12M|            return Self(offset: offset, pointer: pointer, result: result)
  582|  1.12M|        }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  583|  12.3k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  584|  12.3k|            emitSlot { $0.offset }
  585|  12.3k|            emitSlot { unsafeBitCast(($0.pointer, $0.result, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  586|  12.3k|        }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  584|  12.3k|            emitSlot { $0.offset }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  585|  12.3k|            emitSlot { unsafeBitCast(($0.pointer, $0.result, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO12StoreOperandV4load4fromAESpys6UInt64VGz_tFZ:
  593|  33.2k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  594|  33.2k|            let (offset) = pc.read((UInt64).self)
  595|  33.2k|            let (pointer, value, _, _, _, _) = pc.read((VReg, VReg, UInt8, UInt8, UInt8, UInt8).self)
  596|  33.2k|            return Self(offset: offset, pointer: pointer, value: value)
  597|  33.2k|        }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  598|    212|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  599|    212|            emitSlot { $0.offset }
  600|    212|            emitSlot { unsafeBitCast(($0.pointer, $0.value, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  601|    212|        }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  599|    212|            emitSlot { $0.offset }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  600|    212|            emitSlot { unsafeBitCast(($0.pointer, $0.value, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemorySizeOperandV4load4fromAESpys6UInt64VGz_tFZ:
  607|   432k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  608|   432k|            let (memoryIndex, result) = pc.read((UInt32, LVReg).self)
  609|   432k|            return Self(memoryIndex: memoryIndex, result: result)
  610|   432k|        }
$s7WasmKit11InstructionO17MemorySizeOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  611|  8.15k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  612|  8.15k|            emitSlot { unsafeBitCast(($0.memoryIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  613|  8.15k|        }
$s7WasmKit11InstructionO17MemorySizeOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  612|  8.15k|            emitSlot { unsafeBitCast(($0.memoryIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryGrowOperandV4load4fromAESpys6UInt64VGz_tFZ:
  620|  54.0k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  621|  54.0k|            let (result, delta, memory) = pc.read((VReg, VReg, UInt32).self)
  622|  54.0k|            return Self(result: result, delta: delta, memory: memory)
  623|  54.0k|        }
$s7WasmKit11InstructionO17MemoryGrowOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  624|  1.53k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  625|  1.53k|            emitSlot { unsafeBitCast(($0.result, $0.delta, $0.memory) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  626|  1.53k|        }
$s7WasmKit11InstructionO17MemoryGrowOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  625|  1.53k|            emitSlot { unsafeBitCast(($0.result, $0.delta, $0.memory) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const32OperandV4load4fromAESpys6UInt64VGz_tFZ:
  685|  64.6k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  686|  64.6k|            let (value, result) = pc.read((UInt32, LVReg).self)
  687|  64.6k|            return Self(value: value, result: result)
  688|  64.6k|        }
$s7WasmKit11InstructionO14Const32OperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  689|    275|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  690|    275|            emitSlot { unsafeBitCast(($0.value, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  691|    275|        }
$s7WasmKit11InstructionO14Const32OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  690|    275|            emitSlot { unsafeBitCast(($0.value, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const64OperandV4load4fromAESpys6UInt64VGz_tFZ:
  697|    320|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  698|    320|            let (value) = pc.read((UntypedValue).self)
  699|    320|            let (result) = pc.read((LLVReg).self)
  700|    320|            return Self(value: value, result: result)
  701|    320|        }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  702|     46|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  703|     46|            emitSlot { unsafeBitCast(($0.value) as (UntypedValue), to: CodeSlot.self) }
  704|     46|            emitSlot { unsafeBitCast(($0.result) as (LLVReg), to: CodeSlot.self) }
  705|     46|        }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  703|     46|            emitSlot { unsafeBitCast(($0.value) as (UntypedValue), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  704|     46|            emitSlot { unsafeBitCast(($0.result) as (LLVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO13BinaryOperandV4load4fromAESpys6UInt64VGz_tFZ:
  712|   631k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  713|   631k|            let (result, lhs, rhs) = pc.read((LVReg, VReg, VReg).self)
  714|   631k|            return Self(result: result, lhs: lhs, rhs: rhs)
  715|   631k|        }
$s7WasmKit11InstructionO13BinaryOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  716|  8.54k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  717|  8.54k|            emitSlot { unsafeBitCast(($0.result, $0.lhs, $0.rhs) as (LVReg, VReg, VReg), to: CodeSlot.self) }
  718|  8.54k|        }
$s7WasmKit11InstructionO13BinaryOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  717|  8.54k|            emitSlot { unsafeBitCast(($0.result, $0.lhs, $0.rhs) as (LVReg, VReg, VReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO12UnaryOperandV4load4fromAESpys6UInt64VGz_tFZ:
  724|  1.95M|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  725|  1.95M|            let (result, input) = pc.read((LVReg, LVReg).self)
  726|  1.95M|            return Self(result: result, input: input)
  727|  1.95M|        }
$s7WasmKit11InstructionO12UnaryOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  728|  30.2k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  729|  30.2k|            emitSlot { unsafeBitCast(($0.result, $0.input) as (LVReg, LVReg), to: CodeSlot.self) }
  730|  30.2k|        }
$s7WasmKit11InstructionO12UnaryOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  729|  30.2k|            emitSlot { unsafeBitCast(($0.result, $0.input) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO13SelectOperandV4load4fromAESpys6UInt64VGz_tFZ:
  738|  1.65k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  739|  1.65k|            let (result, condition, onTrue, onFalse) = pc.read((VReg, VReg, VReg, VReg).self)
  740|  1.65k|            return Self(result: result, condition: condition, onTrue: onTrue, onFalse: onFalse)
  741|  1.65k|        }
$s7WasmKit11InstructionO13SelectOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  742|      9|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  743|      9|            emitSlot { unsafeBitCast(($0.result, $0.condition, $0.onTrue, $0.onFalse) as (VReg, VReg, VReg, VReg), to: CodeSlot.self) }
  744|      9|        }
$s7WasmKit11InstructionO13SelectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  743|      9|            emitSlot { unsafeBitCast(($0.result, $0.condition, $0.onTrue, $0.onFalse) as (VReg, VReg, VReg, VReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14RefNullOperandV4load4fromAESpys6UInt64VGz_tFZ:
  750|  3.54k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  751|  3.54k|            let (result, rawType, _, _, _, _, _) = pc.read((VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8).self)
  752|  3.54k|            return Self(result: result, rawType: rawType)
  753|  3.54k|        }
$s7WasmKit11InstructionO14RefNullOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  754|     22|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  755|     22|            emitSlot { unsafeBitCast(($0.result, $0.rawType, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  756|     22|        }
$s7WasmKit11InstructionO14RefNullOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  755|     22|            emitSlot { unsafeBitCast(($0.result, $0.rawType, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO12rawImmediateAA0cE0_pSgvg:
  900|  87.0k|    var rawImmediate: (any InstructionImmediate)? {
  901|  87.0k|        switch self {
  902|  87.0k|        case .copyStack(let immediate): return immediate
  903|  87.0k|        case .globalGet(let immediate): return immediate
  904|  87.0k|        case .globalSet(let immediate): return immediate
  905|  87.0k|        case .call(let immediate): return immediate
  906|  87.0k|        case .compilingCall(let immediate): return immediate
  907|  87.0k|        case .internalCall(let immediate): return immediate
  908|  87.0k|        case .callIndirect(let immediate): return immediate
  909|  87.0k|        case .resizeFrameHeader(let immediate): return immediate
  910|  87.0k|        case .returnCall(let immediate): return immediate
  911|  87.0k|        case .returnCallIndirect(let immediate): return immediate
  912|  87.0k|        case .br(let immediate): return immediate
  913|  87.0k|        case .brIf(let immediate): return immediate
  914|  87.0k|        case .brIfNot(let immediate): return immediate
  915|  87.0k|        case .brTable(let immediate): return immediate
  916|  87.0k|        case .i32Load(let immediate): return immediate
  917|  87.0k|        case .i64Load(let immediate): return immediate
  918|  87.0k|        case .f32Load(let immediate): return immediate
  919|  87.0k|        case .f64Load(let immediate): return immediate
  920|  87.0k|        case .i32Load8S(let immediate): return immediate
  921|  87.0k|        case .i32Load8U(let immediate): return immediate
  922|  87.0k|        case .i32Load16S(let immediate): return immediate
  923|  87.0k|        case .i32Load16U(let immediate): return immediate
  924|  87.0k|        case .i64Load8S(let immediate): return immediate
  925|  87.0k|        case .i64Load8U(let immediate): return immediate
  926|  87.0k|        case .i64Load16S(let immediate): return immediate
  927|  87.0k|        case .i64Load16U(let immediate): return immediate
  928|  87.0k|        case .i64Load32S(let immediate): return immediate
  929|  87.0k|        case .i64Load32U(let immediate): return immediate
  930|  87.0k|        case .i32Store(let immediate): return immediate
  931|  87.0k|        case .i64Store(let immediate): return immediate
  932|  87.0k|        case .f32Store(let immediate): return immediate
  933|  87.0k|        case .f64Store(let immediate): return immediate
  934|  87.0k|        case .i32Store8(let immediate): return immediate
  935|  87.0k|        case .i32Store16(let immediate): return immediate
  936|  87.0k|        case .i64Store8(let immediate): return immediate
  937|  87.0k|        case .i64Store16(let immediate): return immediate
  938|  87.0k|        case .i64Store32(let immediate): return immediate
  939|  87.0k|        case .memorySize(let immediate): return immediate
  940|  87.0k|        case .memoryGrow(let immediate): return immediate
  941|  87.0k|        case .memoryInit(let immediate): return immediate
  942|  87.0k|        case .memoryDataDrop(let immediate): return immediate
  943|  87.0k|        case .memoryCopy(let immediate): return immediate
  944|  87.0k|        case .memoryFill(let immediate): return immediate
  945|  87.0k|        case .const32(let immediate): return immediate
  946|  87.0k|        case .const64(let immediate): return immediate
  947|  87.0k|        case .i32Add(let immediate): return immediate
  948|  87.0k|        case .i64Add(let immediate): return immediate
  949|  87.0k|        case .i32Sub(let immediate): return immediate
  950|  87.0k|        case .i64Sub(let immediate): return immediate
  951|  87.0k|        case .i32Mul(let immediate): return immediate
  952|  87.0k|        case .i64Mul(let immediate): return immediate
  953|  87.0k|        case .i32And(let immediate): return immediate
  954|  87.0k|        case .i64And(let immediate): return immediate
  955|  87.0k|        case .i32Or(let immediate): return immediate
  956|  87.0k|        case .i64Or(let immediate): return immediate
  957|  87.0k|        case .i32Xor(let immediate): return immediate
  958|  87.0k|        case .i64Xor(let immediate): return immediate
  959|  87.0k|        case .i32Shl(let immediate): return immediate
  960|  87.0k|        case .i64Shl(let immediate): return immediate
  961|  87.0k|        case .i32ShrS(let immediate): return immediate
  962|  87.0k|        case .i64ShrS(let immediate): return immediate
  963|  87.0k|        case .i32ShrU(let immediate): return immediate
  964|  87.0k|        case .i64ShrU(let immediate): return immediate
  965|  87.0k|        case .i32Rotl(let immediate): return immediate
  966|  87.0k|        case .i64Rotl(let immediate): return immediate
  967|  87.0k|        case .i32Rotr(let immediate): return immediate
  968|  87.0k|        case .i64Rotr(let immediate): return immediate
  969|  87.0k|        case .i32DivS(let immediate): return immediate
  970|  87.0k|        case .i64DivS(let immediate): return immediate
  971|  87.0k|        case .i32DivU(let immediate): return immediate
  972|  87.0k|        case .i64DivU(let immediate): return immediate
  973|  87.0k|        case .i32RemS(let immediate): return immediate
  974|  87.0k|        case .i64RemS(let immediate): return immediate
  975|  87.0k|        case .i32RemU(let immediate): return immediate
  976|  87.0k|        case .i64RemU(let immediate): return immediate
  977|  87.0k|        case .i32Eq(let immediate): return immediate
  978|  87.0k|        case .i64Eq(let immediate): return immediate
  979|  87.0k|        case .i32Ne(let immediate): return immediate
  980|  87.0k|        case .i64Ne(let immediate): return immediate
  981|  87.0k|        case .i32LtS(let immediate): return immediate
  982|  87.0k|        case .i64LtS(let immediate): return immediate
  983|  87.0k|        case .i32LtU(let immediate): return immediate
  984|  87.0k|        case .i64LtU(let immediate): return immediate
  985|  87.0k|        case .i32GtS(let immediate): return immediate
  986|  87.0k|        case .i64GtS(let immediate): return immediate
  987|  87.0k|        case .i32GtU(let immediate): return immediate
  988|  87.0k|        case .i64GtU(let immediate): return immediate
  989|  87.0k|        case .i32LeS(let immediate): return immediate
  990|  87.0k|        case .i64LeS(let immediate): return immediate
  991|  87.0k|        case .i32LeU(let immediate): return immediate
  992|  87.0k|        case .i64LeU(let immediate): return immediate
  993|  87.0k|        case .i32GeS(let immediate): return immediate
  994|  87.0k|        case .i64GeS(let immediate): return immediate
  995|  87.0k|        case .i32GeU(let immediate): return immediate
  996|  87.0k|        case .i64GeU(let immediate): return immediate
  997|  87.0k|        case .i32Clz(let immediate): return immediate
  998|  87.0k|        case .i64Clz(let immediate): return immediate
  999|  87.0k|        case .i32Ctz(let immediate): return immediate
 1000|  87.0k|        case .i64Ctz(let immediate): return immediate
 1001|  87.0k|        case .i32Popcnt(let immediate): return immediate
 1002|  87.0k|        case .i64Popcnt(let immediate): return immediate
 1003|  87.0k|        case .i32Eqz(let immediate): return immediate
 1004|  87.0k|        case .i64Eqz(let immediate): return immediate
 1005|  87.0k|        case .i32WrapI64(let immediate): return immediate
 1006|  87.0k|        case .i64ExtendI32S(let immediate): return immediate
 1007|  87.0k|        case .i64ExtendI32U(let immediate): return immediate
 1008|  87.0k|        case .i32Extend8S(let immediate): return immediate
 1009|  87.0k|        case .i64Extend8S(let immediate): return immediate
 1010|  87.0k|        case .i32Extend16S(let immediate): return immediate
 1011|  87.0k|        case .i64Extend16S(let immediate): return immediate
 1012|  87.0k|        case .i64Extend32S(let immediate): return immediate
 1013|  87.0k|        case .i32TruncF32S(let immediate): return immediate
 1014|  87.0k|        case .i32TruncF32U(let immediate): return immediate
 1015|  87.0k|        case .i32TruncSatF32S(let immediate): return immediate
 1016|  87.0k|        case .i32TruncSatF32U(let immediate): return immediate
 1017|  87.0k|        case .i32TruncF64S(let immediate): return immediate
 1018|  87.0k|        case .i32TruncF64U(let immediate): return immediate
 1019|  87.0k|        case .i32TruncSatF64S(let immediate): return immediate
 1020|  87.0k|        case .i32TruncSatF64U(let immediate): return immediate
 1021|  87.0k|        case .i64TruncF32S(let immediate): return immediate
 1022|  87.0k|        case .i64TruncF32U(let immediate): return immediate
 1023|  87.0k|        case .i64TruncSatF32S(let immediate): return immediate
 1024|  87.0k|        case .i64TruncSatF32U(let immediate): return immediate
 1025|  87.0k|        case .i64TruncF64S(let immediate): return immediate
 1026|  87.0k|        case .i64TruncF64U(let immediate): return immediate
 1027|  87.0k|        case .i64TruncSatF64S(let immediate): return immediate
 1028|  87.0k|        case .i64TruncSatF64U(let immediate): return immediate
 1029|  87.0k|        case .f32ConvertI32S(let immediate): return immediate
 1030|  87.0k|        case .f32ConvertI32U(let immediate): return immediate
 1031|  87.0k|        case .f32ConvertI64S(let immediate): return immediate
 1032|  87.0k|        case .f32ConvertI64U(let immediate): return immediate
 1033|  87.0k|        case .f64ConvertI32S(let immediate): return immediate
 1034|  87.0k|        case .f64ConvertI32U(let immediate): return immediate
 1035|  87.0k|        case .f64ConvertI64S(let immediate): return immediate
 1036|  87.0k|        case .f64ConvertI64U(let immediate): return immediate
 1037|  87.0k|        case .f32ReinterpretI32(let immediate): return immediate
 1038|  87.0k|        case .f64ReinterpretI64(let immediate): return immediate
 1039|  87.0k|        case .i32ReinterpretF32(let immediate): return immediate
 1040|  87.0k|        case .i64ReinterpretF64(let immediate): return immediate
 1041|  87.0k|        case .f32Add(let immediate): return immediate
 1042|  87.0k|        case .f64Add(let immediate): return immediate
 1043|  87.0k|        case .f32Sub(let immediate): return immediate
 1044|  87.0k|        case .f64Sub(let immediate): return immediate
 1045|  87.0k|        case .f32Mul(let immediate): return immediate
 1046|  87.0k|        case .f64Mul(let immediate): return immediate
 1047|  87.0k|        case .f32Div(let immediate): return immediate
 1048|  87.0k|        case .f64Div(let immediate): return immediate
 1049|  87.0k|        case .f32Min(let immediate): return immediate
 1050|  87.0k|        case .f64Min(let immediate): return immediate
 1051|  87.0k|        case .f32Max(let immediate): return immediate
 1052|  87.0k|        case .f64Max(let immediate): return immediate
 1053|  87.0k|        case .f32CopySign(let immediate): return immediate
 1054|  87.0k|        case .f64CopySign(let immediate): return immediate
 1055|  87.0k|        case .f32Eq(let immediate): return immediate
 1056|  87.0k|        case .f64Eq(let immediate): return immediate
 1057|  87.0k|        case .f32Ne(let immediate): return immediate
 1058|  87.0k|        case .f64Ne(let immediate): return immediate
 1059|  87.0k|        case .f32Lt(let immediate): return immediate
 1060|  87.0k|        case .f64Lt(let immediate): return immediate
 1061|  87.0k|        case .f32Gt(let immediate): return immediate
 1062|  87.0k|        case .f64Gt(let immediate): return immediate
 1063|  87.0k|        case .f32Le(let immediate): return immediate
 1064|  87.0k|        case .f64Le(let immediate): return immediate
 1065|  87.0k|        case .f32Ge(let immediate): return immediate
 1066|  87.0k|        case .f64Ge(let immediate): return immediate
 1067|  87.0k|        case .f32Abs(let immediate): return immediate
 1068|  87.0k|        case .f64Abs(let immediate): return immediate
 1069|  87.0k|        case .f32Neg(let immediate): return immediate
 1070|  87.0k|        case .f64Neg(let immediate): return immediate
 1071|  87.0k|        case .f32Ceil(let immediate): return immediate
 1072|  87.0k|        case .f64Ceil(let immediate): return immediate
 1073|  87.0k|        case .f32Floor(let immediate): return immediate
 1074|  87.0k|        case .f64Floor(let immediate): return immediate
 1075|  87.0k|        case .f32Trunc(let immediate): return immediate
 1076|  87.0k|        case .f64Trunc(let immediate): return immediate
 1077|  87.0k|        case .f32Nearest(let immediate): return immediate
 1078|  87.0k|        case .f64Nearest(let immediate): return immediate
 1079|  87.0k|        case .f32Sqrt(let immediate): return immediate
 1080|  87.0k|        case .f64Sqrt(let immediate): return immediate
 1081|  87.0k|        case .f64PromoteF32(let immediate): return immediate
 1082|  87.0k|        case .f32DemoteF64(let immediate): return immediate
 1083|  87.0k|        case .select(let immediate): return immediate
 1084|  87.0k|        case .refNull(let immediate): return immediate
 1085|  87.0k|        case .refIsNull(let immediate): return immediate
 1086|  87.0k|        case .refFunc(let immediate): return immediate
 1087|  87.0k|        case .tableGet(let immediate): return immediate
 1088|  87.0k|        case .tableSet(let immediate): return immediate
 1089|  87.0k|        case .tableSize(let immediate): return immediate
 1090|  87.0k|        case .tableGrow(let immediate): return immediate
 1091|  87.0k|        case .tableFill(let immediate): return immediate
 1092|  87.0k|        case .tableCopy(let immediate): return immediate
 1093|  87.0k|        case .tableInit(let immediate): return immediate
 1094|  87.0k|        case .tableElementDrop(let immediate): return immediate
 1095|  87.0k|        case .onEnter(let immediate): return immediate
 1096|  87.0k|        case .onExit(let immediate): return immediate
 1097|  87.0k|        case .i32AtomicLoad(let immediate): return immediate
 1098|  87.0k|        case .i64AtomicLoad(let immediate): return immediate
 1099|  87.0k|        case .i32AtomicLoad8U(let immediate): return immediate
 1100|  87.0k|        case .i32AtomicLoad16U(let immediate): return immediate
 1101|  87.0k|        case .i64AtomicLoad8U(let immediate): return immediate
 1102|  87.0k|        case .i64AtomicLoad16U(let immediate): return immediate
 1103|  87.0k|        case .i64AtomicLoad32U(let immediate): return immediate
 1104|  87.0k|        case .i32AtomicStore(let immediate): return immediate
 1105|  87.0k|        case .i64AtomicStore(let immediate): return immediate
 1106|  87.0k|        case .i32AtomicStore8(let immediate): return immediate
 1107|  87.0k|        case .i32AtomicStore16(let immediate): return immediate
 1108|  87.0k|        case .i64AtomicStore8(let immediate): return immediate
 1109|  87.0k|        case .i64AtomicStore16(let immediate): return immediate
 1110|  87.0k|        case .i64AtomicStore32(let immediate): return immediate
 1111|  87.0k|        default: return nil
 1112|  87.0k|        }
 1113|  87.0k|    }
$s7WasmKit11InstructionO8opcodeIDs6UInt64Vvg:
 1119|  88.6k|    var opcodeID: OpcodeID {
 1120|  88.6k|        switch self {
 1121|  88.6k|        case .copyStack: return 0
 1122|  88.6k|        case .globalGet: return 1
 1123|  88.6k|        case .globalSet: return 2
 1124|  88.6k|        case .call: return 3
 1125|  88.6k|        case .compilingCall: return 4
 1126|  88.6k|        case .internalCall: return 5
 1127|  88.6k|        case .callIndirect: return 6
 1128|  88.6k|        case .resizeFrameHeader: return 7
 1129|  88.6k|        case .returnCall: return 8
 1130|  88.6k|        case .returnCallIndirect: return 9
 1131|  88.6k|        case .unreachable: return 10
 1132|  88.6k|        case .nop: return 11
 1133|  88.6k|        case .br: return 12
 1134|  88.6k|        case .brIf: return 13
 1135|  88.6k|        case .brIfNot: return 14
 1136|  88.6k|        case .brTable: return 15
 1137|  88.6k|        case ._return: return 16
 1138|  88.6k|        case .endOfExecution: return 17
 1139|  88.6k|        case .i32Load: return 18
 1140|  88.6k|        case .i64Load: return 19
 1141|  88.6k|        case .f32Load: return 20
 1142|  88.6k|        case .f64Load: return 21
 1143|  88.6k|        case .i32Load8S: return 22
 1144|  88.6k|        case .i32Load8U: return 23
 1145|  88.6k|        case .i32Load16S: return 24
 1146|  88.6k|        case .i32Load16U: return 25
 1147|  88.6k|        case .i64Load8S: return 26
 1148|  88.6k|        case .i64Load8U: return 27
 1149|  88.6k|        case .i64Load16S: return 28
 1150|  88.6k|        case .i64Load16U: return 29
 1151|  88.6k|        case .i64Load32S: return 30
 1152|  88.6k|        case .i64Load32U: return 31
 1153|  88.6k|        case .i32Store: return 32
 1154|  88.6k|        case .i64Store: return 33
 1155|  88.6k|        case .f32Store: return 34
 1156|  88.6k|        case .f64Store: return 35
 1157|  88.6k|        case .i32Store8: return 36
 1158|  88.6k|        case .i32Store16: return 37
 1159|  88.6k|        case .i64Store8: return 38
 1160|  88.6k|        case .i64Store16: return 39
 1161|  88.6k|        case .i64Store32: return 40
 1162|  88.6k|        case .memorySize: return 41
 1163|  88.6k|        case .memoryGrow: return 42
 1164|  88.6k|        case .memoryInit: return 43
 1165|  88.6k|        case .memoryDataDrop: return 44
 1166|  88.6k|        case .memoryCopy: return 45
 1167|  88.6k|        case .memoryFill: return 46
 1168|  88.6k|        case .const32: return 47
 1169|  88.6k|        case .const64: return 48
 1170|  88.6k|        case .i32Add: return 49
 1171|  88.6k|        case .i64Add: return 50
 1172|  88.6k|        case .i32Sub: return 51
 1173|  88.6k|        case .i64Sub: return 52
 1174|  88.6k|        case .i32Mul: return 53
 1175|  88.6k|        case .i64Mul: return 54
 1176|  88.6k|        case .i32And: return 55
 1177|  88.6k|        case .i64And: return 56
 1178|  88.6k|        case .i32Or: return 57
 1179|  88.6k|        case .i64Or: return 58
 1180|  88.6k|        case .i32Xor: return 59
 1181|  88.6k|        case .i64Xor: return 60
 1182|  88.6k|        case .i32Shl: return 61
 1183|  88.6k|        case .i64Shl: return 62
 1184|  88.6k|        case .i32ShrS: return 63
 1185|  88.6k|        case .i64ShrS: return 64
 1186|  88.6k|        case .i32ShrU: return 65
 1187|  88.6k|        case .i64ShrU: return 66
 1188|  88.6k|        case .i32Rotl: return 67
 1189|  88.6k|        case .i64Rotl: return 68
 1190|  88.6k|        case .i32Rotr: return 69
 1191|  88.6k|        case .i64Rotr: return 70
 1192|  88.6k|        case .i32DivS: return 71
 1193|  88.6k|        case .i64DivS: return 72
 1194|  88.6k|        case .i32DivU: return 73
 1195|  88.6k|        case .i64DivU: return 74
 1196|  88.6k|        case .i32RemS: return 75
 1197|  88.6k|        case .i64RemS: return 76
 1198|  88.6k|        case .i32RemU: return 77
 1199|  88.6k|        case .i64RemU: return 78
 1200|  88.6k|        case .i32Eq: return 79
 1201|  88.6k|        case .i64Eq: return 80
 1202|  88.6k|        case .i32Ne: return 81
 1203|  88.6k|        case .i64Ne: return 82
 1204|  88.6k|        case .i32LtS: return 83
 1205|  88.6k|        case .i64LtS: return 84
 1206|  88.6k|        case .i32LtU: return 85
 1207|  88.6k|        case .i64LtU: return 86
 1208|  88.6k|        case .i32GtS: return 87
 1209|  88.6k|        case .i64GtS: return 88
 1210|  88.6k|        case .i32GtU: return 89
 1211|  88.6k|        case .i64GtU: return 90
 1212|  88.6k|        case .i32LeS: return 91
 1213|  88.6k|        case .i64LeS: return 92
 1214|  88.6k|        case .i32LeU: return 93
 1215|  88.6k|        case .i64LeU: return 94
 1216|  88.6k|        case .i32GeS: return 95
 1217|  88.6k|        case .i64GeS: return 96
 1218|  88.6k|        case .i32GeU: return 97
 1219|  88.6k|        case .i64GeU: return 98
 1220|  88.6k|        case .i32Clz: return 99
 1221|  88.6k|        case .i64Clz: return 100
 1222|  88.6k|        case .i32Ctz: return 101
 1223|  88.6k|        case .i64Ctz: return 102
 1224|  88.6k|        case .i32Popcnt: return 103
 1225|  88.6k|        case .i64Popcnt: return 104
 1226|  88.6k|        case .i32Eqz: return 105
 1227|  88.6k|        case .i64Eqz: return 106
 1228|  88.6k|        case .i32WrapI64: return 107
 1229|  88.6k|        case .i64ExtendI32S: return 108
 1230|  88.6k|        case .i64ExtendI32U: return 109
 1231|  88.6k|        case .i32Extend8S: return 110
 1232|  88.6k|        case .i64Extend8S: return 111
 1233|  88.6k|        case .i32Extend16S: return 112
 1234|  88.6k|        case .i64Extend16S: return 113
 1235|  88.6k|        case .i64Extend32S: return 114
 1236|  88.6k|        case .i32TruncF32S: return 115
 1237|  88.6k|        case .i32TruncF32U: return 116
 1238|  88.6k|        case .i32TruncSatF32S: return 117
 1239|  88.6k|        case .i32TruncSatF32U: return 118
 1240|  88.6k|        case .i32TruncF64S: return 119
 1241|  88.6k|        case .i32TruncF64U: return 120
 1242|  88.6k|        case .i32TruncSatF64S: return 121
 1243|  88.6k|        case .i32TruncSatF64U: return 122
 1244|  88.6k|        case .i64TruncF32S: return 123
 1245|  88.6k|        case .i64TruncF32U: return 124
 1246|  88.6k|        case .i64TruncSatF32S: return 125
 1247|  88.6k|        case .i64TruncSatF32U: return 126
 1248|  88.6k|        case .i64TruncF64S: return 127
 1249|  88.6k|        case .i64TruncF64U: return 128
 1250|  88.6k|        case .i64TruncSatF64S: return 129
 1251|  88.6k|        case .i64TruncSatF64U: return 130
 1252|  88.6k|        case .f32ConvertI32S: return 131
 1253|  88.6k|        case .f32ConvertI32U: return 132
 1254|  88.6k|        case .f32ConvertI64S: return 133
 1255|  88.6k|        case .f32ConvertI64U: return 134
 1256|  88.6k|        case .f64ConvertI32S: return 135
 1257|  88.6k|        case .f64ConvertI32U: return 136
 1258|  88.6k|        case .f64ConvertI64S: return 137
 1259|  88.6k|        case .f64ConvertI64U: return 138
 1260|  88.6k|        case .f32ReinterpretI32: return 139
 1261|  88.6k|        case .f64ReinterpretI64: return 140
 1262|  88.6k|        case .i32ReinterpretF32: return 141
 1263|  88.6k|        case .i64ReinterpretF64: return 142
 1264|  88.6k|        case .f32Add: return 143
 1265|  88.6k|        case .f64Add: return 144
 1266|  88.6k|        case .f32Sub: return 145
 1267|  88.6k|        case .f64Sub: return 146
 1268|  88.6k|        case .f32Mul: return 147
 1269|  88.6k|        case .f64Mul: return 148
 1270|  88.6k|        case .f32Div: return 149
 1271|  88.6k|        case .f64Div: return 150
 1272|  88.6k|        case .f32Min: return 151
 1273|  88.6k|        case .f64Min: return 152
 1274|  88.6k|        case .f32Max: return 153
 1275|  88.6k|        case .f64Max: return 154
 1276|  88.6k|        case .f32CopySign: return 155
 1277|  88.6k|        case .f64CopySign: return 156
 1278|  88.6k|        case .f32Eq: return 157
 1279|  88.6k|        case .f64Eq: return 158
 1280|  88.6k|        case .f32Ne: return 159
 1281|  88.6k|        case .f64Ne: return 160
 1282|  88.6k|        case .f32Lt: return 161
 1283|  88.6k|        case .f64Lt: return 162
 1284|  88.6k|        case .f32Gt: return 163
 1285|  88.6k|        case .f64Gt: return 164
 1286|  88.6k|        case .f32Le: return 165
 1287|  88.6k|        case .f64Le: return 166
 1288|  88.6k|        case .f32Ge: return 167
 1289|  88.6k|        case .f64Ge: return 168
 1290|  88.6k|        case .f32Abs: return 169
 1291|  88.6k|        case .f64Abs: return 170
 1292|  88.6k|        case .f32Neg: return 171
 1293|  88.6k|        case .f64Neg: return 172
 1294|  88.6k|        case .f32Ceil: return 173
 1295|  88.6k|        case .f64Ceil: return 174
 1296|  88.6k|        case .f32Floor: return 175
 1297|  88.6k|        case .f64Floor: return 176
 1298|  88.6k|        case .f32Trunc: return 177
 1299|  88.6k|        case .f64Trunc: return 178
 1300|  88.6k|        case .f32Nearest: return 179
 1301|  88.6k|        case .f64Nearest: return 180
 1302|  88.6k|        case .f32Sqrt: return 181
 1303|  88.6k|        case .f64Sqrt: return 182
 1304|  88.6k|        case .f64PromoteF32: return 183
 1305|  88.6k|        case .f32DemoteF64: return 184
 1306|  88.6k|        case .select: return 185
 1307|  88.6k|        case .refNull: return 186
 1308|  88.6k|        case .refIsNull: return 187
 1309|  88.6k|        case .refFunc: return 188
 1310|  88.6k|        case .tableGet: return 189
 1311|  88.6k|        case .tableSet: return 190
 1312|  88.6k|        case .tableSize: return 191
 1313|  88.6k|        case .tableGrow: return 192
 1314|  88.6k|        case .tableFill: return 193
 1315|  88.6k|        case .tableCopy: return 194
 1316|  88.6k|        case .tableInit: return 195
 1317|  88.6k|        case .tableElementDrop: return 196
 1318|  88.6k|        case .onEnter: return 197
 1319|  88.6k|        case .onExit: return 198
 1320|  88.6k|        case .breakpoint: return 199
 1321|  88.6k|        case .i32AtomicLoad: return 200
 1322|  88.6k|        case .i64AtomicLoad: return 201
 1323|  88.6k|        case .i32AtomicLoad8U: return 202
 1324|  88.6k|        case .i32AtomicLoad16U: return 203
 1325|  88.6k|        case .i64AtomicLoad8U: return 204
 1326|  88.6k|        case .i64AtomicLoad16U: return 205
 1327|  88.6k|        case .i64AtomicLoad32U: return 206
 1328|  88.6k|        case .i32AtomicStore: return 207
 1329|  88.6k|        case .i64AtomicStore: return 208
 1330|  88.6k|        case .i32AtomicStore8: return 209
 1331|  88.6k|        case .i32AtomicStore16: return 210
 1332|  88.6k|        case .i64AtomicStore8: return 211
 1333|  88.6k|        case .i64AtomicStore16: return 212
 1334|  88.6k|        case .i64AtomicStore32: return 213
 1335|  88.6k|        }
 1336|  88.6k|    }

$s7WasmKit5LVRegVyACs5Int16VcfC:
   20|  83.6k|    init(_ value: VReg) {
   21|  83.6k|        // Pre-shift to avoid runtime shift operation by using
   22|  83.6k|        // unused high bits.
   23|  83.6k|        self.value = Int32(value) * Int32(MemoryLayout<StackSlot>.size)
   24|  83.6k|    }
$s7WasmKit6LLVRegVyACs5Int16VcfC:
   40|  6.54k|    init(_ value: VReg) {
   41|  6.54k|        // Pre-shift to avoid runtime shift operation by using
   42|  6.54k|        // unused high bits.
   43|  6.54k|        self.value = Int64(value) * Int64(MemoryLayout<StackSlot>.size)
   44|  6.54k|    }
$s7WasmKit20InstructionImmediatePAAE4emit2toyys6UInt64Vc_tF:
   79|  76.3k|    func emit(to emitSlot: @escaping (CodeSlot) -> Void) {
   80|  76.3k|        Self.emit { buildCodeSlot in
   81|  76.3k|            emitSlot(buildCodeSlot(self))
   82|  76.3k|        }
   83|  76.3k|    }
$s7WasmKit20InstructionImmediatePAAE4emit2toyys6UInt64Vc_tFyAGxXEcfU_:
   80|  98.6k|        Self.emit { buildCodeSlot in
   81|  98.6k|            emitSlot(buildCodeSlot(self))
   82|  98.6k|        }
$ss5Int32V7WasmKitE4load4fromABSpys6UInt64VGz_tFZ:
   96|  2.26k|    static func load(from pc: inout Pc) -> Self {
   97|  2.26k|        Int32(bitPattern: UInt32(pc.read(UInt64.self)))
   98|  2.26k|    }
$ss5Int32V7WasmKitE4emit2toyys6UInt64VABXEc_tFZ:
   99|  4.48k|    static func emit(to emitSlot: @escaping ((Self) -> CodeSlot) -> Void) {
  100|  4.48k|        emitSlot { CodeSlot(UInt32(bitPattern: $0)) }
  101|  4.48k|    }
$ss5Int32V7WasmKitE4emit2toyys6UInt64VABXEc_tFZAgBXEfU_:
  100|  2.11k|        emitSlot { CodeSlot(UInt32(bitPattern: $0)) }
$s7WasmKit11InstructionO14RefNullOperandV6result4typeAEs5Int16V_0A5Types13ReferenceTypeOtcfC:
  107|     22|    init(result: VReg, type: ReferenceType) {
  108|     22|        self.init(result: result, rawType: type.rawValue)
  109|     22|    }
$s7WasmKit11InstructionO14RefNullOperandV4type0A5Types13ReferenceTypeOvg:
  111|  3.54k|    var type: ReferenceType {
  112|  3.54k|        ReferenceType(rawValue: rawType).unsafelyUnwrapped
  113|  3.54k|    }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV3reg6globalAeA6LLVRegV_AA12EntityHandleVyAA0dK0VGtcfC:
  117|  6.50k|    init(reg: LLVReg, global: InternalGlobal) {
  118|  6.50k|        self.init(reg: reg, rawGlobal: UInt64(UInt(bitPattern: global.bitPattern)))
  119|  6.50k|    }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV6globalAA12EntityHandleVyAA0dI0VGvg:
  120|  81.4k|    var global: InternalGlobal {
  121|  81.4k|        InternalGlobal(bitPattern: UInt(rawGlobal)).unsafelyUnwrapped
  122|  81.4k|    }
$s7WasmKit11InstructionO14BrTableOperandV11baseAddress5count5indexAESPyAE5EntryVG_s6UInt16Vs5Int16VtcfC:
  130|    421|    init(baseAddress: UnsafePointer<Entry>, count: UInt16, index: VReg) {
  131|    421|        self.init(rawBaseAddress: UInt64(UInt(bitPattern: baseAddress)), count: count, index: index)
  132|    421|    }
$s7WasmKit11InstructionO14BrTableOperandV11baseAddressSPyAE5EntryVGvg:
  134|  11.8k|    var baseAddress: UnsafePointer<Entry> {
  135|  11.8k|        UnsafePointer(bitPattern: UInt(rawBaseAddress)).unsafelyUnwrapped
  136|  11.8k|    }
$s7WasmKit11InstructionO11CallOperandV6callee8spAddendAeA16InternalFunctionV_s5Int16VtcfC:
  140|  2.80k|    init(callee: InternalFunction, spAddend: VReg) {
  141|  2.80k|        self.init(rawCallee: UInt64(UInt(bitPattern: callee.bitPattern)), spAddend: spAddend)
  142|  2.80k|    }
$s7WasmKit11InstructionO11CallOperandV6calleeAA16InternalFunctionVvg:
  144|  1.04M|    var callee: InternalFunction {
  145|  1.04M|        InternalFunction(bitPattern: Int(bitPattern: UInt(rawCallee)))
  146|  1.04M|    }
$s7WasmKit11InstructionO17ReturnCallOperandV6calleeAeA16InternalFunctionV_tcfC:
  161|      4|    init(callee: InternalFunction) {
  162|      4|        self.init(rawCallee: UInt64(UInt(bitPattern: callee.bitPattern)))
  163|      4|    }
$s7WasmKit11InstructionO17ReturnCallOperandV6calleeAA16InternalFunctionVvg:
  165|    159|    var callee: InternalFunction {
  166|    159|        InternalFunction(bitPattern: Int(bitPattern: UInt(rawCallee)))
  167|    159|    }
$s7WasmKit11InstructionO8headSlot14threadingModels6UInt64VAA19EngineConfigurationV09ThreadingG0O_tF:
  221|  88.6k|    func headSlot(threadingModel: EngineConfiguration.ThreadingModel) -> CodeSlot {
  222|  88.6k|        switch threadingModel {
  223|  88.6k|        case .direct:
  224|  88.6k|            return CodeSlot(handler)
  225|  88.6k|        case .token:
  226|      0|            return opcodeID
  227|  88.6k|        }
  228|  88.6k|    }

$s7WasmKit9ExecutionV28throwOutOfBoundsMemoryAccesss5NeverOyKF:
    4|     27|    @inline(never) func throwOutOfBoundsMemoryAccess() throws -> Never {
    5|     27|        throw Trap(.memoryOutOfBounds)
    6|     27|    }
$s7WasmKit9ExecutionV10memoryLoad2sp2md2ms11loadOperand0I2As11castToValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxmAA07UntypedN0VxXEtKs17FixedWidthIntegerRzlF:
    9|  1.12M|    ) throws {
   10|  1.12M|        let length = UInt64(T.bitWidth) / 8
   11|  1.12M|        let i = sp[loadOperand.pointer].asAddressOffset()
   12|  1.12M|        let (endAddress, isEndOverflow) = i.addingReportingOverflow(length &+ loadOperand.offset)
   13|  1.12M|        if _fastPath(!isEndOverflow && endAddress <= ms) {
   14|  1.12M|            let address = loadOperand.offset + i
   15|  1.12M|            let loaded = md.unsafelyUnwrapped.loadUnaligned(fromByteOffset: Int(address), as: T.self)
   16|  1.12M|            sp[loadOperand.result] = castToValue(loaded)
   17|  1.12M|        } else {
   18|     23|            try throwOutOfBoundsMemoryAccess()
   19|  1.12M|        }
   20|  1.12M|    }
$s7WasmKit9ExecutionV10memoryLoad2sp2md2ms11loadOperand0I2As11castToValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxmAA07UntypedN0VxXEtKs17FixedWidthIntegerRzlFSbyKXEfu_:
   13|  1.12M|        if _fastPath(!isEndOverflow && endAddress <= ms) {
$s7WasmKit9ExecutionV11memoryStore2sp2md2ms12storeOperand13castFromValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxAA07UntypedM0VXEtKs17FixedWidthIntegerRzlF:
   23|  33.2k|    mutating func memoryStore<T: FixedWidthInteger>(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand, castFromValue: (UntypedValue) -> T) throws {
   24|  33.2k|        let value = sp[storeOperand.value]
   25|  33.2k|        let length = UInt64(T.bitWidth) / 8
   26|  33.2k|        let i = sp[storeOperand.pointer].asAddressOffset()
   27|  33.2k|        let address = storeOperand.offset + i
   28|  33.2k|        let (endAddress, isEndOverflow) = i.addingReportingOverflow(length &+ storeOperand.offset)
   29|  33.2k|        if _fastPath(!isEndOverflow && endAddress <= ms) {
   30|  33.2k|            let toStore = castFromValue(value)
   31|  33.2k|            md.unsafelyUnwrapped.advanced(by: Int(address))
   32|  33.2k|                .bindMemory(to: T.self, capacity: 1).pointee = toStore.littleEndian
   33|  33.2k|        } else {
   34|      4|            try throwOutOfBoundsMemoryAccess()
   35|  33.2k|        }
   36|  33.2k|    }
$s7WasmKit9ExecutionV11memoryStore2sp2md2ms12storeOperand13castFromValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxAA07UntypedM0VXEtKs17FixedWidthIntegerRzlFSbyKXEfu_:
   29|  33.2k|        if _fastPath(!isEndOverflow && endAddress <= ms) {
$s7WasmKit9ExecutionV10memorySize2sp9immediateySpys6UInt64VG_AA11InstructionO06MemoryE7OperandVtF:
   38|   432k|    mutating func memorySize(sp: Sp, immediate: Instruction.MemorySizeOperand) {
   39|   432k|        let memory = currentInstance(sp: sp).memories[Int(immediate.memoryIndex)]
   40|   432k|
   41|   432k|        let pageCount = memory.data.count / MemoryEntity.pageSize
   42|   432k|        let value: Value = memory.limit.isMemory64 ? .i64(UInt64(pageCount)) : .i32(UInt32(pageCount))
   43|   432k|        sp[immediate.result] = UntypedValue(value)
   44|   432k|    }
$s7WasmKit9ExecutionV10memoryGrow2sp2md2ms9immediateySpys6UInt64VG_SvSgzSizAA11InstructionO06MemoryE7OperandVtKF:
   46|  54.0k|    mutating func memoryGrow(sp: Sp, md: inout Md, ms: inout Ms, immediate: Instruction.MemoryGrowOperand) throws {
   47|  54.0k|        let memory = currentInstance(sp: sp).memories[Int(immediate.memory)]
   48|  54.0k|        try memory.withValue { memory in
   49|  54.0k|            let isMemory64 = memory.limit.isMemory64
   50|  54.0k|
   51|  54.0k|            let value = sp[immediate.delta]
   52|  54.0k|            let pageCount: UInt64 = isMemory64 ? value.i64 : UInt64(value.i32)
   53|  54.0k|            let oldPageCount = try memory.grow(by: Int(pageCount), resourceLimiter: store.value.resourceLimiter)
   54|  54.0k|            CurrentMemory.assign(md: &md, ms: &ms, memory: &memory)
   55|  54.0k|            sp[immediate.result] = UntypedValue(oldPageCount)
   56|  54.0k|        }
   57|  54.0k|    }
$s7WasmKit9ExecutionV10memoryGrow2sp2md2ms9immediateySpys6UInt64VG_SvSgzSizAA11InstructionO06MemoryE7OperandVtKFyAA0L6EntityVzKXEfU_:
   48|  54.0k|        try memory.withValue { memory in
   49|  54.0k|            let isMemory64 = memory.limit.isMemory64
   50|  54.0k|
   51|  54.0k|            let value = sp[immediate.delta]
   52|  54.0k|            let pageCount: UInt64 = isMemory64 ? value.i64 : UInt64(value.i32)
   53|  54.0k|            let oldPageCount = try memory.grow(by: Int(pageCount), resourceLimiter: store.value.resourceLimiter)
   54|  54.0k|            CurrentMemory.assign(md: &md, ms: &ms, memory: &memory)
   55|  54.0k|            sp[immediate.result] = UntypedValue(oldPageCount)
   56|  54.0k|        }

$s7WasmKit9ExecutionV9globalGet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtF:
    4|  75.5k|    mutating func globalGet(sp: Sp, immediate: Instruction.GlobalAndVRegOperand) {
    5|  75.5k|        immediate.global.withValue {
    6|  75.5k|            sp[immediate.reg] = $0.rawValue
    7|  75.5k|        }
    8|  75.5k|    }
$s7WasmKit9ExecutionV9globalGet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtFyAA0J6EntityVzXEfU_:
    5|  75.5k|        immediate.global.withValue {
    6|  75.5k|            sp[immediate.reg] = $0.rawValue
    7|  75.5k|        }
$s7WasmKit9ExecutionV9globalSet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtF:
    9|  5.89k|    mutating func globalSet(sp: Sp, immediate: Instruction.GlobalAndVRegOperand) {
   10|  5.89k|        let value = sp[immediate.reg]
   11|  5.89k|        immediate.global.withValue { $0.rawValue = value }
   12|  5.89k|    }
$s7WasmKit9ExecutionV9globalSet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtFyAA0J6EntityVzXEfU_:
   11|  5.89k|        immediate.global.withValue { $0.rawValue = value }
$s7WasmKit9ExecutionV9copyStack2sp9immediateySpys6UInt64VG_AA11InstructionO04CopyE7OperandVtF:
   14|   116k|    mutating func copyStack(sp: Sp, immediate: Instruction.CopyStackOperand) {
   15|   116k|        sp[immediate.dest] = sp[immediate.source]
   16|   116k|    }
$s7WasmKit9ExecutionV7refNull2sp9immediateySpys6UInt64VG_AA11InstructionO03RefE7OperandVtF:
   22|  3.54k|    mutating func refNull(sp: Sp, immediate: Instruction.RefNullOperand) {
   23|  3.54k|        let value: Value
   24|  3.54k|        switch immediate.type {
   25|  3.54k|        case .externRef:
   26|  2.22k|            value = .ref(.extern(nil))
   27|  3.54k|        case .funcRef:
   28|  1.32k|            value = .ref(.function(nil))
   29|  3.54k|        }
   30|  3.54k|        sp[immediate.result] = UntypedValue(value)
   31|  3.54k|    }
$s7WasmKit9ExecutionV7const322sp9immediateySpys6UInt64VG_AA11InstructionO14Const32OperandVtF:
   53|  64.6k|    mutating func const32(sp: Sp, immediate: Instruction.Const32Operand) {
   54|  64.6k|        sp[immediate.result] = UntypedValue(storage32: immediate.value)
   55|  64.6k|    }
$s7WasmKit9ExecutionV7const642sp9immediateySpys6UInt64VG_AA11InstructionO14Const64OperandVtF:
   57|    320|    mutating func const64(sp: Sp, immediate: Instruction.Const64Operand) {
   58|    320|        sp[immediate.result] = immediate.value
   59|    320|    }
$s7WasmKit9ExecutionV6select2sp9immediateySpys6UInt64VG_AA11InstructionO13SelectOperandVtF:
   65|  1.65k|    mutating func select(sp: Sp, immediate: Instruction.SelectOperand) {
   66|  1.65k|        let flag = sp[i32: immediate.condition]
   67|  1.65k|        let selected = flag != 0 ? immediate.onTrue : immediate.onFalse
   68|  1.65k|        let value = sp[selected]
   69|  1.65k|        sp[immediate.result] = value
   70|  1.65k|    }

$s7WasmKit12NameRegistryV13functionNames33_41338D6D703C89393C72591DE351AF00LLSDyAA16InternalFunctionVSSGvpfi:
    7|    591|    private var functionNames: [InternalFunction: String] = [:]
$s7WasmKit12NameRegistryV13materializers33_41338D6D703C89393C72591DE351AF00LLSayyACzKcGvpfi:
    8|    591|    private var materializers: [(inout NameRegistry) throws -> Void] = []
$s7WasmKit12NameRegistryVACycfC:
   10|    591|    init() {}
$s7WasmKit12NameRegistryV19materializeIfNeeded33_41338D6D703C89393C72591DE351AF00LLyyKF:
   39|   230k|    private mutating func materializeIfNeeded() throws {
   40|   230k|        guard !materializers.isEmpty else { return }
   41|      0|        for materialize in materializers {
   42|      0|            try materialize(&self)
   43|      0|        }
   44|      0|        materializers = []
   45|      0|    }
$s7WasmKit12NameRegistryV6lookupySSSgAA16InternalFunctionVKF:
   47|   230k|    mutating func lookup(_ addr: InternalFunction) throws -> String? {
   48|   230k|        try materializeIfNeeded()
   49|   230k|        return functionNames[addr]
   50|   230k|    }
$s7WasmKit12NameRegistryV11symbolicateySSAA16InternalFunctionVF:
   52|   230k|    mutating func symbolicate(_ function: InternalFunction) -> String {
   53|   230k|        if let name = try? lookup(function) {
   54|      0|            return name
   55|   230k|        }
   56|   230k|        // Fallback
   57|   230k|        if function.isWasm {
   58|   230k|            return "wasm function[\(function.wasm.index)]"
   59|   230k|        } else {
   60|      0|            return "unknown host function"
   61|      0|        }
   62|   230k|    }

$s7WasmKit5StoreC12nameRegistryAA04NameE0Vvpfi:
    7|    591|    var nameRegistry = NameRegistry()
$s7WasmKit5StoreC15resourceLimiterAA08ResourceE0_pvpfi:
    9|    591|    public var resourceLimiter: ResourceLimiter = DefaultResourceLimiter()
$s7WasmKit5StoreC6engineAcA6EngineC_tcfc:
   22|    591|    public init(engine: Engine) {
   23|    591|        self.engine = engine
   24|    591|        self.allocator = StoreAllocator(funcTypeInterner: engine.funcTypeInterner)
   25|    591|    }

$s7WasmKit13BumpAllocatorC5pages33_8EACE635DD16791045BB0F1DDDCAD7E4LLSaySryxGGvpfi:
    5|  5.31k|    private var pages: [UnsafeMutableBufferPointer<T>] = []
$s7WasmKit13BumpAllocatorC13currentOffset33_8EACE635DD16791045BB0F1DDDCAD7E4LLSivpfi:
    7|  5.31k|    private var currentOffset: Int = 0
$s7WasmKit13BumpAllocatorC15initialCapacityACyxGSi_tcfc:
   11|  5.31k|    init(initialCapacity: Int) {
   12|  5.31k|        currentPageSize = initialCapacity
   13|  5.31k|        currentPage = .allocate(capacity: currentPageSize)
   14|  5.31k|    }
$s7WasmKit13BumpAllocatorCfd:
   16|  5.31k|    deinit {
   17|  5.31k|        for page in pages {
   18|      0|            page.deinitialize().deallocate()
   19|  5.31k|        }
   20|  9.45k|        for i in 0..<currentOffset {
   21|  9.45k|            currentPage.deinitializeElement(at: i)
   22|  9.45k|        }
   23|  5.31k|        currentPage.deallocate()
   24|  5.31k|    }
$s7WasmKit13BumpAllocatorC8allocate12initializingSpyxGx_tF:
   39|  8.87k|    func allocate(initializing value: T) -> UnsafeMutablePointer<T> {
   40|  8.87k|        let pointer = allocate()
   41|  8.87k|        pointer.initialize(to: value)
   42|  8.87k|        return pointer
   43|  8.87k|    }
$s7WasmKit13BumpAllocatorC8allocateSpyxGyF:
   51|  9.45k|    func allocate() -> UnsafeMutablePointer<T> {
   52|  9.45k|        if currentOffset == currentPageSize {
   53|      0|            startNewPage()
   54|      0|        }
   55|  9.45k|        let pointer = currentPage.baseAddress!.advanced(by: currentOffset)
   56|  9.45k|        currentOffset += 1
   57|  9.45k|        return pointer
   58|  9.45k|    }
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC12arrayBuffersSaySvGvpfi:
   68|    591|    private var arrayBuffers: [UnsafeMutableRawPointer] = []
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC8allocate5countSryxGSi_tlF:
   73|  3.53k|    func allocate<T>(count: Int) -> UnsafeMutableBufferPointer<T> {
   74|  3.53k|        // We only support trivial types for now. Otherwise, we have to track the element type
   75|  3.53k|        // until the deallocation of this allocator.
   76|  3.53k|        assert(_isPOD(T.self), "ImmutableArrayAllocator only supports trivial element types.")
   77|  3.53k|        let buffer = UnsafeMutableBufferPointer<T>.allocate(capacity: count)
   78|  3.53k|        // If count is zero, don't manage such empty buffer.
   79|  3.53k|        if let baseAddress = buffer.baseAddress {
   80|  3.53k|            arrayBuffers.append(baseAddress)
   81|  3.53k|        }
   82|  3.53k|        return buffer
   83|  3.53k|    }
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC8allocate5countSryxGSi_tlFSbyXEfu_:
   76|  3.53k|        assert(_isPOD(T.self), "ImmutableArrayAllocator only supports trivial element types.")
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLCfd:
   85|    591|    deinit {
   86|  3.53k|        for buffer in arrayBuffers {
   87|  3.53k|            buffer.deallocate()
   88|  3.53k|        }
   89|    591|    }
$s7WasmKit14ImmutableArrayV9allocator5count10initializeACyxGAA0cD9Allocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC_SiySryxGKXEtKcAILlfC:
  102|  3.53k|    fileprivate init(allocator: ImmutableArrayAllocator, count: Int, initialize: (UnsafeMutableBufferPointer<T>) throws -> Void) rethrows {
  103|  3.53k|        let mutable: UnsafeMutableBufferPointer<T> = allocator.allocate(count: count)
  104|  3.53k|        try initialize(mutable)
  105|  3.53k|        buffer = UnsafeBufferPointer(mutable)
  106|  3.53k|    }
$s7WasmKit14ImmutableArrayVyxSicig:
  114|   495k|    subscript(index: Int) -> T {
  115|   495k|        buffer[index]
  116|   495k|    }
$s7WasmKit14ImmutableArrayV10validatingxSi_tcAA17ValidatableEntityRzluig:
  124|  35.4k|        get throws {
  125|  35.4k|            return try self[validating: index, T.createOutOfBoundsError]
  126|  35.4k|        }
$s7WasmKit14ImmutableArrayV10validatingxSi_tcAA17ValidatableEntityRzluigs5Error_pSi_SitYbcfu_:
  125|      8|            return try self[validating: index, T.createOutOfBoundsError]
$s7WasmKit14ImmutableArrayV10validating_xSi_s5Error_pSi_SitXEtcig:
  132|  35.4k|        get throws {
  133|  35.4k|            guard index >= 0 && index < buffer.count else {
  134|      8|                throw createError(index, buffer.count)
  135|  35.4k|            }
  136|  35.4k|            return buffer[index]
  137|  35.4k|        }
$s7WasmKit14ImmutableArrayV10validating_xSi_s5Error_pSi_SitXEtcigSbyKXEfu_:
  133|  35.4k|            guard index >= 0 && index < buffer.count else {
$s7WasmKit14ImmutableArrayV5firstxSgvg:
  141|    486|    var first: T? { buffer.first }
$s7WasmKit14ImmutableArrayV12makeIteratorSR0F0Vyx_GyF:
  151|    676|    func makeIterator() -> Iterator {
  152|    676|        buffer.makeIterator()
  153|    676|    }
$s7WasmKit8InternerCACyxGycfc:
  174|    591|    init() {
  175|    591|        itemByIntern = []
  176|    591|        internByItem = [:]
  177|    591|    }
$s7WasmKit8InternerC6internyAA8InternedVyxGxF:
  181|  2.72k|    func intern(_ item: Item) -> Interned<Item> {
  182|  2.72k|        if let interned = internByItem[item] {
  183|  1.62k|            return interned
  184|  1.62k|        }
  185|  1.10k|        let id = itemByIntern.count
  186|  1.10k|        itemByIntern.append(item)
  187|  1.10k|        let newInterned = Interned<Item>(id: Item.Offset(id))
  188|  1.10k|        internByItem[item] = newInterned
  189|  1.10k|        return newInterned
  190|  2.72k|    }
$s7WasmKit8InternerC7resolveyxAA8InternedVyxGF:
  193|  4.40k|    func resolve(_ interned: Interned<Item>) -> Item {
  194|  4.40k|        return itemByIntern[Int(interned.id)]
  195|  4.40k|    }
$s7WasmKit14StoreAllocatorC16funcTypeInternerAcA0G0Cy0A5Types08FunctionF0VG_tcfc:
  224|    591|    init(funcTypeInterner: Interner<FunctionType>) {
  225|    591|        instances = BumpAllocator(initialCapacity: 2)
  226|    591|        functions = BumpAllocator(initialCapacity: 64)
  227|    591|        hostFunctions = BumpAllocator(initialCapacity: 32)
  228|    591|        codes = BumpAllocator(initialCapacity: 64)
  229|    591|        tables = BumpAllocator(initialCapacity: 2)
  230|    591|        memories = BumpAllocator(initialCapacity: 2)
  231|    591|        globals = BumpAllocator(initialCapacity: 256)
  232|    591|        elements = BumpAllocator(initialCapacity: 2)
  233|    591|        datas = BumpAllocator(initialCapacity: 64)
  234|    591|        arrayAllocator = ImmutableArrayAllocator()
  235|    591|        iseqAllocator = ISeqAllocator()
  236|    591|        self.funcTypeInterner = funcTypeInterner
  237|    591|    }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF:
  255|    589|    ) throws -> InternalInstance {
  256|    589|        // Step 1 of module allocation algorithm, according to Wasm 2.0 spec.
  257|    589|
  258|    589|        let types = module.types
  259|    589|        var importedFunctions: [InternalFunction] = []
  260|    589|        var importedTables: [InternalTable] = []
  261|    589|        var importedMemories: [InternalMemory] = []
  262|    589|        var importedGlobals: [InternalGlobal] = []
  263|    589|
  264|    589|        // External values imported in this module should be included in corresponding index spaces before definitions
  265|    589|        // local to to the module are added.
  266|    589|        for importEntry in module.imports {
  267|     75|            guard let (external, allocator) = imports.lookup(module: importEntry.module, name: importEntry.name) else {
  268|      0|                throw ImportError(.missing(moduleName: importEntry.module, externalName: importEntry.name))
  269|     75|            }
  270|     75|            guard allocator === self else {
  271|      0|                throw ImportError(.importedEntityFromDifferentStore(importEntry))
  272|     75|            }
  273|     75|
  274|     75|            switch (importEntry.descriptor, external) {
  275|     75|            case (.function(let typeIndex), .function(let externalFunc)):
  276|      2|                let type = externalFunc.type
  277|      2|                guard typeIndex < module.types.count else {
  278|      0|                    throw ValidationError(.indexOutOfBounds("type", typeIndex, max: module.types.count))
  279|      2|                }
  280|      2|                let expected = module.types[Int(typeIndex)]
  281|      2|                guard engine.internType(expected) == type else {
  282|      0|                    let actual = engine.resolveType(type)
  283|      0|                    throw ImportError(.incompatibleFunctionType(importEntry, actual: actual, expected: expected))
  284|      2|                }
  285|      2|                importedFunctions.append(externalFunc)
  286|     75|
  287|     75|            case (.table(let tableType), .table(let table)):
  288|      0|                if let max = table.limits.max, max < tableType.limits.min {
  289|      0|                    throw ImportError(.incompatibleTableType(importEntry, actual: tableType, expected: table.tableType))
  290|      0|                }
  291|      0|                importedTables.append(table)
  292|     75|
  293|     75|            case (.memory(let memoryType), .memory(let memory)):
  294|     73|                if let max = memory.limit.max, max < memoryType.min {
  295|      0|                    throw ImportError(.incompatibleMemoryType(importEntry, actual: memoryType, expected: memory.limit))
  296|     73|                }
  297|     73|                importedMemories.append(memory)
  298|     75|
  299|     75|            case (.global(let globalType), .global(let global)):
  300|      0|                guard globalType == global.globalType else {
  301|      0|                    throw ImportError(.incompatibleGlobalType(importEntry, actual: global.globalType, expected: globalType))
  302|      0|                }
  303|      0|                importedGlobals.append(global)
  304|     75|
  305|     75|            default:
  306|      0|                throw ImportError(.incompatibleType(importEntry, entity: external))
  307|     75|            }
  308|    589|        }
  309|    589|
  310|    589|        func allocateEntities<EntityHandle, Internals: Collection>(
  311|    589|            imports: [EntityHandle],
  312|    589|            internals: Internals, allocateHandle: (Internals.Element, Int) throws -> EntityHandle
  313|    589|        ) rethrows -> ImmutableArray<EntityHandle> {
  314|    589|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|    589|                for (index, importedEntity) in imports.enumerated() {
  316|    589|                    buffer.initializeElement(at: index, to: importedEntity)
  317|    589|                }
  318|    589|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|    589|                    let index = imports.count + internalIndex
  320|    589|                    let allocated = try allocateHandle(internalEntity, index)
  321|    589|                    buffer.initializeElement(at: index, to: allocated)
  322|    589|                }
  323|    589|            }
  324|    589|        }
  325|    589|
  326|    589|        // Uninitialized instance
  327|    589|        let instancePointer = instances.allocate()
  328|    589|        var instanceInitialized = false
  329|    589|        defer {
  330|    589|            // If the instance is not initialized due to an exception, initialize it with an empty instance
  331|    589|            // to allow bump deallocation by the bump allocator.
  332|    589|            // This is not optimal as it leaves an empty instance without deallocating the space but
  333|    589|            // good at code simplicity.
  334|    589|            if !instanceInitialized {
  335|    589|                instancePointer.initialize(to: .empty)
  336|    589|            }
  337|    589|        }
  338|    589|        let instanceHandle = InternalInstance(unsafe: instancePointer)
  339|    589|
  340|    589|        // Step 2.
  341|    589|        let functions = allocateEntities(
  342|    589|            imports: importedFunctions,
  343|    589|            internals: module.functions,
  344|    589|            allocateHandle: { f, index in
  345|    589|                allocate(function: f, index: FunctionIndex(index), instance: instanceHandle, engine: engine)
  346|    589|            }
  347|    589|        )
  348|    589|
  349|    589|        // Step 3.
  350|    589|        let tables = try allocateEntities(
  351|    589|            imports: importedTables,
  352|    589|            internals: module.internalTables,
  353|    589|            allocateHandle: { t, _ in try allocate(tableType: t, resourceLimiter: resourceLimiter) }
  354|    589|        )
  355|    589|
  356|    589|        // Step 4.
  357|    589|        let memories = try allocateEntities(
  358|    589|            imports: importedMemories,
  359|    589|            internals: module.internalMemories,
  360|    589|            allocateHandle: { m, _ in try allocate(memoryType: m, resourceLimiter: resourceLimiter) }
  361|    589|        )
  362|    589|
  363|    589|        var functionRefs: Set<InternalFunction> = []
  364|    589|        // Step 5.
  365|    589|        let constEvalContext = ConstEvaluationContext(
  366|    589|            functions: functions,
  367|    589|            globals: importedGlobals.map(\.value),
  368|    589|            onFunctionReferenced: { function in
  369|    589|                functionRefs.insert(function)
  370|    589|            }
  371|    589|        )
  372|    589|
  373|    589|        let globals = try allocateEntities(
  374|    589|            imports: importedGlobals,
  375|    589|            internals: module.globals,
  376|    589|            allocateHandle: { global, _ in
  377|    589|                let initialValue = try global.initializer.evaluate(
  378|    589|                    context: constEvalContext, expectedType: global.type.valueType
  379|    589|                )
  380|    589|                return try allocate(globalType: global.type, initialValue: initialValue)
  381|    589|            }
  382|    589|        )
  383|    589|
  384|    589|        // Step 6.
  385|    589|        let elements = try ImmutableArray<InternalElementSegment>(allocator: arrayAllocator, count: module.elements.count) { buffer in
  386|    589|            for (index, element) in module.elements.enumerated() {
  387|    589|                // TODO: Avoid evaluating element expr twice in `Module.instantiate` and here.
  388|    589|                var references = try element.evaluateInits(context: constEvalContext)
  389|    589|                switch element.mode {
  390|    589|                case .active, .declarative:
  391|    589|                    // active & declarative segments are unavailable at runtime
  392|    589|                    references = []
  393|    589|                case .passive: break
  394|    589|                }
  395|    589|                let handle = allocate(elementType: element.type, references: references)
  396|    589|                buffer.initializeElement(at: index, to: handle)
  397|    589|            }
  398|    589|        }
  399|    589|
  400|    589|        // Step 13.
  401|    589|        let dataSegments = ImmutableArray<InternalDataSegment>(allocator: arrayAllocator, count: module.data.count) { buffer in
  402|    589|            for (index, datum) in module.data.enumerated() {
  403|    589|                let segment: InternalDataSegment
  404|    589|                switch datum {
  405|    589|                case .passive(let bytes):
  406|    589|                    segment = allocate(bytes: bytes)
  407|    589|                case .active:
  408|    589|                    // Active segments are copied into memories while instantiation
  409|    589|                    // They are semantically dropped after instantiation, so we don't
  410|    589|                    // need them at runtime
  411|    589|                    segment = allocate(bytes: [])
  412|    589|                }
  413|    589|                buffer.initializeElement(at: index, to: segment)
  414|    589|            }
  415|    589|        }
  416|    589|
  417|    589|        func createExportValue(_ export: WasmParser.Export) throws -> InternalExternalValue {
  418|    589|            switch export.descriptor {
  419|    589|            case .function(let index):
  420|    589|                let handle = try functions[validating: Int(index)]
  421|    589|                return .function(handle)
  422|    589|            case .table(let index):
  423|    589|                let handle = try tables[validating: Int(index)]
  424|    589|                return .table(handle)
  425|    589|            case .memory(let index):
  426|    589|                let handle = try memories[validating: Int(index)]
  427|    589|                return .memory(handle)
  428|    589|            case .global(let index):
  429|    589|                let handle = try globals[validating: Int(index)]
  430|    589|                return .global(handle)
  431|    589|            }
  432|    589|        }
  433|    589|
  434|    589|        let exports: [String: InternalExternalValue] = try module.exports.reduce(into: [:]) { result, export in
  435|    589|            guard result[export.name] == nil else {
  436|    589|                throw ValidationError(.duplicateExportName(name: export.name))
  437|    589|            }
  438|    589|            result[export.name] = try createExportValue(export)
  439|    589|        }
  440|    589|
  441|    589|        // Steps 20-21.
  442|    589|        let instanceEntity = InstanceEntity(
  443|    589|            types: types,
  444|    589|            functions: functions,
  445|    589|            tables: tables,
  446|    589|            memories: memories,
  447|    589|            globals: globals,
  448|    589|            elementSegments: elements,
  449|    589|            dataSegments: dataSegments,
  450|    589|            exports: exports,
  451|    589|            functionRefs: functionRefs,
  452|    589|            features: module.features,
  453|    589|            dataCount: module.dataCount
  454|    589|        )
  455|    589|        instancePointer.initialize(to: instanceEntity)
  456|    589|        instanceInitialized = true
  457|    589|        return instanceHandle
  458|    589|    }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0E8EntitiesL_AH9internals0eL0AA14ImmutableArrayVyxGSayxG_q_x7ElementQy__SitKXEtKSlR_r0_lF:
  313|  2.35k|        ) rethrows -> ImmutableArray<EntityHandle> {
  314|  2.35k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  2.35k|                for (index, importedEntity) in imports.enumerated() {
  316|  2.35k|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  2.35k|                }
  318|  2.35k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  2.35k|                    let index = imports.count + internalIndex
  320|  2.35k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  2.35k|                    buffer.initializeElement(at: index, to: allocated)
  322|  2.35k|                }
  323|  2.35k|            }
  324|  2.35k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0E8EntitiesL_AH9internals0eL0AA14ImmutableArrayVyxGSayxG_q_x7ElementQy__SitKXEtKSlR_r0_lFySryxGKXEfU_:
  314|  2.35k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  2.35k|                for (index, importedEntity) in imports.enumerated() {
  316|     75|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  2.35k|                }
  318|  6.07k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  6.07k|                    let index = imports.count + internalIndex
  320|  6.07k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  6.07k|                    buffer.initializeElement(at: index, to: allocated)
  322|  6.07k|                }
  323|  2.35k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAA16InternalFunctionVAA05GuestS0V_SitXEfU_:
  344|  2.72k|            allocateHandle: { f, index in
  345|  2.72k|                allocate(function: f, index: FunctionIndex(index), instance: instanceHandle, engine: engine)
  346|  2.72k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA06MemoryK0VG0A6Parser6LimitsV_SitKXEfU1_:
  360|    513|            allocateHandle: { m, _ in try allocate(memoryType: m, resourceLimiter: resourceLimiter) }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA06GlobalK0VG0A6Parser0R0V_SitKXEfU3_:
  376|  2.83k|            allocateHandle: { global, _ in
  377|  2.83k|                let initialValue = try global.initializer.evaluate(
  378|  2.83k|                    context: constEvalContext, expectedType: global.type.valueType
  379|  2.83k|                )
  380|  2.83k|                return try allocate(globalType: global.type, initialValue: initialValue)
  381|  2.83k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySryAJyAA014ElementSegmentK0VGGKXEfU4_:
  385|    589|        let elements = try ImmutableArray<InternalElementSegment>(allocator: arrayAllocator, count: module.elements.count) { buffer in
  386|    589|            for (index, element) in module.elements.enumerated() {
  387|      0|                // TODO: Avoid evaluating element expr twice in `Module.instantiate` and here.
  388|      0|                var references = try element.evaluateInits(context: constEvalContext)
  389|      0|                switch element.mode {
  390|      0|                case .active, .declarative:
  391|      0|                    // active & declarative segments are unavailable at runtime
  392|      0|                    references = []
  393|      0|                case .passive: break
  394|      0|                }
  395|      0|                let handle = allocate(elementType: element.type, references: references)
  396|      0|                buffer.initializeElement(at: index, to: handle)
  397|    589|            }
  398|    589|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySryAJyAA011DataSegmentK0VGGXEfU5_:
  401|    589|        let dataSegments = ImmutableArray<InternalDataSegment>(allocator: arrayAllocator, count: module.data.count) { buffer in
  402|    589|            for (index, datum) in module.data.enumerated() {
  403|      0|                let segment: InternalDataSegment
  404|      0|                switch datum {
  405|      0|                case .passive(let bytes):
  406|      0|                    segment = allocate(bytes: bytes)
  407|      0|                case .active:
  408|      0|                    // Active segments are copied into memories while instantiation
  409|      0|                    // They are semantically dropped after instantiation, so we don't
  410|      0|                    // need them at runtime
  411|      0|                    segment = allocate(bytes: [])
  412|      0|                }
  413|      0|                buffer.initializeElement(at: index, to: segment)
  414|    589|            }
  415|    589|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF17createExportValueL_yAA016InternalExternalT0O0A6Parser0S0VKF:
  417|     64|        func createExportValue(_ export: WasmParser.Export) throws -> InternalExternalValue {
  418|     64|            switch export.descriptor {
  419|     64|            case .function(let index):
  420|      0|                let handle = try functions[validating: Int(index)]
  421|      0|                return .function(handle)
  422|     64|            case .table(let index):
  423|      0|                let handle = try tables[validating: Int(index)]
  424|      0|                return .table(handle)
  425|     64|            case .memory(let index):
  426|     64|                let handle = try memories[validating: Int(index)]
  427|     64|                return .memory(handle)
  428|     64|            case .global(let index):
  429|      0|                let handle = try globals[validating: Int(index)]
  430|      0|                return .global(handle)
  431|     64|            }
  432|     64|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySDySSAA21InternalExternalValueOGz_0A6Parser6ExportVtKXEfU6_:
  434|     64|        let exports: [String: InternalExternalValue] = try module.exports.reduce(into: [:]) { result, export in
  435|     64|            guard result[export.name] == nil else {
  436|      0|                throw ValidationError(.duplicateExportName(name: export.name))
  437|     64|            }
  438|     64|            result[export.name] = try createExportValue(export)
  439|     64|        }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL8function5index8instance6engineAA16InternalFunctionVAA05GuestQ0V_s6UInt32VAA12EntityHandleVyAA08InstanceT0VGAA6EngineCtF:
  467|  2.72k|    ) -> InternalFunction {
  468|  2.72k|        let code = InternalUncompiledCode(unsafe: codes.allocate(initializing: function.code))
  469|  2.72k|        let pointer = functions.allocate(
  470|  2.72k|            initializing: WasmFunctionEntity(
  471|  2.72k|                index: index, type: engine.internType(function.type),
  472|  2.72k|                code: code,
  473|  2.72k|                instance: instance
  474|  2.72k|            )
  475|  2.72k|        )
  476|  2.72k|        return InternalFunction.wasm(EntityHandle(unsafe: pointer))
  477|  2.72k|    }
$s7WasmKit14StoreAllocatorC8allocate4type14implementation6engineAA16InternalFunctionV0A5Types0J4TypeV_SayAJ5ValueOGAA6CallerV_AOtKcAA6EngineCtF:
  483|      2|    ) -> InternalFunction {
  484|      2|        let pointer = hostFunctions.allocate(
  485|      2|            initializing: HostFunctionEntity(
  486|      2|                type: engine.internType(type), implementation: implementation
  487|      2|            )
  488|      2|        )
  489|      2|        return InternalFunction.host(EntityHandle(unsafe: pointer))
  490|      2|    }
$s7WasmKit14StoreAllocatorC8allocate10memoryType15resourceLimiterAA12EntityHandleVyAA06MemoryJ0VG0A6Parser6LimitsV_AA08ResourceI0_ptKF:
  501|    586|    func allocate(memoryType: MemoryType, resourceLimiter: any ResourceLimiter) throws -> InternalMemory {
  502|    586|        let pointer = try memories.allocate(initializing: MemoryEntity(memoryType, resourceLimiter: resourceLimiter))
  503|    586|        return InternalMemory(unsafe: pointer)
  504|    586|    }
$s7WasmKit14StoreAllocatorC8allocate10globalType12initialValueAA12EntityHandleVyAA06GlobalJ0VG0A6Parser0lG0V_0A5Types0I0OtKF:
  508|  2.83k|    func allocate(globalType: GlobalType, initialValue: Value) throws -> InternalGlobal {
  509|  2.83k|        let pointer = try globals.allocate(initializing: GlobalEntity(globalType: globalType, initialValue: initialValue))
  510|  2.83k|        return InternalGlobal(unsafe: pointer)
  511|  2.83k|    }

$s7WasmKit12UntypedValueV7defaultACvgZ:
   13|   521k|    static var `default`: UntypedValue {
   14|   521k|        UntypedValue(storage: 0)
   15|   521k|    }
$s7WasmKit12UntypedValueV17isNullMaskPattern33_659430D1A12A457F633FD7DBB171E78ALLs6UInt64VvgZ:
   18|  3.54k|    private static var isNullMaskPattern: UInt64 { (0x1 << 63) }
$s7WasmKit12UntypedValueV6signedACs5Int32V_tcfC:
   21|   171k|    init(signed value: Int32) {
   22|   171k|        self = .i32(UInt32(bitPattern: value))
   23|   171k|    }
$s7WasmKit12UntypedValueV6signedACs5Int64V_tcfC:
   26|   592k|    init(signed value: Int64) {
   27|   592k|        self = .i64(UInt64(bitPattern: value))
   28|   592k|    }
$s7WasmKit12UntypedValueV3i32yACs6UInt32VFZ:
   32|  1.32M|    static func i32(_ value: UInt32) -> UntypedValue {
   33|  1.32M|        return UntypedValue(storage: UInt64(value))
   34|  1.32M|    }
$s7WasmKit12UntypedValueV3i64yACs6UInt64VFZ:
   35|  1.78M|    static func i64(_ value: UInt64) -> UntypedValue {
   36|  1.78M|        return UntypedValue(storage: value)
   37|  1.78M|    }
$s7WasmKit12UntypedValueV6rawF32yACs6UInt32VFZ:
   38|   236k|    static func rawF32(_ value: UInt32) -> UntypedValue {
   39|   236k|        return UntypedValue(storage: UInt64(value))
   40|   236k|    }
$s7WasmKit12UntypedValueV6rawF64yACs6UInt64VFZ:
   41|   874k|    static func rawF64(_ value: UInt64) -> UntypedValue {
   42|   874k|        return UntypedValue(storage: value)
   43|   874k|    }
$s7WasmKit12UntypedValueV3f32yACSfFZ:
   44|   230k|    static func f32(_ value: Float32) -> UntypedValue {
   45|   230k|        return rawF32(value.bitPattern)
   46|   230k|    }
$s7WasmKit12UntypedValueV3f64yACSdFZ:
   47|   564k|    static func f64(_ value: Float64) -> UntypedValue {
   48|   564k|        return rawF64(value.bitPattern)
   49|   564k|    }
$s7WasmKit12UntypedValueV9storage32ACs6UInt32V_tcfC:
   53|  64.6k|    init(storage32: UInt32) {
   54|  64.6k|        self.storage = UInt64(storage32)
   55|  64.6k|    }
$s7WasmKit12UntypedValueV7storageACs6UInt64V_tcfC:
   58|  7.40M|    init(storage: UInt64) {
   59|  7.40M|        self.storage = storage
   60|  7.40M|    }
$s7WasmKit12UntypedValueVyAC0A5Types0D0OcfC:
   63|   501k|    init(_ value: Value) {
   64|   501k|        func encodeOptionalInt(_ value: Int?) -> UInt64 {
   65|   501k|            guard let value = value else { return Self.isNullMaskPattern }
   66|   501k|            let unsigned = UInt64(bitPattern: Int64(value))
   67|   501k|            // Check if the value does not exceed the 63-bits limit.
   68|   501k|            precondition(unsigned & Self.isNullMaskPattern == 0)
   69|   501k|            return unsigned
   70|   501k|        }
   71|   501k|        switch value {
   72|   501k|        case .i32(let value): self = .i32(value)
   73|   501k|        case .i64(let value): self = .i64(value)
   74|   501k|        case .f32(let value): self = .rawF32(value)
   75|   501k|        case .f64(let value): self = .rawF64(value)
   76|   501k|        case .ref(.function(let value)), .ref(.extern(let value)):
   77|  3.54k|            storage = encodeOptionalInt(value)
   78|   501k|        }
   79|   501k|    }
$s7WasmKit12UntypedValueVyAC0A5Types0D0Ocfc17encodeOptionalIntL_ys6UInt64VSiSgF:
   64|  3.54k|        func encodeOptionalInt(_ value: Int?) -> UInt64 {
   65|  3.54k|            guard let value = value else { return Self.isNullMaskPattern }
   66|      0|            let unsigned = UInt64(bitPattern: Int64(value))
   67|      0|            // Check if the value does not exceed the 63-bits limit.
   68|      0|            precondition(unsigned & Self.isNullMaskPattern == 0)
   69|      0|            return unsigned
   70|  3.54k|        }
$s7WasmKit12UntypedValueV3i32s6UInt32Vvg:
   83|  74.4k|    var i32: UInt32 {
   84|  74.4k|        return UInt32(truncatingIfNeeded: storage & 0x0000_0000_ffff_ffff)
   85|  74.4k|    }
$s7WasmKit12UntypedValueV3i64s6UInt64Vvg:
   87|  2.47M|    var i64: UInt64 {
   88|  2.47M|        return storage
   89|  2.47M|    }
$s7WasmKit12UntypedValueV6rawF32s6UInt32Vvg:
   91|  1.27k|    var rawF32: UInt32 {
   92|  1.27k|        return i32
   93|  1.27k|    }
$s7WasmKit12UntypedValueV6rawF64s6UInt64Vvg:
   95|      1|    var rawF64: UInt64 {
   96|      1|        return i64
   97|      1|    }
$s7WasmKit12UntypedValueV15asAddressOffsets6UInt64VyF:
  126|  1.16M|    func asAddressOffset() -> UInt64 {
  127|  1.16M|        // NOTE: It's ok to load address offset as i64 because
  128|  1.16M|        //       it's always evaluated as unsigned and the higher
  129|  1.16M|        //       32-bits of i32 are always zero.
  130|  1.16M|        return i64
  131|  1.16M|    }

$s7WasmKit18RawUnsignedIntegerPAAE6signed6SignedQzvg:
   63|   320k|    var signed: Signed {
   64|   320k|        .init(bitPattern: self)
   65|   320k|    }
$s7WasmKit16RawSignedIntegerPAAE8unsigned8UnsignedQzvg:
   69|   468k|    var unsigned: Unsigned {
   70|   468k|        .init(bitPattern: self)
   71|   468k|    }
$ss17FixedWidthIntegerP7WasmKitE3addyxxF:
  102|  6.82k|    func add(_ other: Self) -> Self { self &+ other }
$ss17FixedWidthIntegerP7WasmKitE3subyxxF:
  103|   132k|    func sub(_ other: Self) -> Self { self &- other }
$ss17FixedWidthIntegerP7WasmKitE3mulyxxF:
  104|  7.07k|    func mul(_ other: Self) -> Self { self &* other }
$ss17FixedWidthIntegerP7WasmKitE2eqys6UInt32VxF:
  105|  11.2k|    func eq(_ other: Self) -> UInt32 { self == other ? 1 : 0 }
$ss17FixedWidthIntegerP7WasmKitE2neys6UInt32VxF:
  106|  22.8k|    func ne(_ other: Self) -> UInt32 { self == other ? 0 : 1 }
$ss17FixedWidthIntegerP7WasmKitE3andyxxF:
  107|  4.02k|    func and(_ other: Self) -> Self { self & other }
$ss17FixedWidthIntegerP7WasmKitE2oryxxF:
  108|  99.8k|    func or(_ other: Self) -> Self { self | other }
$ss17FixedWidthIntegerP7WasmKitE3xoryxxF:
  109|  8.42k|    func xor(_ other: Self) -> Self { self ^ other }
$ss17FixedWidthIntegerP7WasmKitE3clzxvg:
  111|   214k|    var clz: Self { Self(leadingZeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE3ctzxvg:
  112|  11.7k|    var ctz: Self { Self(trailingZeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE6popcntxvg:
  113|  90.4k|    var popcnt: Self { Self(nonzeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE3eqzs6UInt32Vvg:
  114|  6.39k|    var eqz: UInt32 { self == 0 ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3ltSys6UInt32VxF:
  118|  4.38k|    func ltS(_ other: Self) -> UInt32 { self.signed < other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3ltUys6UInt32VxF:
  119|  27.0k|    func ltU(_ other: Self) -> UInt32 { self < other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3gtSys6UInt32VxF:
  120|  7.80k|    func gtS(_ other: Self) -> UInt32 { self.signed > other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3gtUys6UInt32VxF:
  121|  6.55k|    func gtU(_ other: Self) -> UInt32 { self > other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3leSys6UInt32VxF:
  122|  3.03k|    func leS(_ other: Self) -> UInt32 { self.signed <= other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3leUys6UInt32VxF:
  123|  5.99k|    func leU(_ other: Self) -> UInt32 { self <= other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3geSys6UInt32VxF:
  124|  21.9k|    func geS(_ other: Self) -> UInt32 { self.signed >= other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3geUys6UInt32VxF:
  125|  17.5k|    func geU(_ other: Self) -> UInt32 { self >= other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3shlyxxF:
  127|  9.14k|    func shl(_ other: Self) -> Self {
  128|  9.14k|        let shift = other % Self(Self.bitWidth)
  129|  9.14k|        return self << shift
  130|  9.14k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4shrSyxxF:
  131|  55.7k|    func shrS(_ other: Self) -> Self {
  132|  55.7k|        let shift = other % Self(Self.bitWidth)
  133|  55.7k|        return (self.signed >> shift).unsigned
  134|  55.7k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4shrUyxxF:
  135|  11.2k|    func shrU(_ other: Self) -> Self {
  136|  11.2k|        let shift = other % Self(Self.bitWidth)
  137|  11.2k|        return self >> shift
  138|  11.2k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4rotlyxxF:
  139|  7.81k|    func rotl(_ other: Self) -> Self {
  140|  7.81k|        let shift = other % Self(Self.bitWidth)
  141|  7.81k|        return self << shift | self >> (Self(Self.bitWidth) - shift)
  142|  7.81k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4rotryxxF:
  143|  10.3k|    func rotr(_ other: Self) -> Self {
  144|  10.3k|        let shift = other % Self(Self.bitWidth)
  145|  10.3k|        return self >> shift | self << (Self(Self.bitWidth) - shift)
  146|  10.3k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4divSyxxKF:
  148|  32.6k|    func divS(_ other: Self) throws -> Self {
  149|  32.6k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  150|  32.6k|        let (signed, overflow) = signed.dividedReportingOverflow(by: other.signed)
  151|  32.6k|        guard !overflow else { throw Trap(.integerOverflow) }
  152|  32.6k|        return signed.unsigned
  153|  32.6k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4divUyxxKF:
  154|  9.39k|    func divU(_ other: Self) throws -> Self {
  155|  9.39k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  156|  9.39k|        let (unsigned, overflow) = dividedReportingOverflow(by: other)
  157|  9.39k|        guard !overflow else { throw Trap(.integerOverflow) }
  158|  9.39k|        return unsigned
  159|  9.39k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4remSyxxKF:
  160|  5.72k|    func remS(_ other: Self) throws -> Self {
  161|  5.72k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  162|  5.72k|        let (signed, overflow) = signed.remainderReportingOverflow(dividingBy: other.signed)
  163|  5.72k|        guard !overflow else { return 0 }
  164|  5.72k|        return signed.unsigned
  165|  5.72k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4remUyxxKF:
  166|  18.9k|    func remU(_ other: Self) throws -> Self {
  167|  18.9k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  168|  18.9k|        let (unsigned, overflow) = remainderReportingOverflow(dividingBy: other)
  169|  18.9k|        guard !overflow else { throw Trap(.integerOverflow) }
  170|  18.9k|        return unsigned
  171|  18.9k|    }
$ss6UInt32V7WasmKitE10extendI32Ss6UInt64Vvg:
  175|  1.81k|    var extendI32S: UInt64 {
  176|  1.81k|        return UInt64(bitPattern: Int64(signed))
  177|  1.81k|    }
$ss6UInt32V7WasmKitE10extendI32Us6UInt64Vvg:
  178|  11.8k|    var extendI32U: UInt64 {
  179|  11.8k|        return UInt64(self)
  180|  11.8k|    }
$ss6UInt32V7WasmKitE13convertToF32SSfvg:
  181|  9.00k|    var convertToF32S: Float32 { Float32(signed) }
$ss6UInt32V7WasmKitE13convertToF32USfvg:
  182|  7.59k|    var convertToF32U: Float32 { Float32(self) }
$ss6UInt32V7WasmKitE13convertToF64SSdvg:
  183|  3.61k|    var convertToF64S: Float64 { Float64(signed) }
$ss6UInt32V7WasmKitE13convertToF64USdvg:
  184|  13.5k|    var convertToF64U: Float64 { Float64(self) }
$ss6UInt32V7WasmKitE16reinterpretToF32Sfvg:
  185|  54.2k|    var reinterpretToF32: Float32 { Float32(bitPattern: self) }
$s7WasmKit18RawUnsignedIntegerPAAE8extend8Sxvg:
  189|   137k|    var extend8S: Self {
  190|   137k|        return Self(bitPattern: Self.Signed(Int8(truncatingIfNeeded: self)))
  191|   137k|    }
$s7WasmKit18RawUnsignedIntegerPAAE9extend16Sxvg:
  192|  86.2k|    var extend16S: Self {
  193|  86.2k|        return Self(bitPattern: Self.Signed(Int16(truncatingIfNeeded: self)))
  194|  86.2k|    }
$ss6UInt64V7WasmKitE9extend32SABvg:
  198|  15.7k|    var extend32S: UInt64 {
  199|  15.7k|        return UInt64(bitPattern: Int64(Int32(truncatingIfNeeded: self)))
  200|  15.7k|    }
$ss6UInt64V7WasmKitE13convertToF32SSfvg:
  201|  95.0k|    var convertToF32S: Float32 { Float32(signed) }
$ss6UInt64V7WasmKitE13convertToF32USfvg:
  202|  17.2k|    var convertToF32U: Float32 { Float32(self) }
$ss6UInt64V7WasmKitE13convertToF64SSdvg:
  203|  4.46k|    var convertToF64S: Float64 { Float64(signed) }
$ss6UInt64V7WasmKitE13convertToF64USdvg:
  204|  12.5k|    var convertToF64U: Float64 { Float64(self) }
$ss6UInt64V7WasmKitE16reinterpretToF64Sdvg:
  205|   265k|    var reinterpretToF64: Float64 { Float64(bitPattern: self) }
$ss6UInt64V7WasmKitE4wraps6UInt32Vvg:
  209|  38.1k|    var wrap: UInt32 {
  210|  38.1k|        return UInt32(truncatingIfNeeded: self)
  211|  38.1k|    }
$sSF7WasmKitE3addyxxF:
  215|  3.24k|    func add(_ other: Self) -> Self { self + other }
$sSF7WasmKitE3subyxxF:
  216|  6.52k|    func sub(_ other: Self) -> Self { self - other }
$sSF7WasmKitE3mulyxxF:
  217|  5.32k|    func mul(_ other: Self) -> Self { self * other }
$sSF7WasmKitE3divyxxF:
  218|  6.03k|    func div(_ other: Self) -> Self { self / other }
$sSF7WasmKitE3minyxxF:
  219|  8.86k|    func min(_ other: Self) -> Self {
  220|  8.86k|        guard !isNaN && !other.isNaN else {
  221|      0|            return .nan
  222|  8.86k|        }
  223|  8.86k|        // min(0.0, -0.0) returns 0.0 in Swift, but wasm expects to return -0.0
  224|  8.86k|        // spec: https://webassembly.github.io/spec/core/exec/numerics.html#op-fmin
  225|  8.86k|        if self.isZero, self == other {
  226|  2.10k|            return self.sign == .minus ? self : other
  227|  6.76k|        }
  228|  6.76k|        return Swift.min(self, other)
  229|  8.86k|    }
$sSF7WasmKitE3minyxxFSbyKXEfu_:
  220|  8.86k|        guard !isNaN && !other.isNaN else {
$sSF7WasmKitE3maxyxxF:
  230|  12.8k|    func max(_ other: Self) -> Self {
  231|  12.8k|        guard !isNaN && !other.isNaN else {
  232|  2.12k|            return .nan
  233|  10.6k|        }
  234|  10.6k|        //  max(-0.0, 0.0) returns -0.0 in Swift, but wasm expects to return 0.0
  235|  10.6k|        // spec: https://webassembly.github.io/spec/core/exec/numerics.html#op-fmax
  236|  10.6k|        if self.isZero, self == other {
  237|  3.16k|            return self.sign == .plus ? self : other
  238|  7.51k|        }
  239|  7.51k|        return Swift.max(self, other)
  240|  12.8k|    }
$sSF7WasmKitE3maxyxxFSbyKXEfu_:
  231|  12.8k|        guard !isNaN && !other.isNaN else {
$sSF7WasmKitE8copySignyxxF:
  241|  5.27k|    func copySign(_ other: Self) -> Self {
  242|  5.27k|        return sign == other.sign ? self : -self
  243|  5.27k|    }
$sSF7WasmKitE2eqys6UInt32VxF:
  244|  5.30k|    func eq(_ other: Self) -> UInt32 { self == other ? 1 : 0 }
$sSF7WasmKitE2neys6UInt32VxF:
  245|  8.72k|    func ne(_ other: Self) -> UInt32 { self == other ? 0 : 1 }
$sSF7WasmKitE2ltys6UInt32VxF:
  246|  4.84k|    func lt(_ other: Self) -> UInt32 { self < other ? 1 : 0 }
$sSF7WasmKitE2gtys6UInt32VxF:
  247|  5.88k|    func gt(_ other: Self) -> UInt32 { self > other ? 1 : 0 }
$sSF7WasmKitE2leys6UInt32VxF:
  248|  5.48k|    func le(_ other: Self) -> UInt32 { self <= other ? 1 : 0 }
$sSF7WasmKitE2geys6UInt32VxF:
  249|  5.21k|    func ge(_ other: Self) -> UInt32 { self >= other ? 1 : 0 }
$sSF7WasmKitE3absxvg:
  251|  4.86k|    var abs: Self { Swift.abs(self) }
$sSF7WasmKitE3negxvg:
  252|  10.5k|    var neg: Self { -self }
$sSF7WasmKitE4ceilxvg:
  253|  20.9k|    var ceil: Self { self.rounded(.up) }
$sSF7WasmKitE5floorxvg:
  254|  75.8k|    var floor: Self { self.rounded(.down) }
$sSF7WasmKitE5truncxvg:
  255|   124k|    var trunc: Self { self.rounded(.towardZero) }
$sSF7WasmKitE7nearestxvg:
  256|  18.6k|    var nearest: Self { self.rounded(.toNearestOrEven) }
$sSF7WasmKitE4sqrtxvg:
  257|  7.22k|    var sqrt: Self { self.squareRoot() }
$sSF7WasmKitE7truncTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lF:
  265|   265k|    ) throws -> T {
  266|   265k|        guard !self.isNaN else { throw Trap(.invalidConversionToInteger) }
  267|   265k|        if self <= min || self >= max {
  268|      4|            throw Trap(.integerOverflow)
  269|   265k|        }
  270|   265k|        return rounding(self)
  271|   265k|    }
$sSF7WasmKitE7truncTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lFSbyKXEfu_:
  267|   265k|        if self <= min || self >= max {
$sSF7WasmKitE10truncSatTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lF:
  276|   324k|    ) throws -> T {
  277|   324k|        guard !self.isNaN else { return .zero }
  278|   318k|        if self <= min {
  279|  2.79k|            return .min
  280|   315k|        } else if self >= max {
  281|  3.74k|            return .max
  282|   311k|        }
  283|   311k|        return rounding(self)
  284|   324k|    }
$sSf7WasmKitE11truncToI32Ss6UInt32Vvg:
  289|  5.20k|        get throws {
  290|  5.20k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
  291|  5.20k|        }
$sSf7WasmKitE11truncToI32Ss6UInt32Vvgs5Int32VSfXEfU_:
  290|  5.20k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
$sSf7WasmKitE11truncToI64Ss6UInt64Vvg:
  294|  2.03k|        get throws {
  295|  2.03k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
  296|  2.03k|        }
$sSf7WasmKitE11truncToI64Ss6UInt64Vvgs5Int64VSfXEfU_:
  295|  2.03k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
$sSf7WasmKitE11truncToI32Us6UInt32Vvg:
  299|  2.59k|        get throws {
  300|  2.59k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  301|  2.59k|        }
$sSf7WasmKitE11truncToI32Us6UInt32VvgADSfXEfU_:
  300|  2.59k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSf7WasmKitE11truncToI64Us6UInt64Vvg:
  304|  26.7k|        get throws {
  305|  26.7k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  306|  26.7k|        }
$sSf7WasmKitE11truncToI64Us6UInt64VvgADSfXEfU_:
  305|  26.7k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSf7WasmKitE14truncSatToI32Ss6UInt32Vvg:
  309|  8.16k|        get throws {
  310|  8.16k|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
  311|  8.16k|        }
$sSf7WasmKitE14truncSatToI32Ss6UInt32Vvgs5Int32VSfXEfU_:
  310|  1.55k|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
$sSf7WasmKitE14truncSatToI64Ss6UInt64Vvg:
  314|  2.04k|        get throws {
  315|  2.04k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
  316|  2.04k|        }
$sSf7WasmKitE14truncSatToI64Ss6UInt64Vvgs5Int64VSfXEfU_:
  315|  2.04k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
$sSf7WasmKitE14truncSatToI32Us6UInt32Vvg:
  319|  3.88k|        get throws {
  320|  3.88k|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  321|  3.88k|        }
$sSf7WasmKitE14truncSatToI32Us6UInt32VvgADSfXEfU_:
  320|  1.62k|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSf7WasmKitE14truncSatToI64Us6UInt64Vvg:
  324|  3.56k|        get throws {
  325|  3.56k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  326|  3.56k|        }
$sSf7WasmKitE14truncSatToI64Us6UInt64VvgADSfXEfU_:
  325|  3.03k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSf7WasmKitE10promoteF32Sdvg:
  328|  2.80k|    var promoteF32: Float64 { Float64(self) }
$sSf7WasmKitE16reinterpretToI32s6UInt32Vvg:
  329|  2.86k|    var reinterpretToI32: UInt32 { bitPattern }
$sSd7WasmKitE11truncToI32Ss6UInt32Vvg:
  333|  5.84k|        get throws {
  334|  5.84k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
  335|  5.84k|        }
$sSd7WasmKitE11truncToI32Ss6UInt32Vvgs5Int32VSdXEfU_:
  334|  5.84k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
$sSd7WasmKitE11truncToI64Ss6UInt64Vvg:
  338|  3.56k|        get throws {
  339|  3.56k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
  340|  3.56k|        }
$sSd7WasmKitE11truncToI64Ss6UInt64Vvgs5Int64VSdXEfU_:
  339|  3.56k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
$sSd7WasmKitE11truncToI32Us6UInt32Vvg:
  343|   215k|        get throws {
  344|   215k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  345|   215k|        }
$sSd7WasmKitE11truncToI32Us6UInt32VvgADSdXEfU_:
  344|   215k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSd7WasmKitE11truncToI64Us6UInt64Vvg:
  348|  4.38k|        get throws {
  349|  4.38k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  350|  4.38k|        }
$sSd7WasmKitE11truncToI64Us6UInt64VvgADSdXEfU_:
  349|  4.38k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSd7WasmKitE14truncSatToI32Ss6UInt32Vvg:
  353|  1.55k|        get throws {
  354|  1.55k|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
  355|  1.55k|        }
$sSd7WasmKitE14truncSatToI32Ss6UInt32Vvgs5Int32VSdXEfU_:
  354|  1.55k|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
$sSd7WasmKitE14truncSatToI64Ss6UInt64Vvg:
  358|   292k|        get throws {
  359|   292k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
  360|   292k|        }
$sSd7WasmKitE14truncSatToI64Ss6UInt64Vvgs5Int64VSdXEfU_:
  359|   288k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
$sSd7WasmKitE14truncSatToI32Us6UInt32Vvg:
  363|  1.12k|        get throws {
  364|  1.12k|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  365|  1.12k|        }
$sSd7WasmKitE14truncSatToI32Us6UInt32VvgADSdXEfU_:
  364|  1.12k|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSd7WasmKitE14truncSatToI64Us6UInt64Vvg:
  368|  12.0k|        get throws {
  369|  12.0k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  370|  12.0k|        }
$sSd7WasmKitE14truncSatToI64Us6UInt64VvgADSdXEfU_:
  369|  12.0k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSd7WasmKitE9demoteF64Sfvg:
  372|      4|    var demoteF64: Float32 { Float32(self) }
$sSd7WasmKitE16reinterpretToI64s6UInt64Vvg:
  373|  2.17k|    var reinterpretToI64: UInt64 { bitPattern }

$s7WasmKit7ImportsV11definitions33_6D96F85BFFF5D538ECAADDF4180F550ALLSDySSSDySSAA13ExternalValueOGGvpfi:
   26|    591|    private var definitions: [String: [String: ExternalValue]] = [:]
$s7WasmKit7ImportsVACycfC:
   29|    591|    public init() {
   30|    591|    }
$s7WasmKit7ImportsV6define6module4name_ySS_SSxtAA24ExternalValueConvertibleRzlF:
   33|     75|    public mutating func define<Extern: ExternalValueConvertible>(module: String, name: String, _ value: Extern) {
   34|     75|        definitions[module, default: [:]][name] = value.externalValue
   35|     75|    }
$s7WasmKit7ImportsV6define6module4name_ySS_SSxtAA24ExternalValueConvertibleRzlFSDySSAA0gH0OGyXEfu_:
   34|     74|        definitions[module, default: [:]][name] = value.externalValue
$s7WasmKit7ImportsV6lookup6module4nameAA21InternalExternalValueO_AA14StoreAllocatorCtSgSS_SStF:
   50|     75|    func lookup(module: String, name: String) -> (InternalExternalValue, StoreAllocator)? {
   51|     75|        definitions[module]?[name]?.internalize()
   52|     75|    }
$s7WasmKit13ExternalValueO08externalD0ACvg:
   61|     75|    public var externalValue: ExternalValue { self }
$s7WasmKit6MemoryV13externalValueAA08ExternalE0Ovg:
   65|     73|    public var externalValue: ExternalValue { .memory(self) }
$s7WasmKit8FunctionV13externalValueAA08ExternalE0Ovg:
   77|      2|    public var externalValue: ExternalValue { .function(self) }

$s7WasmKit13ModuleImportsV5build4from19functionTypeIndices11globalTypes06memoryK005tableK0ACSay0A6Parser6ImportVG_Says6UInt32VGzSayAJ06GlobalH0VGzSayAJ6LimitsVGzSayAJ05TableH0VGztFZ:
   15|    591|    ) -> ModuleImports {
   16|    591|        var numberOfFunctions: Int = 0
   17|    591|        var numberOfGlobals: Int = 0
   18|    591|        var numberOfMemories: Int = 0
   19|    591|        var numberOfTables: Int = 0
   20|    591|        for item in imports {
   21|     76|            switch item.descriptor {
   22|     76|            case .function(let typeIndex):
   23|      2|                numberOfFunctions += 1
   24|      2|                functionTypeIndices.append(typeIndex)
   25|     76|            case .table(let tableType):
   26|      0|                numberOfTables += 1
   27|      0|                tableTypes.append(tableType)
   28|     76|            case .memory(let memoryType):
   29|     74|                numberOfMemories += 1
   30|     74|                memoryTypes.append(memoryType)
   31|     76|            case .global(let globalType):
   32|      0|                numberOfGlobals += 1
   33|      0|                globalTypes.append(globalType)
   34|     76|            }
   35|    591|        }
   36|    591|        return ModuleImports(
   37|    591|            numberOfFunctions: numberOfFunctions,
   38|    591|            numberOfGlobals: numberOfGlobals,
   39|    591|            numberOfMemories: numberOfMemories,
   40|    591|            numberOfTables: numberOfTables
   41|    591|        )
   42|    591|    }
$s7WasmKit6ModuleV5types9functions8elements4data5start7imports7exports7globals8memories6tables14customSections8features0G5CountACSay0A5Types12FunctionTypeVG_SayAA05GuestS0VGSay0A6Parser14ElementSegmentVGSayAX04DataX0OGs6UInt32VSgSayAX6ImportVGSayAX6ExportVGSayAX6GlobalVGSayAX6LimitsVGSayAX05TableT0VGSayAX13CustomSectionVGAX0A10FeatureSetVA5_tcfC:
   81|    591|    ) {
   82|    591|        self.functions = functions
   83|    591|        self.elements = elements
   84|    591|        self.data = data
   85|    591|        self.start = start
   86|    591|        self.imports = imports
   87|    591|        self.exports = exports
   88|    591|        self.globals = globals
   89|    591|        self.customSections = customSections
   90|    591|        self.features = features
   91|    591|        self.dataCount = dataCount
   92|    591|
   93|    591|        var importedFunctionTypes: [TypeIndex] = []
   94|    591|        var globalTypes: [GlobalType] = []
   95|    591|        var memoryTypes: [MemoryType] = []
   96|    591|        var tableTypes: [TableType] = []
   97|    591|
   98|    591|        self.moduleImports = ModuleImports.build(
   99|    591|            from: imports,
  100|    591|            functionTypeIndices: &importedFunctionTypes,
  101|    591|            globalTypes: &globalTypes,
  102|    591|            memoryTypes: &memoryTypes,
  103|    591|            tableTypes: &tableTypes
  104|    591|        )
  105|    591|        self.types = types
  106|    591|        self.importedFunctionTypes = importedFunctionTypes
  107|    591|        self.memoryTypes = memoryTypes + memories
  108|    591|        self.tableTypes = tableTypes + tables
  109|    591|    }
$s7WasmKit6ModuleV11resolveType_11typeSection0A5Types08FunctionE0Vs6UInt32V_SayAHGtKFZ:
  111|  2.73k|    static func resolveType(_ index: TypeIndex, typeSection: [FunctionType]) throws -> FunctionType {
  112|  2.73k|        guard Int(index) < typeSection.count else {
  113|      0|            throw TranslationError("Type index \(index) is out of range")
  114|  2.73k|        }
  115|  2.73k|        return typeSection[Int(index)]
  116|  2.73k|    }
$s7WasmKit6ModuleV19resolveFunctionTypey0A5Types0eF0Vs6UInt32VKF:
  118|    515|    internal func resolveFunctionType(_ index: FunctionIndex) throws -> FunctionType {
  119|    515|        guard Int(index) < functions.count + self.moduleImports.numberOfFunctions else {
  120|      0|            throw TranslationError("Function index \(index) is out of range")
  121|    515|        }
  122|    515|        if Int(index) < self.moduleImports.numberOfFunctions {
  123|      0|            return try Self.resolveType(
  124|      0|                importedFunctionTypes[Int(index)],
  125|      0|                typeSection: types
  126|      0|            )
  127|    515|        }
  128|    515|        return functions[Int(index) - self.moduleImports.numberOfFunctions].type
  129|    515|    }
$s7WasmKit6ModuleV11instantiate5store7importsAA8InstanceVAA5StoreC_AA7ImportsVtKF:
  137|    590|    public func instantiate(store: Store, imports: Imports = [:]) throws -> Instance {
  138|    590|        Instance(handle: try self.instantiateHandle(store: store, imports: imports), store: store)
  139|      3|    }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKF:
  143|    590|    private func instantiateHandle(store: Store, imports: Imports) throws -> InternalInstance {
  144|    590|        try ModuleValidator(module: self).validate()
  145|    589|
  146|    589|        // Steps 5-8.
  147|    589|
  148|    589|        // Step 9.
  149|    589|        // Process `elem.init` evaluation during allocation
  150|    589|
  151|    589|        // Step 11.
  152|    589|        let instance = try store.allocator.allocate(
  153|    589|            module: self, engine: store.engine,
  154|    589|            resourceLimiter: store.resourceLimiter,
  155|    589|            imports: imports
  156|    589|        )
  157|    589|
  158|    589|        if let nameSection = customSections.first(where: { $0.name == "name" }) {
  159|      0|            // FIXME?: Just ignore parsing error of name section for now.
  160|      0|            // Should emit warning instead of just discarding it?
  161|      0|            try? store.nameRegistry.register(instance: instance, nameSection: nameSection)
  162|      0|        }
  163|    589|
  164|    589|        let constEvalContext = ConstEvaluationContext(instance: instance, moduleImports: moduleImports)
  165|    589|        // Step 12-13.
  166|    589|
  167|    589|        // Steps 14-15.
  168|    589|        for element in elements {
  169|      0|            guard case .active(let tableIndex, let offset) = element.mode else { continue }
  170|      0|            let table = try instance.tables[validating: Int(tableIndex)]
  171|      0|            let offsetValue = try offset.evaluate(
  172|      0|                context: constEvalContext,
  173|      0|                expectedType: .addressType(isMemory64: table.limits.isMemory64)
  174|      0|            )
  175|      0|            try table.withValue { table in
  176|      0|                guard let offset = offsetValue.maybeAddressOffset(table.limits.isMemory64) else {
  177|      0|                    throw ValidationError(
  178|      0|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: table.limits.isMemory64), got: offsetValue)
  179|      0|                    )
  180|      0|                }
  181|      0|                guard table.tableType.elementType == element.type else {
  182|      0|                    throw ValidationError(
  183|      0|                        .elementSegmentTypeMismatch(
  184|      0|                            elementType: element.type,
  185|      0|                            tableElementType: table.tableType.elementType
  186|      0|                        )
  187|      0|                    )
  188|      0|                }
  189|      0|                let references = try element.evaluateInits(context: constEvalContext)
  190|      0|                try table.initialize(
  191|      0|                    references, from: 0, to: Int(offset), count: references.count
  192|      0|                )
  193|      0|            }
  194|    589|        }
  195|    589|
  196|    589|        // Step 16.
  197|    589|        for case .active(let data) in data {
  198|      0|            let memory = try instance.memories[validating: Int(data.index)]
  199|      0|            let offsetValue = try data.offset.evaluate(
  200|      0|                context: constEvalContext,
  201|      0|                expectedType: .addressType(isMemory64: memory.limit.isMemory64)
  202|      0|            )
  203|      0|            try memory.withValue { memory in
  204|      0|                guard let offset = offsetValue.maybeAddressOffset(memory.limit.isMemory64) else {
  205|      0|                    throw ValidationError(
  206|      0|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: memory.limit.isMemory64), got: offsetValue)
  207|      0|                    )
  208|      0|                }
  209|      0|                try memory.write(offset: Int(offset), bytes: data.initializer)
  210|      0|            }
  211|    589|        }
  212|    589|
  213|    589|        // Step 17.
  214|    589|        if let startIndex = start {
  215|    514|            let startFunction = try instance.functions[validating: Int(startIndex)]
  216|    514|            _ = try startFunction.invoke([], store: store)
  217|     87|        }
  218|     87|
  219|     87|        // Compile all functions eagerly if the engine is in eager compilation mode
  220|     87|        if store.engine.configuration.compilationMode == .eager {
  221|     87|            try instance.withValue {
  222|     87|                try $0.compileAllFunctions(store: store)
  223|     87|            }
  224|      3|        }
  225|      3|
  226|      3|        return instance
  227|    590|    }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFSb0A6Parser13CustomSectionVXEfU_:
  158|    256|        if let nameSection = customSections.first(where: { $0.name == "name" }) {
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFyAKzKXEfU2_:
  221|     87|            try instance.withValue {
  222|     87|                try $0.compileAllFunctions(store: store)
  223|      3|            }
$s7WasmKit6ModuleV16internalMemoriess10ArraySliceVy0A6Parser6LimitsVGvg:
  235|    589|    var internalMemories: ArraySlice<MemoryType> {
  236|    589|        return memoryTypes[moduleImports.numberOfMemories...]
  237|    589|    }
$s7WasmKit6ModuleV14internalTabless10ArraySliceVy0A6Parser9TableTypeVGvg:
  238|    589|    var internalTables: ArraySlice<TableType> {
  239|    589|        return tableTypes[moduleImports.numberOfTables...]
  240|    589|    }

$s7WasmKit05parseA05bytes8featuresAA6ModuleVSays5UInt8VG_0A6Parser0A10FeatureSetVtKF:
   28|    616|public func parseWasm(bytes: [UInt8], features: WasmFeatureSet = .default) throws -> Module {
   29|    616|    let stream = StaticByteStream(bytes: bytes)
   30|    616|    let module = try parseModule(stream: stream, features: features)
   31|    591|    return module
   32|    616|}
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlF:
   36|    616|func parseModule<Stream: ByteStream>(stream: Stream, features: WasmFeatureSet = .default) throws -> Module {
   37|    616|    var types: [FunctionType] = []
   38|    616|    var typeIndices: [TypeIndex] = []
   39|    616|    var codes: [Code] = []
   40|    616|    var tables: [TableType] = []
   41|    616|    var memories: [MemoryType] = []
   42|    616|    var globals: [WasmParser.Global] = []
   43|    616|    var elements: [ElementSegment] = []
   44|    616|    var data: [DataSegment] = []
   45|    616|    var start: FunctionIndex?
   46|    616|    var imports: [Import] = []
   47|    616|    var exports: [Export] = []
   48|    616|    var customSections: [CustomSection] = []
   49|    616|    var dataCount: UInt32?
   50|    616|
   51|    616|    var parser = WasmParser.Parser<Stream>(
   52|    616|        stream: stream, features: features
   53|    616|    )
   54|    616|
   55|  4.92k|    while let payload = try parser.parseNext() {
   56|  4.92k|        switch payload {
   57|  4.92k|        case .header: break
   58|  4.92k|        case .customSection(let customSection):
   59|    257|            customSections.append(customSection)
   60|  4.92k|        case .typeSection(let typeSection):
   61|    596|            types = typeSection
   62|  4.92k|        case .importSection(let importSection):
   63|    592|            imports = importSection
   64|  4.92k|        case .functionSection(let types):
   65|    591|            typeIndices = types
   66|  4.92k|        case .tableSection(let tableSection):
   67|      6|            tables = tableSection.map(\.type)
   68|  4.92k|        case .memorySection(let memorySection):
   69|    515|            memories = memorySection.map(\.type)
   70|  4.92k|        case .globalSection(let globalSection):
   71|    583|            globals = globalSection
   72|  4.92k|        case .exportSection(let exportSection):
   73|     65|            exports = exportSection
   74|  4.92k|        case .startSection(let functionIndex):
   75|    515|            start = functionIndex
   76|  4.92k|        case .elementSection(let elementSection):
   77|      0|            elements = elementSection
   78|  4.92k|        case .codeSection(let codeSection):
   79|    590|            codes = codeSection
   80|  4.92k|        case .dataSection(let dataSection):
   81|      0|            data = dataSection
   82|  4.92k|        case .dataCount(let count):
   83|      0|            dataCount = count
   84|  4.92k|        }
   85|  4.92k|    }
   86|    591|
   87|    591|    guard typeIndices.count == codes.count else {
   88|      0|        throw ValidationError(
   89|      0|            .inconsistentFunctionAndCodeLength(
   90|      0|                functionCount: typeIndices.count,
   91|      0|                codeCount: codes.count
   92|      0|            ))
   93|    591|    }
   94|    591|
   95|    591|    if let dataCount = dataCount, dataCount != UInt32(data.count) {
   96|      0|        throw ValidationError(
   97|      0|            .inconsistentDataCountAndDataSectionLength(
   98|      0|                dataCount: dataCount,
   99|      0|                dataSection: data.count
  100|      0|            ))
  101|    591|    }
  102|    591|
  103|    591|    let functions = try codes.enumerated().map { index, code in
  104|    591|        // SAFETY: The number of typeIndices is guaranteed to be the same as the number of codes
  105|    591|        let funcTypeIndex = typeIndices[index]
  106|    591|        let funcType = try Module.resolveType(funcTypeIndex, typeSection: types)
  107|    591|        return GuestFunction(
  108|    591|            type: funcType,
  109|    591|            code: code
  110|    591|        )
  111|    591|    }
  112|    591|
  113|    591|    return Module(
  114|    591|        types: types,
  115|    591|        functions: functions,
  116|    591|        elements: elements,
  117|    591|        data: data,
  118|    591|        start: start,
  119|    591|        imports: imports,
  120|    591|        exports: exports,
  121|    591|        globals: globals,
  122|    591|        memories: memories,
  123|    591|        tables: tables,
  124|    591|        customSections: customSections,
  125|    591|        features: features,
  126|    591|        dataCount: dataCount
  127|    591|    )
  128|    616|}
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAG9TableTypeVAG0L0Vcfu_:
   67|      6|            tables = tableSection.map(\.type)
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAG6LimitsVAG6MemoryVcfu0_:
   69|    515|            memories = memorySection.map(\.type)
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAA13GuestFunctionVSi_AG4CodeVtKXEfU_:
  103|  2.73k|    let functions = try codes.enumerated().map { index, code in
  104|  2.73k|        // SAFETY: The number of typeIndices is guaranteed to be the same as the number of codes
  105|  2.73k|        let funcTypeIndex = typeIndices[index]
  106|  2.73k|        let funcType = try Module.resolveType(funcTypeIndex, typeSection: types)
  107|  2.73k|        return GuestFunction(
  108|  2.73k|            type: funcType,
  109|  2.73k|            code: code
  110|  2.73k|        )
  111|  2.73k|    }

$s7WasmKit13ISeqAllocatorC7buffers021_3C1F9FC595E9AC192A47I10B121D811E8LLSaySwGvpfi:
    6|    591|    private var buffers: [UnsafeMutableRawBufferPointer] = []
$s7WasmKit13ISeqAllocatorC15allocateBrTable8capacitySryAA11InstructionO0fG7OperandV5EntryVGSi_tF:
    8|    421|    func allocateBrTable(capacity: Int) -> UnsafeMutableBufferPointer<Instruction.BrTableOperand.Entry> {
    9|    421|        assert(_isPOD(Instruction.BrTableOperand.Entry.self), "Instruction.BrTableOperand.Entry must be POD")
   10|    421|        let buffer = UnsafeMutableBufferPointer<Instruction.BrTableOperand.Entry>.allocate(capacity: capacity)
   11|    421|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   12|    421|        return buffer
   13|    421|    }
$s7WasmKit13ISeqAllocatorC15allocateBrTable8capacitySryAA11InstructionO0fG7OperandV5EntryVGSi_tFSbyXEfu_:
    9|    421|        assert(_isPOD(Instruction.BrTableOperand.Entry.self), "Instruction.BrTableOperand.Entry must be POD")
$s7WasmKit13ISeqAllocatorC17allocateConstantsySRyAA12UntypedValueVGSayAFGF:
   15|    957|    func allocateConstants(_ slots: [UntypedValue]) -> UnsafeBufferPointer<UntypedValue> {
   16|    957|        let buffer = UnsafeMutableBufferPointer<UntypedValue>.allocate(capacity: slots.count)
   17|    957|        _ = buffer.initialize(fromContentsOf: slots)
   18|    957|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   19|    957|        return UnsafeBufferPointer(buffer)
   20|    957|    }
$s7WasmKit13ISeqAllocatorC20allocateInstructions8capacitySrys6UInt64VGSi_tF:
   22|    957|    func allocateInstructions(capacity: Int) -> UnsafeMutableBufferPointer<UInt64> {
   23|    957|        assert(_isPOD(Instruction.self), "Instruction must be POD")
   24|    957|        let buffer = UnsafeMutableBufferPointer<UInt64>.allocate(capacity: capacity)
   25|    957|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   26|    957|        return buffer
   27|    957|    }
$s7WasmKit13ISeqAllocatorC20allocateInstructions8capacitySrys6UInt64VGSi_tFSbyXEfu_:
   23|    957|        assert(_isPOD(Instruction.self), "Instruction must be POD")
$s7WasmKit13ISeqAllocatorCfd:
   29|    591|    deinit {
   30|  2.33k|        for buffer in buffers {
   31|  2.33k|            buffer.deallocate()
   32|  2.33k|        }
   33|    591|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE16resolveBlockTypey0A5Types08FunctionH0V0A6Parser0gH0OKF:
   53|  1.28k|    func resolveBlockType(_ blockType: BlockType) throws -> FunctionType {
   54|  1.28k|        try FunctionType(blockType: blockType, typeSection: self.types)
   55|  1.27k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE12functionType_8interner0A5Types08FunctionG0Vs6UInt32V_AA8InternerCyAJGtKF:
   56|  2.81k|    func functionType(_ index: FunctionIndex, interner: Interner<FunctionType>) throws -> FunctionType {
   57|  2.81k|        return try interner.resolve(self.functions[validating: Int(index)].type)
   58|  2.81k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10globalTypey0A5Types05ValueG0Os6UInt32VKF:
   59|  6.51k|    func globalType(_ index: GlobalIndex) throws -> ValueType {
   60|  6.51k|        return try self.globals[validating: Int(index)].globalType.valueType
   61|  6.51k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10isMemory6411memoryIndexSbs6UInt32V_tKF:
   62|  25.5k|    func isMemory64(memoryIndex index: MemoryIndex) throws -> Bool {
   63|  25.5k|        return try self.memories[validating: Int(index)].limit.isMemory64
   64|  25.5k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE13resolveCalleeyAA16InternalFunctionVSgs6UInt32VF:
   75|  2.80k|    func resolveCallee(_ index: FunctionIndex) -> InternalFunction? {
   76|  2.80k|        return self.functions[Int(index)]
   77|  2.80k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE13resolveGlobalyACyAA0gC0VGSgs6UInt32VF:
   78|  6.50k|    func resolveGlobal(_ index: GlobalIndex) -> InternalGlobal? {
   79|  6.50k|        return self.globals[Int(index)]
   80|  6.50k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE06isSameE0ySbACyAEGF:
   81|  2.80k|    func isSameInstance(_ instance: InternalInstance) -> Bool {
   82|  2.80k|        return instance == self
   83|  2.80k|    }
$s7WasmKit17FrameHeaderLayoutV4typeAC0A5Types12FunctionTypeV_tcfC:
  194|  1.08k|    init(type: FunctionType) {
  195|  1.08k|        self.type = type
  196|  1.08k|        self.size = Self.size(of: type)
  197|  1.08k|    }
$s7WasmKit17FrameHeaderLayoutV8paramRegys5Int16VSiF:
  199|     15|    func paramReg(_ index: Int) -> VReg {
  200|     15|        VReg(index) - size
  201|     15|    }
$s7WasmKit17FrameHeaderLayoutV9returnRegys5Int16VSiF:
  203|    134|    func returnReg(_ index: Int) -> VReg {
  204|    134|        return VReg(index) - size
  205|    134|    }
$s7WasmKit17FrameHeaderLayoutV4size2ofs5Int16V0A5Types12FunctionTypeV_tFZ:
  207|  4.40k|    internal static func size(of: FunctionType) -> VReg {
  208|  4.40k|        size(parameters: of.parameters.count, results: of.results.count)
  209|  4.40k|    }
$s7WasmKit17FrameHeaderLayoutV4size10parameters7resultss5Int16VSi_SitFZ:
  210|  4.40k|    internal static func size(parameters: Int, results: Int) -> VReg {
  211|  4.40k|        VReg(max(parameters, results)) + VReg(numberOfSavingSlots)
  212|  4.40k|    }
$s7WasmKit17FrameHeaderLayoutV19numberOfSavingSlotsSivgZ:
  214|  4.91k|    internal static var numberOfSavingSlots: Int { 3 }
$s7WasmKit11StackLayoutV12stackRegBases5Int16Vvg:
  222|  1.08k|    var stackRegBase: VReg {
  223|  1.08k|        return VReg(numberOfLocals + constantSlotSize)
  224|  1.08k|    }
$s7WasmKit11StackLayoutV4type14numberOfLocals8codeSizeAC0A5Types12FunctionTypeV_S2itKcfC:
  226|  1.08k|    init(type: FunctionType, numberOfLocals: Int, codeSize: Int) throws {
  227|  1.08k|        self.frameHeader = FrameHeaderLayout(type: type)
  228|  1.08k|        self.numberOfLocals = numberOfLocals
  229|  1.08k|        // The number of constant slots is determined by the code size
  230|  1.08k|        // This is a heuristic value to balance the fast access to constants
  231|  1.08k|        // and the size of stack frame. Cap the slot size to avoid size explosion.
  232|  1.08k|        self.constantSlotSize = min(max(codeSize / 20, 4), 128)
  233|  1.08k|        let (maxSlots, overflow) = self.constantSlotSize.addingReportingOverflow(numberOfLocals)
  234|  1.08k|        guard !overflow, maxSlots < VReg.max else {
  235|      0|            throw TranslationError("The number of constant slots overflows")
  236|  1.08k|        }
  237|  1.08k|    }
$s7WasmKit11StackLayoutV8localRegys5Int16Vs6UInt32VF:
  239|  12.0k|    func localReg(_ index: LocalIndex) -> VReg {
  240|  12.0k|        if isParameter(index) {
  241|     15|            return frameHeader.paramReg(Int(index))
  242|  12.0k|        } else {
  243|  12.0k|            return VReg(index) - VReg(frameHeader.type.parameters.count)
  244|  12.0k|        }
  245|  12.0k|    }
$s7WasmKit11StackLayoutV11isParameterySbs6UInt32VF:
  247|  12.0k|    func isParameter(_ index: LocalIndex) -> Bool {
  248|  12.0k|        index < frameHeader.type.parameters.count
  249|  12.0k|    }
$s7WasmKit11StackLayoutV8constRegys5Int16VSiF:
  251|  7.92k|    func constReg(_ index: Int) -> VReg {
  252|  7.92k|        return VReg(numberOfLocals + index)
  253|  7.92k|    }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV4KindO5blockAIvgZ:
  311|    560|                static var block: Kind { .block(root: false) }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9reachableSbvpfi:
  319|  2.36k|            var reachable: Bool = true
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9copyTypesSay0aI09ValueTypeOGvg:
  321|  15.1k|            var copyTypes: [ValueType] {
  322|  15.1k|                switch self.kind {
  323|  15.1k|                case .block, .if:
  324|  13.0k|                    return blockType.results
  325|  15.1k|                case .loop:
  326|  2.01k|                    return blockType.parameters
  327|  15.1k|                }
  328|  15.1k|            }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9copyCounts6UInt16Vvg:
  329|  9.64k|            var copyCount: UInt16 {
  330|  9.64k|                return UInt16(copyTypes.count)
  331|  9.64k|            }
$s7WasmKit21InstructionTranslatorV12ControlStackV6frames021_3C1F9FC595E9AC192A47K10B121D811E8LLSayAE0E5FrameVGvpfi:
  334|  1.08k|        private var frames: [ControlFrame] = []
$s7WasmKit21InstructionTranslatorV12ControlStackV14numberOfFramesSivg:
  336|    966|        var numberOfFrames: Int { frames.count }
$s7WasmKit21InstructionTranslatorV12ControlStackV9pushFrameyyAE0eH0VF:
  338|  2.39k|        mutating func pushFrame(_ frame: ControlFrame) {
  339|  2.39k|            self.frames.append(frame)
  340|  2.39k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV8popFrameAE0eH0VSgyF:
  342|    496|        mutating func popFrame() -> ControlFrame? {
  343|    496|            self.frames.popLast()
  344|    496|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV15markUnreachableyyKF:
  346|  10.2k|        mutating func markUnreachable() throws {
  347|  10.2k|            try setReachability(false)
  348|  10.2k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV17resetReachabilityyyKF:
  349|     34|        mutating func resetReachability() throws {
  350|     34|            try setReachability(true)
  351|     34|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV15setReachability021_3C1F9FC595E9AC192A47L10B121D811E8LLyySbKF:
  353|  10.2k|        private mutating func setReachability(_ value: Bool) throws {
  354|  10.2k|            guard !self.frames.isEmpty else {
  355|      0|                throw ValidationError(.controlStackEmpty)
  356|  10.2k|            }
  357|  10.2k|            self.frames[self.frames.count - 1].reachable = value
  358|  10.2k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV12currentFrameAE0eH0VyKF:
  360|   105k|        func currentFrame() throws -> ControlFrame {
  361|   105k|            guard let frame = self.frames.last else {
  362|      0|                throw ValidationError(.controlStackEmpty)
  363|   105k|            }
  364|   105k|            return frame
  365|   105k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV12branchTarget13relativeDepthAE0E5FrameVs6UInt32V_tKF:
  367|  5.84k|        func branchTarget(relativeDepth: UInt32) throws -> ControlFrame {
  368|  5.84k|            let index = frames.count - 1 - Int(relativeDepth)
  369|  5.84k|            guard frames.indices.contains(index) else {
  370|      9|                throw ValidationError(.relativeDepthOutOfRange(relativeDepth: relativeDepth))
  371|  5.84k|            }
  372|  5.84k|            return frames[index]
  373|  5.84k|        }
$s7WasmKit21InstructionTranslatorV16MetaValueOnStackO4typeAC0eF0Ovg:
  386|  74.8k|        var type: MetaValue {
  387|  74.8k|            switch self {
  388|  74.8k|            case .local(let type, _): return .some(type)
  389|  74.8k|            case .stack(let type): return type
  390|  74.8k|            case .const(let type, _): return .some(type)
  391|  74.8k|            }
  392|  74.8k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV6values021_3C1F9FC595E9AC192A47K10B121D811E8LLSayAC04Metae2OnF0OGvpfi:
  402|  1.08k|        private var values: [MetaValueOnStack] = []
$s7WasmKit21InstructionTranslatorV10ValueStackV9maxHeightSivpfi:
  404|  1.08k|        private(set) var maxHeight: Int = 0
$s7WasmKit21InstructionTranslatorV10ValueStackV6heightSivg:
  405|   352k|        var height: Int { values.count }
$s7WasmKit21InstructionTranslatorV10ValueStackV11stackLayoutAeA0fH0V_tcfC:
  409|  1.08k|        init(stackLayout: StackLayout) {
  410|  1.08k|            self.stackRegBase = stackLayout.stackRegBase
  411|  1.08k|            self.stackLayout = stackLayout
  412|  1.08k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16V0A5Types0E4TypeOF:
  414|  75.7k|        mutating func push(_ value: ValueType) -> VReg {
  415|  75.7k|            push(.some(value))
  416|  75.7k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16VAC04MetaE0OF:
  417|  75.8k|        mutating func push(_ value: MetaValue) -> VReg {
  418|  75.8k|            // Record the maximum height of the stack we have seen
  419|  75.8k|            maxHeight = max(maxHeight, height)
  420|  75.8k|            let usedRegister = self.values.count
  421|  75.8k|            self.values.append(.stack(value))
  422|  75.8k|            assert(height < UInt16.max)
  423|  75.8k|            return stackRegBase + VReg(usedRegister)
  424|  75.8k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16VAC04MetaE0OFSbyXEfu_:
  422|  75.8k|            assert(height < UInt16.max)
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushLocal_6localsys6UInt32V_AC6LocalsVztKF:
  425|  6.73k|        mutating func pushLocal(_ localIndex: LocalIndex, locals: inout Locals) throws {
  426|  6.73k|            let type = try locals.type(of: localIndex)
  427|  6.73k|            self.values.append(.local(type, localIndex))
  428|  6.73k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushConst_4typeySi_0A5Types0E4TypeOtF:
  429|  8.86k|        mutating func pushConst(_ index: Int, type: ValueType) {
  430|  8.86k|            assert(index < stackLayout.constantSlotSize)
  431|  8.86k|            self.values.append(.const(type, index))
  432|  8.86k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushConst_4typeySi_0A5Types0E4TypeOtFSbyXEfu_:
  430|  8.86k|            assert(index < stackLayout.constantSlotSize)
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveLocalsOnF0ySays5Int16VGs6UInt32VF:
  433|  5.87k|        mutating func preserveLocalsOnStack(_ localIndex: LocalIndex) -> [VReg] {
  434|  5.87k|            var copyTo: [VReg] = []
  435|  13.4k|            for i in 0..<values.count {
  436|  13.4k|                guard case .local(let type, localIndex) = self.values[i] else { continue }
  437|  1.28k|                self.values[i] = .stack(.some(type))
  438|  1.28k|                copyTo.append(stackRegBase + VReg(i))
  439|  5.87k|            }
  440|  5.87k|            return copyTo
  441|  5.87k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveLocalsOnF05depthSays6UInt32V6source_s5Int16V2totGSi_tF:
  443|  5.56k|        mutating func preserveLocalsOnStack(depth: Int) -> [(source: LocalIndex, to: VReg)] {
  444|  5.56k|            var copies: [(source: LocalIndex, to: VReg)] = []
  445|  8.99k|            for offset in 0..<min(depth, self.values.count) {
  446|  8.99k|                let valueIndex = self.values.count - 1 - offset
  447|  8.99k|                let value = self.values[valueIndex]
  448|  8.99k|                guard case .local(let type, let localIndex) = value else { continue }
  449|     52|                self.values[valueIndex] = .stack(.some(type))
  450|     52|                copies.append((localIndex, self.stackRegBase + VReg(valueIndex)))
  451|  5.56k|            }
  452|  5.56k|            return copies
  453|  5.56k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveConstsOnF05depthSays5Int16V6source_AI2totGSi_tF:
  455|  4.81k|        mutating func preserveConstsOnStack(depth: Int) -> [(source: VReg, to: VReg)] {
  456|  4.81k|            var copies: [(source: VReg, to: VReg)] = []
  457|  4.81k|            for offset in 0..<min(depth, self.values.count) {
  458|    605|                let valueIndex = self.values.count - 1 - offset
  459|    605|                let value = self.values[valueIndex]
  460|    605|                guard case .const(let type, let index) = value else { continue }
  461|    441|                self.values[valueIndex] = .stack(.some(type))
  462|    441|                copies.append((stackLayout.constReg(index), self.stackRegBase + VReg(valueIndex)))
  463|  4.81k|            }
  464|  4.81k|            return copies
  465|  4.81k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV04makeE6Source021_3C1F9FC595E9AC192A47L10B121D811E8LLyAC0eH0OAC04Metae2OnF0OF:
  475|  74.8k|        private func makeValueSource(_ value: MetaValueOnStack) -> ValueSource {
  476|  74.8k|            let source: ValueSource
  477|  74.8k|            switch value {
  478|  74.8k|            case .local(_, let localIndex):
  479|  4.83k|                source = .local(localIndex)
  480|  74.8k|            case .stack:
  481|  62.3k|                source = .vreg(stackRegBase + VReg(height))
  482|  74.8k|            case .const(let type, let index):
  483|  7.71k|                source = .const(index, type)
  484|  74.8k|            }
  485|  74.8k|            return source
  486|  74.8k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV3popAC04MetaE0O_AC0E6SourceOtyKF:
  488|  74.8k|        mutating func pop() throws -> (MetaValue, ValueSource) {
  489|  74.8k|            guard let value = self.values.popLast() else {
  490|      0|                throw TranslationError("Expected a value on stack but it's empty")
  491|  74.8k|            }
  492|  74.8k|            let source = makeValueSource(value)
  493|  74.8k|            return (value.type, source)
  494|  74.8k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV3popyAC0E6SourceO0A5Types0E4TypeOKF:
  495|  74.8k|        mutating func pop(_ expected: ValueType) throws -> ValueSource {
  496|  74.8k|            let (value, register) = try pop()
  497|  74.8k|            switch value {
  498|  74.8k|            case .some(let actual):
  499|  74.8k|                guard actual == expected else {
  500|     34|                    throw TranslationError("Expected \(expected) on the stack top but got \(actual)")
  501|     34|                }
  502|  74.8k|            case .unknown: break  // OK
  503|  74.8k|            }
  504|  74.8k|            return register
  505|  74.8k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV8truncate6heightySi_tKF:
  517|  10.2k|        mutating func truncate(height: Int) throws {
  518|  10.2k|            guard height <= self.height else {
  519|      0|                throw TranslationError("Truncating to \(height) but the stack height is \(self.height)")
  520|  10.2k|            }
  521|  25.3k|            while height != self.height {
  522|  15.0k|                guard self.values.popLast() != nil else {
  523|      0|                    throw TranslationError("Internal consistency error: Stack height is \(self.height) but failed to pop")
  524|  15.0k|                }
  525|  15.0k|            }
  526|  10.2k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV9LabelUserV11descriptionSSvg:
  555|      8|            var description: String {
  556|      8|                "LabelUser:\(sourceLine)"
  557|      8|            }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6labelsSayAF10LabelEntryOGvpfi:
  570|  1.08k|        private var labels: [LabelEntry] = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV14unpinnedLabelsShySiGvpfi:
  571|  1.08k|        private var unpinnedLabels: Set<LabelRef> = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12instructionsSays6UInt64VGvpfi:
  572|  1.08k|        private var instructions: [UInt64] = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV11insertingPCAA18MetaProgramCounterAELLVvg:
  574|  92.8k|        fileprivate var insertingPC: MetaProgramCounter {
  575|  92.8k|            MetaProgramCounter(offsetFromHead: instructions.count)
  576|  92.8k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV19engineConfigurationAfA06EngineQ0V_tcfC:
  579|  1.08k|        init(engineConfiguration: EngineConfiguration) {
  580|  1.08k|            self.engineConfiguration = engineConfiguration
  581|  1.08k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV20assertDanglingLabelsyyKF:
  583|    958|        func assertDanglingLabels() throws {
  584|    958|            for ref in unpinnedLabels {
  585|     66|                let label = labels[ref]
  586|     66|                switch label {
  587|     66|                case .unpinned(let users):
  588|     66|                    guard !users.isEmpty else { continue }
  589|      1|                    throw TranslationError("Internal consistency error: Label (#\(ref)) is used but not pinned at finalization-time: \(users)")
  590|     66|                case .pinned: break  // unreachable in theory
  591|     66|                }
  592|    957|            }
  593|    957|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV5traceyySSyXKF:
  595|   277k|        func trace(_ message: @autoclosure () -> String) {
  596|       |            #if WASMKIT_TRANSLATOR_TRACE
  597|       |                print(message())
  598|       |            #endif
  599|   277k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6assign2at_ySi_AA0C0OtF:
  601|  2.14k|        private mutating func assign(at index: Int, _ instruction: Instruction) {
  602|  2.14k|            trace("assign: \(instruction)")
  603|  2.14k|            let headSlot = instruction.headSlot(threadingModel: engineConfiguration.threadingModel)
  604|  2.14k|            trace("        [\(index)] = 0x\(String(headSlot, radix: 16))")
  605|  2.14k|            self.instructions[index] = headSlot
  606|  2.14k|            if let immediate = instruction.rawImmediate {
  607|  2.14k|                var slots: [CodeSlot] = []
  608|  2.14k|                immediate.emit(to: { slots.append($0) })
  609|  2.14k|                for (i, slot) in slots.enumerated() {
  610|  2.14k|                    let slotIndex = index + 1 + i
  611|  2.14k|                    trace("        [\(slotIndex)] = 0x\(String(slot, radix: 16))")
  612|  2.14k|                    self.instructions[slotIndex] = slot
  613|  2.14k|                }
  614|  2.14k|            }
  615|  2.14k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6assign2at_ySi_AA0C0OtFys6UInt64VcfU_:
  608|  2.14k|                immediate.emit(to: { slots.append($0) })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV17resetLastEmissionyyF:
  617|  80.5k|        mutating func resetLastEmission() {
  618|  80.5k|            lastEmission = nil
  619|  80.5k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV010relinkLastC6ResultySbs5Int16VF:
  621|      6|        mutating func relinkLastInstructionResult(_ newResult: VReg) -> Bool {
  622|      6|            guard let lastEmission = self.lastEmission,
  623|      6|                let resultRelink = lastEmission.resultRelink
  624|      6|            else { return false }
  625|      6|            let newInstruction = resultRelink(newResult)
  626|      6|            assign(at: lastEmission.position.offsetFromHead, newInstruction)
  627|      6|            resetLastEmission()
  628|      6|            return true
  629|      6|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8emitSlotyys6UInt64VF:
  631|   186k|        private mutating func emitSlot(_ codeSlot: CodeSlot) {
  632|   186k|            trace("emitSlot[\(instructions.count)]: 0x\(String(codeSlot, radix: 16))")
  633|   186k|            self.instructions.append(codeSlot)
  634|   186k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8finalizeSays6UInt64VGyF:
  642|    957|        func finalize() -> [UInt64] {
  643|    957|            return instructions
  644|    957|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV4emit_12resultRelinkyAA0C0O_AJs5Int16VcSgtF:
  646|  84.9k|        mutating func emit(_ instruction: Instruction, resultRelink: ResultRelink? = nil) {
  647|  84.9k|            self.lastEmission = LastEmission(position: insertingPC, resultRelink: resultRelink)
  648|  84.9k|            trace("emitInstruction: \(instruction)")
  649|  84.9k|            emitSlot(instruction.headSlot(threadingModel: engineConfiguration.threadingModel))
  650|  84.9k|            if let immediate = instruction.rawImmediate {
  651|  74.1k|                var slots: [CodeSlot] = []
  652|  74.1k|                immediate.emit(to: { slots.append($0) })
  653|  96.4k|                for slot in slots { emitSlot(slot) }
  654|  74.1k|            }
  655|  84.9k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV4emit_12resultRelinkyAA0C0O_AJs5Int16VcSgtFys6UInt64VcfU_:
  652|  96.4k|                immediate.emit(to: { slots.append($0) })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8putLabelSiyF:
  657|    528|        mutating func putLabel() -> LabelRef {
  658|    528|            let ref = labels.count
  659|    528|            self.labels.append(.pinned(insertingPC))
  660|    528|            return ref
  661|    528|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV10allocLabelSiyF:
  663|  2.02k|        mutating func allocLabel() -> LabelRef {
  664|  2.02k|            let ref = labels.count
  665|  2.02k|            self.labels.append(.unpinned(users: []))
  666|  2.02k|            self.unpinnedLabels.insert(ref)
  667|  2.02k|            return ref
  668|  2.02k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12resolveLabelyAA18MetaProgramCounterAELLVSgSiF:
  670|      6|        fileprivate func resolveLabel(_ ref: LabelRef) -> MetaProgramCounter? {
  671|      6|            let entry = self.labels[ref]
  672|      6|            switch entry {
  673|      6|            case .pinned(let pc): return pc
  674|      6|            case .unpinned: return nil
  675|      6|            }
  676|      6|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8pinLabel_2pcySi_AA18MetaProgramCounterAELLVtKF:
  678|  1.20k|        fileprivate mutating func pinLabel(_ ref: LabelRef, pc: MetaProgramCounter) throws {
  679|  1.20k|            switch self.labels[ref] {
  680|  1.20k|            case .pinned(let oldPC):
  681|      1|                throw TranslationError("Internal consistency error: Label \(ref) is already pinned at \(oldPC), but tried to pin at \(pc) again")
  682|  1.20k|            case .unpinned(let users):
  683|  1.20k|                self.labels[ref] = .pinned(pc)
  684|  1.20k|                self.unpinnedLabels.remove(ref)
  685|  2.43k|                for user in users {
  686|  2.43k|                    switch user.action {
  687|  2.43k|                    case .emitInstruction(let insertAt, let source, let make):
  688|  1.67k|                        assign(at: insertAt.offsetFromHead, make(self, source, pc))
  689|  2.43k|                    case .fillBrTableEntry(let brTable, let index, let make):
  690|    752|                        brTable[index] = make(self, pc)
  691|  2.43k|                    }
  692|  2.43k|                }
  693|  1.20k|            }
  694|  1.20k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12pinLabelHereyySiKF:
  696|  1.20k|        mutating func pinLabelHere(_ ref: LabelRef) throws {
  697|  1.20k|            try pinLabel(ref, pc: insertingPC)
  698|  1.20k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oxc_SiSuxAF_AA18MetaProgramCounterAELLVAMtctAA0C9ImmediateRzlF:
  716|  2.39k|        ) {
  717|  2.39k|            let insertAt = insertingPC
  718|  2.39k|
  719|  2.39k|            // Emit dummy instruction to be replaced later
  720|  2.39k|            emitSlot(0)  // dummy opcode
  721|  2.39k|            var immediateSlots = 0
  722|  2.39k|            Immediate.emit(to: { _ in immediateSlots += 1 })
  723|  2.39k|            for _ in 0..<immediateSlots { emitSlot(0) }
  724|  2.39k|
  725|  2.39k|            // Schedule actual emission
  726|  2.39k|            emitWithLabel(
  727|  2.39k|                ref, insertAt: insertAt, line: line,
  728|  2.39k|                make: {
  729|  2.39k|                    makeInstruction(make($0, $1, $2))
  730|  2.39k|                })
  731|  2.39k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oxc_SiSuxAF_AA18MetaProgramCounterAELLVAMtctAA0C9ImmediateRzlFys6UInt64VxXEcfU_:
  722|  2.39k|            Immediate.emit(to: { _ in immediateSlots += 1 })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oxc_SiSuxAF_AA18MetaProgramCounterAELLVAMtctAA0C9ImmediateRzlFAkF_A2MtcfU0_:
  728|  2.13k|                make: {
  729|  2.13k|                    makeInstruction(make($0, $1, $2))
  730|  2.13k|                })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel_8insertAt4line4makeySi_AA18MetaProgramCounterAELLVSuAA0C0OAF_A2LtctF:
  741|  2.39k|        ) {
  742|  2.39k|            switch self.labels[ref] {
  743|  2.39k|            case .pinned(let pc):
  744|    459|                assign(at: insertAt.offsetFromHead, make(self, insertingPC, pc))
  745|  2.39k|            case .unpinned(var users):
  746|  1.93k|                users.append(LabelUser(action: .emitInstruction(insertAt: insertAt, source: insertingPC, make), sourceLine: line))
  747|  1.93k|                self.labels[ref] = .unpinned(users: users)
  748|  2.39k|            }
  749|  2.39k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV16fillBrTableEntry_5table5index4line4makeySi_SryAA0C0O0qR7OperandV0S0VGSiSuAqF_AA18MetaProgramCounterAELLVtctF:
  762|    829|        ) {
  763|    829|            switch self.labels[ref] {
  764|    829|            case .pinned(let pc):
  765|     32|                table[index] = make(self, pc)
  766|    829|            case .unpinned(var users):
  767|    797|                users.append(LabelUser(action: .fillBrTableEntry(buildingTable: table, index: index, make: make), sourceLine: line))
  768|    797|                self.labels[ref] = .unpinned(users: users)
  769|    829|            }
  770|    829|        }
$s7WasmKit21InstructionTranslatorV6LocalsV4type2of0A5Types9ValueTypeOs6UInt32V_tKF:
  778|  12.6k|        func type(of localIndex: UInt32) throws -> ValueType {
  779|  12.6k|            guard Int(localIndex) < types.count else {
  780|      2|                throw TranslationError("Local index \(localIndex) is out of range")
  781|  12.6k|            }
  782|  12.6k|            return self.types[Int(localIndex)]
  783|  12.6k|        }
$s7WasmKit21InstructionTranslatorV10ConstSlotsV11stackLayoutAeA05StackH0V_tcfC:
  791|  1.08k|        init(stackLayout: StackLayout) {
  792|  1.08k|            self.values = []
  793|  1.08k|            self.indexByValue = [:]
  794|  1.08k|            self.stackLayout = stackLayout
  795|  1.08k|        }
$s7WasmKit21InstructionTranslatorV10ConstSlotsV8allocateySiSg0A5Types5ValueOF:
  797|  8.96k|        mutating func allocate(_ value: Value) -> Int? {
  798|  8.96k|            let untyped = UntypedValue(value)
  799|  8.96k|            if let allocated = indexByValue[untyped] {
  800|  4.14k|                // NOTE: Share the same const slot for exactly the same bit pattern
  801|  4.14k|                // values even having different types
  802|  4.14k|                return allocated
  803|  4.81k|            }
  804|  4.81k|            guard values.count < stackLayout.constantSlotSize else { return nil }
  805|  4.71k|            let constSlotIndex = values.count
  806|  4.71k|            values.append(untyped)
  807|  4.71k|            indexByValue[untyped] = constSlotIndex
  808|  4.71k|            return constSlotIndex
  809|  8.96k|        }
$s7WasmKit21InstructionTranslatorV9allocator19engineConfiguration16funcTypeInterner6module4type6locals13functionIndex8codeSize14isIntercepting0R9DebuggingAcA13ISeqAllocatorC_AA06EngineG0VAA0J0Cy0A5Types08FunctionI0VGAA12EntityHandleVyAA08InstanceZ0VGAVSayAT05ValueI0OGs6UInt32VSiS2btKcfC:
  841|  1.08k|    ) throws {
  842|  1.08k|        self.allocator = allocator
  843|  1.08k|        self.funcTypeInterner = funcTypeInterner
  844|  1.08k|        self.type = type
  845|  1.08k|        self.module = module
  846|  1.08k|        self.iseqBuilder = ISeqBuilder(engineConfiguration: engineConfiguration)
  847|  1.08k|        self.controlStack = ControlStack()
  848|  1.08k|        self.stackLayout = try StackLayout(
  849|  1.08k|            type: type,
  850|  1.08k|            numberOfLocals: locals.count,
  851|  1.08k|            codeSize: codeSize
  852|  1.08k|        )
  853|  1.08k|        self.valueStack = ValueStack(stackLayout: stackLayout)
  854|  1.08k|        self.locals = Locals(types: type.parameters + locals)
  855|  1.08k|        self.functionIndex = functionIndex
  856|  1.08k|        self.isIntercepting = isIntercepting
  857|  1.08k|        self.isDebugging = isDebugging
  858|  1.08k|        self.constantSlots = ConstSlots(stackLayout: stackLayout)
  859|  1.08k|        self.validator = InstructionValidator(context: module)
  860|  1.08k|
  861|  1.08k|        do {
  862|  1.08k|            let endLabel = self.iseqBuilder.allocLabel()
  863|  1.08k|            let rootFrame = ControlStack.ControlFrame(
  864|  1.08k|                blockType: type,
  865|  1.08k|                stackHeight: 0,
  866|  1.08k|                continuation: endLabel,
  867|  1.08k|                kind: .block(root: true)
  868|  1.08k|            )
  869|  1.08k|            self.controlStack.pushFrame(rootFrame)
  870|  1.08k|        }
  871|  1.08k|    }
$s7WasmKit21InstructionTranslatorV9returnReg021_3C1F9FC595E9AC192A47J10B121D811E8LLys5Int16VSiF:
  873|     54|    private func returnReg(_ index: Int) -> VReg {
  874|     54|        return stackLayout.frameHeader.returnReg(index)
  875|     54|    }
$s7WasmKit21InstructionTranslatorV8localReg021_3C1F9FC595E9AC192A47J10B121D811E8LLys5Int16Vs6UInt32VF:
  876|  7.20k|    private func localReg(_ index: LocalIndex) -> VReg {
  877|  7.20k|        return stackLayout.localReg(index)
  878|  7.20k|    }
$s7WasmKit21InstructionTranslatorV4emit021_3C1F9FC595E9AC192A47I10B121D811E8LL_12resultRelinkyAA0C0O_AHs5Int16VcSgtF:
  880|  80.0k|    private mutating func emit(_ instruction: Instruction, resultRelink: ISeqBuilder.ResultRelink? = nil) {
  881|  80.0k|        iseqBuilder.emit(instruction, resultRelink: resultRelink)
  882|  80.0k|    }
$s7WasmKit21InstructionTranslatorV13emitCopyStack021_3C1F9FC595E9AC192A47K10B121D811E8LL4from2toSbs5Int16V_AItF:
  885|  3.10k|    private mutating func emitCopyStack(from source: VReg, to dest: VReg) -> Bool {
  886|  3.10k|        guard source != dest else { return false }
  887|  3.06k|        emit(.copyStack(Instruction.CopyStackOperand(source: LVReg(source), dest: LVReg(dest))))
  888|  3.06k|        return true
  889|  3.10k|    }
$s7WasmKit21InstructionTranslatorV15preserveOnStack021_3C1F9FC595E9AC192A47K10B121D811E8LL5depthySi_tF:
  891|  4.81k|    private mutating func preserveOnStack(depth: Int) {
  892|  4.81k|        preserveLocalsOnStack(depth: depth)
  893|  4.81k|        for (source, dest) in valueStack.preserveConstsOnStack(depth: depth) {
  894|    441|            emitCopyStack(from: source, to: dest)
  895|  4.81k|        }
  896|  4.81k|    }
$s7WasmKit21InstructionTranslatorV21preserveLocalsOnStack021_3C1F9FC595E9AC192A47L10B121D811E8LLyys6UInt32VF:
  898|  5.87k|    private mutating func preserveLocalsOnStack(_ localIndex: LocalIndex) {
  899|  5.87k|        for copyTo in valueStack.preserveLocalsOnStack(localIndex) {
  900|  1.28k|            emitCopyStack(from: localReg(localIndex), to: copyTo)
  901|  5.87k|        }
  902|  5.87k|    }
$s7WasmKit21InstructionTranslatorV21preserveLocalsOnStack021_3C1F9FC595E9AC192A47L10B121D811E8LL5depthySi_tF:
  909|  5.56k|    private mutating func preserveLocalsOnStack(depth: Int) {
  910|  5.56k|        for (sourceLocal, destReg) in valueStack.preserveLocalsOnStack(depth: depth) {
  911|     52|            emitCopyStack(from: localReg(sourceLocal), to: destReg)
  912|  5.56k|        }
  913|  5.56k|    }
$s7WasmKit21InstructionTranslatorV14checkBeforePop021_3C1F9FC595E9AC192A47K10B121D811E8LL8typeHint5depth12controlFrameSb0A5Types9ValueTypeOSg_SiAC12ControlStackV0yU0VtKF:
  919|  86.6k|    private func checkBeforePop(typeHint: ValueType?, depth: Int = 0, controlFrame: ControlStack.ControlFrame) throws -> Bool {
  920|  86.6k|        if _slowPath(valueStack.height - depth <= controlFrame.stackHeight) {
  921|  11.8k|            if controlFrame.reachable {
  922|      5|                throw ValidationError(.expectedTypeOnStackButEmpty(expected: typeHint))
  923|  11.7k|            }
  924|  11.7k|            // Too many pop on unreachable path is ignored
  925|  11.7k|            return false
  926|  74.8k|        }
  927|  74.8k|        return true
  928|  86.6k|    }
$s7WasmKit21InstructionTranslatorV14checkBeforePop021_3C1F9FC595E9AC192A47K10B121D811E8LL8typeHint5depthSb0A5Types9ValueTypeOSg_SitKF:
  929|  86.0k|    private func checkBeforePop(typeHint: ValueType?, depth: Int = 0) throws -> Bool {
  930|  86.0k|        let controlFrame = try controlStack.currentFrame()
  931|  86.0k|        return try self.checkBeforePop(typeHint: typeHint, depth: depth, controlFrame: controlFrame)
  932|  86.0k|    }
$s7WasmKit21InstructionTranslatorV12ensureOnVReg021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VAC11ValueSourceOF:
  933|  74.1k|    private mutating func ensureOnVReg(_ source: ValueSource) -> VReg {
  934|  74.1k|        // TODO: Copy to stack if source is on preg
  935|  74.1k|        // let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
  936|  74.1k|        switch source {
  937|  74.1k|        case .vreg(let register):
  938|  61.8k|            return register
  939|  74.1k|        case .local(let index):
  940|  4.83k|            return stackLayout.localReg(index)
  941|  74.1k|        case .const(let index, _):
  942|  7.48k|            return stackLayout.constReg(index)
  943|  74.1k|        }
  944|  74.1k|    }
$s7WasmKit21InstructionTranslatorV10popOperand021_3C1F9FC595E9AC192A47J10B121D811E8LLyAC11ValueSourceOSg0A5Types0P4TypeOKF:
  958|  79.8k|    private mutating func popOperand(_ type: ValueType) throws -> ValueSource? {
  959|  79.8k|        guard try checkBeforePop(typeHint: type) else {
  960|  11.2k|            return nil
  961|  68.6k|        }
  962|  68.6k|        iseqBuilder.resetLastEmission()
  963|  68.6k|        return try valueStack.pop(type)
  964|  79.8k|    }
$s7WasmKit21InstructionTranslatorV17popOnStackOperand021_3C1F9FC595E9AC192A47L10B121D811E8LLys5Int16VSg0A5Types9ValueTypeOKF:
  966|      3|    private mutating func popOnStackOperand(_ type: ValueType) throws -> VReg? {
  967|      3|        guard let op = try popOperand(type) else { return nil }
  968|      0|        return ensureOnStack(op)
  969|      3|    }
$s7WasmKit21InstructionTranslatorV14popVRegOperand021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VSg0A5Types9ValueTypeOKF:
  971|  78.4k|    private mutating func popVRegOperand(_ type: ValueType) throws -> VReg? {
  972|  78.4k|        guard let op = try popOperand(type) else { return nil }
  973|  68.5k|        return ensureOnVReg(op)
  974|  78.4k|    }
$s7WasmKit21InstructionTranslatorV13popAnyOperand021_3C1F9FC595E9AC192A47K10B121D811E8LLAC9MetaValueO_AC0R6SourceOSgtyKF:
  976|    149|    private mutating func popAnyOperand() throws -> (MetaValue, ValueSource?) {
  977|    149|        guard try checkBeforePop(typeHint: nil) else {
  978|    123|            return (.unknown, nil)
  979|    123|        }
  980|     25|        iseqBuilder.resetLastEmission()
  981|     25|        return try valueStack.pop()
  982|    149|    }
$s7WasmKit21InstructionTranslatorV13popPushValues021_3C1F9FC595E9AC192A47K10B121D811E8LLySiSay0A5Types9ValueTypeOGKF:
  985|    562|    private mutating func popPushValues(_ valueTypes: [ValueType]) throws -> Int {
  986|    562|        var values: [ValueSource?] = []
  987|    562|        for type in valueTypes.reversed() {
  988|      6|            values.append(try popOperand(type))
  989|    562|        }
  990|    562|        let stackHeight = self.valueStack.height
  991|    562|        for (type, value) in zip(valueTypes, values.reversed()) {
  992|      6|            switch value {
  993|      6|            case .local(let localIndex):
  994|      0|                // Re-push local variables to the stack
  995|      0|                _ = try valueStack.pushLocal(localIndex, locals: &locals)
  996|      6|            case .vreg, nil:
  997|      6|                _ = valueStack.push(type)
  998|      6|            case .const(let index, let type):
  999|      0|                valueStack.pushConst(index, type: type)
 1000|      6|            }
 1001|    562|        }
 1002|    562|        return stackHeight
 1003|    562|    }
$s7WasmKit21InstructionTranslatorV13checkStackTop021_3C1F9FC595E9AC192A47K10B121D811E8LLyySay0A5Types9ValueTypeOGKF:
 1005|    934|    private func checkStackTop(_ valueTypes: [ValueType]) throws {
 1006|    934|        for (stackDepth, type) in valueTypes.reversed().enumerated() {
 1007|    117|            guard try checkBeforePop(typeHint: type, depth: stackDepth) else { return }
 1008|      0|            let actual = valueStack.peekType(depth: stackDepth)
 1009|      0|            switch actual {
 1010|      0|            case .some(let actualType):
 1011|      0|                guard actualType == type else {
 1012|      0|                    throw ValidationError(.expectedTypeOnStack(expected: type, actual: actualType))
 1013|      0|                }
 1014|      0|            case .unknown: break
 1015|      0|            }
 1016|    817|        }
 1017|    817|    }
$s7WasmKit21InstructionTranslatorV15visitReturnLike021_3C1F9FC595E9AC192A47K10B121D811E8LLyyKF:
 1019|  3.48k|    private mutating func visitReturnLike() throws {
 1020|  3.48k|        try copyValuesIntoResultSlots(self.type.results, frameHeader: stackLayout.frameHeader)
 1021|  3.48k|    }
$s7WasmKit21InstructionTranslatorV25copyValuesIntoResultSlots021_3C1F9FC595E9AC192A47M10B121D811E8LL_11frameHeaderySay0A5Types9ValueTypeOG_AA05FrameT6LayoutVtKF:
 1026|  3.48k|    private mutating func copyValuesIntoResultSlots(_ valueTypes: [ValueType], frameHeader: FrameHeaderLayout) throws {
 1027|  3.48k|        var copies: [(source: VReg, dest: VReg)] = []
 1028|  3.48k|        for (index, resultType) in valueTypes.enumerated().reversed() {
 1029|  1.30k|            guard let operand = try popOperand(resultType) else { continue }
 1030|     80|            var source = ensureOnVReg(operand)
 1031|     80|            if case .local(let localIndex) = operand, stackLayout.isParameter(localIndex) {
 1032|      0|                // Parameter space is shared with return values, so we need to copy it to the stack
 1033|      0|                // before copying to the return slot to avoid overwriting the parameter value.
 1034|      0|                let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
 1035|      0|                emitCopyStack(from: localReg(localIndex), to: copyTo)
 1036|      0|                source = copyTo
 1037|      0|            }
 1038|     80|            let dest = frameHeader.returnReg(index)
 1039|     80|            copies.append((source, dest))
 1040|  3.48k|        }
 1041|  3.48k|        for (source, dest) in copies {
 1042|     80|            emitCopyStack(from: source, to: dest)
 1043|  3.48k|        }
 1044|  3.48k|    }
$s7WasmKit21InstructionTranslatorV12copyOnBranch021_3C1F9FC595E9AC192A47K10B121D811E8LL11targetFrameSbAC12ControlStackV0sR0V_tKF:
 1047|  3.16k|    private mutating func copyOnBranch(targetFrame frame: ControlStack.ControlFrame) throws -> Bool {
 1048|  3.16k|        preserveOnStack(depth: min(Int(frame.copyCount), valueStack.height - frame.stackHeight))
 1049|  3.16k|        let copyCount = VReg(frame.copyCount)
 1050|  3.16k|        let sourceBase = valueStack.stackRegBase + VReg(valueStack.height)
 1051|  3.16k|        let destBase = valueStack.stackRegBase + VReg(frame.stackHeight)
 1052|  3.16k|        var emittedCopy = false
 1053|  3.16k|        for i in (0..<copyCount).reversed() {
 1054|    211|            let source = sourceBase - 1 - VReg(i)
 1055|    211|            let dest: VReg
 1056|    211|            if case .block(root: true) = frame.kind {
 1057|     54|                dest = returnReg(Int(copyCount - 1 - i))
 1058|    157|            } else {
 1059|    157|                dest = destBase + copyCount - 1 - VReg(i)
 1060|    157|            }
 1061|    211|            let copied = emitCopyStack(from: source, to: dest)
 1062|    211|            emittedCopy = emittedCopy || copied
 1063|  3.16k|        }
 1064|  3.16k|        return emittedCopy
 1065|  3.16k|    }
$s7WasmKit21InstructionTranslatorV12copyOnBranch021_3C1F9FC595E9AC192A47K10B121D811E8LL11targetFrameSbAC12ControlStackV0sR0V_tKFSbyKXEfu_:
 1062|    169|            emittedCopy = emittedCopy || copied
$s7WasmKit21InstructionTranslatorV15translateReturn021_3C1F9FC595E9AC192A47J10B121D811E8LLyyKF:
 1066|  3.48k|    private mutating func translateReturn() throws {
 1067|  3.48k|        if isIntercepting {
 1068|      0|            // Emit `onExit` instruction before every `return` instruction
 1069|      0|            emit(.onExit(functionIndex))
 1070|      0|        }
 1071|  3.48k|        try visitReturnLike()
 1072|  3.48k|        iseqBuilder.emit(._return)
 1073|  3.48k|    }
$s7WasmKit21InstructionTranslatorV15markUnreachable021_3C1F9FC595E9AC192A47J10B121D811E8LLyyKF:
 1074|  10.2k|    private mutating func markUnreachable() throws {
 1075|  10.2k|        try controlStack.markUnreachable()
 1076|  10.2k|        let currentFrame = try controlStack.currentFrame()
 1077|  10.2k|        try valueStack.truncate(height: currentFrame.stackHeight)
 1078|  10.2k|    }
$s7WasmKit21InstructionTranslatorV8finalize021_3C1F9FC595E9AC192A47I10B121D811E8LLAA0C8SequenceVyKF:
 1080|    962|    private mutating func finalize() throws -> InstructionSequence {
 1081|    962|        if controlStack.numberOfFrames > 1 {
 1082|      4|            throw ValidationError(.expectedMoreEndInstructions(count: controlStack.numberOfFrames - 1))
 1083|    958|        }
 1084|    958|        // Check dangling labels
 1085|    958|        try iseqBuilder.assertDanglingLabels()
 1086|    957|
 1087|    957|        iseqBuilder.emit(._return)
 1088|    957|        let instructions = iseqBuilder.finalize()
 1089|    957|        // TODO: Figure out a way to avoid the copy here while keeping the execution performance.
 1090|    957|        let buffer = allocator.allocateInstructions(capacity: instructions.count)
 1091|   161k|        for (idx, instruction) in instructions.enumerated() {
 1092|   161k|            buffer[idx] = instruction
 1093|   161k|        }
 1094|    957|        let constants = allocator.allocateConstants(self.constantSlots.values)
 1095|    957|        return InstructionSequence(
 1096|    957|            instructions: buffer,
 1097|    957|            maxStackHeight: Int(valueStack.stackRegBase) + valueStack.maxHeight,
 1098|    957|            constants: constants
 1099|    957|        )
 1100|    962|    }
$s7WasmKit21InstructionTranslatorV9translate4codeAA0C8SequenceV0A6Parser4CodeV_tKF:
 1105|  1.08k|    mutating func translate(code: Code) throws -> InstructionSequence {
 1106|  1.08k|        if isIntercepting {
 1107|      0|            // Emit `onEnter` instruction at the beginning of the function
 1108|      0|            emit(.onEnter(functionIndex))
 1109|      0|        }
 1110|  1.08k|        var parser = ExpressionParser(code: code)
 1111|  1.08k|        var offset = parser.offset
 1112|  1.08k|        do {
 1113|   110k|            while try parser.visit(visitor: &self) {
 1114|   109k|                offset = parser.offset
 1115|   109k|            }
 1116|    962|        } catch var error as ValidationError {
 1117|     56|            error.offset = offset
 1118|     56|            throw error
 1119|    962|        }
 1120|    962|        return try finalize()
 1121|  1.08k|    }
$s7WasmKit21InstructionTranslatorV16visitUnreachableyyKF:
 1125|  5.03k|    mutating func visitUnreachable() throws -> Output {
 1126|  5.03k|        emit(.unreachable)
 1127|  5.03k|        try markUnreachable()
 1128|  5.03k|    }
$s7WasmKit21InstructionTranslatorV8visitNopyyF:
 1129|  1.30k|    mutating func visitNop() -> Output { emit(.nop) }
$s7WasmKit21InstructionTranslatorV10visitBlock9blockTypey0A6Parser0fH0O_tKF:
 1131|    566|    mutating func visitBlock(blockType: WasmParser.BlockType) throws -> Output {
 1132|    566|        let blockType = try module.resolveBlockType(blockType)
 1133|    560|        let endLabel = iseqBuilder.allocLabel()
 1134|    560|        self.preserveLocalsOnStack(depth: self.valueStack.height)
 1135|    560|        let stackHeight = try popPushValues(blockType.parameters)
 1136|    560|        controlStack.pushFrame(ControlStack.ControlFrame(blockType: blockType, stackHeight: stackHeight, continuation: endLabel, kind: .block))
 1137|    560|    }
$s7WasmKit21InstructionTranslatorV9visitLoop9blockTypey0A6Parser05BlockH0O_tKF:
 1139|    528|    mutating func visitLoop(blockType: WasmParser.BlockType) throws -> Output {
 1140|    528|        let blockType = try module.resolveBlockType(blockType)
 1141|    528|        preserveOnStack(depth: blockType.parameters.count)
 1142|    528|        iseqBuilder.resetLastEmission()
 1143|    528|        for param in blockType.parameters.reversed() {
 1144|      0|            _ = try popOperand(param)
 1145|    528|        }
 1146|    528|        let headLabel = iseqBuilder.putLabel()
 1147|    528|        let stackHeight = self.valueStack.height
 1148|    528|        for param in blockType.parameters {
 1149|      0|            _ = valueStack.push(param)
 1150|    528|        }
 1151|    528|        controlStack.pushFrame(ControlStack.ControlFrame(blockType: blockType, stackHeight: stackHeight, continuation: headLabel, kind: .loop))
 1152|    528|    }
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKF:
 1154|    192|    mutating func visitIf(blockType: WasmParser.BlockType) throws -> Output {
 1155|    192|        // Pop condition value
 1156|    192|        let condition = try popVRegOperand(.i32)
 1157|    190|        let blockType = try module.resolveBlockType(blockType)
 1158|    190|        self.preserveLocalsOnStack(depth: self.valueStack.height)
 1159|    190|        preserveOnStack(depth: blockType.parameters.count)
 1160|    190|        let endLabel = iseqBuilder.allocLabel()
 1161|    190|        let elseLabel = iseqBuilder.allocLabel()
 1162|    190|        for param in blockType.parameters.reversed() {
 1163|     12|            _ = try popOperand(param)
 1164|    190|        }
 1165|    190|        let stackHeight = self.valueStack.height
 1166|    190|        for param in blockType.parameters {
 1167|     12|            _ = valueStack.push(param)
 1168|    190|        }
 1169|    190|        controlStack.pushFrame(
 1170|    190|            ControlStack.ControlFrame(
 1171|    190|                blockType: blockType, stackHeight: stackHeight, continuation: endLabel,
 1172|    190|                kind: .if(elseLabel: elseLabel, endLabel: endLabel, isElse: false)
 1173|    190|            )
 1174|    190|        )
 1175|    190|        guard let condition = condition else { return }
 1176|      8|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
 1177|      8|            let targetPC: MetaProgramCounter
 1178|      8|            if let elsePC = iseqBuilder.resolveLabel(elseLabel) {
 1179|      8|                targetPC = elsePC
 1180|      8|            } else {
 1181|      8|                targetPC = endPC
 1182|      8|            }
 1183|      8|            let elseOrEnd = UInt32(targetPC.offsetFromHead - selfPC.offsetFromHead)
 1184|      8|            return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(elseOrEnd))
 1185|      8|        }
 1186|      8|    }
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0OAJ02BrF7OperandVYbcAJmYbcfu_:
 1176|      8|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0OAJ02BrF7OperandVYbcAJmYbcfu_AjLYbcfu0_:
 1176|      6|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0O02BrF7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47R10B121D811E8LLV_AA18MetaProgramCounterANLLVAQtcfU_:
 1176|      6|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
 1177|      6|            let targetPC: MetaProgramCounter
 1178|      6|            if let elsePC = iseqBuilder.resolveLabel(elseLabel) {
 1179|      0|                targetPC = elsePC
 1180|      6|            } else {
 1181|      6|                targetPC = endPC
 1182|      6|            }
 1183|      6|            let elseOrEnd = UInt32(targetPC.offsetFromHead - selfPC.offsetFromHead)
 1184|      6|            return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(elseOrEnd))
 1185|      6|        }
$s7WasmKit21InstructionTranslatorV9visitElseyyKF:
 1188|     34|    mutating func visitElse() throws -> Output {
 1189|     34|        var frame = try controlStack.currentFrame()
 1190|     34|        guard case .if(let elseLabel, let endLabel, _) = frame.kind else {
 1191|      0|            throw ValidationError(.expectedIfControlFrame)
 1192|     34|        }
 1193|     34|        preserveOnStack(depth: valueStack.height - frame.stackHeight)
 1194|     34|        try controlStack.resetReachability()
 1195|     34|        iseqBuilder.resetLastEmission()
 1196|     34|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
 1197|     34|            let offset = endPC.offsetFromHead - selfPC.offsetFromHead
 1198|     34|            return Int32(offset)
 1199|     34|        }
 1200|    102|        for result in frame.blockType.results.reversed() {
 1201|    102|            guard try checkBeforePop(typeHint: result, controlFrame: frame) else { continue }
 1202|      0|            _ = try valueStack.pop(result)
 1203|     34|        }
 1204|     34|        guard valueStack.height == frame.stackHeight else {
 1205|      0|            throw ValidationError(.valuesRemainingAtEndOfBlock)
 1206|     34|        }
 1207|     34|        _ = controlStack.popFrame()
 1208|     34|        frame.kind = .if(elseLabel: elseLabel, endLabel: endLabel, isElse: true)
 1209|     34|        frame.reachable = true
 1210|     34|        controlStack.pushFrame(frame)
 1211|     34|
 1212|     34|        // Re-push parameters
 1213|     34|        for parameter in frame.blockType.parameters {
 1214|      0|            _ = valueStack.push(parameter)
 1215|     34|        }
 1216|     34|        try iseqBuilder.pinLabelHere(elseLabel)
 1217|     34|    }
$s7WasmKit21InstructionTranslatorV9visitElseyyKFAA0C0Os5Int32VYbcAFmYbcfu_:
 1196|     34|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV9visitElseyyKFAA0C0Os5Int32VYbcAFmYbcfu_AfHYbcfu0_:
 1196|      1|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV9visitElseyyKFs5Int32VAC11ISeqBuilder021_3C1F9FC595E9AC192A47M10B121D811E8LLV_AA18MetaProgramCounterAHLLVAKtcfU_:
 1196|      1|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
 1197|      1|            let offset = endPC.offsetFromHead - selfPC.offsetFromHead
 1198|      1|            return Int32(offset)
 1199|      1|        }
$s7WasmKit21InstructionTranslatorV8visitEndyyKF:
 1219|  1.40k|    mutating func visitEnd() throws -> Output {
 1220|  1.40k|        let toBePopped = try controlStack.currentFrame()
 1221|  1.40k|        iseqBuilder.resetLastEmission()
 1222|  1.40k|        if case .block(root: true) = toBePopped.kind {
 1223|    933|            try translateReturn()
 1224|    933|            guard valueStack.height == toBePopped.stackHeight else {
 1225|      1|                throw ValidationError(.valuesRemainingAtEndOfBlock)
 1226|    932|            }
 1227|    932|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1228|    931|            return
 1229|    933|        }
 1230|    471|
 1231|    471|        if case .if(_, _, isElse: false) = toBePopped.kind {
 1232|     36|            let blockType = toBePopped.blockType
 1233|     36|            guard blockType.parameters == blockType.results else {
 1234|      2|                throw ValidationError(.parameterResultTypeMismatch(blockType: blockType))
 1235|     34|            }
 1236|    469|        }
 1237|    469|
 1238|    469|        preserveOnStack(depth: Int(valueStack.height - toBePopped.stackHeight))
 1239|    469|        switch toBePopped.kind {
 1240|    469|        case .block:
 1241|    201|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1242|    469|        case .loop: break
 1243|    469|        case .if:
 1244|     35|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1245|    469|        }
 1246|    566|        for result in toBePopped.blockType.results.reversed() {
 1247|    566|            guard try checkBeforePop(typeHint: result, controlFrame: toBePopped) else { continue }
 1248|    424|            _ = try valueStack.pop(result)
 1249|    466|        }
 1250|    466|        guard valueStack.height == toBePopped.stackHeight else {
 1251|      4|            throw ValidationError(.valuesRemainingAtEndOfBlock)
 1252|    462|        }
 1253|    563|        for result in toBePopped.blockType.results {
 1254|    563|            _ = valueStack.push(result)
 1255|    563|        }
 1256|    462|        _ = controlStack.popFrame()
 1257|    462|    }
$s7WasmKit21InstructionTranslatorV15computePopCount021_3C1F9FC595E9AC192A47K10B121D811E8LL11destination12currentFrame0R6Heights6UInt32VAC12ControlStackV0vS0V_ANSitKFZ:
 1263|  2.23k|    ) throws -> UInt32 {
 1264|  2.23k|        let popCount: UInt32
 1265|  2.23k|        if _fastPath(currentFrame.reachable) {
 1266|    635|            let count = currentHeight - Int(destination.copyCount) - destination.stackHeight
 1267|    635|            guard count >= 0 else {
 1268|      1|                throw ValidationError(.stackHeightUnderflow(available: currentHeight, required: destination.stackHeight + Int(destination.copyCount)))
 1269|    634|            }
 1270|    634|            popCount = UInt32(count)
 1271|  1.60k|        } else {
 1272|  1.60k|            // Slow path: This path is taken when "br" is placed after "unreachable"
 1273|  1.60k|            // It's ok to put the fake popCount because it will not be executed at runtime.
 1274|  1.60k|            popCount = 0
 1275|  2.23k|        }
 1276|  2.23k|        return popCount
 1277|  2.23k|    }
$s7WasmKit21InstructionTranslatorV10emitBranch021_3C1F9FC595E9AC192A47J10B121D811E8LL_13relativeDepth4makeyAA0C0Oxc_s6UInt32Vxs5Int32V_A2KtctKAA0C9ImmediateRzlF:
 1283|  2.23k|    ) throws {
 1284|  2.23k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1285|  2.23k|        let copyCount = frame.copyCount
 1286|  2.23k|        let popCount = try Self.computePopCount(
 1287|  2.23k|            destination: frame,
 1288|  2.23k|            currentFrame: try controlStack.currentFrame(),
 1289|  2.23k|            currentHeight: valueStack.height
 1290|  2.23k|        )
 1291|  2.23k|        iseqBuilder.emitWithLabel(makeInstruction, frame.continuation) { _, selfPC, continuation in
 1292|  2.23k|            let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1293|  2.23k|            return make(Int32(relativeOffset), UInt32(copyCount), popCount)
 1294|  2.23k|        }
 1295|  2.23k|    }
$s7WasmKit21InstructionTranslatorV10emitBranch021_3C1F9FC595E9AC192A47J10B121D811E8LL_13relativeDepth4makeyAA0C0Oxc_s6UInt32Vxs5Int32V_A2KtctKAA0C9ImmediateRzlFxAC11ISeqBuilderAELLV_AA18MetaProgramCounterAELLVARtcfU_:
 1291|  2.11k|        iseqBuilder.emitWithLabel(makeInstruction, frame.continuation) { _, selfPC, continuation in
 1292|  2.11k|            let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1293|  2.11k|            return make(Int32(relativeOffset), UInt32(copyCount), popCount)
 1294|  2.11k|        }
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKF:
 1296|  2.23k|    mutating func visitBr(relativeDepth: UInt32) throws -> Output {
 1297|  2.23k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1298|  2.23k|
 1299|  2.23k|        // Copy from the stack top to the bottom to avoid overwrites
 1300|  2.23k|        //              [BLOCK1]
 1301|  2.23k|        //              [      ]
 1302|  2.23k|        //              [      ]
 1303|  2.23k|        //              [BLOCK2] () -> (i32, i64)
 1304|  2.23k|        // copy [1] +-->[  i32 ]
 1305|  2.23k|        //          +---[  i32 ]<--+ copy [2]
 1306|  2.23k|        //              [  i64 ]---+
 1307|  2.23k|        try copyOnBranch(targetFrame: frame)
 1308|  2.23k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1309|  2.23k|            return offset
 1310|  2.23k|        }
 1311|  2.23k|        for type in frame.copyTypes.reversed() {
 1312|     82|            _ = try popOperand(type)
 1313|  2.22k|        }
 1314|  2.22k|        try markUnreachable()
 1315|  2.22k|    }
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VYbcAImYbcfu_:
 1308|  2.23k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VYbcAImYbcfu_AiKYbcfu0_:
 1308|  2.11k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFs5Int32VAI_A2GtcfU_:
 1308|  2.11k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1309|  2.11k|            return offset
 1310|  2.11k|        }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKF:
 1317|     16|    mutating func visitBrIf(relativeDepth: UInt32) throws -> Output {
 1318|     16|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1319|     16|        let condition = try popVRegOperand(.i32)
 1320|     16|
 1321|     16|        if frame.copyCount == 0 {
 1322|     14|            guard let condition else { return }
 1323|     14|            // Optimization where we don't need copying values when the branch taken
 1324|     14|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
 1325|     14|                let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1326|     14|                return Instruction.BrIfOperand(
 1327|     14|                    condition: LVReg(condition), offset: Int32(relativeOffset)
 1328|     14|                )
 1329|     14|            }
 1330|     14|            return
 1331|     14|        }
 1332|      2|        preserveOnStack(depth: valueStack.height - frame.stackHeight)
 1333|      2|
 1334|      2|        if let condition {
 1335|      2|            // If branch taken, fallthrough to landing pad, copy stack values
 1336|      2|            // then branch to the actual place
 1337|      2|            // If branch not taken, branch to the next of the landing pad
 1338|      2|            //
 1339|      2|            // (block (result i32)
 1340|      2|            //   (i32.const 42)
 1341|      2|            //   (i32.const 24)
 1342|      2|            //   (local.get 0)
 1343|      2|            //   (br_if 0) ------+
 1344|      2|            //   (local.get 1)   |
 1345|      2|            // )         <-------+
 1346|      2|            //
 1347|      2|            // [0x00] (i32.const 42 reg:0)
 1348|      2|            // [0x01] (i32.const 24 reg:1)
 1349|      2|            // [0x02] (local.get 0 result=reg:2)
 1350|      2|            // [0x03] (br_if_z offset=+0x3 cond=reg:2) --+
 1351|      2|            // [0x04] (stack.copy reg:1 -> reg:0)        |
 1352|      2|            // [0x05] (br offset=+0x2) --------+         |
 1353|      2|            // [0x06] (local.get 1 reg:2) <----|---------+
 1354|      2|            // [0x07] ...              <-------+
 1355|      2|            let onBranchNotTaken = iseqBuilder.allocLabel()
 1356|      2|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
 1357|      2|                let relativeOffset = continuation.offsetFromHead - conditionCheckAt.offsetFromHead
 1358|      2|                return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(relativeOffset))
 1359|      2|            }
 1360|      2|            try copyOnBranch(targetFrame: frame)
 1361|      2|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1362|      2|                return offset
 1363|      2|            }
 1364|      2|            try iseqBuilder.pinLabelHere(onBranchNotTaken)
 1365|      2|        }
 1366|      2|        try popPushValues(frame.copyTypes)
 1367|      2|    }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVYbcAImYbcfu_:
 1324|     14|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVYbcAImYbcfu_AiKYbcfu0_:
 1324|     14|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0O0fG7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLV_AA18MetaProgramCounterAMLLVAPtcfU_:
 1324|     14|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
 1325|     14|                let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1326|     14|                return Instruction.BrIfOperand(
 1327|     14|                    condition: LVReg(condition), offset: Int32(relativeOffset)
 1328|     14|                )
 1329|     14|            }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVYbcAImYbcfu1_:
 1356|      2|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVYbcAImYbcfu1_AiKYbcfu2_:
 1356|      2|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0O0fG7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLV_AA18MetaProgramCounterAMLLVAPtcfU0_:
 1356|      2|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
 1357|      2|                let relativeOffset = continuation.offsetFromHead - conditionCheckAt.offsetFromHead
 1358|      2|                return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(relativeOffset))
 1359|      2|            }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VYbcAImYbcfu3_:
 1361|      2|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VYbcAImYbcfu3_AiKYbcfu4_:
 1361|      2|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFs5Int32VAI_A2GtcfU1_:
 1361|      2|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1362|      2|                return offset
 1363|      2|            }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKF:
 1369|    456|    mutating func visitBrTable(targets: WasmParser.BrTable) throws -> Output {
 1370|    456|        guard let index = try popVRegOperand(.i32) else { return }
 1371|    423|
 1372|    423|        let defaultFrame = try controlStack.branchTarget(relativeDepth: targets.defaultIndex)
 1373|    421|
 1374|    421|        // If this instruction is unreachable, copyCount might be greater than the actual stack height
 1375|    421|        try preserveOnStack(
 1376|    421|            depth: min(
 1377|    421|                Int(defaultFrame.copyCount),
 1378|    421|                valueStack.height - controlStack.currentFrame().stackHeight
 1379|    421|            )
 1380|    421|        )
 1381|    421|        let allLabelIndices = targets.labelIndices + [targets.defaultIndex]
 1382|    421|        let tableBuffer = allocator.allocateBrTable(capacity: allLabelIndices.count)
 1383|    421|        let operand = Instruction.BrTableOperand(
 1384|    421|            baseAddress: tableBuffer.baseAddress!,
 1385|    421|            count: UInt16(tableBuffer.count), index: index
 1386|    421|        )
 1387|    421|        iseqBuilder.emit(.brTable(operand))
 1388|    421|        let brTableAt = iseqBuilder.insertingPC
 1389|    421|
 1390|    421|        //
 1391|    421|        // (block $l1 (result i32)
 1392|    421|        //   (i32.const 63)
 1393|    421|        //   (block $l2 (result i32)
 1394|    421|        //     (i32.const 42)
 1395|    421|        //     (i32.const 24)
 1396|    421|        //     (local.get 0)
 1397|    421|        //     (br_table $l1 $l2) ---+
 1398|    421|        //                           |
 1399|    421|        //   )               <-------+
 1400|    421|        //   (i32.const 36)          |
 1401|    421|        // )              <----------+
 1402|    421|        //
 1403|    421|        //
 1404|    421|        //           [0x00] (i32.const 63 reg:0)
 1405|    421|        //           [0x01] (i32.const 42 reg:1)
 1406|    421|        //           [0x02] (i32.const 24 reg:2)
 1407|    421|        //           [0x03] (local.get 0 result=reg:3)
 1408|    421|        //           [0x04] (br_table index=reg:3 offsets=[
 1409|    421|        //                    +0x01       -----------------+
 1410|    421|        //                    +0x03       -----------------|----+
 1411|    421|        //                  ])                             |    |
 1412|    421|        //           [0x05] (stack.copy reg:2 -> reg:0) <--+    |
 1413|    421|        //  +------- [0x06] (br offset=+0x03)                   |
 1414|    421|        //  |        [0x07] (stack.copy reg:2 -> reg:1)  <------+
 1415|    421|        //  |  +---- [0x08] (br offset=+0x03)
 1416|    421|        //  +--|---> [0x09] (i32.const 36 reg:2)
 1417|    421|        //     |     [0x0a] (stack.copy reg:2 -> reg:0)
 1418|    421|        //     +---> [0x0b] ...
 1419|    936|        for (entryIndex, labelIndex) in allLabelIndices.enumerated() {
 1420|    936|            let frame = try controlStack.branchTarget(relativeDepth: labelIndex)
 1421|    935|
 1422|    935|            // Check copyTypes consistency
 1423|    935|            guard frame.copyTypes.count == defaultFrame.copyTypes.count else {
 1424|      1|                throw ValidationError(.expectedSameCopyTypes(frameCopyTypes: frame.copyTypes, defaultFrameCopyTypes: defaultFrame.copyTypes))
 1425|    934|            }
 1426|    934|            try checkStackTop(frame.copyTypes)
 1427|    934|
 1428|    934|            do {
 1429|    934|                let relativeOffset = iseqBuilder.insertingPC.offsetFromHead - brTableAt.offsetFromHead
 1430|    934|                tableBuffer[entryIndex] = Instruction.BrTableOperand.Entry(
 1431|    934|                    offset: Int32(relativeOffset)
 1432|    934|                )
 1433|    934|            }
 1434|    934|            let emittedCopy = try copyOnBranch(targetFrame: frame)
 1435|    934|            if emittedCopy {
 1436|    105|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
 1437|    105|                    let relativeOffset = continuation.offsetFromHead - brAt.offsetFromHead
 1438|    105|                    return Int32(relativeOffset)
 1439|    105|                }
 1440|    829|            } else {
 1441|    829|                // Optimization: If no value is copied, we can directly jump to the target
 1442|    829|                iseqBuilder.fillBrTableEntry(frame.continuation, table: tableBuffer, index: entryIndex) { _, continuation in
 1443|    829|                    return Instruction.BrTableOperand.Entry(offset: Int32(continuation.offsetFromHead - brTableAt.offsetFromHead))
 1444|    829|                }
 1445|    829|            }
 1446|    934|        }
 1447|    419|        // Pop branch copy values for type checking
 1448|    419|        for type in defaultFrame.copyTypes.reversed() {
 1449|      7|            _ = try popOperand(type)
 1450|    419|        }
 1451|    419|        try markUnreachable()
 1452|    419|    }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0Os5Int32VYbcAJmYbcfu_:
 1436|    105|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0O0fG7OperandV5EntryVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLV_AA18MetaProgramCounterAPLLVtcfU0_:
 1442|    784|                iseqBuilder.fillBrTableEntry(frame.continuation, table: tableBuffer, index: entryIndex) { _, continuation in
 1443|    784|                    return Instruction.BrTableOperand.Entry(offset: Int32(continuation.offsetFromHead - brTableAt.offsetFromHead))
 1444|    784|                }
$s7WasmKit21InstructionTranslatorV11visitReturnyyKF:
 1454|  2.54k|    mutating func visitReturn() throws -> Output {
 1455|  2.54k|        try translateReturn()
 1456|  2.54k|        try markUnreachable()
 1457|  2.54k|    }
$s7WasmKit21InstructionTranslatorV13visitCallLike021_3C1F9FC595E9AC192A47K10B121D811E8LL10calleeTypes5Int16VSg0A5Types08FunctionR0V_tKF:
 1459|  2.80k|    private mutating func visitCallLike(calleeType: FunctionType) throws -> VReg? {
 1460|  2.80k|        for parameter in calleeType.parameters.reversed() {
 1461|      3|            guard (try popOnStackOperand(parameter)) != nil else { return nil }
 1462|  2.80k|        }
 1463|  2.80k|
 1464|  2.80k|        let spAddend =
 1465|  2.80k|            valueStack.stackRegBase + VReg(valueStack.height)
 1466|  2.80k|            + FrameHeaderLayout.size(of: calleeType)
 1467|  2.80k|
 1468|  2.80k|        for result in calleeType.results {
 1469|  1.23k|            _ = valueStack.push(result)
 1470|  2.80k|        }
 1471|  2.80k|        return VReg(spAddend)
 1472|  2.80k|    }
$s7WasmKit21InstructionTranslatorV9visitCall13functionIndexys6UInt32V_tKF:
 1473|  2.80k|    mutating func visitCall(functionIndex: UInt32) throws -> Output {
 1474|  2.80k|        let calleeType = try self.module.functionType(functionIndex, interner: funcTypeInterner)
 1475|  2.80k|        guard let spAddend = try visitCallLike(calleeType: calleeType) else { return }
 1476|  2.80k|        guard let callee = self.module.resolveCallee(functionIndex) else {
 1477|      0|            // Skip actual code emission if validation-only mode
 1478|      0|            return
 1479|  2.80k|        }
 1480|  2.80k|        if callee.isWasm {
 1481|  2.80k|            if module.isSameInstance(callee.wasm.instance) {
 1482|  2.80k|                emit(.compilingCall(Instruction.CallOperand(callee: callee, spAddend: spAddend)))
 1483|  2.80k|                return
 1484|  2.80k|            }
 1485|      0|        }
 1486|      0|        emit(.call(Instruction.CallOperand(callee: callee, spAddend: spAddend)))
 1487|      0|    }
$s7WasmKit21InstructionTranslatorV31prepareFrameHeaderForReturnCall021_3C1F9FC595E9AC192A47N10B121D811E8LL10calleeType20stackTopHeightToCopyy0A5Types08FunctionU0V_SitKF:
 1515|      4|    private mutating func prepareFrameHeaderForReturnCall(calleeType: FunctionType, stackTopHeightToCopy: Int) throws {
 1516|      4|        let calleeFrameHeader = FrameHeaderLayout(type: calleeType)
 1517|      4|        if calleeType == self.type {
 1518|      4|            // Fast path: If the callee and the caller have the same signature, we can
 1519|      4|            // skip reconstructing the frame header and we can just copy the parameters.
 1520|      4|        } else {
 1521|      0|            // Ensure all parameters are on stack to avoid conflicting with the next resize.
 1522|      0|            preserveOnStack(depth: calleeType.parameters.count)
 1523|      0|            // Resize the current frame header while moving stack slots after the header
 1524|      0|            // to the resized positions
 1525|      0|            let newHeaderSize = FrameHeaderLayout.size(of: calleeType)
 1526|      0|            let delta = newHeaderSize - FrameHeaderLayout.size(of: type)
 1527|      0|            let sizeToCopy = VReg(FrameHeaderLayout.numberOfSavingSlots) + valueStack.stackRegBase + VReg(stackTopHeightToCopy)
 1528|      0|            emit(.resizeFrameHeader(Instruction.ResizeFrameHeaderOperand(delta: delta, sizeToCopy: sizeToCopy)))
 1529|      0|        }
 1530|      4|        try copyValuesIntoResultSlots(calleeType.parameters, frameHeader: calleeFrameHeader)
 1531|      4|    }
$s7WasmKit21InstructionTranslatorV15visitReturnCall13functionIndexys6UInt32V_tKF:
 1533|      5|    mutating func visitReturnCall(functionIndex: UInt32) throws {
 1534|      5|        let calleeType = try self.module.functionType(functionIndex, interner: funcTypeInterner)
 1535|      5|        try validator.validateReturnCallLike(calleeType: calleeType, callerType: type)
 1536|      4|
 1537|      4|        guard let callee = self.module.resolveCallee(functionIndex) else {
 1538|      0|            // Skip actual code emission if validation-only mode
 1539|      0|            return
 1540|      4|        }
 1541|      4|        try prepareFrameHeaderForReturnCall(calleeType: calleeType, stackTopHeightToCopy: valueStack.height)
 1542|      4|        emit(.returnCall(Instruction.ReturnCallOperand(callee: callee)))
 1543|      4|        try markUnreachable()
 1544|      4|    }
$s7WasmKit21InstructionTranslatorV9visitDropyyKF:
 1572|     59|    mutating func visitDrop() throws -> Output {
 1573|     59|        _ = try popAnyOperand()
 1574|     59|        iseqBuilder.resetLastEmission()
 1575|     59|    }
$s7WasmKit21InstructionTranslatorV11visitSelectyyKF:
 1576|     12|    mutating func visitSelect() throws -> Output {
 1577|     12|        let condition = try popVRegOperand(.i32)
 1578|     12|        let (value1Type, value1) = try popAnyOperand()
 1579|     12|        let (value2Type, value2) = try popAnyOperand()
 1580|     12|        switch (value1Type, value2Type) {
 1581|     12|        case (.some(.ref(_)), _), (_, .some(.ref(_))):
 1582|      0|            throw ValidationError(.cannotSelectOnReferenceTypes)
 1583|     12|        case (.some(let type1), .some(let type2)):
 1584|     11|            guard type1 == type2 else {
 1585|      2|                throw ValidationError(.typeMismatchOnSelect(expected: type1, actual: type2))
 1586|      2|            }
 1587|     12|        case (.unknown, _), (_, .unknown):
 1588|      1|            break
 1589|     12|        }
 1590|     10|        let result = valueStack.push(value1Type)
 1591|     10|        if let condition = condition, let value1 = value1, let value2 = value2 {
 1592|      9|            let operand = Instruction.SelectOperand(
 1593|      9|                result: result,
 1594|      9|                condition: condition,
 1595|      9|                onTrue: ensureOnVReg(value2),
 1596|      9|                onFalse: ensureOnVReg(value1)
 1597|      9|            )
 1598|      9|            emit(.select(operand))
 1599|      9|        }
 1600|     10|    }
$s7WasmKit21InstructionTranslatorV16visitTypedSelect4typey0A5Types9ValueTypeO_tKF:
 1601|     33|    mutating func visitTypedSelect(type: WasmTypes.ValueType) throws -> Output {
 1602|     33|        let condition = try popVRegOperand(.i32)
 1603|     33|        let (value1Type, value1) = try popAnyOperand()
 1604|     33|        let (_, value2) = try popAnyOperand()
 1605|     32|        // TODO: Perform actual validation
 1606|     32|        // guard value1 == ValueType(type) else {
 1607|     32|        //     throw TranslationError("Type mismatch on `select`. Expected \(value1) and \(type) to be same")
 1608|     32|        // }
 1609|     32|        // guard value2 == ValueType(type) else {
 1610|     32|        //     throw TranslationError("Type mismatch on `select`. Expected \(value2) and \(type) to be same")
 1611|     32|        // }
 1612|     32|        let result = valueStack.push(value1Type)
 1613|     32|        if let condition = condition, let value1 = value1, let value2 = value2 {
 1614|      0|            let operand = Instruction.SelectOperand(
 1615|      0|                result: result,
 1616|      0|                condition: condition,
 1617|      0|                onTrue: ensureOnVReg(value2),
 1618|      0|                onFalse: ensureOnVReg(value1)
 1619|      0|            )
 1620|      0|            emit(.select(operand))
 1621|      0|        }
 1622|     32|    }
$s7WasmKit21InstructionTranslatorV13visitLocalGet10localIndexys6UInt32V_tKF:
 1623|    971|    mutating func visitLocalGet(localIndex: UInt32) throws -> Output {
 1624|    971|        iseqBuilder.resetLastEmission()
 1625|    971|        try valueStack.pushLocal(localIndex, locals: &locals)
 1626|    971|    }
$s7WasmKit21InstructionTranslatorV18visitLocalSetOrTee10localIndex02isI0ys6UInt32V_SbtKF:
 1627|  5.87k|    mutating func visitLocalSetOrTee(localIndex: UInt32, isTee: Bool) throws {
 1628|  5.87k|        preserveLocalsOnStack(localIndex)
 1629|  5.87k|        let type = try locals.type(of: localIndex)
 1630|  5.86k|        let result = localReg(localIndex)
 1631|  5.86k|
 1632|  5.86k|        guard try checkBeforePop(typeHint: type) else { return }
 1633|  5.78k|        let op = try valueStack.pop(type)
 1634|  5.78k|
 1635|  5.78k|        if case .const(let slotIndex, _) = op {
 1636|    221|            // Optimize (local.set $x (i32.const $c)) to reg:$x = 42 rather than through const slot
 1637|    221|            let value = constantSlots.values[slotIndex]
 1638|    221|            let is32Bit = type == .i32 || type == .f32
 1639|    221|            if is32Bit {
 1640|    221|                emit(.const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg(result))))
 1641|    221|            } else {
 1642|      0|                emit(.const64(Instruction.Const64Operand(value: value, result: LLVReg(result))))
 1643|      0|            }
 1644|    221|            return
 1645|  5.56k|        }
 1646|  5.56k|
 1647|  5.56k|        let value = ensureOnVReg(op)
 1648|  5.56k|        guard try controlStack.currentFrame().reachable else { return }
 1649|  1.04k|        if !isTee, iseqBuilder.relinkLastInstructionResult(result) {
 1650|      6|            // Good news, copyStack is optimized out :)
 1651|      6|            return
 1652|  1.03k|        }
 1653|  1.03k|        emitCopyStack(from: value, to: result)
 1654|  1.03k|    }
$s7WasmKit21InstructionTranslatorV13visitLocalSet10localIndexys6UInt32V_tKF:
 1655|    104|    mutating func visitLocalSet(localIndex: UInt32) throws -> Output {
 1656|    104|        try visitLocalSetOrTee(localIndex: localIndex, isTee: false)
 1657|    103|    }
$s7WasmKit21InstructionTranslatorV13visitLocalTee10localIndexys6UInt32V_tKF:
 1658|  5.76k|    mutating func visitLocalTee(localIndex: UInt32) throws -> Output {
 1659|  5.76k|        try visitLocalSetOrTee(localIndex: localIndex, isTee: true)
 1660|  5.76k|        _ = try valueStack.pushLocal(localIndex, locals: &locals)
 1661|  5.76k|    }
$s7WasmKit21InstructionTranslatorV14visitGlobalGet11globalIndexys6UInt32V_tKF:
 1662|  3.61k|    mutating func visitGlobalGet(globalIndex: UInt32) throws -> Output {
 1663|  3.61k|        let type = try module.globalType(globalIndex)
 1664|  3.61k|        let result = valueStack.push(type)
 1665|  3.61k|        guard let global = module.resolveGlobal(globalIndex) else {
 1666|      0|            // Skip actual code emission if validation-only mode
 1667|      0|            return
 1668|  3.61k|        }
 1669|  3.61k|        emit(.globalGet(Instruction.GlobalAndVRegOperand(reg: LLVReg(result), global: global)))
 1670|  3.61k|    }
$s7WasmKit21InstructionTranslatorV14visitGlobalSet11globalIndexys6UInt32V_tKF:
 1671|  2.89k|    mutating func visitGlobalSet(globalIndex: UInt32) throws -> Output {
 1672|  2.89k|        let type = try module.globalType(globalIndex)
 1673|  2.89k|        guard let value = try popVRegOperand(type) else { return }
 1674|  2.89k|        guard let global = module.resolveGlobal(globalIndex) else {
 1675|      0|            // Skip actual code emission if validation-only mode
 1676|      0|            return
 1677|  2.89k|        }
 1678|  2.89k|        try validator.validateGlobalSet(global.globalType)
 1679|  2.89k|        emit(.globalSet(Instruction.GlobalAndVRegOperand(reg: LLVReg(value), global: global)))
 1680|  2.89k|    }
$s7WasmKit21InstructionTranslatorV8pushEmit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0Os5Int16VctF:
 1685|  8.27k|    ) {
 1686|  8.27k|        let register = valueStack.push(type)
 1687|  8.27k|        emit(
 1688|  8.27k|            instruction(register),
 1689|  8.27k|            resultRelink: { newResult in
 1690|  8.27k|                instruction(newResult)
 1691|  8.27k|            })
 1692|  8.27k|    }
$s7WasmKit21InstructionTranslatorV11popPushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0Os5Int16V_ALtctKF:
 1697|  49.9k|    ) throws {
 1698|  49.9k|        let value = try popVRegOperand(pop)
 1699|  49.9k|        let result = valueStack.push(push)
 1700|  49.9k|        if let value = value {
 1701|  44.1k|            emit(
 1702|  44.1k|                instruction(value, result),
 1703|  44.1k|                resultRelink: { newResult in
 1704|  44.1k|                    instruction(value, newResult)
 1705|  44.1k|                })
 1706|  44.1k|        }
 1707|  49.9k|    }
$s7WasmKit21InstructionTranslatorV11popPushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0Os5Int16V_ALtctKFAjLcfU_:
 1703|      6|                resultRelink: { newResult in
 1704|      6|                    instruction(value, newResult)
 1705|      6|                })
$s7WasmKit21InstructionTranslatorV9visitLoad021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVctKF:
 1761|  15.4k|    ) throws {
 1762|  15.4k|        let isMemory64 = try module.isMemory64(memoryIndex: 0)
 1763|  15.4k|        try validator.validateMemArg(memarg, naturalAlignment: naturalAlignment)
 1764|  15.4k|        try popPushEmit(.address(isMemory64: isMemory64), type) { value, result in
 1765|  15.4k|            let loadOperand = Instruction.LoadOperand(
 1766|  15.4k|                offset: memarg.offset,
 1767|  15.4k|                pointer: value,
 1768|  15.4k|                result: result
 1769|  15.4k|            )
 1770|  15.4k|            return instruction(loadOperand)
 1771|  15.4k|        }
 1772|  15.4k|    }
$s7WasmKit21InstructionTranslatorV9visitLoad021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVctKFAMs5Int16V_AQtcfU_:
 1764|  12.3k|        try popPushEmit(.address(isMemory64: isMemory64), type) { value, result in
 1765|  12.3k|            let loadOperand = Instruction.LoadOperand(
 1766|  12.3k|                offset: memarg.offset,
 1767|  12.3k|                pointer: value,
 1768|  12.3k|                result: result
 1769|  12.3k|            )
 1770|  12.3k|            return instruction(loadOperand)
 1771|  12.3k|        }
$s7WasmKit21InstructionTranslatorV10visitStore021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVXEtKF:
 1778|    303|    ) throws {
 1779|    303|        let isMemory64 = try module.isMemory64(memoryIndex: 0)
 1780|    303|        try validator.validateMemArg(memarg, naturalAlignment: naturalAlignment)
 1781|    294|        let value = try popVRegOperand(type)
 1782|    294|        let pointer = try popVRegOperand(.address(isMemory64: isMemory64))
 1783|    294|        if let value = value, let pointer = pointer {
 1784|    212|            let storeOperand = Instruction.StoreOperand(
 1785|    212|                offset: memarg.offset,
 1786|    212|                pointer: pointer,
 1787|    212|                value: value
 1788|    212|            )
 1789|    212|            emit(instruction(storeOperand))
 1790|    212|        }
 1791|    294|    }
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKF:
 1793|  15.4k|    mutating func visitLoad(_ load: WasmParser.Instruction.Load, memarg: MemArg) throws {
 1794|  15.4k|        let instruction: (Instruction.LoadOperand) -> Instruction
 1795|  15.4k|        switch load {
 1796|  15.4k|        case .i32Load: instruction = Instruction.i32Load
 1797|  15.4k|        case .i64Load: instruction = Instruction.i64Load
 1798|  15.4k|        case .f32Load: instruction = Instruction.f32Load
 1799|  15.4k|        case .f64Load: instruction = Instruction.f64Load
 1800|  15.4k|        case .i32Load8S: instruction = Instruction.i32Load8S
 1801|  15.4k|        case .i32Load8U: instruction = Instruction.i32Load8U
 1802|  15.4k|        case .i32Load16S: instruction = Instruction.i32Load16S
 1803|  15.4k|        case .i32Load16U: instruction = Instruction.i32Load16U
 1804|  15.4k|        case .i64Load8S: instruction = Instruction.i64Load8S
 1805|  15.4k|        case .i64Load8U: instruction = Instruction.i64Load8U
 1806|  15.4k|        case .i64Load16S: instruction = Instruction.i64Load16S
 1807|  15.4k|        case .i64Load16U: instruction = Instruction.i64Load16U
 1808|  15.4k|        case .i64Load32S: instruction = Instruction.i64Load32S
 1809|  15.4k|        case .i64Load32U: instruction = Instruction.i64Load32U
 1810|  15.4k|        case .i32AtomicLoad: instruction = Instruction.i32AtomicLoad
 1811|  15.4k|        case .i64AtomicLoad: instruction = Instruction.i64AtomicLoad
 1812|  15.4k|        case .i32AtomicLoad8U: instruction = Instruction.i32AtomicLoad8U
 1813|  15.4k|        case .i32AtomicLoad16U: instruction = Instruction.i32AtomicLoad16U
 1814|  15.4k|        case .i64AtomicLoad8U: instruction = Instruction.i64AtomicLoad8U
 1815|  15.4k|        case .i64AtomicLoad16U: instruction = Instruction.i64AtomicLoad16U
 1816|  15.4k|        case .i64AtomicLoad32U: instruction = Instruction.i64AtomicLoad32U
 1817|  15.4k|
 1818|  15.4k|        }
 1819|  15.4k|        try visitLoad(memarg, load.type, load.naturalAlignment, instruction)
 1820|  15.4k|    }
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu_:
 1796|    205|        case .i32Load: instruction = Instruction.i32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu_AmOYbcfu0_:
 1796|    195|        case .i32Load: instruction = Instruction.i32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu1_:
 1797|     93|        case .i64Load: instruction = Instruction.i64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu1_AmOYbcfu2_:
 1797|     92|        case .i64Load: instruction = Instruction.i64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu3_:
 1798|  1.76k|        case .f32Load: instruction = Instruction.f32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu3_AmOYbcfu4_:
 1798|    102|        case .f32Load: instruction = Instruction.f32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu5_:
 1799|  4.98k|        case .f64Load: instruction = Instruction.f64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu5_AmOYbcfu6_:
 1799|  3.70k|        case .f64Load: instruction = Instruction.f64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu7_:
 1800|    639|        case .i32Load8S: instruction = Instruction.i32Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu7_AmOYbcfu8_:
 1800|    636|        case .i32Load8S: instruction = Instruction.i32Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu9_:
 1801|     29|        case .i32Load8U: instruction = Instruction.i32Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu9_AmOYbcfu10_:
 1801|     27|        case .i32Load8U: instruction = Instruction.i32Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu11_:
 1802|    727|        case .i32Load16S: instruction = Instruction.i32Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu11_AmOYbcfu12_:
 1802|    725|        case .i32Load16S: instruction = Instruction.i32Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu13_:
 1803|    173|        case .i32Load16U: instruction = Instruction.i32Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu13_AmOYbcfu14_:
 1803|    172|        case .i32Load16U: instruction = Instruction.i32Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu15_:
 1804|    159|        case .i64Load8S: instruction = Instruction.i64Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu15_AmOYbcfu16_:
 1804|    159|        case .i64Load8S: instruction = Instruction.i64Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu17_:
 1805|     75|        case .i64Load8U: instruction = Instruction.i64Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu17_AmOYbcfu18_:
 1805|     75|        case .i64Load8U: instruction = Instruction.i64Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu19_:
 1806|    246|        case .i64Load16S: instruction = Instruction.i64Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu19_AmOYbcfu20_:
 1806|    246|        case .i64Load16S: instruction = Instruction.i64Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu21_:
 1807|    143|        case .i64Load16U: instruction = Instruction.i64Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu21_AmOYbcfu22_:
 1807|    142|        case .i64Load16U: instruction = Instruction.i64Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu23_:
 1808|  6.01k|        case .i64Load32S: instruction = Instruction.i64Load32S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu23_AmOYbcfu24_:
 1808|  5.96k|        case .i64Load32S: instruction = Instruction.i64Load32S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu25_:
 1809|    159|        case .i64Load32U: instruction = Instruction.i64Load32U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu25_AmOYbcfu26_:
 1809|     94|        case .i64Load32U: instruction = Instruction.i64Load32U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu27_:
 1810|      1|        case .i32AtomicLoad: instruction = Instruction.i32AtomicLoad
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu35_:
 1814|      1|        case .i64AtomicLoad8U: instruction = Instruction.i64AtomicLoad8U
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKF:
 1822|    303|    mutating func visitStore(_ store: WasmParser.Instruction.Store, memarg: MemArg) throws {
 1823|    303|        let instruction: (Instruction.StoreOperand) -> Instruction
 1824|    303|        switch store {
 1825|    303|        case .i32Store: instruction = Instruction.i32Store
 1826|    303|        case .i64Store: instruction = Instruction.i64Store
 1827|    303|        case .f32Store: instruction = Instruction.f32Store
 1828|    303|        case .f64Store: instruction = Instruction.f64Store
 1829|    303|        case .i32Store8: instruction = Instruction.i32Store8
 1830|    303|        case .i32Store16: instruction = Instruction.i32Store16
 1831|    303|        case .i64Store8: instruction = Instruction.i64Store8
 1832|    303|        case .i64Store16: instruction = Instruction.i64Store16
 1833|    303|        case .i64Store32: instruction = Instruction.i64Store32
 1834|    303|        case .i32AtomicStore: instruction = Instruction.i32AtomicStore
 1835|    303|        case .i64AtomicStore: instruction = Instruction.i64AtomicStore
 1836|    303|        case .i32AtomicStore8: instruction = Instruction.i32AtomicStore8
 1837|    303|        case .i32AtomicStore16: instruction = Instruction.i32AtomicStore16
 1838|    303|        case .i64AtomicStore8: instruction = Instruction.i64AtomicStore8
 1839|    303|        case .i64AtomicStore16: instruction = Instruction.i64AtomicStore16
 1840|    303|        case .i64AtomicStore32: instruction = Instruction.i64AtomicStore32
 1841|    303|        }
 1842|    303|        try visitStore(memarg, store.type, store.naturalAlignment, instruction)
 1843|    294|    }
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu_:
 1825|     44|        case .i32Store: instruction = Instruction.i32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu_AmOYbcfu0_:
 1825|     22|        case .i32Store: instruction = Instruction.i32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu1_:
 1826|      4|        case .i64Store: instruction = Instruction.i64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu1_AmOYbcfu2_:
 1826|      2|        case .i64Store: instruction = Instruction.i64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu3_:
 1827|    104|        case .f32Store: instruction = Instruction.f32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu3_AmOYbcfu4_:
 1827|     90|        case .f32Store: instruction = Instruction.f32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu5_:
 1828|     11|        case .f64Store: instruction = Instruction.f64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu5_AmOYbcfu6_:
 1828|      3|        case .f64Store: instruction = Instruction.f64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu7_:
 1829|     41|        case .i32Store8: instruction = Instruction.i32Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu7_AmOYbcfu8_:
 1829|     39|        case .i32Store8: instruction = Instruction.i32Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu9_:
 1830|     64|        case .i32Store16: instruction = Instruction.i32Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu9_AmOYbcfu10_:
 1830|     36|        case .i32Store16: instruction = Instruction.i32Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu11_:
 1831|     12|        case .i64Store8: instruction = Instruction.i64Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu11_AmOYbcfu12_:
 1831|     11|        case .i64Store8: instruction = Instruction.i64Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu13_:
 1832|      6|        case .i64Store16: instruction = Instruction.i64Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu13_AmOYbcfu14_:
 1832|      4|        case .i64Store16: instruction = Instruction.i64Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu15_:
 1833|     15|        case .i64Store32: instruction = Instruction.i64Store32
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu15_AmOYbcfu16_:
 1833|      5|        case .i64Store32: instruction = Instruction.i64Store32
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu19_:
 1835|      1|        case .i64AtomicStore: instruction = Instruction.i64AtomicStore
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVYbcAMmYbcfu21_:
 1836|      1|        case .i32AtomicStore8: instruction = Instruction.i32AtomicStore8
$s7WasmKit21InstructionTranslatorV15visitMemorySize6memoryys6UInt32V_tKF:
 1844|  8.15k|    mutating func visitMemorySize(memory: UInt32) throws -> Output {
 1845|  8.15k|        let sizeType: ValueType = try module.isMemory64(memoryIndex: memory) ? .i64 : .i32
 1846|  8.15k|        pushEmit(sizeType, { .memorySize(Instruction.MemorySizeOperand(memoryIndex: memory, result: LVReg($0))) })
 1847|  8.15k|    }
$s7WasmKit21InstructionTranslatorV15visitMemorySize6memoryys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 1846|  8.15k|        pushEmit(sizeType, { .memorySize(Instruction.MemorySizeOperand(memoryIndex: memory, result: LVReg($0))) })
$s7WasmKit21InstructionTranslatorV15visitMemoryGrow6memoryys6UInt32V_tKF:
 1848|  1.64k|    mutating func visitMemoryGrow(memory: UInt32) throws -> Output {
 1849|  1.64k|        let isMemory64 = try module.isMemory64(memoryIndex: memory)
 1850|  1.64k|        let sizeType = ValueType.address(isMemory64: isMemory64)
 1851|  1.64k|        // Just pop/push the same type (i64 or i32) value
 1852|  1.64k|        try popPushEmit(sizeType, sizeType) { value, result in
 1853|  1.64k|            .memoryGrow(
 1854|  1.64k|                Instruction.MemoryGrowOperand(
 1855|  1.64k|                    result: result, delta: value, memory: memory
 1856|  1.64k|                ))
 1857|  1.64k|        }
 1858|  1.64k|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryGrow6memoryys6UInt32V_tKFAA0C0Os5Int16V_AKtcfU_:
 1852|  1.53k|        try popPushEmit(sizeType, sizeType) { value, result in
 1853|  1.53k|            .memoryGrow(
 1854|  1.53k|                Instruction.MemoryGrowOperand(
 1855|  1.53k|                    result: result, delta: value, memory: memory
 1856|  1.53k|                ))
 1857|  1.53k|        }
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtF:
 1860|  8.96k|    private mutating func visitConst(_ type: ValueType, _ value: Value) {
 1861|  8.96k|        if let constSlotIndex = constantSlots.allocate(value) {
 1862|  8.86k|            valueStack.pushConst(constSlotIndex, type: type)
 1863|  8.86k|            iseqBuilder.resetLastEmission()
 1864|  8.86k|            return
 1865|  8.86k|        }
 1866|    100|        let value = UntypedValue(value)
 1867|    100|        let is32Bit = type == .i32 || type == .f32
 1868|    100|        if is32Bit {
 1869|     54|            pushEmit(
 1870|     54|                type,
 1871|     54|                {
 1872|     54|                    .const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg($0)))
 1873|     54|                })
 1874|     54|        } else {
 1875|     46|            pushEmit(type, { .const64(Instruction.Const64Operand(value: value, result: LLVReg($0))) })
 1876|     46|        }
 1877|    100|    }
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFSbyKXEfu_:
 1867|     85|        let is32Bit = type == .i32 || type == .f32
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFAA0C0Os5Int16VcfU_:
 1871|     54|                {
 1872|     54|                    .const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg($0)))
 1873|     54|                })
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFAA0C0Os5Int16VcfU0_:
 1875|     46|            pushEmit(type, { .const64(Instruction.Const64Operand(value: value, result: LLVReg($0))) })
$s7WasmKit21InstructionTranslatorV13visitI32Const5valueys5Int32V_tF:
 1878|  2.43k|    mutating func visitI32Const(value: Int32) -> Output { visitConst(.i32, .i32(UInt32(bitPattern: value))) }
$s7WasmKit21InstructionTranslatorV13visitI64Const5valueys5Int64V_tF:
 1879|  4.81k|    mutating func visitI64Const(value: Int64) -> Output { visitConst(.i64, .i64(UInt64(bitPattern: value))) }
$s7WasmKit21InstructionTranslatorV13visitF32Const5valuey0A6Parser7IEEE754O7Float32V_tF:
 1880|    895|    mutating func visitF32Const(value: IEEE754.Float32) -> Output { visitConst(.f32, .f32(value.bitPattern)) }
$s7WasmKit21InstructionTranslatorV13visitF64Const5valuey0A6Parser7IEEE754O7Float64V_tF:
 1881|    825|    mutating func visitF64Const(value: IEEE754.Float64) -> Output { visitConst(.f64, .f64(value.bitPattern)) }
$s7WasmKit21InstructionTranslatorV12visitRefNull4typey0A5Types13ReferenceTypeO_tF:
 1882|     22|    mutating func visitRefNull(type: WasmTypes.ReferenceType) -> Output {
 1883|     22|        pushEmit(.ref(type), { .refNull(Instruction.RefNullOperand(result: $0, type: type)) })
 1884|     22|    }
$s7WasmKit21InstructionTranslatorV12visitRefNull4typey0A5Types13ReferenceTypeO_tFAA0C0Os5Int16VcfU_:
 1883|     22|        pushEmit(.ref(type), { .refNull(Instruction.RefNullOperand(result: $0, type: type)) })
$s7WasmKit21InstructionTranslatorV10visitUnary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ0F7OperandVctKF:
 1895|  13.8k|    private mutating func visitUnary(_ operand: ValueType, _ instruction: @escaping (Instruction.UnaryOperand) -> Instruction) throws {
 1896|  13.8k|        try popPushEmit(operand, operand) { value, result in
 1897|  13.8k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1898|  13.8k|        }
 1899|  13.8k|    }
$s7WasmKit21InstructionTranslatorV10visitUnary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ0F7OperandVctKFAJs5Int16V_ANtcfU_:
 1896|  12.0k|        try popPushEmit(operand, operand) { value, result in
 1897|  12.0k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1898|  12.0k|        }
$s7WasmKit21InstructionTranslatorV11visitBinary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ0F7OperandVctKF:
 1904|  12.1k|    ) throws {
 1905|  12.1k|        let rhs = try popVRegOperand(operand)
 1906|  12.1k|        let lhs = try popVRegOperand(operand)
 1907|  12.1k|        let result = valueStack.push(result)
 1908|  12.1k|        guard let lhs = lhs, let rhs = rhs else { return }
 1909|  8.54k|        emit(
 1910|  8.54k|            instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs)),
 1911|  8.54k|            resultRelink: { result in
 1912|  8.54k|                return instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs))
 1913|  8.54k|            }
 1914|  8.54k|        )
 1915|  8.54k|    }
$s7WasmKit21InstructionTranslatorV8visitCmp021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ13BinaryOperandVctKF:
 1916|  1.06k|    private mutating func visitCmp(_ operand: ValueType, _ instruction: @escaping (Instruction.BinaryOperand) -> Instruction) throws {
 1917|  1.06k|        try visitBinary(operand, .i32, instruction)
 1918|  1.06k|    }
$s7WasmKit21InstructionTranslatorV15visitConversion021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ12UnaryOperandVctKF:
 1919|  18.6k|    private mutating func visitConversion(_ from: ValueType, _ to: ValueType, _ instruction: @escaping (Instruction.UnaryOperand) -> Instruction) throws {
 1920|  18.6k|        try popPushEmit(from, to) { value, result in
 1921|  18.6k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1922|  18.6k|        }
 1923|  18.5k|    }
$s7WasmKit21InstructionTranslatorV15visitConversion021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ12UnaryOperandVctKFAJs5Int16V_ANtcfU_:
 1920|  17.8k|        try popPushEmit(from, to) { value, result in
 1921|  17.8k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1922|  17.8k|        }
$s7WasmKit21InstructionTranslatorV11visitI32EqzyyKF:
 1924|    199|    mutating func visitI32Eqz() throws -> Output {
 1925|    199|        try popPushEmit(.i32, .i32) { value, result in
 1926|    199|            .i32Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1927|    199|        }
 1928|    199|    }
$s7WasmKit21InstructionTranslatorV11visitI32EqzyyKFAA0C0Os5Int16V_AHtcfU_:
 1925|    197|        try popPushEmit(.i32, .i32) { value, result in
 1926|    197|            .i32Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1927|    197|        }
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKF:
 1929|  1.06k|    mutating func visitCmp(_ cmp: WasmParser.Instruction.Cmp) throws {
 1930|  1.06k|        let operand: ValueType
 1931|  1.06k|        let instruction: (Instruction.BinaryOperand) -> Instruction
 1932|  1.06k|        switch cmp {
 1933|  1.06k|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
 1934|  1.06k|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
 1935|  1.06k|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
 1936|  1.06k|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
 1937|  1.06k|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
 1938|  1.06k|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
 1939|  1.06k|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
 1940|  1.06k|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
 1941|  1.06k|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
 1942|  1.06k|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
 1943|  1.06k|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
 1944|  1.06k|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
 1945|  1.06k|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
 1946|  1.06k|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
 1947|  1.06k|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
 1948|  1.06k|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
 1949|  1.06k|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
 1950|  1.06k|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
 1951|  1.06k|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
 1952|  1.06k|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
 1953|  1.06k|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
 1954|  1.06k|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
 1955|  1.06k|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
 1956|  1.06k|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
 1957|  1.06k|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
 1958|  1.06k|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
 1959|  1.06k|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
 1960|  1.06k|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
 1961|  1.06k|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
 1962|  1.06k|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
 1963|  1.06k|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
 1964|  1.06k|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
 1965|  1.06k|        }
 1966|  1.06k|        try visitCmp(operand, instruction)
 1967|  1.06k|    }
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu_:
 1933|     19|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu_AjLYbcfu0_:
 1933|     12|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu1_:
 1934|     24|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu1_AjLYbcfu2_:
 1934|     19|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu3_:
 1935|      6|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu3_AjLYbcfu4_:
 1935|      6|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu5_:
 1936|     22|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu5_AjLYbcfu6_:
 1936|     22|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu7_:
 1937|     89|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu7_AjLYbcfu8_:
 1937|     78|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu9_:
 1938|     78|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu9_AjLYbcfu10_:
 1938|     75|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu11_:
 1939|      5|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu11_AjLYbcfu12_:
 1939|      5|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu13_:
 1940|      3|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu13_AjLYbcfu14_:
 1940|      3|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu15_:
 1941|     10|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu15_AjLYbcfu16_:
 1941|     10|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu17_:
 1942|    145|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu17_AjLYbcfu18_:
 1942|     18|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu19_:
 1943|      8|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu19_AjLYbcfu20_:
 1943|      8|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu21_:
 1944|     49|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu21_AjLYbcfu22_:
 1944|     49|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu23_:
 1945|     61|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu23_AjLYbcfu24_:
 1945|     58|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu25_:
 1946|    113|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu25_AjLYbcfu26_:
 1946|    113|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu27_:
 1947|     18|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu27_AjLYbcfu28_:
 1947|     18|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu29_:
 1948|     28|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu29_AjLYbcfu30_:
 1948|     27|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu31_:
 1949|     27|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu31_AjLYbcfu32_:
 1949|     27|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu33_:
 1950|     10|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu33_AjLYbcfu34_:
 1950|     10|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu35_:
 1951|     47|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu35_AjLYbcfu36_:
 1951|     47|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu37_:
 1952|     85|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu37_AjLYbcfu38_:
 1952|     85|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu39_:
 1953|      5|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu39_AjLYbcfu40_:
 1953|      5|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu41_:
 1954|     11|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu41_AjLYbcfu42_:
 1954|     11|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu43_:
 1955|      7|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu43_AjLYbcfu44_:
 1955|      7|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu45_:
 1956|      7|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu45_AjLYbcfu46_:
 1956|      7|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu47_:
 1957|      6|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu47_AjLYbcfu48_:
 1957|      6|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu49_:
 1958|     19|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu49_AjLYbcfu50_:
 1958|      6|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu51_:
 1959|    101|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu51_AjLYbcfu52_:
 1959|     80|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu53_:
 1960|      4|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu53_AjLYbcfu54_:
 1960|      4|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu55_:
 1961|     35|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu55_AjLYbcfu56_:
 1961|     35|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu57_:
 1962|      4|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu57_AjLYbcfu58_:
 1962|      4|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu59_:
 1963|     17|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu59_AjLYbcfu60_:
 1963|      9|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu61_:
 1964|      4|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVYbcAJmYbcfu61_AjLYbcfu62_:
 1964|      4|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKF:
 1968|  11.0k|    public mutating func visitBinary(_ binary: WasmParser.Instruction.Binary) throws {
 1969|  11.0k|        let operand: ValueType
 1970|  11.0k|        let result: ValueType
 1971|  11.0k|        let instruction: (Instruction.BinaryOperand) -> Instruction
 1972|  11.0k|        switch binary {
 1973|  11.0k|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
 1974|  11.0k|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
 1975|  11.0k|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
 1976|  11.0k|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
 1977|  11.0k|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
 1978|  11.0k|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
 1979|  11.0k|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
 1980|  11.0k|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
 1981|  11.0k|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
 1982|  11.0k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
 1983|  11.0k|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
 1984|  11.0k|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
 1985|  11.0k|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
 1986|  11.0k|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
 1987|  11.0k|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
 1988|  11.0k|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
 1989|  11.0k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
 1990|  11.0k|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
 1991|  11.0k|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
 1992|  11.0k|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
 1993|  11.0k|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
 1994|  11.0k|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
 1995|  11.0k|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
 1996|  11.0k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
 1997|  11.0k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
 1998|  11.0k|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
 1999|  11.0k|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
 2000|  11.0k|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
 2001|  11.0k|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
 2002|  11.0k|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
 2003|  11.0k|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
 2004|  11.0k|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
 2005|  11.0k|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
 2006|  11.0k|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
 2007|  11.0k|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
 2008|  11.0k|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
 2009|  11.0k|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
 2010|  11.0k|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
 2011|  11.0k|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
 2012|  11.0k|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
 2013|  11.0k|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
 2014|  11.0k|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
 2015|  11.0k|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
 2016|  11.0k|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
 2017|  11.0k|        }
 2018|  11.0k|        try visitBinary(operand, result, instruction)
 2019|  11.0k|    }
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu_:
 1973|      7|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu_AjLYbcfu0_:
 1973|      7|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu1_:
 1974|     23|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu1_AjLYbcfu2_:
 1974|     21|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu3_:
 1975|     15|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu3_AjLYbcfu4_:
 1975|     15|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu5_:
 1976|      9|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu5_AjLYbcfu6_:
 1976|      6|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu7_:
 1977|      7|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu7_AjLYbcfu8_:
 1977|      7|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu9_:
 1978|    159|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu9_AjLYbcfu10_:
 1978|      7|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu11_:
 1979|    171|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu11_AjLYbcfu12_:
 1979|     11|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu13_:
 1980|      7|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu13_AjLYbcfu14_:
 1980|      7|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu15_:
 1981|      6|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu15_AjLYbcfu16_:
 1981|      6|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu17_:
 1982|  1.34k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu17_AjLYbcfu18_:
 1982|  1.24k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu19_:
 1983|     12|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu19_AjLYbcfu20_:
 1983|     12|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu21_:
 1984|    158|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu21_AjLYbcfu22_:
 1984|      9|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu23_:
 1985|      2|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu23_AjLYbcfu24_:
 1985|      2|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu25_:
 1986|    142|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu25_AjLYbcfu26_:
 1986|     10|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu27_:
 1987|     10|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu27_AjLYbcfu28_:
 1987|     10|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu29_:
 1988|    166|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu29_AjLYbcfu30_:
 1988|     18|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu31_:
 1989|  3.33k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu31_AjLYbcfu32_:
 1989|  2.03k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu33_:
 1990|      9|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu33_AjLYbcfu34_:
 1990|      8|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu35_:
 1991|    254|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu35_AjLYbcfu36_:
 1991|    243|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu37_:
 1992|     43|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu37_AjLYbcfu38_:
 1992|     42|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu39_:
 1993|      7|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu39_AjLYbcfu40_:
 1993|      7|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu41_:
 1994|     97|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu41_AjLYbcfu42_:
 1994|     93|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu43_:
 1995|    246|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu43_AjLYbcfu44_:
 1995|     64|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu45_:
 1996|  2.45k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu45_AjLYbcfu46_:
 1996|  2.42k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu47_:
 1997|  1.74k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu47_AjLYbcfu48_:
 1997|    795|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu49_:
 1998|     23|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu49_AjLYbcfu50_:
 1998|     23|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu51_:
 1999|    379|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu51_AjLYbcfu52_:
 1999|    379|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu53_:
 2000|     12|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu53_AjLYbcfu54_:
 2000|     12|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu55_:
 2001|      8|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu55_AjLYbcfu56_:
 2001|      8|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu57_:
 2002|     47|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu57_AjLYbcfu58_:
 2002|     32|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu59_:
 2003|     15|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu59_AjLYbcfu60_:
 2003|     15|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu61_:
 2004|      6|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu61_AjLYbcfu62_:
 2004|      6|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu63_:
 2005|      4|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu63_AjLYbcfu64_:
 2005|      4|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu65_:
 2006|      6|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu65_AjLYbcfu66_:
 2006|      6|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu67_:
 2007|      9|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu67_AjLYbcfu68_:
 2007|      9|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu69_:
 2008|      9|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu69_AjLYbcfu70_:
 2008|      9|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu71_:
 2009|      5|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu71_AjLYbcfu72_:
 2009|      5|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu73_:
 2010|     57|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu73_AjLYbcfu74_:
 2010|      9|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu75_:
 2011|      5|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu75_AjLYbcfu76_:
 2011|      5|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu77_:
 2012|     21|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu77_AjLYbcfu78_:
 2012|     20|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu79_:
 2013|     24|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu79_AjLYbcfu80_:
 2013|      7|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu81_:
 2014|      7|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu81_AjLYbcfu82_:
 2014|      7|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu83_:
 2015|     16|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu83_AjLYbcfu84_:
 2015|     16|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu85_:
 2016|      7|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu85_AjLYbcfu86_:
 2016|      7|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
$s7WasmKit21InstructionTranslatorV11visitI64EqzyyKF:
 2020|    203|    mutating func visitI64Eqz() throws -> Output {
 2021|    203|        try popPushEmit(.i64, .i32) { value, result in
 2022|    203|            .i64Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 2023|    203|        }
 2024|    203|    }
$s7WasmKit21InstructionTranslatorV11visitI64EqzyyKFAA0C0Os5Int16V_AHtcfU_:
 2021|    200|        try popPushEmit(.i64, .i32) { value, result in
 2022|    200|            .i64Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 2023|    200|        }
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKF:
 2025|  13.8k|    mutating func visitUnary(_ unary: WasmParser.Instruction.Unary) throws {
 2026|  13.8k|        let operand: ValueType
 2027|  13.8k|        let instruction: (Instruction.UnaryOperand) -> Instruction
 2028|  13.8k|        switch unary {
 2029|  13.8k|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
 2030|  13.8k|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
 2031|  13.8k|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
 2032|  13.8k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
 2033|  13.8k|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
 2034|  13.8k|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
 2035|  13.8k|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
 2036|  13.8k|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
 2037|  13.8k|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
 2038|  13.8k|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
 2039|  13.8k|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
 2040|  13.8k|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
 2041|  13.8k|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
 2042|  13.8k|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
 2043|  13.8k|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
 2044|  13.8k|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
 2045|  13.8k|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
 2046|  13.8k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
 2047|  13.8k|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
 2048|  13.8k|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
 2049|  13.8k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
 2050|  13.8k|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
 2051|  13.8k|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
 2052|  13.8k|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
 2053|  13.8k|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
 2054|  13.8k|        }
 2055|  13.8k|        try visitUnary(operand, instruction)
 2056|  13.8k|    }
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu_:
 2029|     89|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu_AjLYbcfu0_:
 2029|     89|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu1_:
 2030|     21|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu1_AjLYbcfu2_:
 2030|     17|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu3_:
 2031|     30|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu3_AjLYbcfu4_:
 2031|     30|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu5_:
 2032|  3.23k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu5_AjLYbcfu6_:
 2032|  3.22k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu7_:
 2033|    126|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu7_AjLYbcfu8_:
 2033|    124|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu9_:
 2034|    292|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu9_AjLYbcfu10_:
 2034|    225|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu11_:
 2035|     17|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu11_AjLYbcfu12_:
 2035|     17|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu13_:
 2036|     79|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu13_AjLYbcfu14_:
 2036|     74|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu15_:
 2037|    152|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu15_AjLYbcfu16_:
 2037|    151|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu17_:
 2038|     16|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu17_AjLYbcfu18_:
 2038|     14|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu19_:
 2039|     61|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu19_AjLYbcfu20_:
 2039|     61|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu21_:
 2040|     75|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu21_AjLYbcfu22_:
 2040|     68|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu23_:
 2041|      6|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu23_AjLYbcfu24_:
 2041|      6|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu25_:
 2042|    173|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu25_AjLYbcfu26_:
 2042|    165|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu27_:
 2043|    353|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu27_AjLYbcfu28_:
 2043|    343|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu29_:
 2044|     91|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu29_AjLYbcfu30_:
 2044|     89|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu31_:
 2045|    344|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu31_AjLYbcfu32_:
 2045|    320|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu33_:
 2046|  2.93k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu33_AjLYbcfu34_:
 2046|  2.93k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu35_:
 2047|     54|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu35_AjLYbcfu36_:
 2047|     54|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu37_:
 2048|     55|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu37_AjLYbcfu38_:
 2048|     55|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu39_:
 2049|  4.70k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu39_AjLYbcfu40_:
 2049|  3.00k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu41_:
 2050|     11|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu41_AjLYbcfu42_:
 2050|     11|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu43_:
 2051|    402|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu43_AjLYbcfu44_:
 2051|    400|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu45_:
 2052|    536|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu45_AjLYbcfu46_:
 2052|    528|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu47_:
 2053|     46|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVYbcAJmYbcfu47_AjLYbcfu48_:
 2053|     33|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKF:
 2057|  18.6k|    mutating func visitConversion(_ conversion: WasmParser.Instruction.Conversion) throws {
 2058|  18.6k|        let from: ValueType
 2059|  18.6k|        let to: ValueType
 2060|  18.6k|        let instruction: (Instruction.UnaryOperand) -> Instruction
 2061|  18.6k|        switch conversion {
 2062|  18.6k|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
 2063|  18.6k|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
 2064|  18.6k|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
 2065|  18.6k|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
 2066|  18.6k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
 2067|  18.6k|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
 2068|  18.6k|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
 2069|  18.6k|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
 2070|  18.6k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
 2071|  18.6k|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
 2072|  18.6k|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
 2073|  18.6k|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
 2074|  18.6k|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
 2075|  18.6k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
 2076|  18.6k|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
 2077|  18.6k|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
 2078|  18.6k|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
 2079|  18.6k|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
 2080|  18.6k|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
 2081|  18.6k|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
 2082|  18.6k|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
 2083|  18.6k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
 2084|  18.6k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
 2085|  18.6k|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
 2086|  18.6k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
 2087|  18.6k|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
 2088|  18.6k|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
 2089|  18.6k|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
 2090|  18.6k|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
 2091|  18.6k|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
 2092|  18.6k|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
 2093|  18.6k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
 2094|  18.6k|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
 2095|  18.6k|        }
 2096|  18.6k|        try visitConversion(from, to, instruction)
 2097|  18.5k|    }
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu_:
 2062|    364|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu_AjLYbcfu0_:
 2062|    364|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu1_:
 2063|      7|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu1_AjLYbcfu2_:
 2063|     11|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu3_:
 2064|     15|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu3_AjLYbcfu4_:
 2064|     15|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu5_:
 2065|     54|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu5_AjLYbcfu6_:
 2065|     52|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu7_:
 2066|  3.19k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu7_AjLYbcfu8_:
 2066|  3.19k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu9_:
 2067|     79|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu9_AjLYbcfu10_:
 2067|     79|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu11_:
 2068|     27|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu11_AjLYbcfu12_:
 2068|     27|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu13_:
 2069|     94|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu13_AjLYbcfu14_:
 2069|     94|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu15_:
 2070|  2.14k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu15_AjLYbcfu16_:
 2070|  2.14k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu17_:
 2071|     14|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu17_AjLYbcfu18_:
 2071|     13|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu19_:
 2072|     14|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu19_AjLYbcfu20_:
 2072|     14|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu21_:
 2073|     19|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu21_AjLYbcfu22_:
 2073|     19|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu23_:
 2074|     27|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu23_AjLYbcfu24_:
 2074|     26|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu25_:
 2075|  2.33k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu25_AjLYbcfu26_:
 2075|  2.32k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu27_:
 2076|     95|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu27_AjLYbcfu28_:
 2076|     95|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu29_:
 2077|      7|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu29_AjLYbcfu30_:
 2077|      7|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu31_:
 2078|     82|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu31_AjLYbcfu32_:
 2078|     82|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu33_:
 2079|     23|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu33_AjLYbcfu34_:
 2079|     23|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu35_:
 2080|    109|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu35_AjLYbcfu36_:
 2080|    108|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu37_:
 2081|    175|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu37_AjLYbcfu38_:
 2081|    113|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu39_:
 2082|    164|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu39_AjLYbcfu40_:
 2082|    155|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu41_:
 2083|    962|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu41_AjLYbcfu42_:
 2083|    388|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu43_:
 2084|    587|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu43_AjLYbcfu44_:
 2084|    465|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu45_:
 2085|     86|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu45_AjLYbcfu46_:
 2085|     86|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu47_:
 2086|  3.39k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu47_AjLYbcfu48_:
 2086|  3.39k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu49_:
 2087|     32|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu49_AjLYbcfu50_:
 2087|     32|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu51_:
 2088|     94|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu51_AjLYbcfu52_:
 2088|     93|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu53_:
 2089|      5|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu53_AjLYbcfu54_:
 2089|      5|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu55_:
 2090|      7|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu55_AjLYbcfu56_:
 2090|      6|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu57_:
 2091|     36|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu57_AjLYbcfu58_:
 2091|     30|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu59_:
 2092|    113|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu59_AjLYbcfu60_:
 2092|    103|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu61_:
 2093|  4.21k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu61_AjLYbcfu62_:
 2093|  4.20k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu63_:
 2094|     29|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVYbcAJmYbcfu63_AjLYbcfu64_:
 2094|     29|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
$s7WasmKit21InstructionTranslatorV12visitUnknownySbSays5UInt8VGKF:
 2264|     12|    mutating func visitUnknown(_ opcode: [UInt8]) throws -> Bool {
 2265|     12|        guard self.isDebugging && opcode.count == 1 && opcode[0] == 0xFF else {
 2266|     12|            return false
 2267|     12|        }
 2268|      0|
 2269|      0|        emit(.breakpoint)
 2270|      0|
 2271|      0|        return true
 2272|     12|    }
$s7WasmKit16TranslationErrorVyACSScfC:
 2278|     38|    init(_ description: String) {
 2279|     38|        self.description = description
 2280|     38|    }
$s9WasmTypes12FunctionTypeV0A3KitE05blockD011typeSectionAC0A6Parser05BlockD0O_SayACGtKc021_3C1F9FC595E9AC192A47N10B121D811E8LlfC:
 2284|  1.28k|    fileprivate init(blockType: WasmParser.BlockType, typeSection: [FunctionType]) throws {
 2285|  1.28k|        switch blockType {
 2286|  1.28k|        case .type(let valueType):
 2287|    358|            self.init(parameters: [], results: [valueType])
 2288|  1.28k|        case .empty:
 2289|    374|            self.init(parameters: [], results: [])
 2290|  1.28k|        case .funcType(let typeIndex):
 2291|    552|            let typeIndex = Int(typeIndex)
 2292|    552|            guard typeIndex < typeSection.count else {
 2293|      6|                throw ValidationError(.indexOutOfBounds("type", typeIndex, max: typeSection.count))
 2294|    546|            }
 2295|    546|            let funcType = typeSection[typeIndex]
 2296|    546|            self.init(
 2297|    546|                parameters: funcType.parameters,
 2298|    546|                results: funcType.results
 2299|    546|            )
 2300|  1.28k|        }
 2301|  1.27k|    }
$s9WasmTypes9ValueTypeO0A3KitE7address021_3C1F9FC595E9AC192A47J10B121D811E8LL10isMemory64ACSb_tFZ:
 2305|  17.3k|    fileprivate static func address(isMemory64: Bool) -> ValueType {
 2306|  17.3k|        return isMemory64 ? .i64 : .i32
 2307|  17.3k|    }

$s7WasmKit15ValidationErrorV7MessageVyAESScfC:
    9|     62|        init(_ text: String) {
   10|     62|            self.text = text
   11|     62|        }
$s7WasmKit15ValidationErrorVyA2C7MessageVcfC:
   30|     62|    init(_ message: Message) {
   31|     62|        self.message = message
   32|     62|    }
$s7WasmKit15ValidationErrorV7MessageV22invalidMemArgAlignment6memarg07naturalI0AE0A6Parser0gH0V_SitFZ:
   36|     16|    static func invalidMemArgAlignment(memarg: MemArg, naturalAlignment: Int) -> Self {
   37|     16|        Self("alignment 2**\(memarg.align) is out of limit \(naturalAlignment)")
   38|     16|    }
$s7WasmKit15ValidationErrorV7MessageV30startFunctionInvalidParametersAEyFZ:
   48|      1|    static func startFunctionInvalidParameters() -> Self {
   49|      1|        Self("start function must have no parameters and no results")
   50|      1|    }
$s7WasmKit15ValidationErrorV7MessageV19sizeMaximumExceeded3maxAEs6UInt64V_tFZ:
   60|      1|    static func sizeMaximumExceeded(max: UInt64) -> Self {
   61|      1|        Self("size maximum must not be greater than \(max)")
   62|      1|    }
$s7WasmKit15ValidationErrorV7MessageV16indexOutOfBounds__3maxAEs12StaticStringV_xq_tSjRzSjR_r0_lFZ:
   76|     14|    static func indexOutOfBounds<Index: Numeric, Max: Numeric>(_ entity: StaticString, _ index: Index, max: Max) -> Self {
   77|     14|        Self("\(entity) index out of bounds: \(index) (max: \(max))")
   78|     14|    }
$s7WasmKit15ValidationErrorV7MessageV23relativeDepthOutOfRange0fG0AEs6UInt32V_tFZ:
  111|      9|    static func relativeDepthOutOfRange(relativeDepth: UInt32) -> Self {
  112|      9|        Self("relative depth \(relativeDepth) is out of range")
  113|      9|    }
$s7WasmKit15ValidationErrorV7MessageV27valuesRemainingAtEndOfBlockAEvgZ:
  119|      5|    static var valuesRemainingAtEndOfBlock: Self {
  120|      5|        Self("values remaining on stack at end of block")
  121|      5|    }
$s7WasmKit15ValidationErrorV7MessageV27parameterResultTypeMismatch05blockH0AE0A5Types08FunctionH0V_tFZ:
  123|      2|    static func parameterResultTypeMismatch(blockType: FunctionType) -> Self {
  124|      2|        Self("expected the same parameter and result types for `if` block but got \(blockType)")
  125|      2|    }
$s7WasmKit15ValidationErrorV7MessageV20stackHeightUnderflow9available8requiredAESi_SitFZ:
  127|      1|    static func stackHeightUnderflow(available: Int, required: Int) -> Self {
  128|      1|        Self("stack height underflow: available \(available), required \(required)")
  129|      1|    }
$s7WasmKit15ValidationErrorV7MessageV27expectedTypeOnStackButEmpty0F0AE0A5Types05ValueG0OSg_tFZ:
  135|      5|    static func expectedTypeOnStackButEmpty(expected: ValueType?) -> Self {
  136|      5|        let typeHint = expected.map(String.init(describing:)) ?? "a value"
  137|      5|        return Self("expected \(typeHint) on the stack top but it's empty")
  138|      5|    }
$s7WasmKit15ValidationErrorV7MessageV27expectedTypeOnStackButEmpty0F0AE0A5Types05ValueG0OSg_tFZSSAJcfu_:
  136|      4|        let typeHint = expected.map(String.init(describing:)) ?? "a value"
$s7WasmKit15ValidationErrorV7MessageV27expectedTypeOnStackButEmpty0F0AE0A5Types05ValueG0OSg_tFZSSyKXEfu0_:
  136|      1|        let typeHint = expected.map(String.init(describing:)) ?? "a value"
$s7WasmKit15ValidationErrorV7MessageV27expectedMoreEndInstructions5countAESi_tFZ:
  140|      4|    static func expectedMoreEndInstructions(count: Int) -> Self {
  141|      4|        Self("expect \(count) more `end` instructions")
  142|      4|    }
$s7WasmKit15ValidationErrorV7MessageV21expectedSameCopyTypes05framehI0012defaultFramehI0AESay0aI09ValueTypeOG_ALtFZ:
  147|      1|    ) -> Self {
  148|      1|        Self("expected the same copy types for all branches in `br_table` but got \(frameCopyTypes) and \(defaultFrameCopyTypes)")
  149|      1|    }
$s7WasmKit15ValidationErrorV7MessageV20typeMismatchOnSelect8expected6actualAE0A5Types9ValueTypeO_AKtFZ:
  155|      2|    static func typeMismatchOnSelect(expected: ValueType, actual: ValueType) -> Self {
  156|      2|        Self("type mismatch on `select`. Expected \(expected) and \(actual) to be same")
  157|      2|    }
$s7WasmKit15ValidationErrorV7MessageV24typeMismatchOnReturnCall8expected6actualAESay0A5Types9ValueTypeOG_ALtFZ:
  187|      1|    static func typeMismatchOnReturnCall(expected: [ValueType], actual: [ValueType]) -> Self {
  188|      1|        Self("return signatures have inconsistent types: expected \(expected) but got \(actual)")
  189|      1|    }
$s7WasmKit20InstructionValidatorV14validateMemArg_16naturalAlignmenty0A6Parser0fG0V_SitKF:
  196|  15.7k|    func validateMemArg(_ memarg: MemArg, naturalAlignment: Int) throws {
  197|  15.7k|        if memarg.align > naturalAlignment {
  198|     16|            throw ValidationError(.invalidMemArgAlignment(memarg: memarg, naturalAlignment: naturalAlignment))
  199|  15.7k|        }
  200|  15.7k|    }
$s7WasmKit20InstructionValidatorV17validateGlobalSetyy0A6Parser0F4TypeVKF:
  202|  2.89k|    func validateGlobalSet(_ type: GlobalType) throws {
  203|  2.89k|        switch type.mutability {
  204|  2.89k|        case .constant:
  205|      0|            throw ValidationError(.globalSetConstant)
  206|  2.89k|        case .variable:
  207|  2.89k|            break
  208|  2.89k|        }
  209|  2.89k|    }
$s7WasmKit20InstructionValidatorV22validateReturnCallLike10calleeType06callerJ0y0A5Types08FunctionJ0V_AItKF:
  240|      5|    func validateReturnCallLike(calleeType: FunctionType, callerType: FunctionType) throws {
  241|      5|        guard calleeType.results == callerType.results else {
  242|      1|            throw ValidationError(.typeMismatchOnReturnCall(expected: callerType.results, actual: calleeType.results))
  243|      4|        }
  244|      4|    }
$s7WasmKit15ModuleValidatorV6moduleAcA0C0V_tcfC:
  250|    590|    init(module: Module) {
  251|    590|        self.module = module
  252|    590|    }
$s7WasmKit15ModuleValidatorV8validateyyKF:
  254|    590|    func validate() throws {
  255|    590|        if module.memoryTypes.count > 1 {
  256|      0|            throw ValidationError(.multipleMemoriesNotPermitted)
  257|    590|        }
  258|    590|        for memoryType in module.memoryTypes {
  259|    587|            try Self.checkMemoryType(memoryType, features: module.features)
  260|    590|        }
  261|    590|        for tableType in module.tableTypes {
  262|      0|            try Self.checkTableType(tableType, features: module.features)
  263|    590|        }
  264|    590|        try checkStartFunction()
  265|    589|    }
$s7WasmKit15ModuleValidatorV18checkStartFunctionyyKF:
  267|    590|    func checkStartFunction() throws {
  268|    590|        if let startFunction = module.start {
  269|    515|            let type = try module.resolveFunctionType(startFunction)
  270|    515|            guard type.parameters.isEmpty, type.results.isEmpty else {
  271|      1|                throw ValidationError(.startFunctionInvalidParameters())
  272|    514|            }
  273|    589|        }
  274|    589|    }
$s7WasmKit15ModuleValidatorV15checkMemoryType_8featuresy0A6Parser6LimitsV_AF0A10FeatureSetVtKFZ:
  276|    661|    static func checkMemoryType(_ type: MemoryType, features: WasmFeatureSet) throws {
  277|    661|        try checkLimit(type)
  278|    661|
  279|    661|        if type.isMemory64 {
  280|      0|            guard features.contains(.memory64) else {
  281|      0|                throw ValidationError(.memory64FeatureRequired)
  282|      0|            }
  283|    661|        }
  284|    661|
  285|    661|        let hardMax = MemoryEntity.maxPageCount(isMemory64: type.isMemory64)
  286|    661|
  287|    661|        if type.min > hardMax {
  288|      0|            throw ValidationError(.sizeMinimumExceeded(max: hardMax))
  289|    661|        }
  290|    661|
  291|    661|        if let max = type.max, max > hardMax {
  292|      1|            throw ValidationError(.sizeMaximumExceeded(max: hardMax))
  293|    660|        }
  294|    660|
  295|    660|        if type.shared {
  296|      0|            guard features.contains(.threads) else {
  297|      0|                throw ValidationError(.referenceTypesFeatureRequiredForSharedMemories)
  298|      0|            }
  299|    660|        }
  300|    660|    }
$s7WasmKit15ModuleValidatorV10checkLimit33_9F66C7BE5EF9F2BC43AA30FD76E78754LLyy0A6Parser6LimitsVKFZ:
  325|    661|    private static func checkLimit(_ limit: Limits) throws {
  326|    661|        guard let max = limit.max else { return }
  327|    147|        if limit.min > max {
  328|      0|            throw ValidationError(.sizeMinimumMustNotExceedMaximum)
  329|    147|        }
  330|    147|    }
$s9WasmTypes5ValueO0A3KitE9checkTypeyyAA0cF0OKF:
  347|  5.67k|    func checkType(_ type: WasmTypes.ValueType) throws {
  348|  5.67k|        switch (self, type) {
  349|  5.67k|        case (.i32, .i32): return
  350|  5.67k|        case (.i64, .i64): return
  351|  5.67k|        case (.f32, .f32): return
  352|  5.67k|        case (.f64, .f64): return
  353|  5.67k|        case (.ref(let ref), .ref(let refType)):
  354|      0|            try ref.checkType(refType)
  355|  5.67k|        default:
  356|      0|            throw ValidationError(.expectTypeButGot(expected: "\(type)", got: "\(self)"))
  357|  5.67k|        }
  358|      0|    }

$s10WasmParser22parseBinaryInstruction7visitor7decoderSbxz_q_ztKAA0E7VisitorRzAA0dE7DecoderR_r0_lF:
   93|   131k|func parseBinaryInstruction(visitor: inout some InstructionVisitor, decoder: inout some BinaryInstructionDecoder) throws -> Bool {
   94|   131k|    let opcode0 = try decoder.claimNextByte()
   95|   131k|    switch opcode0 {
   96|   131k|    case 0x00:
   97|  8.31k|        try visitor.visitUnreachable()
   98|   131k|    case 0x01:
   99|  1.56k|        try visitor.visitNop()
  100|   131k|    case 0x02:
  101|    690|        let (blockType) = try decoder.visitBlock()
  102|    689|        try visitor.visitBlock(blockType: blockType)
  103|   131k|    case 0x03:
  104|    722|        let (blockType) = try decoder.visitLoop()
  105|    721|        try visitor.visitLoop(blockType: blockType)
  106|   131k|    case 0x04:
  107|    282|        let (blockType) = try decoder.visitIf()
  108|    282|        try visitor.visitIf(blockType: blockType)
  109|   131k|    case 0x05:
  110|     59|        try visitor.visitElse()
  111|   131k|    case 0x0B:
  112|  4.60k|        try visitor.visitEnd()
  113|  4.59k|        return true
  114|   131k|    case 0x0C:
  115|  2.25k|        let (relativeDepth) = try decoder.visitBr()
  116|  2.25k|        try visitor.visitBr(relativeDepth: relativeDepth)
  117|   131k|    case 0x0D:
  118|     18|        let (relativeDepth) = try decoder.visitBrIf()
  119|     18|        try visitor.visitBrIf(relativeDepth: relativeDepth)
  120|   131k|    case 0x0E:
  121|    584|        let (targets) = try decoder.visitBrTable()
  122|    584|        try visitor.visitBrTable(targets: targets)
  123|   131k|    case 0x0F:
  124|  2.58k|        try visitor.visitReturn()
  125|   131k|    case 0x10:
  126|  6.79k|        let (functionIndex) = try decoder.visitCall()
  127|  6.79k|        try visitor.visitCall(functionIndex: functionIndex)
  128|   131k|    case 0x11:
  129|      7|        let (typeIndex, tableIndex) = try decoder.visitCallIndirect()
  130|      7|        try visitor.visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
  131|   131k|    case 0x12:
  132|     24|        let (functionIndex) = try decoder.visitReturnCall()
  133|     24|        try visitor.visitReturnCall(functionIndex: functionIndex)
  134|   131k|    case 0x13:
  135|    550|        let (typeIndex, tableIndex) = try decoder.visitReturnCallIndirect()
  136|    550|        try visitor.visitReturnCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
  137|   131k|    case 0x1A:
  138|  1.46k|        try visitor.visitDrop()
  139|   131k|    case 0x1B:
  140|     14|        try visitor.visitSelect()
  141|   131k|    case 0x1C:
  142|     37|        let (type) = try decoder.visitTypedSelect()
  143|     33|        try visitor.visitTypedSelect(type: type)
  144|   131k|    case 0x20:
  145|  1.17k|        let (localIndex) = try decoder.visitLocalGet()
  146|  1.17k|        try visitor.visitLocalGet(localIndex: localIndex)
  147|   131k|    case 0x21:
  148|    104|        let (localIndex) = try decoder.visitLocalSet()
  149|    104|        try visitor.visitLocalSet(localIndex: localIndex)
  150|   131k|    case 0x22:
  151|  5.76k|        let (localIndex) = try decoder.visitLocalTee()
  152|  5.76k|        try visitor.visitLocalTee(localIndex: localIndex)
  153|   131k|    case 0x23:
  154|  3.64k|        let (globalIndex) = try decoder.visitGlobalGet()
  155|  3.64k|        try visitor.visitGlobalGet(globalIndex: globalIndex)
  156|   131k|    case 0x24:
  157|  3.10k|        let (globalIndex) = try decoder.visitGlobalSet()
  158|  3.10k|        try visitor.visitGlobalSet(globalIndex: globalIndex)
  159|   131k|    case 0x25:
  160|      8|        let (table) = try decoder.visitTableGet()
  161|      8|        try visitor.visitTableGet(table: table)
  162|   131k|    case 0x26:
  163|    106|        let (table) = try decoder.visitTableSet()
  164|    105|        try visitor.visitTableSet(table: table)
  165|   131k|    case 0x28:
  166|    206|        let (memarg) = try decoder.visitLoad(.i32Load)
  167|    205|        try visitor.visitLoad(.i32Load, memarg: memarg)
  168|   131k|    case 0x29:
  169|     93|        let (memarg) = try decoder.visitLoad(.i64Load)
  170|     93|        try visitor.visitLoad(.i64Load, memarg: memarg)
  171|   131k|    case 0x2A:
  172|  1.76k|        let (memarg) = try decoder.visitLoad(.f32Load)
  173|  1.76k|        try visitor.visitLoad(.f32Load, memarg: memarg)
  174|   131k|    case 0x2B:
  175|  4.98k|        let (memarg) = try decoder.visitLoad(.f64Load)
  176|  4.98k|        try visitor.visitLoad(.f64Load, memarg: memarg)
  177|   131k|    case 0x2C:
  178|    677|        let (memarg) = try decoder.visitLoad(.i32Load8S)
  179|    675|        try visitor.visitLoad(.i32Load8S, memarg: memarg)
  180|   131k|    case 0x2D:
  181|     40|        let (memarg) = try decoder.visitLoad(.i32Load8U)
  182|     40|        try visitor.visitLoad(.i32Load8U, memarg: memarg)
  183|   131k|    case 0x2E:
  184|    727|        let (memarg) = try decoder.visitLoad(.i32Load16S)
  185|    727|        try visitor.visitLoad(.i32Load16S, memarg: memarg)
  186|   131k|    case 0x2F:
  187|    177|        let (memarg) = try decoder.visitLoad(.i32Load16U)
  188|    177|        try visitor.visitLoad(.i32Load16U, memarg: memarg)
  189|   131k|    case 0x30:
  190|    198|        let (memarg) = try decoder.visitLoad(.i64Load8S)
  191|    197|        try visitor.visitLoad(.i64Load8S, memarg: memarg)
  192|   131k|    case 0x31:
  193|    114|        let (memarg) = try decoder.visitLoad(.i64Load8U)
  194|    114|        try visitor.visitLoad(.i64Load8U, memarg: memarg)
  195|   131k|    case 0x32:
  196|    246|        let (memarg) = try decoder.visitLoad(.i64Load16S)
  197|    246|        try visitor.visitLoad(.i64Load16S, memarg: memarg)
  198|   131k|    case 0x33:
  199|    233|        let (memarg) = try decoder.visitLoad(.i64Load16U)
  200|    233|        try visitor.visitLoad(.i64Load16U, memarg: memarg)
  201|   131k|    case 0x34:
  202|  6.01k|        let (memarg) = try decoder.visitLoad(.i64Load32S)
  203|  6.01k|        try visitor.visitLoad(.i64Load32S, memarg: memarg)
  204|   131k|    case 0x35:
  205|    379|        let (memarg) = try decoder.visitLoad(.i64Load32U)
  206|    379|        try visitor.visitLoad(.i64Load32U, memarg: memarg)
  207|   131k|    case 0x36:
  208|     60|        let (memarg) = try decoder.visitStore(.i32Store)
  209|     60|        try visitor.visitStore(.i32Store, memarg: memarg)
  210|   131k|    case 0x37:
  211|     52|        let (memarg) = try decoder.visitStore(.i64Store)
  212|     52|        try visitor.visitStore(.i64Store, memarg: memarg)
  213|   131k|    case 0x38:
  214|    104|        let (memarg) = try decoder.visitStore(.f32Store)
  215|    104|        try visitor.visitStore(.f32Store, memarg: memarg)
  216|   131k|    case 0x39:
  217|     22|        let (memarg) = try decoder.visitStore(.f64Store)
  218|     22|        try visitor.visitStore(.f64Store, memarg: memarg)
  219|   131k|    case 0x3A:
  220|     41|        let (memarg) = try decoder.visitStore(.i32Store8)
  221|     41|        try visitor.visitStore(.i32Store8, memarg: memarg)
  222|   131k|    case 0x3B:
  223|     64|        let (memarg) = try decoder.visitStore(.i32Store16)
  224|     64|        try visitor.visitStore(.i32Store16, memarg: memarg)
  225|   131k|    case 0x3C:
  226|    687|        let (memarg) = try decoder.visitStore(.i64Store8)
  227|    687|        try visitor.visitStore(.i64Store8, memarg: memarg)
  228|   131k|    case 0x3D:
  229|     11|        let (memarg) = try decoder.visitStore(.i64Store16)
  230|     11|        try visitor.visitStore(.i64Store16, memarg: memarg)
  231|   131k|    case 0x3E:
  232|    103|        let (memarg) = try decoder.visitStore(.i64Store32)
  233|    103|        try visitor.visitStore(.i64Store32, memarg: memarg)
  234|   131k|    case 0x3F:
  235|  8.15k|        let (memory) = try decoder.visitMemorySize()
  236|  8.15k|        try visitor.visitMemorySize(memory: memory)
  237|   131k|    case 0x40:
  238|  1.64k|        let (memory) = try decoder.visitMemoryGrow()
  239|  1.64k|        try visitor.visitMemoryGrow(memory: memory)
  240|   131k|    case 0x41:
  241|  4.48k|        let (value) = try decoder.visitI32Const()
  242|  4.48k|        try visitor.visitI32Const(value: value)
  243|   131k|    case 0x42:
  244|  6.14k|        let (value) = try decoder.visitI64Const()
  245|  6.14k|        try visitor.visitI64Const(value: value)
  246|   131k|    case 0x43:
  247|    921|        let (value) = try decoder.visitF32Const()
  248|    921|        try visitor.visitF32Const(value: value)
  249|   131k|    case 0x44:
  250|    957|        let (value) = try decoder.visitF64Const()
  251|    954|        try visitor.visitF64Const(value: value)
  252|   131k|    case 0x45:
  253|    221|        try visitor.visitI32Eqz()
  254|   131k|    case 0x46:
  255|    137|        try visitor.visitCmp(.i32Eq)
  256|   131k|    case 0x47:
  257|     25|        try visitor.visitCmp(.i32Ne)
  258|   131k|    case 0x48:
  259|      6|        try visitor.visitCmp(.i32LtS)
  260|   131k|    case 0x49:
  261|     22|        try visitor.visitCmp(.i32LtU)
  262|   131k|    case 0x4A:
  263|     89|        try visitor.visitCmp(.i32GtS)
  264|   131k|    case 0x4B:
  265|     85|        try visitor.visitCmp(.i32GtU)
  266|   131k|    case 0x4C:
  267|      5|        try visitor.visitCmp(.i32LeS)
  268|   131k|    case 0x4D:
  269|     52|        try visitor.visitCmp(.i32LeU)
  270|   131k|    case 0x4E:
  271|     15|        try visitor.visitCmp(.i32GeS)
  272|   131k|    case 0x4F:
  273|    145|        try visitor.visitCmp(.i32GeU)
  274|   131k|    case 0x50:
  275|    203|        try visitor.visitI64Eqz()
  276|   131k|    case 0x51:
  277|      8|        try visitor.visitCmp(.i64Eq)
  278|   131k|    case 0x52:
  279|     49|        try visitor.visitCmp(.i64Ne)
  280|   131k|    case 0x53:
  281|     63|        try visitor.visitCmp(.i64LtS)
  282|   131k|    case 0x54:
  283|    164|        try visitor.visitCmp(.i64LtU)
  284|   131k|    case 0x55:
  285|     18|        try visitor.visitCmp(.i64GtS)
  286|   131k|    case 0x56:
  287|     28|        try visitor.visitCmp(.i64GtU)
  288|   131k|    case 0x57:
  289|     27|        try visitor.visitCmp(.i64LeS)
  290|   131k|    case 0x58:
  291|     10|        try visitor.visitCmp(.i64LeU)
  292|   131k|    case 0x59:
  293|     64|        try visitor.visitCmp(.i64GeS)
  294|   131k|    case 0x5A:
  295|    127|        try visitor.visitCmp(.i64GeU)
  296|   131k|    case 0x5B:
  297|     16|        try visitor.visitCmp(.f32Eq)
  298|   131k|    case 0x5C:
  299|     11|        try visitor.visitCmp(.f32Ne)
  300|   131k|    case 0x5D:
  301|     16|        try visitor.visitCmp(.f32Lt)
  302|   131k|    case 0x5E:
  303|      7|        try visitor.visitCmp(.f32Gt)
  304|   131k|    case 0x5F:
  305|      6|        try visitor.visitCmp(.f32Le)
  306|   131k|    case 0x60:
  307|     25|        try visitor.visitCmp(.f32Ge)
  308|   131k|    case 0x61:
  309|    177|        try visitor.visitCmp(.f64Eq)
  310|   131k|    case 0x62:
  311|      4|        try visitor.visitCmp(.f64Ne)
  312|   131k|    case 0x63:
  313|     35|        try visitor.visitCmp(.f64Lt)
  314|   131k|    case 0x64:
  315|     10|        try visitor.visitCmp(.f64Gt)
  316|   131k|    case 0x65:
  317|     18|        try visitor.visitCmp(.f64Le)
  318|   131k|    case 0x66:
  319|    111|        try visitor.visitCmp(.f64Ge)
  320|   131k|    case 0x67:
  321|    102|        try visitor.visitUnary(.i32Clz)
  322|   131k|    case 0x68:
  323|     21|        try visitor.visitUnary(.i32Ctz)
  324|   131k|    case 0x69:
  325|     68|        try visitor.visitUnary(.i32Popcnt)
  326|   131k|    case 0x6A:
  327|      7|        try visitor.visitBinary(.i32Add)
  328|   131k|    case 0x6B:
  329|     23|        try visitor.visitBinary(.i32Sub)
  330|   131k|    case 0x6C:
  331|     15|        try visitor.visitBinary(.i32Mul)
  332|   131k|    case 0x6D:
  333|     19|        try visitor.visitBinary(.i32DivS)
  334|   131k|    case 0x6E:
  335|      7|        try visitor.visitBinary(.i32DivU)
  336|   131k|    case 0x6F:
  337|    160|        try visitor.visitBinary(.i32RemS)
  338|   131k|    case 0x70:
  339|    171|        try visitor.visitBinary(.i32RemU)
  340|   131k|    case 0x71:
  341|     33|        try visitor.visitBinary(.i32And)
  342|   131k|    case 0x72:
  343|      6|        try visitor.visitBinary(.i32Or)
  344|   131k|    case 0x73:
  345|  1.35k|        try visitor.visitBinary(.i32Xor)
  346|   131k|    case 0x74:
  347|     13|        try visitor.visitBinary(.i32Shl)
  348|   131k|    case 0x75:
  349|    162|        try visitor.visitBinary(.i32ShrS)
  350|   131k|    case 0x76:
  351|     24|        try visitor.visitBinary(.i32ShrU)
  352|   131k|    case 0x77:
  353|    142|        try visitor.visitBinary(.i32Rotl)
  354|   131k|    case 0x78:
  355|     10|        try visitor.visitBinary(.i32Rotr)
  356|   131k|    case 0x79:
  357|  3.23k|        try visitor.visitUnary(.i64Clz)
  358|   131k|    case 0x7A:
  359|    206|        try visitor.visitUnary(.i64Ctz)
  360|   131k|    case 0x7B:
  361|    322|        try visitor.visitUnary(.i64Popcnt)
  362|   131k|    case 0x7C:
  363|    166|        try visitor.visitBinary(.i64Add)
  364|   131k|    case 0x7D:
  365|  3.33k|        try visitor.visitBinary(.i64Sub)
  366|   131k|    case 0x7E:
  367|     88|        try visitor.visitBinary(.i64Mul)
  368|   131k|    case 0x7F:
  369|    333|        try visitor.visitBinary(.i64DivS)
  370|   131k|    case 0x80:
  371|     65|        try visitor.visitBinary(.i64DivU)
  372|   131k|    case 0x81:
  373|      7|        try visitor.visitBinary(.i64RemS)
  374|   131k|    case 0x82:
  375|     97|        try visitor.visitBinary(.i64RemU)
  376|   131k|    case 0x83:
  377|    246|        try visitor.visitBinary(.i64And)
  378|   131k|    case 0x84:
  379|  2.45k|        try visitor.visitBinary(.i64Or)
  380|   131k|    case 0x85:
  381|  1.76k|        try visitor.visitBinary(.i64Xor)
  382|   131k|    case 0x86:
  383|     25|        try visitor.visitBinary(.i64Shl)
  384|   131k|    case 0x87:
  385|    379|        try visitor.visitBinary(.i64ShrS)
  386|   131k|    case 0x88:
  387|     12|        try visitor.visitBinary(.i64ShrU)
  388|   131k|    case 0x89:
  389|      8|        try visitor.visitBinary(.i64Rotl)
  390|   131k|    case 0x8A:
  391|     47|        try visitor.visitBinary(.i64Rotr)
  392|   131k|    case 0x8B:
  393|     21|        try visitor.visitUnary(.f32Abs)
  394|   131k|    case 0x8C:
  395|    124|        try visitor.visitUnary(.f32Neg)
  396|   131k|    case 0x8D:
  397|    152|        try visitor.visitUnary(.f32Ceil)
  398|   131k|    case 0x8E:
  399|     18|        try visitor.visitUnary(.f32Floor)
  400|   131k|    case 0x8F:
  401|     62|        try visitor.visitUnary(.f32Trunc)
  402|   131k|    case 0x90:
  403|     75|        try visitor.visitUnary(.f32Nearest)
  404|   131k|    case 0x91:
  405|      6|        try visitor.visitUnary(.f32Sqrt)
  406|   131k|    case 0x92:
  407|     15|        try visitor.visitBinary(.f32Add)
  408|   131k|    case 0x93:
  409|     12|        try visitor.visitBinary(.f32Sub)
  410|   131k|    case 0x94:
  411|      4|        try visitor.visitBinary(.f32Mul)
  412|   131k|    case 0x95:
  413|      6|        try visitor.visitBinary(.f32Div)
  414|   131k|    case 0x96:
  415|      9|        try visitor.visitBinary(.f32Min)
  416|   131k|    case 0x97:
  417|      9|        try visitor.visitBinary(.f32Max)
  418|   131k|    case 0x98:
  419|      5|        try visitor.visitBinary(.f32Copysign)
  420|   131k|    case 0x99:
  421|    192|        try visitor.visitUnary(.f64Abs)
  422|   131k|    case 0x9A:
  423|    355|        try visitor.visitUnary(.f64Neg)
  424|   131k|    case 0x9B:
  425|    236|        try visitor.visitUnary(.f64Ceil)
  426|   131k|    case 0x9C:
  427|    344|        try visitor.visitUnary(.f64Floor)
  428|   131k|    case 0x9D:
  429|  2.93k|        try visitor.visitUnary(.f64Trunc)
  430|   131k|    case 0x9E:
  431|    109|        try visitor.visitUnary(.f64Nearest)
  432|   131k|    case 0x9F:
  433|     55|        try visitor.visitUnary(.f64Sqrt)
  434|   131k|    case 0xA0:
  435|     60|        try visitor.visitBinary(.f64Add)
  436|   131k|    case 0xA1:
  437|      8|        try visitor.visitBinary(.f64Sub)
  438|   131k|    case 0xA2:
  439|     21|        try visitor.visitBinary(.f64Mul)
  440|   131k|    case 0xA3:
  441|     31|        try visitor.visitBinary(.f64Div)
  442|   131k|    case 0xA4:
  443|      7|        try visitor.visitBinary(.f64Min)
  444|   131k|    case 0xA5:
  445|     16|        try visitor.visitBinary(.f64Max)
  446|   131k|    case 0xA6:
  447|     14|        try visitor.visitBinary(.f64Copysign)
  448|   131k|    case 0xA7:
  449|    366|        try visitor.visitConversion(.i32WrapI64)
  450|   131k|    case 0xA8:
  451|      7|        try visitor.visitConversion(.i32TruncF32S)
  452|   131k|    case 0xA9:
  453|     15|        try visitor.visitConversion(.i32TruncF32U)
  454|   131k|    case 0xAA:
  455|     54|        try visitor.visitConversion(.i32TruncF64S)
  456|   131k|    case 0xAB:
  457|  3.21k|        try visitor.visitConversion(.i32TruncF64U)
  458|   131k|    case 0xAC:
  459|    116|        try visitor.visitConversion(.i64ExtendI32S)
  460|   131k|    case 0xAD:
  461|    139|        try visitor.visitConversion(.i64ExtendI32U)
  462|   131k|    case 0xAE:
  463|     96|        try visitor.visitConversion(.i64TruncF32S)
  464|   131k|    case 0xAF:
  465|  2.14k|        try visitor.visitConversion(.i64TruncF32U)
  466|   131k|    case 0xB0:
  467|     14|        try visitor.visitConversion(.i64TruncF64S)
  468|   131k|    case 0xB1:
  469|     14|        try visitor.visitConversion(.i64TruncF64U)
  470|   131k|    case 0xB2:
  471|     21|        try visitor.visitConversion(.f32ConvertI32S)
  472|   131k|    case 0xB3:
  473|     35|        try visitor.visitConversion(.f32ConvertI32U)
  474|   131k|    case 0xB4:
  475|  2.35k|        try visitor.visitConversion(.f32ConvertI64S)
  476|   131k|    case 0xB5:
  477|     95|        try visitor.visitConversion(.f32ConvertI64U)
  478|   131k|    case 0xB6:
  479|      7|        try visitor.visitConversion(.f32DemoteF64)
  480|   131k|    case 0xB7:
  481|     90|        try visitor.visitConversion(.f64ConvertI32S)
  482|   131k|    case 0xB8:
  483|     23|        try visitor.visitConversion(.f64ConvertI32U)
  484|   131k|    case 0xB9:
  485|    170|        try visitor.visitConversion(.f64ConvertI64S)
  486|   131k|    case 0xBA:
  487|    175|        try visitor.visitConversion(.f64ConvertI64U)
  488|   131k|    case 0xBB:
  489|    164|        try visitor.visitConversion(.f64PromoteF32)
  490|   131k|    case 0xBC:
  491|    962|        try visitor.visitConversion(.i32ReinterpretF32)
  492|   131k|    case 0xBD:
  493|    592|        try visitor.visitConversion(.i64ReinterpretF64)
  494|   131k|    case 0xBE:
  495|    137|        try visitor.visitConversion(.f32ReinterpretI32)
  496|   131k|    case 0xBF:
  497|  3.41k|        try visitor.visitConversion(.f64ReinterpretI64)
  498|   131k|    case 0xC0:
  499|  4.74k|        try visitor.visitUnary(.i32Extend8S)
  500|   131k|    case 0xC1:
  501|     16|        try visitor.visitUnary(.i32Extend16S)
  502|   131k|    case 0xC2:
  503|    402|        try visitor.visitUnary(.i64Extend8S)
  504|   131k|    case 0xC3:
  505|    536|        try visitor.visitUnary(.i64Extend16S)
  506|   131k|    case 0xC4:
  507|     46|        try visitor.visitUnary(.i64Extend32S)
  508|   131k|    case 0xD0:
  509|     22|        let (type) = try decoder.visitRefNull()
  510|     22|        try visitor.visitRefNull(type: type)
  511|   131k|    case 0xD1:
  512|      0|        try visitor.visitRefIsNull()
  513|   131k|    case 0xD2:
  514|      2|        let (functionIndex) = try decoder.visitRefFunc()
  515|      2|        try visitor.visitRefFunc(functionIndex: functionIndex)
  516|   131k|    case 0xFC:
  517|  4.93k|
  518|  4.93k|        let opcode1 = try decoder.claimNextByte()
  519|  4.93k|        switch opcode1 {
  520|  4.93k|        case 0x00:
  521|     40|            try visitor.visitConversion(.i32TruncSatF32S)
  522|  4.93k|        case 0x01:
  523|     94|            try visitor.visitConversion(.i32TruncSatF32U)
  524|  4.93k|        case 0x02:
  525|      5|            try visitor.visitConversion(.i32TruncSatF64S)
  526|  4.93k|        case 0x03:
  527|     10|            try visitor.visitConversion(.i32TruncSatF64U)
  528|  4.93k|        case 0x04:
  529|     36|            try visitor.visitConversion(.i64TruncSatF32S)
  530|  4.93k|        case 0x05:
  531|    113|            try visitor.visitConversion(.i64TruncSatF32U)
  532|  4.93k|        case 0x06:
  533|  4.21k|            try visitor.visitConversion(.i64TruncSatF64S)
  534|  4.93k|        case 0x07:
  535|     29|            try visitor.visitConversion(.i64TruncSatF64U)
  536|  4.93k|        case 0x08:
  537|      3|            let (dataIndex) = try decoder.visitMemoryInit()
  538|      3|            try visitor.visitMemoryInit(dataIndex: dataIndex)
  539|  4.93k|        case 0x09:
  540|      0|            let (dataIndex) = try decoder.visitDataDrop()
  541|      0|            try visitor.visitDataDrop(dataIndex: dataIndex)
  542|  4.93k|        case 0x0A:
  543|      0|            let (dstMem, srcMem) = try decoder.visitMemoryCopy()
  544|      0|            try visitor.visitMemoryCopy(dstMem: dstMem, srcMem: srcMem)
  545|  4.93k|        case 0x0B:
  546|      1|            let (memory) = try decoder.visitMemoryFill()
  547|      1|            try visitor.visitMemoryFill(memory: memory)
  548|  4.93k|        case 0x0C:
  549|    128|            let (elemIndex, table) = try decoder.visitTableInit()
  550|    128|            try visitor.visitTableInit(elemIndex: elemIndex, table: table)
  551|  4.93k|        case 0x0D:
  552|      0|            let (elemIndex) = try decoder.visitElemDrop()
  553|      0|            try visitor.visitElemDrop(elemIndex: elemIndex)
  554|  4.93k|        case 0x0E:
  555|      0|            let (dstTable, srcTable) = try decoder.visitTableCopy()
  556|      0|            try visitor.visitTableCopy(dstTable: dstTable, srcTable: srcTable)
  557|  4.93k|        case 0x0F:
  558|    128|            let (table) = try decoder.visitTableGrow()
  559|    128|            try visitor.visitTableGrow(table: table)
  560|  4.93k|        case 0x10:
  561|      0|            let (table) = try decoder.visitTableSize()
  562|      0|            try visitor.visitTableSize(table: table)
  563|  4.93k|        case 0x11:
  564|    128|            let (table) = try decoder.visitTableFill()
  565|    128|            try visitor.visitTableFill(table: table)
  566|  4.93k|        default:
  567|      1|            if try !visitor.visitUnknown([opcode0, opcode1]) { try decoder.throwUnknown([opcode0, opcode1]) }
  568|  4.93k|        }
  569|   131k|    case 0xFE:
  570|  1.02k|
  571|  1.02k|        let opcode1 = try decoder.claimNextByte()
  572|  1.02k|        switch opcode1 {
  573|  1.02k|        case 0x03:
  574|      0|
  575|      0|            let opcode2 = try decoder.claimNextByte()
  576|      0|            switch opcode2 {
  577|      0|            case 0x00:
  578|      0|                try visitor.visitAtomicFence()
  579|      0|            default:
  580|      0|                if try !visitor.visitUnknown([opcode0, opcode1, opcode2]) { try decoder.throwUnknown([opcode0, opcode1, opcode2]) }
  581|      0|            }
  582|  1.02k|        case 0x10:
  583|    161|            let (memarg) = try decoder.visitLoad(.i32AtomicLoad)
  584|    161|            try visitor.visitLoad(.i32AtomicLoad, memarg: memarg)
  585|  1.02k|        case 0x11:
  586|      0|            let (memarg) = try decoder.visitLoad(.i64AtomicLoad)
  587|      0|            try visitor.visitLoad(.i64AtomicLoad, memarg: memarg)
  588|  1.02k|        case 0x12:
  589|      0|            let (memarg) = try decoder.visitLoad(.i32AtomicLoad8U)
  590|      0|            try visitor.visitLoad(.i32AtomicLoad8U, memarg: memarg)
  591|  1.02k|        case 0x13:
  592|     64|            let (memarg) = try decoder.visitLoad(.i32AtomicLoad16U)
  593|     64|            try visitor.visitLoad(.i32AtomicLoad16U, memarg: memarg)
  594|  1.02k|        case 0x14:
  595|      1|            let (memarg) = try decoder.visitLoad(.i64AtomicLoad8U)
  596|      1|            try visitor.visitLoad(.i64AtomicLoad8U, memarg: memarg)
  597|  1.02k|        case 0x15:
  598|      0|            let (memarg) = try decoder.visitLoad(.i64AtomicLoad16U)
  599|      0|            try visitor.visitLoad(.i64AtomicLoad16U, memarg: memarg)
  600|  1.02k|        case 0x16:
  601|      0|            let (memarg) = try decoder.visitLoad(.i64AtomicLoad32U)
  602|      0|            try visitor.visitLoad(.i64AtomicLoad32U, memarg: memarg)
  603|  1.02k|        case 0x17:
  604|      0|            let (memarg) = try decoder.visitStore(.i32AtomicStore)
  605|      0|            try visitor.visitStore(.i32AtomicStore, memarg: memarg)
  606|  1.02k|        case 0x18:
  607|    325|            let (memarg) = try decoder.visitStore(.i64AtomicStore)
  608|    325|            try visitor.visitStore(.i64AtomicStore, memarg: memarg)
  609|  1.02k|        case 0x19:
  610|      1|            let (memarg) = try decoder.visitStore(.i32AtomicStore8)
  611|      1|            try visitor.visitStore(.i32AtomicStore8, memarg: memarg)
  612|  1.02k|        case 0x1A:
  613|     64|            let (memarg) = try decoder.visitStore(.i32AtomicStore16)
  614|     64|            try visitor.visitStore(.i32AtomicStore16, memarg: memarg)
  615|  1.02k|        case 0x1B:
  616|     96|            let (memarg) = try decoder.visitStore(.i64AtomicStore8)
  617|     96|            try visitor.visitStore(.i64AtomicStore8, memarg: memarg)
  618|  1.02k|        case 0x1C:
  619|    307|            let (memarg) = try decoder.visitStore(.i64AtomicStore16)
  620|    307|            try visitor.visitStore(.i64AtomicStore16, memarg: memarg)
  621|  1.02k|        case 0x1D:
  622|      2|            let (memarg) = try decoder.visitStore(.i64AtomicStore32)
  623|      2|            try visitor.visitStore(.i64AtomicStore32, memarg: memarg)
  624|  1.02k|        default:
  625|      2|            if try !visitor.visitUnknown([opcode0, opcode1]) { try decoder.throwUnknown([opcode0, opcode1]) }
  626|  1.02k|        }
  627|   131k|    default:
  628|     15|        if try !visitor.visitUnknown([opcode0]) { try decoder.throwUnknown([opcode0]) }
  629|   131k|    }
  630|   127k|    return false
  631|   131k|}

$s10WasmParser21AnyInstructionVisitorPAAE16visitUnreachableyyKF:
  253|  3.27k|    public mutating func visitUnreachable() throws { return try self.visit(.unreachable) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitNopyyKF:
  254|    253|    public mutating func visitNop() throws { return try self.visit(.nop) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitBlock9blockTypeyAA0gI0O_tKF:
  255|    123|    public mutating func visitBlock(blockType: BlockType) throws { return try self.visit(.block(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitLoop9blockTypeyAA05BlockI0O_tKF:
  256|    193|    public mutating func visitLoop(blockType: BlockType) throws { return try self.visit(.loop(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE7visitIf9blockTypeyAA05BlockI0O_tKF:
  257|     90|    public mutating func visitIf(blockType: BlockType) throws { return try self.visit(.if(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitElseyyKF:
  258|     25|    public mutating func visitElse() throws { return try self.visit(.else) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitEndyyKF:
  259|  3.20k|    public mutating func visitEnd() throws { return try self.visit(.end) }
$s10WasmParser21AnyInstructionVisitorPAAE7visitBr13relativeDepthys6UInt32V_tKF:
  260|     12|    public mutating func visitBr(relativeDepth: UInt32) throws { return try self.visit(.br(relativeDepth: relativeDepth)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitBrIf13relativeDepthys6UInt32V_tKF:
  261|      2|    public mutating func visitBrIf(relativeDepth: UInt32) throws { return try self.visit(.brIf(relativeDepth: relativeDepth)) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitBrTable7targetsyAA0gH0V_tKF:
  262|    128|    public mutating func visitBrTable(targets: BrTable) throws { return try self.visit(.brTable(targets: targets)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitReturnyyKF:
  263|     38|    public mutating func visitReturn() throws { return try self.visit(.return) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitCall13functionIndexys6UInt32V_tKF:
  264|  3.98k|    public mutating func visitCall(functionIndex: UInt32) throws { return try self.visit(.call(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE17visitCallIndirect9typeIndex05tableJ0ys6UInt32V_AHtKF:
  265|      7|    public mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try self.visit(.callIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitReturnCall13functionIndexys6UInt32V_tKF:
  266|     19|    public mutating func visitReturnCall(functionIndex: UInt32) throws { return try self.visit(.returnCall(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE23visitReturnCallIndirect9typeIndex05tableK0ys6UInt32V_AHtKF:
  267|    550|    public mutating func visitReturnCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try self.visit(.returnCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitDropyyKF:
  268|  1.40k|    public mutating func visitDrop() throws { return try self.visit(.drop) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitSelectyyKF:
  269|      2|    public mutating func visitSelect() throws { return try self.visit(.select) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalGet10localIndexys6UInt32V_tKF:
  271|    204|    public mutating func visitLocalGet(localIndex: UInt32) throws { return try self.visit(.localGet(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitGlobalGet11globalIndexys6UInt32V_tKF:
  274|     28|    public mutating func visitGlobalGet(globalIndex: UInt32) throws { return try self.visit(.globalGet(globalIndex: globalIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitGlobalSet11globalIndexys6UInt32V_tKF:
  275|    206|    public mutating func visitGlobalSet(globalIndex: UInt32) throws { return try self.visit(.globalSet(globalIndex: globalIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitLoad_6memargyAA0D0O0G0O_AA6MemArgVtKF:
  276|    669|    public mutating func visitLoad(_ load: Instruction.Load, memarg: MemArg) throws { return try self.visit(.load(load, memarg: memarg)) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitStore_6memargyAA0D0O0G0O_AA6MemArgVtKF:
  277|  1.63k|    public mutating func visitStore(_ store: Instruction.Store, memarg: MemArg) throws { return try self.visit(.store(store, memarg: memarg)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitI32Const5valueys5Int32V_tKF:
  280|  2.05k|    public mutating func visitI32Const(value: Int32) throws { return try self.visit(.i32Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitI64Const5valueys5Int64V_tKF:
  281|  1.33k|    public mutating func visitI64Const(value: Int64) throws { return try self.visit(.i64Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitF32Const5valueyAA7IEEE754O7Float32V_tKF:
  282|     26|    public mutating func visitF32Const(value: IEEE754.Float32) throws { return try self.visit(.f32Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitF64Const5valueyAA7IEEE754O7Float64V_tKF:
  283|    129|    public mutating func visitF64Const(value: IEEE754.Float64) throws { return try self.visit(.f64Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitRefFunc13functionIndexys6UInt32V_tKF:
  286|      2|    public mutating func visitRefFunc(functionIndex: UInt32) throws { return try self.visit(.refFunc(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitI32EqzyyKF:
  287|     22|    public mutating func visitI32Eqz() throws { return try self.visit(.i32Eqz) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitCmpyyAA0D0O0G0OKF:
  288|    508|    public mutating func visitCmp(_ cmp: Instruction.Cmp) throws { return try self.visit(.cmp(cmp)) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitUnaryyyAA0D0O0G0OKF:
  290|    479|    public mutating func visitUnary(_ unary: Instruction.Unary) throws { return try self.visit(.unary(unary)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitBinaryyyAA0D0O0G0OKF:
  291|    295|    public mutating func visitBinary(_ binary: Instruction.Binary) throws { return try self.visit(.binary(binary)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitConversionyyAA0D0O0G0OKF:
  292|    360|    public mutating func visitConversion(_ conversion: Instruction.Conversion) throws { return try self.visit(.conversion(conversion)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryInit9dataIndexys6UInt32V_tKF:
  293|      3|    public mutating func visitMemoryInit(dataIndex: UInt32) throws { return try self.visit(.memoryInit(dataIndex: dataIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryFill6memoryys6UInt32V_tKF:
  296|      1|    public mutating func visitMemoryFill(memory: UInt32) throws { return try self.visit(.memoryFill(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableInit9elemIndex5tableys6UInt32V_AHtKF:
  297|    128|    public mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws { return try self.visit(.tableInit(elemIndex: elemIndex, table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableFill5tableys6UInt32V_tKF:
  300|    128|    public mutating func visitTableFill(table: UInt32) throws { return try self.visit(.tableFill(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitTableGet5tableys6UInt32V_tKF:
  301|      8|    public mutating func visitTableGet(table: UInt32) throws { return try self.visit(.tableGet(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitTableSet5tableys6UInt32V_tKF:
  302|    105|    public mutating func visitTableSet(table: UInt32) throws { return try self.visit(.tableSet(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableGrow5tableys6UInt32V_tKF:
  303|    128|    public mutating func visitTableGrow(table: UInt32) throws { return try self.visit(.tableGrow(table: table)) }
$s10WasmParser18InstructionVisitorPAAE12visitUnknownySbSays5UInt8VGKF:
  539|      6|    public mutating func visitUnknown(_ opcode: [UInt8]) throws -> Bool { false }

$s10WasmParser12decodeLEB1286streamxq__tKs17FixedWidthIntegerRzSURzAA10ByteStreamR_r0_lF:
   11|  91.7k|) throws -> IntType where IntType: FixedWidthInteger, IntType: UnsignedInteger, Stream: ByteStream {
   12|  91.7k|    let firstByte = try stream.consumeAny()
   13|  91.7k|    var result: IntType = IntType(firstByte & 0b0111_1111)
   14|  91.7k|    if _fastPath(firstByte & 0b1000_0000 == 0) {
   15|  76.0k|        return result
   16|  76.0k|    }
   17|  15.7k|
   18|  15.7k|    var shift: UInt = 7
   19|  15.7k|
   20|  45.5k|    while true {
   21|  45.5k|        let byte = try stream.consumeAny()
   22|  45.5k|        let slice = IntType(byte & 0b0111_1111)
   23|  45.5k|        let nextShift = shift + 7
   24|  45.5k|        if nextShift >= IntType.bitWidth, (byte >> (UInt(IntType.bitWidth) - shift)) != 0 {
   25|      2|            throw LEBError.integerRepresentationTooLong
   26|  45.5k|        }
   27|  45.5k|        result |= slice << shift
   28|  45.5k|        shift = nextShift
   29|  45.5k|
   30|  45.5k|        guard byte & 0b1000_0000 != 0 else { break }
   31|  29.7k|    }
   32|  15.7k|
   33|  15.7k|    return result
   34|  91.7k|}
$s10WasmParser12decodeLEB1286stream8bitWidthxq__SitKAA16RawSignedIntegerRzAA10ByteStreamR_r0_lF:
   39|  11.2k|) throws -> IntType where IntType: FixedWidthInteger, IntType: RawSignedInteger, Stream: ByteStream {
   40|  11.2k|    let firstByte = try stream.consumeAny()
   41|  11.2k|    var result = IntType.Unsigned(firstByte & 0b0111_1111)
   42|  11.2k|    if _fastPath(firstByte & 0b1000_0000 == 0) {
   43|  3.89k|        // Interpret Int${Self.bitWidth-1} as Int${Self.bitWidth}
   44|  3.89k|        return (IntType(bitPattern: result) << (IntType.bitWidth - 7)) >> (IntType.bitWidth - 7)
   45|  7.39k|    }
   46|  7.39k|
   47|  7.39k|    var shift: IntType = 7
   48|  7.39k|
   49|  7.39k|    var byte: UInt8
   50|  44.3k|    repeat {
   51|  44.3k|        byte = try stream.consumeAny()
   52|  44.3k|
   53|  44.3k|        let slice = IntType.Unsigned(byte & 0b0111_1111)
   54|  44.3k|        result |= slice << shift
   55|  44.3k|
   56|  44.3k|        // When we don't have enough bit width
   57|  44.3k|        if shift > (bitWidth - 7) {
   58|  4.36k|            let remainingBitWidth = bitWidth - Int(shift)
   59|  4.36k|            let continuationBit = (byte & 0b1000_0000) != 0
   60|  4.36k|            // When a next byte is expected
   61|  4.36k|            if continuationBit {
   62|      0|                throw LEBError.integerRepresentationTooLong
   63|  4.36k|            }
   64|  4.36k|
   65|  4.36k|            let signAndDiscardingBits = Int8(bitPattern: byte << 1) >> remainingBitWidth
   66|  4.36k|            // When meaningful bits are discarded
   67|  4.36k|            if signAndDiscardingBits != 0 && signAndDiscardingBits != -1 {
   68|      0|                throw LEBError.overflow
   69|  4.36k|            }
   70|  4.36k|            return IntType(bitPattern: result)
   71|  40.0k|        }
   72|  40.0k|
   73|  40.0k|        shift += 7
   74|  40.0k|    } while byte & 0b1000_0000 != 0
   75|  3.03k|
   76|  3.03k|    // Sign flag is second high-order bit
   77|  3.03k|    if byte & 0b0100_0000 != 0 {
   78|    280|        // Sign extend
   79|    280|        result |= IntType.Unsigned(bitPattern: ~0) << shift
   80|    280|    }
   81|  3.03k|
   82|  3.03k|    return IntType(bitPattern: result)
   83|  11.2k|}
$s10WasmParser12decodeLEB1286stream8bitWidthxq__SitKAA16RawSignedIntegerRzAA10ByteStreamR_r0_lFSbyKXEfu_:
   67|    946|            if signAndDiscardingBits != 0 && signAndDiscardingBits != -1 {

$s10WasmParser13ParsingLimitsV7defaultACvgZ:
    9|  1.69k|    static var `default`: ParsingLimits {
   10|  1.69k|        return ParsingLimits(maxFunctionLocals: 100000)
   11|  1.69k|    }

$s10WasmParser16StaticByteStreamC5bytesACSays5UInt8VG_tcfc:
    7|    616|    public init(bytes: [UInt8]) {
    8|    616|        self.bytes = ArraySlice(bytes)
    9|    616|        currentIndex = bytes.startIndex
   10|    616|    }
$s10WasmParser16StaticByteStreamC5bytesACs10ArraySliceVys5UInt8VG_tcfc:
   12|  1.08k|    public init(bytes: ArraySlice<UInt8>) {
   13|  1.08k|        self.bytes = bytes
   14|  1.08k|        currentIndex = bytes.startIndex
   15|  1.08k|    }
$s10WasmParser16StaticByteStreamC10consumeAnys5UInt8VyKF:
   18|   360k|    public func consumeAny() throws -> UInt8 {
   19|   360k|        guard bytes.indices.contains(currentIndex) else {
   20|     18|            throw StreamError<Element>.unexpectedEnd(expected: nil)
   21|   360k|        }
   22|   360k|
   23|   360k|        let consumed = bytes[currentIndex]
   24|   360k|        currentIndex = bytes.index(after: currentIndex)
   25|   360k|        return consumed
   26|   360k|    }
$s10WasmParser16StaticByteStreamC7consumeys5UInt8VShyAFGKF:
   29|    146|    public func consume(_ expected: Set<UInt8>) throws -> UInt8 {
   30|    146|        guard bytes.indices.contains(currentIndex) else {
   31|      0|            throw StreamError<Element>.unexpectedEnd(expected: Set(expected))
   32|    146|        }
   33|    146|
   34|    146|        let consumed = bytes[currentIndex]
   35|    146|        guard expected.contains(consumed) else {
   36|      0|            throw StreamError<Element>.unexpected(consumed, index: currentIndex, expected: Set(expected))
   37|    146|        }
   38|    146|
   39|    146|        currentIndex = bytes.index(after: currentIndex)
   40|    146|        return consumed
   41|    146|    }
$s10WasmParser16StaticByteStreamC7consume5counts10ArraySliceVys5UInt8VGSi_tKF:
   43|  6.10k|    public func consume(count: Int) throws -> ArraySlice<UInt8> {
   44|  6.10k|        guard count > 0 else { return [] }
   45|  5.96k|        let updatedIndex = currentIndex + count
   46|  5.96k|
   47|  5.96k|        guard bytes.indices.contains(updatedIndex - 1) else {
   48|      3|            throw StreamError<Element>.unexpectedEnd(expected: nil)
   49|  5.96k|        }
   50|  5.96k|
   51|  5.96k|        defer { currentIndex = updatedIndex }
   52|  5.96k|
   53|  5.96k|        return bytes[currentIndex..<updatedIndex]
   54|  6.10k|    }
$s10WasmParser16StaticByteStreamC4peeks5UInt8VSgyF:
   56|   116k|    public func peek() -> UInt8? {
   57|   116k|        guard bytes.indices.contains(currentIndex) else {
   58|  1.55k|            return nil
   59|   115k|        }
   60|   115k|        return bytes[currentIndex]
   61|   116k|    }

$s10WasmParser6StreamPAAE13hasReachedEndSbyKF:
   25|   114k|    func hasReachedEnd() throws -> Bool {
   26|   114k|        try peek() == nil
   27|   114k|    }

$s10WasmParser0B0V13orderTrackingAC05OrderD0Vyx_Gvpfi:
   17|  1.69k|    @usableFromInline var orderTracking = OrderTracking()
$s10WasmParser0B0V6offsetSivg:
   28|   111k|    public var offset: Int {
   29|   111k|        return stream.currentIndex
   30|   111k|    }
$s10WasmParser0B0V6stream8featuresACyxGx_AA0A10FeatureSetVtcfC:
   32|  1.69k|    public init(stream: Stream, features: WasmFeatureSet = .default) {
   33|  1.69k|        self.stream = stream
   34|  1.69k|        self.features = features
   35|  1.69k|        self.nextParseTarget = .header
   36|  1.69k|        self.limits = .default
   37|  1.69k|    }
$s10WasmParser0B0V9makeErroryAA0abD0VAF7MessageVF:
   40|     22|    internal func makeError(_ message: WasmParserError.Message) -> WasmParserError {
   41|     22|        return WasmParserError(message, offset: offset)
   42|     22|    }
$s10WasmParser010ExpressionB0V6offsetSivg:
  149|   110k|    public var offset: Int {
  150|   110k|        self.codeOffset + self.parser.offset - self.initialStreamOffset
  151|   110k|    }
$s10WasmParser010ExpressionB0V4codeAcA4CodeV_tcfC:
  153|  1.08k|    public init(code: Code) {
  154|  1.08k|        self.parser = Parser(
  155|  1.08k|            stream: StaticByteStream(bytes: code.expression),
  156|  1.08k|            features: code.features
  157|  1.08k|        )
  158|  1.08k|        self.codeOffset = code.offset
  159|  1.08k|        self.initialStreamOffset = self.parser.offset
  160|  1.08k|    }
$s10WasmParser010ExpressionB0V5visit7visitorSbxz_tKAA18InstructionVisitorRzlF:
  163|   110k|    public mutating func visit<V: InstructionVisitor>(visitor: inout V) throws -> Bool {
  164|   110k|        isLastEnd = try parser.parseInstruction(visitor: &visitor)
  165|   110k|        let shouldContinue = try !parser.stream.hasReachedEnd()
  166|   110k|        if !shouldContinue {
  167|    965|            guard isLastEnd == true else {
  168|      3|                throw WasmParserError(.endOpcodeExpected, offset: offset)
  169|    962|            }
  170|   110k|        }
  171|   110k|        return shouldContinue
  172|   110k|    }
$s10WasmParser0A10FeatureSetV8rawValueACSi_tcfC:
  183|  57.7k|    public init(rawValue: Int) {
  184|  57.7k|        self.rawValue = rawValue
  185|  57.7k|    }
$s10WasmParser0A10FeatureSetV8memory64ACvgZ:
  189|  74.5k|    public static var memory64: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 0) }
$s10WasmParser0A10FeatureSetV14referenceTypesACvgZ:
  192|     32|    public static var referenceTypes: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 1) }
$s10WasmParser0A10FeatureSetV7threadsACvgZ:
  195|  2.39k|    public static var threads: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 2) }
$s10WasmParser0aB5ErrorV7MessageVyAESScfC:
  212|     23|        init(_ text: String) {
  213|     23|            self.text = text
  214|     23|        }
$s10WasmParser0aB5ErrorV_6offsetA2C7MessageV_SitcfC:
  221|     25|    init(_ message: Message, offset: Int) {
  222|     25|        self.message = message
  223|     25|        self.offset = offset
  224|     25|    }
$s10WasmParser0aB5ErrorV7MessageV12zeroExpected6actualAEs5UInt8V_tFZ:
  259|      1|    @usableFromInline static func zeroExpected(actual: UInt8) -> Self {
  260|      1|        Self("Zero expected but got \(actual)")
  261|      1|    }
$s10WasmParser0aB5ErrorV7MessageV21unexpectedElementKind8expected6actualAEs6UInt32V_AJtFZ:
  273|      1|    static func unexpectedElementKind(expected: UInt32, actual: UInt32) -> Self {
  274|      1|        Self("Unexpected element kind: expected \(expected) but got \(actual)")
  275|      1|    }
$s10WasmParser0aB5ErrorV7MessageV13illegalOpcodeyAESays5UInt8VGFZ:
  291|     18|    @usableFromInline static func illegalOpcode(_ opcode: [UInt8]) -> Self {
  292|     18|        Self("Illegal opcode: \(opcode)")
  293|     18|    }
$s10WasmParser0aB5ErrorV7MessageV19invalidFunctionTypeyAEs5Int64VFZ:
  323|      1|    @usableFromInline static func invalidFunctionType(_ index: Int64) -> Self {
  324|      1|        Self("invalid function type index: \(index), expected a unsigned 32-bit integer")
  325|      1|    }
$s10WasmParser10ByteStreamPAAE11parseVector7contentSayqd__Gqd__yKXE_tKlF:
  332|  11.7k|    func parseVector<Content>(content parser: () throws -> Content) throws -> [Content] {
  333|  11.7k|        var contents = [Content]()
  334|  11.7k|        let count: UInt32 = try parseUnsigned()
  335|  19.5k|        for _ in 0..<count {
  336|  19.5k|            try contents.append(parser())
  337|  19.5k|        }
  338|  11.7k|        return contents
  339|  11.7k|    }
$s10WasmParser10ByteStreamPAAE13parseUnsignedyqd__qd__mKAA03RawF7IntegerRd__lF:
  346|  91.7k|    func parseUnsigned<T: RawUnsignedInteger>(_: T.Type = T.self) throws -> T {
  347|  91.7k|        try decodeLEB128(stream: self)
  348|  91.7k|    }
$s10WasmParser10ByteStreamPAAE11parseSignedqd__yKAA03RawF7IntegerRd__lF:
  351|  10.6k|    func parseSigned<T: FixedWidthInteger & RawSignedInteger>() throws -> T {
  352|  10.6k|        try decodeLEB128(stream: self)
  353|  10.6k|    }
$s10WasmParser10ByteStreamPAAE16parseVarSigned33s5Int64VyKF:
  356|    654|    func parseVarSigned33() throws -> Int64 {
  357|    654|        try decodeLEB128(stream: self, bitWidth: 33)
  358|    654|    }
$s10WasmParser10ByteStreamPAAE9parseName33_266B39EE9A5BCC72156BAE2430A75AC9LLSSyKF:
  364|    484|    fileprivate func parseName() throws -> String {
  365|    484|        let bytes = try parseVector { () -> UInt8 in
  366|    484|            try consumeAny()
  367|    484|        }
  368|    484|
  369|    484|        // TODO(optimize): Utilize ASCII fast path in UTF8 decoder
  370|    484|        var name = ""
  371|    484|
  372|    484|        var iterator = bytes.makeIterator()
  373|    484|        var decoder = UTF8()
  374|    676|        Decode: while true {
  375|    676|            switch decoder.decode(&iterator) {
  376|    676|            case .scalarValue(let scalar): name.append(Character(scalar))
  377|    676|            case .emptyInput: break Decode
  378|    676|            case .error: throw WasmParserError(.invalidUTF8(bytes), offset: currentIndex)
  379|    676|            }
  380|    484|        }
  381|    484|
  382|    484|        return name
  383|    484|    }
$s10WasmParser10ByteStreamPAAE9parseName33_266B39EE9A5BCC72156BAE2430A75AC9LLSSyKFs5UInt8VyKXEfU_:
  365|    192|        let bytes = try parseVector { () -> UInt8 in
  366|    192|            try consumeAny()
  367|    192|        }
$s10WasmParser0B0V11parseVector7contentSayqd__Gqd__yKXE_tKlF:
  388|  11.2k|    func parseVector<Content>(content parser: () throws -> Content) throws -> [Content] {
  389|  11.2k|        try stream.parseVector(content: parser)
  390|  11.2k|    }
$s10WasmParser0B0V13parseUnsignedyqd__qd__mKAA03RawD7IntegerRd__lF:
  394|  80.0k|    func parseUnsigned<T: RawUnsignedInteger>(_: T.Type = T.self) throws -> T {
  395|  80.0k|        try stream.parseUnsigned(T.self)
  396|  79.9k|    }
$s10WasmParser0B0V12parseIntegerqd__yKAA011RawUnsignedD0Rd__lF:
  399|  10.6k|    func parseInteger<T: RawUnsignedInteger>() throws -> T {
  400|  10.6k|        let signed: T.Signed = try stream.parseSigned()
  401|  10.6k|        return T(bitPattern: signed)
  402|  10.6k|    }
$s10WasmParser0B0V9parseNameSSyKF:
  404|    484|    func parseName() throws -> String {
  405|    484|        try stream.parseName()
  406|    484|    }
$s10WasmParser0B0V10parseFloats6UInt32VyKF:
  413|    921|    func parseFloat() throws -> UInt32 {
  414|    921|        let consumedLittleEndian = try stream.consume(count: 4).reversed()
  415|    921|        let bitPattern = consumedLittleEndian.reduce(UInt32(0)) { acc, byte in
  416|    921|            acc << 8 + UInt32(byte)
  417|    921|        }
  418|    921|        return bitPattern
  419|    921|    }
$s10WasmParser0B0V10parseFloats6UInt32VyKFA2F_s5UInt8VtXEfU_:
  415|  3.68k|        let bitPattern = consumedLittleEndian.reduce(UInt32(0)) { acc, byte in
  416|  3.68k|            acc << 8 + UInt32(byte)
  417|  3.68k|        }
$s10WasmParser0B0V11parseDoubles6UInt64VyKF:
  422|    957|    func parseDouble() throws -> UInt64 {
  423|    957|        let consumedLittleEndian = try stream.consume(count: 8).reversed()
  424|    954|        let bitPattern = consumedLittleEndian.reduce(UInt64(0)) { acc, byte in
  425|    954|            acc << 8 + UInt64(byte)
  426|    954|        }
  427|    954|        return bitPattern
  428|    957|    }
$s10WasmParser0B0V11parseDoubles6UInt64VyKFA2F_s5UInt8VtXEfU_:
  424|  7.63k|        let bitPattern = consumedLittleEndian.reduce(UInt64(0)) { acc, byte in
  425|  7.63k|            acc << 8 + UInt64(byte)
  426|  7.63k|        }
$s10WasmParser0B0V14parseValueType0A5Types0dE0OyKF:
  437|  9.37k|    func parseValueType() throws -> ValueType {
  438|  9.37k|        let b = try stream.consumeAny()
  439|  9.37k|
  440|  9.37k|        switch b {
  441|  9.37k|        case 0x7F: return .i32
  442|  9.37k|        case 0x7E: return .i64
  443|  9.37k|        case 0x7D: return .f32
  444|  9.37k|        case 0x7C: return .f64
  445|  9.37k|        case 0x7B: return .f64
  446|  9.37k|        case 0x70: return .ref(.funcRef)
  447|  9.37k|        case 0x6F: return .ref(.externRef)
  448|  9.37k|        default:
  449|      4|            throw StreamError<Stream.Element>.unexpected(b, index: offset, expected: Set(0x7C...0x7F))
  450|  9.37k|        }
  451|  9.37k|    }
$s10WasmParser0B0V15parseResultTypeAA05BlockE0OyKF:
  456|  1.69k|    func parseResultType() throws -> BlockType {
  457|  1.69k|        guard let nextByte = try stream.peek() else {
  458|      1|            throw makeError(.unexpectedEnd)
  459|  1.69k|        }
  460|  1.69k|        switch nextByte {
  461|  1.69k|        case 0x40:
  462|    561|            _ = try stream.consumeAny()
  463|    561|            return .empty
  464|  1.69k|        case 0x7C...0x7F, 0x70, 0x6F:
  465|    478|            return try .type(parseValueType())
  466|  1.69k|        default:
  467|    654|            let rawIndex = try stream.parseVarSigned33()
  468|    654|            guard let index = TypeIndex(exactly: rawIndex) else {
  469|      1|                throw makeError(.invalidFunctionType(rawIndex))
  470|    653|            }
  471|    653|            return .funcType(index)
  472|  1.69k|        }
  473|  1.69k|    }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKF:
  478|  1.62k|    func parseFunctionType() throws -> FunctionType {
  479|  1.62k|        let opcode = try stream.consumeAny()
  480|  1.62k|
  481|  1.62k|        // XXX: spectest expects the first byte should be parsed as a LEB128 with 1 byte limit
  482|  1.62k|        // but the spec itself doesn't require it, so just check the continue bit of LEB128 here.
  483|  1.62k|        guard opcode & 0b10000000 == 0 else {
  484|      0|            throw makeError(.integerRepresentationTooLong)
  485|  1.62k|        }
  486|  1.62k|        guard opcode == 0x60 else {
  487|      0|            throw makeError(.malformedFunctionType(opcode))
  488|  1.62k|        }
  489|  1.62k|
  490|  1.62k|        let parameters = try parseVector { try parseValueType() }
  491|  1.62k|        let results = try parseVector { try parseValueType() }
  492|  1.62k|        return FunctionType(parameters: parameters, results: results)
  493|  1.62k|    }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKFAE05ValueE0OyKXEfU_:
  490|  1.03k|        let parameters = try parseVector { try parseValueType() }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKFAE05ValueE0OyKXEfU0_:
  491|    741|        let results = try parseVector { try parseValueType() }
$s10WasmParser0B0V11parseLimitsAA0D0VyKF:
  498|    598|    func parseLimits() throws -> Limits {
  499|    598|        let b = try stream.consumeAny()
  500|    598|        let sharedMask: UInt8 = 0b0010
  501|    598|        let isMemory64Mask: UInt8 = 0b0100
  502|    598|
  503|    598|        let hasMax = b & 0b0001 != 0
  504|    598|        let shared = b & sharedMask != 0
  505|    598|        let isMemory64 = b & isMemory64Mask != 0
  506|    598|
  507|    598|        var flagMask: UInt8 = 0b0001
  508|    598|        if features.contains(.threads) {
  509|      0|            flagMask |= sharedMask
  510|      0|        }
  511|    598|        if features.contains(.memory64) {
  512|      0|            flagMask |= isMemory64Mask
  513|      0|        }
  514|    598|        guard (b & ~flagMask) == 0 else {
  515|      0|            throw makeError(.malformedLimit(b))
  516|    598|        }
  517|    598|
  518|    598|        let min: UInt64
  519|    598|        if isMemory64 {
  520|      0|            min = try parseUnsigned(UInt64.self)
  521|    598|        } else {
  522|    598|            min = try UInt64(parseUnsigned(UInt32.self))
  523|    598|        }
  524|    598|        var max: UInt64?
  525|    598|        if hasMax {
  526|     77|            if isMemory64 {
  527|      0|                max = try parseUnsigned(UInt64.self)
  528|     77|            } else {
  529|     77|                max = try UInt64(parseUnsigned(UInt32.self))
  530|     77|            }
  531|    598|        }
  532|    598|        return Limits(min: min, max: max, isMemory64: isMemory64, shared: shared)
  533|    598|    }
$s10WasmParser0B0V15parseMemoryTypeAA6LimitsVyKF:
  537|     75|    func parseMemoryType() throws -> MemoryType {
  538|     75|        return try parseLimits()
  539|     75|    }
$s10WasmParser0B0V14parseTableTypeAA0dE0VyKF:
  544|      8|    func parseTableType() throws -> TableType {
  545|      8|        let elementType: ReferenceType
  546|      8|        let b = try stream.consumeAny()
  547|      8|
  548|      8|        switch b {
  549|      8|        case 0x70:
  550|      8|            elementType = .funcRef
  551|      8|        case 0x6F:
  552|      0|            elementType = .externRef
  553|      8|        default:
  554|      0|            throw StreamError.unexpected(b, index: offset, expected: [0x6F, 0x70])
  555|      8|        }
  556|      8|
  557|      8|        let limits = try parseLimits()
  558|      8|        return TableType(elementType: elementType, limits: limits)
  559|      8|    }
$s10WasmParser0B0V15parseGlobalTypeAA0dE0VyKF:
  564|  2.86k|    func parseGlobalType() throws -> GlobalType {
  565|  2.86k|        let valueType = try parseValueType()
  566|  2.86k|        let mutability = try parseMutability()
  567|  2.86k|        return GlobalType(mutability: mutability, valueType: valueType)
  568|  2.86k|    }
$s10WasmParser0B0V15parseMutabilityAA0D0OyKF:
  571|  2.86k|    func parseMutability() throws -> Mutability {
  572|  2.86k|        let b = try stream.consumeAny()
  573|  2.86k|        switch b {
  574|  2.86k|        case 0x00:
  575|     13|            return .constant
  576|  2.86k|        case 0x01:
  577|  2.85k|            return .variable
  578|  2.86k|        default:
  579|      0|            throw makeError(.malformedMutability(b))
  580|  2.86k|        }
  581|  2.86k|    }
$s10WasmParser0B0V11parseMemargAA6MemArgVyKF:
  586|  18.0k|    func parseMemarg() throws -> MemArg {
  587|  18.0k|        let align: UInt32 = try parseUnsigned()
  588|  18.0k|        let offset: UInt64 = try features.contains(.memory64) ? parseUnsigned(UInt64.self) : UInt64(parseUnsigned(UInt32.self))
  589|  18.0k|        return MemArg(offset: offset, align: align)
  590|  18.0k|    }
$s10WasmParser0B0V16parseMemoryIndexs6UInt32VyKF:
  601|  9.80k|    @inlinable func parseMemoryIndex() throws -> UInt32 {
  602|  9.80k|        let zero = try stream.consumeAny()
  603|  9.80k|        guard zero == 0x00 else {
  604|      1|            throw makeError(.zeroExpected(actual: zero))
  605|  9.80k|        }
  606|  9.80k|        return 0
  607|  9.80k|    }
$s10WasmParser0B0V12throwUnknownys5NeverOSays5UInt8VGKF:
  609|     18|    @inlinable func throwUnknown(_ opcode: [UInt8]) throws -> Never {
  610|     18|        throw makeError(.illegalOpcode(opcode))
  611|     18|    }
$s10WasmParser0B0V10visitBlockAA0D4TypeOyKF:
  617|    690|    @inlinable mutating func visitBlock() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V9visitLoopAA9BlockTypeOyKF:
  618|    722|    @inlinable mutating func visitLoop() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V7visitIfAA9BlockTypeOyKF:
  619|    282|    @inlinable mutating func visitIf() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V7visitBrs6UInt32VyKF:
  620|  2.25k|    @inlinable mutating func visitBr() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V9visitBrIfs6UInt32VyKF:
  621|     18|    @inlinable mutating func visitBrIf() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V12visitBrTableAA0dE0VyKF:
  622|    584|    @inlinable mutating func visitBrTable() throws -> BrTable {
  623|    584|        let labelIndices: [UInt32] = try parseVector { try parseUnsigned() }
  624|    584|        let labelIndex: UInt32 = try parseUnsigned()
  625|    584|        return BrTable(labelIndices: labelIndices, defaultIndex: labelIndex)
  626|    584|    }
$s10WasmParser0B0V12visitBrTableAA0dE0VyKFs6UInt32VyKXEfU_:
  623|    922|        let labelIndices: [UInt32] = try parseVector { try parseUnsigned() }
$s10WasmParser0B0V9visitCalls6UInt32VyKF:
  627|  6.79k|    @inlinable mutating func visitCall() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V17visitCallIndirects6UInt32V9typeIndex_AF05tableH0tyKF:
  629|      7|    @inlinable mutating func visitCallIndirect() throws -> (typeIndex: UInt32, tableIndex: UInt32) {
  630|      7|        let typeIndex: TypeIndex = try parseUnsigned()
  631|      7|        if try !features.contains(.referenceTypes) && stream.peek() != 0 {
  632|      0|            // Check that reserved byte is zero when reference-types is disabled
  633|      0|            throw makeError(.malformedIndirectCall)
  634|      7|        }
  635|      7|        let tableIndex: TableIndex = try parseUnsigned()
  636|      7|        return (typeIndex, tableIndex)
  637|      7|    }
$s10WasmParser0B0V15visitReturnCalls6UInt32VyKF:
  639|     24|    @inlinable mutating func visitReturnCall() throws -> UInt32 {
  640|     24|        try parseUnsigned()
  641|     24|    }
$s10WasmParser0B0V23visitReturnCallIndirects6UInt32V9typeIndex_AF05tableI0tyKF:
  643|    550|    @inlinable mutating func visitReturnCallIndirect() throws -> (typeIndex: UInt32, tableIndex: UInt32) {
  644|    550|        let typeIndex: TypeIndex = try parseUnsigned()
  645|    550|        let tableIndex: TableIndex = try parseUnsigned()
  646|    550|        return (typeIndex, tableIndex)
  647|    550|    }
$s10WasmParser0B0V16visitTypedSelect0A5Types9ValueTypeOyKF:
  649|     37|    @inlinable mutating func visitTypedSelect() throws -> WasmTypes.ValueType {
  650|     37|        let results = try parseVector { try parseValueType() }
  651|     33|        guard results.count == 1 else {
  652|      0|            throw makeError(.invalidResultArity(expected: 1, actual: results.count))
  653|     33|        }
  654|     33|        return results[0]
  655|     37|    }
$s10WasmParser0B0V16visitTypedSelect0A5Types9ValueTypeOyKFAGyKXEfU_:
  650|     37|        let results = try parseVector { try parseValueType() }
$s10WasmParser0B0V13visitLocalGets6UInt32VyKF:
  657|  1.17k|    @inlinable mutating func visitLocalGet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V13visitLocalSets6UInt32VyKF:
  658|    104|    @inlinable mutating func visitLocalSet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V13visitLocalTees6UInt32VyKF:
  659|  5.76k|    @inlinable mutating func visitLocalTee() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V14visitGlobalGets6UInt32VyKF:
  660|  3.64k|    @inlinable mutating func visitGlobalGet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V14visitGlobalSets6UInt32VyKF:
  661|  3.10k|    @inlinable mutating func visitGlobalSet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V9visitLoadyAA6MemArgVAA11InstructionO0D0OKF:
  662|  16.0k|    @inlinable mutating func visitLoad(_: Instruction.Load) throws -> MemArg { try parseMemarg() }
$s10WasmParser0B0V10visitStoreyAA6MemArgVAA11InstructionO0D0OKF:
  663|  1.93k|    @inlinable mutating func visitStore(_: Instruction.Store) throws -> MemArg { try parseMemarg() }
$s10WasmParser0B0V15visitMemorySizes6UInt32VyKF:
  664|  8.15k|    @inlinable mutating func visitMemorySize() throws -> UInt32 {
  665|  8.15k|        try parseMemoryIndex()
  666|  8.15k|    }
$s10WasmParser0B0V15visitMemoryGrows6UInt32VyKF:
  667|  1.64k|    @inlinable mutating func visitMemoryGrow() throws -> UInt32 {
  668|  1.64k|        try parseMemoryIndex()
  669|  1.64k|    }
$s10WasmParser0B0V13visitI32Consts5Int32VyKF:
  670|  4.48k|    @inlinable mutating func visitI32Const() throws -> Int32 {
  671|  4.48k|        let n: UInt32 = try parseInteger()
  672|  4.48k|        return Int32(bitPattern: n)
  673|  4.48k|    }
$s10WasmParser0B0V13visitI64Consts5Int64VyKF:
  674|  6.14k|    @inlinable mutating func visitI64Const() throws -> Int64 {
  675|  6.14k|        let n: UInt64 = try parseInteger()
  676|  6.14k|        return Int64(bitPattern: n)
  677|  6.14k|    }
$s10WasmParser0B0V13visitF32ConstAA7IEEE754O7Float32VyKF:
  678|    921|    @inlinable mutating func visitF32Const() throws -> IEEE754.Float32 {
  679|    921|        let n = try parseFloat()
  680|    921|        return IEEE754.Float32(bitPattern: n)
  681|    921|    }
$s10WasmParser0B0V13visitF64ConstAA7IEEE754O7Float64VyKF:
  682|    957|    @inlinable mutating func visitF64Const() throws -> IEEE754.Float64 {
  683|    957|        let n = try parseDouble()
  684|    954|        return IEEE754.Float64(bitPattern: n)
  685|    957|    }
$s10WasmParser0B0V12visitRefNull0A5Types13ReferenceTypeOyKF:
  686|     22|    @inlinable mutating func visitRefNull() throws -> WasmTypes.ReferenceType {
  687|     22|        let type = try parseValueType()
  688|     22|        guard case .ref(let refType) = type else {
  689|      0|            throw makeError(.expectedRefType(actual: type))
  690|     22|        }
  691|     22|        return refType
  692|     22|    }
$s10WasmParser0B0V12visitRefFuncs6UInt32VyKF:
  694|      2|    @inlinable mutating func visitRefFunc() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V15visitMemoryInits6UInt32VyKF:
  695|      3|    @inlinable mutating func visitMemoryInit() throws -> UInt32 {
  696|      3|        let dataIndex: DataIndex = try parseUnsigned()
  697|      3|        _ = try parseMemoryIndex()
  698|      3|        return dataIndex
  699|      3|    }
$s10WasmParser0B0V15visitMemoryFills6UInt32VyKF:
  711|      1|    @inlinable mutating func visitMemoryFill() throws -> UInt32 {
  712|      1|        let zero = try stream.consumeAny()
  713|      1|        guard zero == 0x00 else {
  714|      0|            throw makeError(.zeroExpected(actual: zero))
  715|      1|        }
  716|      1|        return 0
  717|      1|    }
$s10WasmParser0B0V14visitTableInits6UInt32V9elemIndex_AF5tabletyKF:
  719|    128|    @inlinable mutating func visitTableInit() throws -> (elemIndex: UInt32, table: UInt32) {
  720|    128|        let elementIndex: ElementIndex = try parseUnsigned()
  721|    128|        let tableIndex: TableIndex = try parseUnsigned()
  722|    128|        return (elementIndex, tableIndex)
  723|    128|    }
$s10WasmParser0B0V14visitTableFills6UInt32VyKF:
  732|    128|    @inlinable mutating func visitTableFill() throws -> UInt32 {
  733|    128|        try parseUnsigned()
  734|    128|    }
$s10WasmParser0B0V13visitTableGets6UInt32VyKF:
  735|      8|    @inlinable mutating func visitTableGet() throws -> UInt32 {
  736|      8|        try parseUnsigned()
  737|      8|    }
$s10WasmParser0B0V13visitTableSets6UInt32VyKF:
  738|    106|    @inlinable mutating func visitTableSet() throws -> UInt32 {
  739|    106|        try parseUnsigned()
  740|    105|    }
$s10WasmParser0B0V14visitTableGrows6UInt32VyKF:
  741|    128|    @inlinable mutating func visitTableGrow() throws -> UInt32 {
  742|    128|        try parseUnsigned()
  743|    128|    }
$s10WasmParser0B0V13claimNextBytes5UInt8VyKF:
  747|   137k|    @inlinable func claimNextByte() throws -> UInt8 {
  748|   137k|        return try stream.consumeAny()
  749|   137k|    }
$s10WasmParser0B0V16parseInstruction7visitorSbqd__z_tKAA0D7VisitorRd__lF:
  754|   131k|    mutating func parseInstruction<V: InstructionVisitor>(visitor v: inout V) throws -> Bool {
  755|   131k|        return try parseBinaryInstruction(visitor: &v, decoder: &self)
  756|   131k|    }
$s10WasmParser0B0V18InstructionFactoryV5instsSayAA0C0OGvpfi:
  760|  3.22k|        @usableFromInline var insts: [Instruction] = []
$s10WasmParser0B0V18InstructionFactoryVAEyx_GycfC:
  762|  3.22k|        @inlinable init() {}
$s10WasmParser0B0V18InstructionFactoryV5visityyAA0C0OKF:
  765|  21.7k|        mutating func visit(_ instruction: Instruction) throws {
  766|  21.7k|            insts.append(instruction)
  767|  21.7k|        }
$s10WasmParser0B0V20parseConstExpressionSayAA11InstructionOGyKF:
  771|  3.22k|    mutating func parseConstExpression() throws -> ConstExpression {
  772|  3.22k|        var factory = InstructionFactory()
  773|  3.22k|        var isEnd: Bool
  774|  21.7k|        repeat {
  775|  21.7k|            isEnd = try self.parseInstruction(visitor: &factory)
  776|  21.7k|        } while !isEnd
  777|  3.20k|        return factory.insts
  778|  3.22k|    }
$s10WasmParser0B0V18parseCustomSection4sizeAA0dE0Vs6UInt32V_tKF:
  787|    257|    func parseCustomSection(size: UInt32) throws -> CustomSection {
  788|    257|        let preNameIndex = stream.currentIndex
  789|    257|        let name = try parseName()
  790|    257|        let nameSize = stream.currentIndex - preNameIndex
  791|    257|        let contentSize = Int(size) - nameSize
  792|    257|
  793|    257|        guard contentSize >= 0 else {
  794|      0|            throw makeError(.invalidSectionSize(size))
  795|    257|        }
  796|    257|
  797|    257|        let bytes = try stream.consume(count: contentSize)
  798|    257|
  799|    257|        return CustomSection(name: name, bytes: bytes)
  800|    257|    }
$s10WasmParser0B0V16parseTypeSectionSay0A5Types08FunctionD0VGyKF:
  805|    596|    func parseTypeSection() throws -> [FunctionType] {
  806|    596|        return try parseVector { try parseFunctionType() }
  807|    596|    }
$s10WasmParser0B0V16parseTypeSectionSay0A5Types08FunctionD0VGyKFAGyKXEfU_:
  806|  1.62k|        return try parseVector { try parseFunctionType() }
$s10WasmParser0B0V18parseImportSectionSayAA0D0VGyKF:
  812|    592|    func parseImportSection() throws -> [Import] {
  813|    592|        return try parseVector {
  814|    592|            let module = try parseName()
  815|    592|            let name = try parseName()
  816|    592|            let descriptor = try parseImportDescriptor()
  817|    592|            return Import(module: module, name: name, descriptor: descriptor)
  818|    592|        }
  819|    592|    }
$s10WasmParser0B0V18parseImportSectionSayAA0D0VGyKFAFyKXEfU_:
  813|     81|        return try parseVector {
  814|     81|            let module = try parseName()
  815|     81|            let name = try parseName()
  816|     81|            let descriptor = try parseImportDescriptor()
  817|     81|            return Import(module: module, name: name, descriptor: descriptor)
  818|     81|        }
$s10WasmParser0B0V21parseImportDescriptorAA0dE0OyKF:
  823|     81|    func parseImportDescriptor() throws -> ImportDescriptor {
  824|     81|        let b = try stream.consume(Set(0x00...0x03))
  825|     81|        switch b {
  826|     81|        case 0x00: return try .function(parseUnsigned())
  827|     81|        case 0x01: return try .table(parseTableType())
  828|     81|        case 0x02: return try .memory(parseMemoryType())
  829|     81|        case 0x03: return try .global(parseGlobalType())
  830|     81|        default:
  831|      0|            preconditionFailure("should never reach here")
  832|     81|        }
  833|      0|    }
$s10WasmParser0B0V20parseFunctionSectionSays6UInt32VGyKF:
  838|    592|    func parseFunctionSection() throws -> [TypeIndex] {
  839|    592|        return try parseVector { try parseUnsigned() }
  840|    592|    }
$s10WasmParser0B0V20parseFunctionSectionSays6UInt32VGyKFAFyKXEfU_:
  839|  3.17k|        return try parseVector { try parseUnsigned() }
$s10WasmParser0B0V17parseTableSectionSayAA0D0VGyKF:
  845|      6|    func parseTableSection() throws -> [Table] {
  846|      6|        return try parseVector { try Table(type: parseTableType()) }
  847|      6|    }
$s10WasmParser0B0V17parseTableSectionSayAA0D0VGyKFAFyKXEfU_:
  846|      6|        return try parseVector { try Table(type: parseTableType()) }
$s10WasmParser0B0V18parseMemorySectionSayAA0D0VGyKF:
  852|    515|    func parseMemorySection() throws -> [Memory] {
  853|    515|        return try parseVector { try Memory(type: parseLimits()) }
  854|    515|    }
$s10WasmParser0B0V18parseMemorySectionSayAA0D0VGyKFAFyKXEfU_:
  853|    515|        return try parseVector { try Memory(type: parseLimits()) }
$s10WasmParser0B0V18parseGlobalSectionSayAA0D0VGyKF:
  859|    602|    mutating func parseGlobalSection() throws -> [Global] {
  860|    602|        return try parseVector {
  861|    602|            let type = try parseGlobalType()
  862|    602|            let expression = try parseConstExpression()
  863|    602|            return Global(type: type, initializer: expression)
  864|    602|        }
  865|    602|    }
$s10WasmParser0B0V18parseGlobalSectionSayAA0D0VGyKFAFyKXEfU_:
  860|  2.86k|        return try parseVector {
  861|  2.86k|            let type = try parseGlobalType()
  862|  2.86k|            let expression = try parseConstExpression()
  863|  2.84k|            return Global(type: type, initializer: expression)
  864|  2.86k|        }
$s10WasmParser0B0V18parseExportSectionSayAA0D0VGyKF:
  870|     65|    func parseExportSection() throws -> [Export] {
  871|     65|        return try parseVector {
  872|     65|            let name = try parseName()
  873|     65|            let descriptor = try parseExportDescriptor()
  874|     65|            return Export(name: name, descriptor: descriptor)
  875|     65|        }
  876|     65|    }
$s10WasmParser0B0V18parseExportSectionSayAA0D0VGyKFAFyKXEfU_:
  871|     65|        return try parseVector {
  872|     65|            let name = try parseName()
  873|     65|            let descriptor = try parseExportDescriptor()
  874|     65|            return Export(name: name, descriptor: descriptor)
  875|     65|        }
$s10WasmParser0B0V21parseExportDescriptorAA0dE0OyKF:
  880|     65|    func parseExportDescriptor() throws -> ExportDescriptor {
  881|     65|        let b = try stream.consume(Set(0x00...0x03))
  882|     65|        switch b {
  883|     65|        case 0x00: return try .function(parseUnsigned())
  884|     65|        case 0x01: return try .table(parseUnsigned())
  885|     65|        case 0x02: return try .memory(parseUnsigned())
  886|     65|        case 0x03: return try .global(parseUnsigned())
  887|     65|        default:
  888|      0|            preconditionFailure("should never reach here")
  889|     65|        }
  890|      0|    }
$s10WasmParser0B0V17parseStartSections6UInt32VyKF:
  895|    515|    func parseStartSection() throws -> FunctionIndex {
  896|    515|        return try parseUnsigned()
  897|    515|    }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKF:
  902|      3|    mutating func parseElementSection() throws -> [ElementSegment] {
  903|      3|        return try parseVector {
  904|      3|            let flag = try ElementSegment.Flag(rawValue: parseUnsigned())
  905|      3|
  906|      3|            let type: ReferenceType
  907|      3|            let initializer: [ConstExpression]
  908|      3|            let mode: ElementSegment.Mode
  909|      3|
  910|      3|            if flag.contains(.isPassiveOrDeclarative) {
  911|      3|                if flag.contains(.isDeclarative) {
  912|      3|                    mode = .declarative
  913|      3|                } else {
  914|      3|                    mode = .passive
  915|      3|                }
  916|      3|            } else {
  917|      3|                let table: TableIndex
  918|      3|
  919|      3|                if flag.contains(.hasTableIndex) {
  920|      3|                    table = try parseUnsigned()
  921|      3|                } else {
  922|      3|                    table = 0
  923|      3|                }
  924|      3|
  925|      3|                let offset = try parseConstExpression()
  926|      3|                mode = .active(table: table, offset: offset)
  927|      3|            }
  928|      3|
  929|      3|            if flag.segmentHasRefType {
  930|      3|                let valueType = try parseValueType()
  931|      3|
  932|      3|                guard case .ref(let refType) = valueType else {
  933|      3|                    throw makeError(.expectedRefType(actual: valueType))
  934|      3|                }
  935|      3|
  936|      3|                type = refType
  937|      3|            } else {
  938|      3|                type = .funcRef
  939|      3|            }
  940|      3|
  941|      3|            if flag.segmentHasElemKind {
  942|      3|                // `elemkind` parsing as defined in the spec
  943|      3|                let elemKind = try parseUnsigned() as UInt32
  944|      3|                guard elemKind == 0x00 else {
  945|      3|                    throw makeError(.unexpectedElementKind(expected: 0x00, actual: elemKind))
  946|      3|                }
  947|      3|            }
  948|      3|
  949|      3|            if flag.contains(.usesExpressions) {
  950|      3|                initializer = try parseVector { try parseConstExpression() }
  951|      3|            } else {
  952|      3|                initializer = try parseVector {
  953|      3|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  954|      3|                }
  955|      3|            }
  956|      3|
  957|      3|            return ElementSegment(type: type, initializer: initializer, mode: mode)
  958|      3|        }
  959|      3|    }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_:
  903|  1.12k|        return try parseVector {
  904|  1.12k|            let flag = try ElementSegment.Flag(rawValue: parseUnsigned())
  905|  1.12k|
  906|  1.12k|            let type: ReferenceType
  907|  1.12k|            let initializer: [ConstExpression]
  908|  1.12k|            let mode: ElementSegment.Mode
  909|  1.12k|
  910|  1.12k|            if flag.contains(.isPassiveOrDeclarative) {
  911|    766|                if flag.contains(.isDeclarative) {
  912|    272|                    mode = .declarative
  913|    494|                } else {
  914|    494|                    mode = .passive
  915|    494|                }
  916|    766|            } else {
  917|    356|                let table: TableIndex
  918|    356|
  919|    356|                if flag.contains(.hasTableIndex) {
  920|      1|                    table = try parseUnsigned()
  921|    355|                } else {
  922|    355|                    table = 0
  923|    356|                }
  924|    356|
  925|    356|                let offset = try parseConstExpression()
  926|    356|                mode = .active(table: table, offset: offset)
  927|  1.12k|            }
  928|  1.12k|
  929|  1.12k|            if flag.segmentHasRefType {
  930|      0|                let valueType = try parseValueType()
  931|      0|
  932|      0|                guard case .ref(let refType) = valueType else {
  933|      0|                    throw makeError(.expectedRefType(actual: valueType))
  934|      0|                }
  935|      0|
  936|      0|                type = refType
  937|  1.12k|            } else {
  938|  1.12k|                type = .funcRef
  939|  1.12k|            }
  940|  1.12k|
  941|  1.12k|            if flag.segmentHasElemKind {
  942|    773|                // `elemkind` parsing as defined in the spec
  943|    773|                let elemKind = try parseUnsigned() as UInt32
  944|    773|                guard elemKind == 0x00 else {
  945|      1|                    throw makeError(.unexpectedElementKind(expected: 0x00, actual: elemKind))
  946|    772|                }
  947|  1.12k|            }
  948|  1.12k|
  949|  1.12k|            if flag.contains(.usesExpressions) {
  950|     91|                initializer = try parseVector { try parseConstExpression() }
  951|  1.03k|            } else {
  952|  1.03k|                initializer = try parseVector {
  953|  1.03k|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  954|  1.03k|                }
  955|  1.12k|            }
  956|  1.12k|
  957|  1.12k|            return ElementSegment(type: type, initializer: initializer, mode: mode)
  958|  1.12k|        }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_SayAA11InstructionOGyKXEfU0_:
  952|    218|                initializer = try parseVector {
  953|    218|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  954|    218|                }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKF:
  964|    590|    func parseCodeSection() throws -> [Code] {
  965|    590|        return try parseVector {
  966|    590|            let size = try parseUnsigned() as UInt32
  967|    590|            let bodyStart = stream.currentIndex
  968|    590|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  969|    590|                let n: UInt32 = try parseUnsigned()
  970|    590|                let t = try parseValueType()
  971|    590|                return (n, t)
  972|    590|            }
  973|    590|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
  974|    590|            guard totalLocals < limits.maxFunctionLocals else {
  975|    590|                throw makeError(.tooManyLocals(totalLocals, limit: limits.maxFunctionLocals))
  976|    590|            }
  977|    590|
  978|    590|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  979|    590|                return Array(repeating: type, count: Int(n))
  980|    590|            }
  981|    590|            let expressionStart = stream.currentIndex
  982|    590|            let expressionBytes = try stream.consume(
  983|    590|                count: Int(size) - (expressionStart - bodyStart)
  984|    590|            )
  985|    590|            return Code(
  986|    590|                locals: locals, expression: expressionBytes,
  987|    590|                offset: expressionStart, features: features
  988|    590|            )
  989|    590|        }
  990|    590|    }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_:
  965|  2.73k|        return try parseVector {
  966|  2.73k|            let size = try parseUnsigned() as UInt32
  967|  2.73k|            let bodyStart = stream.currentIndex
  968|  2.73k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  969|  2.73k|                let n: UInt32 = try parseUnsigned()
  970|  2.73k|                let t = try parseValueType()
  971|  2.73k|                return (n, t)
  972|  2.73k|            }
  973|  2.73k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
  974|  2.73k|            guard totalLocals < limits.maxFunctionLocals else {
  975|      0|                throw makeError(.tooManyLocals(totalLocals, limit: limits.maxFunctionLocals))
  976|  2.73k|            }
  977|  2.73k|
  978|  2.73k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  979|  2.73k|                return Array(repeating: type, count: Int(n))
  980|  2.73k|            }
  981|  2.73k|            let expressionStart = stream.currentIndex
  982|  2.73k|            let expressionBytes = try stream.consume(
  983|  2.73k|                count: Int(size) - (expressionStart - bodyStart)
  984|  2.73k|            )
  985|  2.73k|            return Code(
  986|  2.73k|                locals: locals, expression: expressionBytes,
  987|  2.73k|                offset: expressionStart, features: features
  988|  2.73k|            )
  989|  2.73k|        }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_s6UInt32V1n_0A5Types9ValueTypeO4typetyKXEfU_:
  968|  4.19k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  969|  4.19k|                let n: UInt32 = try parseUnsigned()
  970|  4.19k|                let t = try parseValueType()
  971|  4.19k|                return (n, t)
  972|  4.19k|            }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_s6UInt64VAI_s6UInt32V1n_0A5Types9ValueTypeO4typettXEfU0_:
  973|  4.19k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_Say0A5Types9ValueTypeOGs6UInt32V_AJtXEfU1_:
  978|  4.19k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  979|  4.19k|                return Array(repeating: type, count: Int(n))
  980|  4.19k|            }
$s10WasmParser0B0V16parseDataSectionSayAA0D7SegmentOGyKF:
  995|      2|    mutating func parseDataSection() throws -> [DataSegment] {
  996|      2|        return try parseVector {
  997|      2|            let kind: UInt32 = try parseUnsigned()
  998|      2|            switch kind {
  999|      2|            case 0:
 1000|      2|                let offset = try parseConstExpression()
 1001|      2|                let initializer = try parseVectorBytes()
 1002|      2|                return .active(.init(index: 0, offset: offset, initializer: initializer))
 1003|      2|
 1004|      2|            case 1:
 1005|      2|                return try .passive(parseVectorBytes())
 1006|      2|
 1007|      2|            case 2:
 1008|      2|                let index: UInt32 = try parseUnsigned()
 1009|      2|                let offset = try parseConstExpression()
 1010|      2|                let initializer = try parseVectorBytes()
 1011|      2|                return .active(.init(index: index, offset: offset, initializer: initializer))
 1012|      2|            default:
 1013|      2|                throw makeError(.malformedDataSegmentKind(kind))
 1014|      2|            }
 1015|      2|        }
 1016|      2|    }
$s10WasmParser0B0V16parseDataSectionSayAA0D7SegmentOGyKFAFyKXEfU_:
  996|      2|        return try parseVector {
  997|      2|            let kind: UInt32 = try parseUnsigned()
  998|      2|            switch kind {
  999|      2|            case 0:
 1000|      2|                let offset = try parseConstExpression()
 1001|      0|                let initializer = try parseVectorBytes()
 1002|      0|                return .active(.init(index: 0, offset: offset, initializer: initializer))
 1003|      2|
 1004|      2|            case 1:
 1005|      0|                return try .passive(parseVectorBytes())
 1006|      2|
 1007|      2|            case 2:
 1008|      0|                let index: UInt32 = try parseUnsigned()
 1009|      0|                let offset = try parseConstExpression()
 1010|      0|                let initializer = try parseVectorBytes()
 1011|      0|                return .active(.init(index: index, offset: offset, initializer: initializer))
 1012|      2|            default:
 1013|      0|                throw makeError(.malformedDataSegmentKind(kind))
 1014|      2|            }
 1015|      2|        }
$s10WasmParser0B0V16parseMagicNumberyyKF:
 1049|    616|    func parseMagicNumber() throws {
 1050|    616|        let magicNumber = try stream.consume(count: 4)
 1051|    616|        guard magicNumber.elementsEqual(WASM_MAGIC) else {
 1052|      0|            throw makeError(.invalidMagicNumber(.init(magicNumber)))
 1053|    616|        }
 1054|    616|    }
$s10WasmParser0B0V12parseVersionSays5UInt8VGyKF:
 1059|    616|    func parseVersion() throws -> [UInt8] {
 1060|    616|        let version = try Array(stream.consume(count: 4))
 1061|    616|        guard version == [0x01, 0x00, 0x00, 0x00] else {
 1062|      0|            throw makeError(.unknownVersion(.init(version)))
 1063|    616|        }
 1064|    616|        return version
 1065|    616|    }
$s10WasmParser0B0V13OrderTrackingV4lastAE0C0Oyx__Gvpfi:
 1088|  1.69k|        var last: Order = .initial
$s10WasmParser0B0V13OrderTrackingV5track5order6parseryAE0C0Oyx__G_ACyxGtKF:
 1091|  4.05k|        mutating func track(order: Order, parser: Parser) throws {
 1092|  4.05k|            guard last.rawValue < order.rawValue else {
 1093|      0|                throw parser.makeError(.sectionOutOfOrder)
 1094|  4.05k|            }
 1095|  4.05k|            last = order
 1096|  4.05k|        }
$s10WasmParser0B0V9parseNextAA14ParsingPayloadOSgyKF:
 1128|  5.54k|    public mutating func parseNext() throws -> ParsingPayload? {
 1129|  5.54k|        switch nextParseTarget {
 1130|  5.54k|        case .header:
 1131|    616|            try parseMagicNumber()
 1132|    616|            let version = try parseVersion()
 1133|    616|            self.nextParseTarget = .section
 1134|    616|            return .header(version: version)
 1135|  5.54k|        case .section:
 1136|  4.92k|            guard try !stream.hasReachedEnd() else {
 1137|    591|                return nil
 1138|  4.33k|            }
 1139|  4.33k|            let sectionID = try stream.consumeAny()
 1140|  4.33k|            let sectionSize: UInt32 = try parseUnsigned()
 1141|  4.33k|            let sectionStart = stream.currentIndex
 1142|  4.33k|
 1143|  4.33k|            let payload: ParsingPayload
 1144|  4.33k|            let order: OrderTracking.Order?
 1145|  4.33k|            switch sectionID {
 1146|  4.33k|            case 0:
 1147|    257|                order = nil
 1148|    257|                payload = .customSection(try parseCustomSection(size: sectionSize))
 1149|  4.33k|            case 1:
 1150|    596|                order = .type
 1151|    596|                payload = .typeSection(try parseTypeSection())
 1152|  4.33k|            case 2:
 1153|    592|                order = ._import
 1154|    592|                payload = .importSection(try parseImportSection())
 1155|  4.33k|            case 3:
 1156|    592|                order = .function
 1157|    592|                payload = .functionSection(try parseFunctionSection())
 1158|  4.33k|            case 4:
 1159|      6|                order = .table
 1160|      6|                payload = .tableSection(try parseTableSection())
 1161|  4.33k|            case 5:
 1162|    515|                order = .memory
 1163|    515|                payload = .memorySection(try parseMemorySection())
 1164|  4.33k|            case 6:
 1165|    602|                order = .global
 1166|    602|                payload = .globalSection(try parseGlobalSection())
 1167|  4.33k|            case 7:
 1168|     65|                order = .export
 1169|     65|                payload = .exportSection(try parseExportSection())
 1170|  4.33k|            case 8:
 1171|    515|                order = .start
 1172|    515|                payload = .startSection(try parseStartSection())
 1173|  4.33k|            case 9:
 1174|      3|                order = .element
 1175|      3|                payload = .elementSection(try parseElementSection())
 1176|  4.33k|            case 10:
 1177|    590|                order = .code
 1178|    590|                payload = .codeSection(try parseCodeSection())
 1179|  4.33k|            case 11:
 1180|      2|                order = .data
 1181|      2|                payload = .dataSection(try parseDataSection())
 1182|  4.33k|            case 12:
 1183|      0|                order = .dataCount
 1184|      0|                payload = .dataCount(try parseDataCountSection())
 1185|  4.33k|            default:
 1186|      0|                throw makeError(.malformedSectionID(sectionID))
 1187|  4.33k|            }
 1188|  4.31k|            if let order = order {
 1189|  4.05k|                try orderTracking.track(order: order, parser: self)
 1190|  4.31k|            }
 1191|  4.31k|            let expectedSectionEnd = sectionStart + Int(sectionSize)
 1192|  4.31k|            guard expectedSectionEnd == stream.currentIndex else {
 1193|      0|                throw makeError(.sectionSizeMismatch(expected: expectedSectionEnd, actual: offset))
 1194|  4.31k|            }
 1195|  4.31k|            return payload
 1196|  5.54k|        }
 1197|  5.54k|    }

$s10WasmParser4CodeV6locals10expression6offset8featuresACSay0A5Types9ValueTypeOG_s10ArraySliceVys5UInt8VGSiAA0A10FeatureSetVtcfC:
   19|  2.73k|    init(locals: [ValueType], expression: ArraySlice<UInt8>, offset: Int, features: WasmFeatureSet) {
   20|  2.73k|        self.locals = locals
   21|  2.73k|        self.expression = expression
   22|  2.73k|        self.offset = offset
   23|  2.73k|        self.features = features
   24|  2.73k|    }
$s10WasmParser6MemArgV6offset5alignACs6UInt64V_s6UInt32VtcfC:
   37|  18.0k|    public init(offset: UInt64, align: UInt32) {
   38|  18.0k|        self.offset = offset
   39|  18.0k|        self.align = align
   40|  18.0k|    }
$s10WasmParser6LimitsV3min3max10isMemory646sharedACs6UInt64V_AISgS2btcfC:
   57|    598|    public init(min: UInt64, max: UInt64? = nil, isMemory64: Bool = false, shared: Bool = false) {
   58|    598|        self.min = min
   59|    598|        self.max = max
   60|    598|        self.isMemory64 = isMemory64
   61|    598|        self.shared = shared
   62|    598|    }
$s10WasmParser9TableTypeV07elementD06limitsAC0A5Types09ReferenceD0O_AA6LimitsVtcfC:
   75|      8|    public init(elementType: ReferenceType, limits: Limits) {
   76|      8|        self.elementType = elementType
   77|      8|        self.limits = limits
   78|      8|    }
$s10WasmParser10GlobalTypeV10mutability05valueD0AcA10MutabilityO_0A5Types05ValueD0OtcfC:
   94|  2.86k|    public init(mutability: Mutability, valueType: ValueType) {
   95|  2.86k|        self.mutability = mutability
   96|  2.86k|        self.valueType = valueType
   97|  2.86k|    }
$s10WasmParser7IEEE754O7Float32V10bitPatternAEs6UInt32V_tcfC:
  113|    921|        public init(bitPattern: UInt32) {
  114|    921|            self.bitPattern = bitPattern
  115|    921|        }
$s10WasmParser7IEEE754O7Float64V10bitPatternAEs6UInt64V_tcfC:
  120|    954|        public init(bitPattern: UInt64) {
  121|    954|            self.bitPattern = bitPattern
  122|    954|        }
$s10WasmParser7BrTableV12labelIndices12defaultIndexACSays6UInt32VG_AGtcfC:
  130|    584|    public init(labelIndices: [UInt32], defaultIndex: UInt32) {
  131|    584|        self.labelIndices = labelIndices
  132|    584|        self.defaultIndex = defaultIndex
  133|    584|    }
$s10WasmParser5TableV4typeAcA0C4TypeV_tcfC:
  168|      6|    public init(type: TableType) {
  169|      6|        self.type = type
  170|      6|    }
$s10WasmParser14ElementSegmentV4FlagV8rawValueAEs6UInt32V_tcfC:
  196|  12.3k|        init(rawValue: UInt32) {
  197|  12.3k|            self.rawValue = rawValue
  198|  12.3k|        }
$s10WasmParser14ElementSegmentV4FlagV18segmentHasElemKindSbvg:
  200|  1.12k|        @inlinable var segmentHasElemKind: Bool {
  201|  1.12k|            !contains(.usesExpressions) && rawValue != 0
  202|  1.12k|        }
$s10WasmParser14ElementSegmentV4FlagV18segmentHasElemKindSbvgSbyKXEfu_:
  201|  1.03k|            !contains(.usesExpressions) && rawValue != 0
$s10WasmParser14ElementSegmentV4FlagV17segmentHasRefTypeSbvg:
  204|  1.12k|        @inlinable var segmentHasRefType: Bool {
  205|  1.12k|            contains(.usesExpressions) && rawValue != 4
  206|  1.12k|        }
$s10WasmParser14ElementSegmentV4FlagV17segmentHasRefTypeSbvgSbyKXEfu_:
  205|     91|            contains(.usesExpressions) && rawValue != 4
$s10WasmParser14ElementSegmentV4type11initializer4modeAC0A5Types13ReferenceTypeO_SaySayAA11InstructionOGGAC4ModeOtcfC:
  224|  1.12k|    public init(type: ReferenceType, initializer: [ConstExpression], mode: Mode) {
  225|  1.12k|        self.type = type
  226|  1.12k|        self.initializer = initializer
  227|  1.12k|        self.mode = mode
  228|  1.12k|    }
$s10WasmParser6ExportV4name10descriptorACSS_AA0C10DescriptorOtcfC:
  260|     65|    public init(name: String, descriptor: ExportDescriptor) {
  261|     65|        self.name = name
  262|     65|        self.descriptor = descriptor
  263|     65|    }
$s10WasmParser6ImportV6module4name10descriptorACSS_SSAA0C10DescriptorOtcfC:
  289|     81|    public init(module: String, name: String, descriptor: ImportDescriptor) {
  290|     81|        self.module = module
  291|     81|        self.name = name
  292|     81|        self.descriptor = descriptor
  293|     81|    }
$s10WasmParser11InstructionO4LoadO16naturalAlignmentSivg:
  351|  61.6k|    public var naturalAlignment: Int {
  352|  61.6k|        switch self {
  353|  61.6k|        case .i32Load, .i32AtomicLoad: return 2
  354|  61.6k|        case .i64Load, .i64AtomicLoad: return 3
  355|  61.6k|        case .f32Load: return 2
  356|  61.6k|        case .f64Load: return 3
  357|  61.6k|        case .i32Load8S: return 0
  358|  61.6k|        case .i32Load8U, .i32AtomicLoad8U: return 0
  359|  61.6k|        case .i32Load16S: return 1
  360|  61.6k|        case .i32Load16U, .i32AtomicLoad16U: return 1
  361|  61.6k|        case .i64Load8S: return 0
  362|  61.6k|        case .i64Load8U, .i64AtomicLoad8U: return 0
  363|  61.6k|        case .i64Load16S: return 1
  364|  61.6k|        case .i64Load16U, .i64AtomicLoad16U: return 1
  365|  61.6k|        case .i64Load32S: return 2
  366|  61.6k|        case .i64Load32U, .i64AtomicLoad32U: return 2
  367|  61.6k|        }
  368|  61.6k|    }
$s10WasmParser11InstructionO4LoadO4type0A5Types9ValueTypeOvg:
  372|  61.6k|    public var type: ValueType {
  373|  61.6k|        switch self {
  374|  61.6k|        case .i32Load, .i32AtomicLoad: return .i32
  375|  61.6k|        case .i64Load, .i64AtomicLoad: return .i64
  376|  61.6k|        case .f32Load: return .f32
  377|  61.6k|        case .f64Load: return .f64
  378|  61.6k|        case .i32Load8S: return .i32
  379|  61.6k|        case .i32Load8U, .i32AtomicLoad8U: return .i32
  380|  61.6k|        case .i32Load16S: return .i32
  381|  61.6k|        case .i32Load16U, .i32AtomicLoad16U: return .i32
  382|  61.6k|        case .i64Load8S: return .i64
  383|  61.6k|        case .i64Load8U, .i64AtomicLoad8U: return .i64
  384|  61.6k|        case .i64Load16S: return .i64
  385|  61.6k|        case .i64Load16U, .i64AtomicLoad16U: return .i64
  386|  61.6k|        case .i64Load32S: return .i64
  387|  61.6k|        case .i64Load32U, .i64AtomicLoad32U: return .i64
  388|  61.6k|        }
  389|  61.6k|    }
$s10WasmParser11InstructionO5StoreO16naturalAlignmentSivg:
  396|  1.21k|    public var naturalAlignment: Int {
  397|  1.21k|        switch self {
  398|  1.21k|        case .i32Store, .i32AtomicStore: return 2
  399|  1.21k|        case .i64Store, .i64AtomicStore: return 3
  400|  1.21k|        case .f32Store: return 2
  401|  1.21k|        case .f64Store: return 3
  402|  1.21k|        case .i32Store8, .i32AtomicStore8: return 0
  403|  1.21k|        case .i32Store16, .i32AtomicStore16: return 1
  404|  1.21k|        case .i64Store8, .i64AtomicStore8: return 0
  405|  1.21k|        case .i64Store16, .i64AtomicStore16: return 1
  406|  1.21k|        case .i64Store32, .i64AtomicStore32: return 2
  407|  1.21k|        }
  408|  1.21k|    }
$s10WasmParser11InstructionO5StoreO4type0A5Types9ValueTypeOvg:
  412|  1.21k|    public var type: ValueType {
  413|  1.21k|        switch self {
  414|  1.21k|        case .i32Store, .i32AtomicStore: return .i32
  415|  1.21k|        case .i64Store, .i64AtomicStore: return .i64
  416|  1.21k|        case .f32Store: return .f32
  417|  1.21k|        case .f64Store: return .f64
  418|  1.21k|        case .i32Store8, .i32AtomicStore8: return .i32
  419|  1.21k|        case .i32Store16, .i32AtomicStore16: return .i32
  420|  1.21k|        case .i64Store8, .i64AtomicStore8: return .i64
  421|  1.21k|        case .i64Store16, .i64AtomicStore16: return .i64
  422|  1.21k|        case .i64Store32, .i64AtomicStore32: return .i64
  423|  1.21k|        }
  424|  1.21k|    }

$s9WasmTypes12FunctionTypeV10parameters7resultsACSayAA05ValueD0OG_AHtcfC:
    6|  2.90k|    public init(parameters: [ValueType], results: [ValueType] = []) {
    7|  2.90k|        self.parameters = parameters
    8|  2.90k|        self.results = results
    9|  2.90k|    }

