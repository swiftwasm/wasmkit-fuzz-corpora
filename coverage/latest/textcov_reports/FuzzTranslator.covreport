$s14FuzzTranslator0A5Checkys5Int32VSPys5UInt8VG_SitF:
    5|  7.38k|public func FuzzCheck(_ start: UnsafePointer<UInt8>, _ count: Int) -> CInt {
    6|  7.38k|    let bytes = Array(UnsafeBufferPointer(start: start, count: count))
    7|  7.38k|    do {
    8|  7.38k|        try fuzzInstantiation(bytes: bytes)
    9|  7.27k|    } catch {
   10|  7.27k|        // Ignore errors
   11|  7.38k|    }
   12|  7.38k|    return 0
   13|  7.38k|}

$s14WasmKitFuzzing21FuzzerResourceLimiterVACycfC:
    7|  2.12k|    public init() {}
$s14WasmKitFuzzing21FuzzerResourceLimiterV17limitMemoryGrowth2toSbSi_tKF:
    9|    881|    public func limitMemoryGrowth(to desired: Int) throws -> Bool {
   10|    881|        return desired < 1024 * 1024 * 1024
   11|    881|    }
$s14WasmKitFuzzing21FuzzerResourceLimiterV16limitTableGrowth2toSbSi_tKF:
   12|    326|    public func limitTableGrowth(to desired: Int) throws -> Bool {
   13|    326|        return desired < 1024 * 1024
   14|    326|    }
$s14WasmKitFuzzing17fuzzInstantiation5bytesySays5UInt8VG_tKF:
   20|  7.38k|public func fuzzInstantiation(bytes: [UInt8]) throws {
   21|  7.38k|    let module = try WasmKit.parseWasm(bytes: bytes)
   22|  2.12k|    let engine = Engine(configuration: EngineConfiguration(compilationMode: .eager))
   23|  2.12k|    let store = Store(engine: engine)
   24|  2.12k|    store.resourceLimiter = FuzzerResourceLimiter()
   25|  2.12k|
   26|  2.12k|    // Prepare dummy imports
   27|  2.12k|    var imports = Imports()
   28|  2.12k|    for importEntry in module.imports {
   29|    659|        let value: ExternalValueConvertible
   30|    659|        switch importEntry.descriptor {
   31|    659|        case .function(let typeIndex):
   32|     26|            guard typeIndex < module.types.count else {
   33|      3|                // Skip if import type index is out of bounds
   34|      3|                return
   35|     23|            }
   36|     23|            let type = module.types[Int(typeIndex)]
   37|     23|            value = Function(store: store, type: type) { _, _ in
   38|     23|                // Provide "start function" with empty results
   39|     23|                if type.results.isEmpty { return [] }
   40|     23|                fatalError("Unexpected function call")
   41|     23|            }
   42|    659|        case .global(let globalType):
   43|     29|            value = try Global(store: store, type: globalType, value: .i32(0))
   44|    659|        case .memory(let memoryType):
   45|    572|            value = try Memory(store: store, type: memoryType)
   46|    659|        case .table(let tableType):
   47|     32|            value = try Table(store: store, type: tableType)
   48|    659|        }
   49|    639|        imports.define(module: importEntry.module, name: importEntry.name, value.externalValue)
   50|  2.10k|    }
   51|  2.10k|
   52|  2.10k|    // Instantiate the module
   53|  2.10k|    _ = try module.instantiate(store: store, imports: imports)
   54|    108|}

$s7WasmKit6EngineC13configuration11interceptorAcA0C13ConfigurationV_AA0C11Interceptor_pSgtcfc:
   21|  2.12k|    public init(configuration: EngineConfiguration = EngineConfiguration(), interceptor: EngineInterceptor? = nil) {
   22|  2.12k|        self.configuration = configuration
   23|  2.12k|        self.interceptor = interceptor
   24|  2.12k|        self.funcTypeInterner = Interner()
   25|  2.12k|    }
$s7WasmKit19EngineConfigurationV14ThreadingModelO21useDirectThreadedCodeSbvgZ:
   46|  2.12k|        static var useDirectThreadedCode: Bool {
   47|  2.12k|            return WASMKIT_USE_DIRECT_THREADED_CODE == 1
   48|  2.12k|        }
$s7WasmKit19EngineConfigurationV14ThreadingModelO25defaultForCurrentPlatformAEvgZ:
   50|  2.12k|        static var defaultForCurrentPlatform: ThreadingModel {
   51|  2.12k|            return useDirectThreadedCode ? .direct : .token
   52|  2.12k|        }
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfC:
  109|  2.12k|    ) {
  110|  2.12k|        self.threadingModel = threadingModel ?? .defaultForCurrentPlatform
  111|  2.12k|        self.compilationMode = compilationMode ?? .lazy
  112|  2.12k|        self.stackSize = stackSize ?? (1 << 19)
  113|  2.12k|        self.features = features
  114|  2.12k|    }
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfcAIyKXEfu_:
  110|  2.12k|        self.threadingModel = threadingModel ?? .defaultForCurrentPlatform
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfcSiyKXEfu1_:
  112|  2.12k|        self.stackSize = stackSize ?? (1 << 19)
$s7WasmKit6EngineC11resolveTypey0A5Types08FunctionE0VAA8InternedVyAGGF:
  118|  2.74k|    func resolveType(_ type: InternedFuncType) -> FunctionType {
  119|  2.74k|        return funcTypeInterner.resolve(type)
  120|  2.74k|    }
$s7WasmKit6EngineC10internTypeyAA8InternedVy0A5Types08FunctionE0VGAIF:
  121|  8.99k|    func internType(_ type: FunctionType) -> InternedFuncType {
  122|  8.99k|        return funcTypeInterner.intern(type)
  123|  8.99k|    }

$s7WasmKit22ConstEvaluationContextV9functions7globals20onFunctionReferencedAcA14ImmutableArrayVyAA08InternalI0VG_Say0A5Types5ValueOGyAJcSgtcfC:
   17|  4.07k|    ) {
   18|  4.07k|        self.functions = functions
   19|  4.07k|        self.globals = globals
   20|  4.07k|        self.onFunctionReferenced = onFunctionReferenced
   21|  4.07k|    }
$s7WasmKit22ConstEvaluationContextV8instance13moduleImportsAcA12EntityHandleVyAA08InstanceI0VG_AA06ModuleH0VtcfC:
   23|  1.99k|    init(instance: InternalInstance, moduleImports: ModuleImports) {
   24|  1.99k|        // Constant expressions can only reference imported globals
   25|  1.99k|        let externalGlobals = instance.globals
   26|  1.99k|            .prefix(moduleImports.numberOfGlobals)
   27|  1.99k|            .map { $0.value }
   28|  1.99k|        self.init(functions: instance.functions, globals: Array(externalGlobals))
   29|  1.99k|    }
$s7WasmKit22ConstEvaluationContextV8instance13moduleImportsAcA12EntityHandleVyAA08InstanceI0VG_AA06ModuleH0Vtcfc0A5Types5ValueOAGyAA06GlobalI0VGXEfU_:
   27|     13|            .map { $0.value }
$s7WasmKit22ConstEvaluationContextV11functionRefy0A5Types9ReferenceOs6UInt32VKF:
   31|     16|    func functionRef(_ index: FunctionIndex) throws -> Reference {
   32|     16|        let function = try self.functions[validating: Int(index)]
   33|      2|        self.onFunctionReferenced?(function)
   34|      2|        return .function(from: function)
   35|     16|    }
$s7WasmKit22ConstEvaluationContextV11globalValuey0A5Types0G0Os6UInt32VKF:
   36|      2|    func globalValue(_ index: GlobalIndex) throws -> Value {
   37|      2|        guard index < globals.count else {
   38|      2|            throw GlobalEntity.createOutOfBoundsError(index: Int(index), count: globals.count)
   39|      2|        }
   40|      0|        return self.globals[Int(index)]
   41|      2|    }
$sSa7WasmKit0A6Parser11InstructionORszlE8evaluate7context12expectedType0A5Types5ValueOqd___AH0jH0OtKAA30ConstEvaluationContextProtocolRd__lF:
   45|  9.50k|    func evaluate<C: ConstEvaluationContextProtocol>(context: C, expectedType: WasmTypes.ValueType) throws -> Value {
   46|  9.50k|        let result = try self._evaluate(context: context)
   47|  9.46k|        try result.checkType(expectedType)
   48|  9.44k|        return result
   49|  9.50k|    }
$sSa7WasmKit0A6Parser11InstructionORszlE9_evaluate33_4813626859827C7082EA5FE0B7501990LL7context0A5Types5ValueOqd___tKAA30ConstEvaluationContextProtocolRd__lF:
   51|  9.50k|    private func _evaluate<C: ConstEvaluationContextProtocol>(context: C) throws -> Value {
   52|  9.50k|        guard self.last == .end, self.count == 2 else {
   53|     12|            throw ValidationError(.expectedEndAtOffsetExpression)
   54|  9.48k|        }
   55|  9.48k|        let constInst = self[0]
   56|  9.48k|        switch constInst {
   57|  9.48k|        case .i32Const(let value): return .i32(UInt32(bitPattern: value))
   58|  9.48k|        case .i64Const(let value): return .i64(UInt64(bitPattern: value))
   59|  9.48k|        case .f32Const(let value): return .f32(value.bitPattern)
   60|  9.48k|        case .f64Const(let value): return .f64(value.bitPattern)
   61|  9.48k|        case .globalGet(let globalIndex):
   62|      2|            return try context.globalValue(globalIndex)
   63|  9.48k|        case .refNull(let type):
   64|      0|            switch type {
   65|      0|            case .externRef: return .ref(.extern(nil))
   66|      0|            case .funcRef: return .ref(.function(nil))
   67|      0|            }
   68|  9.48k|        case .refFunc(let functionIndex):
   69|      3|            return try .ref(context.functionRef(functionIndex))
   70|  9.48k|        default:
   71|     18|            throw ValidationError(.illegalConstExpressionInstruction(constInst))
   72|  9.48k|        }
   73|  9.48k|    }
$s10WasmParser14ElementSegmentV0A3KitE13evaluateInits7contextSay0A5Types9ReferenceOGx_tKAD30ConstEvaluationContextProtocolRzlF:
   77|     47|    func evaluateInits<C: ConstEvaluationContextProtocol>(context: C) throws -> [Reference] {
   78|     47|        return try self.initializer.map { expression -> Reference in
   79|     47|            let result = try Self._evaluateInits(context: context, expression: expression)
   80|     47|            try result.checkType(self.type)
   81|     47|            return result
   82|     47|        }
   83|     47|    }
$s10WasmParser14ElementSegmentV0A3KitE13evaluateInits7contextSay0A5Types9ReferenceOGx_tKAD30ConstEvaluationContextProtocolRzlFAISayAA11InstructionOGKXEfU_:
   78|     13|        return try self.initializer.map { expression -> Reference in
   79|     13|            let result = try Self._evaluateInits(context: context, expression: expression)
   80|      0|            try result.checkType(self.type)
   81|      0|            return result
   82|     13|        }
$s10WasmParser14ElementSegmentV0A3KitE14_evaluateInits7context10expression0A5Types9ReferenceOx_SayAA11InstructionOGtKAD30ConstEvaluationContextProtocolRzlFZ:
   86|     13|    ) throws -> Reference {
   87|     13|        switch expression[0] {
   88|     13|        case let .refFunc(index):
   89|     13|            return try context.functionRef(index)
   90|     13|        case .refNull(.funcRef):
   91|      0|            return .function(nil)
   92|     13|        case .refNull(.externRef):
   93|      0|            return .extern(nil)
   94|     13|        case .globalGet(let index):
   95|      0|            let value = try context.globalValue(index)
   96|      0|            switch value {
   97|      0|            case .ref(.function(let addr)):
   98|      0|                return .function(addr)
   99|      0|            default:
  100|      0|                throw ValidationError(.unexpectedGlobalValueType)
  101|      0|            }
  102|     13|        default:
  103|      0|            throw ValidationError(.unexpectedElementInitializer(expression: "\(expression)"))
  104|     13|        }
  105|     13|    }

$s7WasmKit11InstructionO7handlerSuvg:
 1777|   191k|    var handler: UInt {
 1778|   191k|        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
 1779|   191k|            let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
 1780|   191k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1781|   191k|                $0[Int(self.opcodeID)]
 1782|   191k|            }
 1783|   191k|        }
 1784|   191k|    }
$s7WasmKit11InstructionO7handlerSuvgSuSPySu_S195utGXEfU_:
 1778|   191k|        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
 1779|   191k|            let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
 1780|   191k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1781|   191k|                $0[Int(self.opcodeID)]
 1782|   191k|            }
 1783|   191k|        }
$s7WasmKit11InstructionO7handlerSuvgSuSPySu_S195utGXEfU_SuSPySuGXEfU_:
 1780|   191k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1781|   191k|                $0[Int(self.opcodeID)]
 1782|   191k|            }

$s7WasmKit4TrapV_9backtraceAcA0C6ReasonO_AA9BacktraceVSgtcfC:
   36|     13|    init(_ code: TrapReason, backtrace: Backtrace? = nil) {
   37|     13|        self.reason = code
   38|     13|        self.backtrace = backtrace
   39|     13|    }
$s7WasmKit4TrapV_9backtraceAcA0C6ReasonO7MessageV_AA9BacktraceVSgtcfC:
   41|     10|    init(_ message: TrapReason.Message, backtrace: Backtrace? = nil) {
   42|     10|        self.init(.message(message), backtrace: backtrace)
   43|     10|    }
$s7WasmKit10TrapReasonO7MessageVyAESScfC:
   66|     10|        init(_ text: String) {
   67|     10|            self.text = text
   68|     10|        }
$s7WasmKit10TrapReasonO7MessageV29initialMemorySizeExceedsLimit04byteH0AESi_tFZ:
  124|     10|    static func initialMemorySizeExceedsLimit(byteSize: Int) -> Self {
  125|     10|        Self("initial memory size exceeds the resource limit: \(byteSize) bytes")
  126|     10|    }
$s7WasmKit11ImportErrorV7MessageVyAESScfC:
  148|      5|        init(_ text: String) {
  149|      5|            self.text = text
  150|      5|        }
$s7WasmKit11ImportErrorVyA2C7MessageVcfC:
  155|      5|    init(_ message: Message) {
  156|      5|        self.message = message
  157|      5|    }
$s7WasmKit11ImportErrorV7MessageV16incompatibleType_6entityAE0A6Parser0C0V_AA21InternalExternalValueOtFZ:
  164|      3|    static func incompatibleType(_ importEntry: Import, entity: InternalExternalValue) -> Self {
  165|      3|        let expected: String
  166|      3|        switch importEntry.descriptor {
  167|      3|        case .function:
  168|      0|            expected = "function"
  169|      3|        case .global:
  170|      0|            expected = "global"
  171|      3|        case .memory:
  172|      0|            expected = "memory"
  173|      3|        case .table:
  174|      3|            expected = "table"
  175|      3|        }
  176|      3|        let got: String
  177|      3|        switch entity {
  178|      3|        case .function:
  179|      0|            got = "function"
  180|      3|        case .global:
  181|      0|            got = "global"
  182|      3|        case .memory:
  183|      3|            got = "memory"
  184|      3|        case .table:
  185|      0|            got = "table"
  186|      3|        }
  187|      3|        return Self("incompatible import type for \(importEntry.module).\(importEntry.name), expected \(expected), got \(got)")
  188|      3|    }
$s7WasmKit11ImportErrorV7MessageV22incompatibleGlobalType_6actual8expectedAE0A6Parser0C0V_AI0gH0VAMtFZ:
  198|      2|    static func incompatibleGlobalType(_ importEntry: Import, actual: GlobalType, expected: GlobalType) -> Self {
  199|      2|        Self("incompatible import type: global type for \(importEntry.module).\(importEntry.name), expected \(expected), got \(actual)")
  200|      2|    }

$s7WasmKit8StoreRefV5valueAA0C0Cvg:
  125|  2.74k|    var value: Store {
  126|  2.74k|        _value.takeUnretainedValue()
  127|  2.74k|    }
$s7WasmKit8StoreRefVyAcA0C0ChcfC:
  129|  1.97k|    init(_ value: __shared Store) {
  130|  1.97k|        self._value = .passUnretained(value)
  131|  1.97k|    }

$s7WasmKit8FunctionV6handle5storeAcA08InternalC0V_AA5StoreCtcfC:
   40|     23|    internal init(handle: InternalFunction, store: Store) {
   41|     23|        self.handle = handle
   42|     23|        self.store = store
   43|     23|    }
$s7WasmKit8FunctionV5store4type4bodyAcA5StoreC_0A5Types0C4TypeVSayAI5ValueOGAA6CallerV_ANtKctcfC:
   70|     23|    ) {
   71|     23|        self.init(handle: store.allocator.allocate(type: type, implementation: body, engine: store.engine), store: store)
   72|     23|    }
$s7WasmKit16InternalFunctionV10bitPatternSivg:
  121|  12.3k|    var bitPattern: Int { _storage }
$s7WasmKit16InternalFunctionV10bitPatternACSi_tcfC:
  123|  8.96k|    init(bitPattern: Int) {
  124|  8.96k|        _storage = bitPattern
  125|  8.96k|    }
$s7WasmKit16InternalFunctionV02isA0Sbvg:
  127|  9.15k|    var isWasm: Bool {
  128|  9.15k|        _storage & 0b1 == 0
  129|  9.15k|    }
$s7WasmKit16InternalFunctionV4typeAA8InternedVy0A5Types0D4TypeVGvg:
  131|  3.21k|    var type: InternedFuncType {
  132|  3.21k|        if isWasm {
  133|  3.19k|            return wasm.type
  134|  3.19k|        } else {
  135|     25|            return host.type
  136|     25|        }
  137|  3.21k|    }
$s7WasmKit16InternalFunctionV4wasmyAcA12EntityHandleVyAA0adF0VGFZ:
  139|  8.94k|    static func wasm(_ handle: EntityHandle<WasmFunctionEntity>) -> InternalFunction {
  140|  8.94k|        assert(MemoryLayout<WasmFunctionEntity>.alignment >= 2)
  141|  8.94k|        return InternalFunction(bitPattern: handle.bitPattern | 0b0)
  142|  8.94k|    }
$s7WasmKit16InternalFunctionV4wasmyAcA12EntityHandleVyAA0adF0VGFZSbyXEfu_:
  140|  8.94k|        assert(MemoryLayout<WasmFunctionEntity>.alignment >= 2)
$s7WasmKit16InternalFunctionV4hostyAcA12EntityHandleVyAA04HostdF0VGFZ:
  144|     23|    static func host(_ handle: EntityHandle<HostFunctionEntity>) -> InternalFunction {
  145|     23|        assert(MemoryLayout<HostFunctionEntity>.alignment >= 2)
  146|     23|        return InternalFunction(bitPattern: handle.bitPattern | 0b1)
  147|     23|    }
$s7WasmKit16InternalFunctionV4hostyAcA12EntityHandleVyAA04HostdF0VGFZSbyXEfu_:
  145|     23|        assert(MemoryLayout<HostFunctionEntity>.alignment >= 2)
$s7WasmKit16InternalFunctionV4wasmAA12EntityHandleVyAA0adF0VGvg:
  149|  9.11k|    var wasm: EntityHandle<WasmFunctionEntity> {
  150|  9.11k|        EntityHandle(unsafe: UnsafeMutablePointer(bitPattern: bitPattern & ~0b0)!)
  151|  9.11k|    }
$s7WasmKit16InternalFunctionV4hostAA12EntityHandleVyAA04HostdF0VGvg:
  152|     25|    var host: EntityHandle<HostFunctionEntity> {
  153|     25|        EntityHandle(unsafe: UnsafeMutablePointer(bitPattern: bitPattern & ~0b1)!)
  154|     25|    }
$s7WasmKit16InternalFunctionV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  158|     29|    static func createOutOfBoundsError(index: Int, count: Int) -> any Error {
  159|     29|        ValidationError(.indexOutOfBounds("function", index, max: count))
  160|     29|    }
$s7WasmKit0A14FunctionEntityV5index4type4code8instanceACs6UInt32V_AA8InternedVy0A5Types0C4TypeVGAA0D6HandleVy0A6Parser4CodeVGAQyAA08InstanceD0VGtcfC:
  232|  8.94k|    init(index: FunctionIndex, type: InternedFuncType, code: InternalUncompiledCode, instance: InternalInstance) {
  233|  8.94k|        self.type = type
  234|  8.94k|        self.instance = instance
  235|  8.94k|        self.code = .uncompiled(code)
  236|  8.94k|        self.numberOfNonParameterLocals = code.locals.count
  237|  8.94k|        self.index = index
  238|  8.94k|    }
$s7WasmKit0A14FunctionEntityV7compile5store4codeAA19InstructionSequenceVAA8StoreRefV_AA0D6HandleVy0A6Parser4CodeVGtKF:
  250|  2.74k|    mutating func compile(store: StoreRef, code: InternalUncompiledCode) throws -> InstructionSequence {
  251|  2.74k|        let store = store.value
  252|  2.74k|        let engine = store.engine
  253|  2.74k|        let type = self.type
  254|  2.74k|        var translator = try InstructionTranslator(
  255|  2.74k|            allocator: store.allocator.iseqAllocator,
  256|  2.74k|            engineConfiguration: engine.configuration,
  257|  2.74k|            funcTypeInterner: engine.funcTypeInterner,
  258|  2.74k|            module: instance,
  259|  2.74k|            type: engine.resolveType(type),
  260|  2.74k|            locals: code.locals,
  261|  2.74k|            functionIndex: index,
  262|  2.74k|            codeSize: code.expression.count,
  263|  2.74k|            intercepting: engine.interceptor != nil
  264|  2.74k|        )
  265|  2.74k|        let iseq = try code.withValue { code in
  266|  2.74k|            try translator.translate(code: code, instance: instance)
  267|  2.74k|        }
  268|    878|        self.code = .compiled(iseq)
  269|    878|        return iseq
  270|  2.74k|    }
$s7WasmKit0A14FunctionEntityV7compile5store4codeAA19InstructionSequenceVAA8StoreRefV_AA0D6HandleVy0A6Parser4CodeVGtKFAhOzKXEfU_:
  265|  2.74k|        let iseq = try code.withValue { code in
  266|  2.74k|            try translator.translate(code: code, instance: instance)
  267|    878|        }
$s7WasmKit12EntityHandleVA2A0a8FunctionC0VRszlE14ensureCompiled5storeAA19InstructionSequenceVAA8StoreRefV_tKF:
  276|  2.74k|    func ensureCompiled(store: StoreRef) throws -> InstructionSequence {
  277|  2.74k|        switch self.code {
  278|  2.74k|        case .uncompiled(let code):
  279|  2.74k|            return try self.withValue {
  280|  2.74k|                let iseq = try $0.compile(store: store, code: code)
  281|  2.74k|                $0.code = .compiled(iseq)
  282|  2.74k|                return iseq
  283|  2.74k|            }
  284|  2.74k|        case .compiled(let iseq): return iseq
  285|  2.74k|        }
  286|  2.74k|    }
$s7WasmKit12EntityHandleVA2A0a8FunctionC0VRszlE14ensureCompiled5storeAA19InstructionSequenceVAA8StoreRefV_tKFAiEzKXEfU_:
  279|  2.74k|            return try self.withValue {
  280|  2.74k|                let iseq = try $0.compile(store: store, code: code)
  281|    878|                $0.code = .compiled(iseq)
  282|    878|                return iseq
  283|  2.74k|            }
$s7WasmKit19InstructionSequenceV12instructions14maxStackHeight9constantsACSrys6UInt64VG_SiSRyAA12UntypedValueVGtcfC:
  302|    878|    init(instructions: UnsafeMutableBufferPointer<CodeSlot>, maxStackHeight: Int, constants: UnsafeBufferPointer<UntypedValue>) {
  303|    878|        self.instructions = instructions
  304|    878|        self.maxStackHeight = maxStackHeight
  305|    878|        self.constants = constants
  306|    878|    }
$s9WasmTypes9ReferenceO0A3KitE8function4fromAcD16InternalFunctionV_tFZ:
  319|      2|    static func function(from value: InternalFunction) -> Reference {
  320|      2|        // TODO: Consider having internal reference representation instead
  321|      2|        //       of public one in WasmTypes
  322|      2|        return .function(value.bitPattern)
  323|      2|    }

$s7WasmKit12EntityHandleV6unsafeACyxGSpyxG_tcfC:
   45|  39.8k|    init(unsafe pointer: UnsafeMutablePointer<T>) {
   46|  39.8k|        self.pointer = pointer
   47|  39.8k|    }
$s7WasmKit12EntityHandleV13dynamicMemberqd__s7KeyPathCyxqd__G_tcluig:
   54|   239k|    subscript<R>(dynamicMember keyPath: KeyPath<T, R>) -> R {
   55|   239k|        pointer.pointee[keyPath: keyPath]
   56|   239k|    }
$s7WasmKit12EntityHandleV9withValueyqd__qd__xzKXEKlF:
   59|  7.49k|    func withValue<R>(_ body: (inout T) throws -> R) rethrows -> R {
   60|  7.49k|        return try body(&pointer.pointee)
   61|  7.49k|    }
$s7WasmKit12EntityHandleV10bitPatternSivg:
   63|  55.1k|    var bitPattern: Int {
   64|  55.1k|        return Int(bitPattern: pointer)
   65|  55.1k|    }
$s7WasmKit12EntityHandleVA2A011ValidatableC0RzlE22createOutOfBoundsError5index5counts0J0_pSi_SitFZ:
   69|    167|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
   70|    167|        T.createOutOfBoundsError(index: index, count: count)
   71|    167|    }
$s7WasmKit14InstanceEntityV5emptyACvgZ:
   87|     93|    static var empty: InstanceEntity {
   88|     93|        InstanceEntity(
   89|     93|            types: [],
   90|     93|            functions: ImmutableArray(),
   91|     93|            tables: ImmutableArray(),
   92|     93|            memories: ImmutableArray(),
   93|     93|            globals: ImmutableArray(),
   94|     93|            elementSegments: ImmutableArray(),
   95|     93|            dataSegments: ImmutableArray(),
   96|     93|            exports: [:],
   97|     93|            functionRefs: [],
   98|     93|            features: [],
   99|     93|            dataCount: nil
  100|     93|        )
  101|     93|    }
$s7WasmKit14InstanceEntityV19compileAllFunctions5storeyAA5StoreC_tKF:
  103|  1.97k|    internal func compileAllFunctions(store: Store) throws {
  104|  1.97k|        let store = StoreRef(store)
  105|  2.75k|        for function in functions {
  106|  2.75k|            guard function.isWasm else { continue }
  107|  2.74k|            try function.wasm.ensureCompiled(store: store)
  108|    878|        }
  109|    108|    }
$s7WasmKit8InstanceV6handle5storeAcA12EntityHandleVyAA0cF0VG_AA5StoreCtcfC:
  182|    108|    init(handle: InternalInstance, store: Store) {
  183|    108|        self.handle = handle
  184|    108|        self.store = store
  185|    108|    }
$s7WasmKit11TableEntityV6limits0A6Parser6LimitsVvg:
  269|    342|    var limits: Limits { tableType.limits }
$s7WasmKit11TableEntityV7maxSize10isMemory64s6UInt64VSb_tFZ:
  271|    316|    static func maxSize(isMemory64: Bool) -> UInt64 {
  272|    316|        return UInt64(UInt32.max)
  273|    316|    }
$s7WasmKit11TableEntityV_15resourceLimiterAC0A6Parser0C4TypeV_AA08ResourceF0_ptKcfC:
  275|    326|    init(_ tableType: TableType, resourceLimiter: any ResourceLimiter) throws {
  276|    326|        let emptyElement: Reference
  277|    326|        switch tableType.elementType {
  278|    326|        case .funcRef:
  279|    321|            emptyElement = .function(nil)
  280|    326|        case .externRef:
  281|      5|            emptyElement = .extern(nil)
  282|    326|        }
  283|    326|
  284|    326|        let numberOfElements = Int(tableType.limits.min)
  285|    326|        guard try resourceLimiter.limitTableGrowth(to: numberOfElements) else {
  286|      0|            throw Trap(.initialTableSizeExceedsLimit(numberOfElements: numberOfElements))
  287|    326|        }
  288|    326|        elements = Array(repeating: emptyElement, count: numberOfElements)
  289|    326|        self.tableType = tableType
  290|    326|    }
$s7WasmKit11TableEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  371|     48|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  372|     48|        ValidationError(.indexOutOfBounds("table", index, max: count))
  373|     48|    }
$s7WasmKit5TableV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  409|     32|    init(handle: InternalTable, allocator: StoreAllocator) {
  410|     32|        self.handle = handle
  411|     32|        self.allocator = allocator
  412|     32|    }
$s7WasmKit5TableV5store4typeAcA5StoreC_0A6Parser0C4TypeVtKcfC:
  433|     32|    public init(store: Store, type: TableType) throws {
  434|     32|        self.init(
  435|     32|            handle: try store.allocator.allocate(tableType: type, resourceLimiter: store.resourceLimiter),
  436|     32|            allocator: store.allocator
  437|     32|        )
  438|     32|    }
$s7WasmKit12MemoryEntityV12maxPageCount10isMemory64s6UInt64VSb_tFZ:
  455|  2.30k|    static func maxPageCount(isMemory64: Bool) -> UInt64 {
  456|  2.30k|        isMemory64 ? UInt64.max : UInt64(1 << 32) / UInt64(pageSize)
  457|  2.30k|    }
$s7WasmKit12MemoryEntityV_15resourceLimiterAC0A6Parser6LimitsV_AA08ResourceF0_ptKcfC:
  463|    881|    init(_ memoryType: MemoryType, resourceLimiter: any ResourceLimiter) throws {
  464|    881|        let byteSize = Int(memoryType.min) * Self.pageSize
  465|    881|        guard try resourceLimiter.limitMemoryGrowth(to: byteSize) else {
  466|     10|            throw Trap(.initialMemorySizeExceedsLimit(byteSize: byteSize))
  467|    871|        }
  468|    871|        data = Array(repeating: 0, count: byteSize)
  469|    871|        let defaultMaxPageCount = Self.maxPageCount(isMemory64: memoryType.isMemory64)
  470|    871|        maxPageCount = memoryType.max ?? defaultMaxPageCount
  471|    871|        limit = memoryType
  472|    871|    }
$s7WasmKit12MemoryEntityV_15resourceLimiterAC0A6Parser6LimitsV_AA08ResourceF0_ptKcfcs6UInt64VyKXEfu_:
  470|     42|        maxPageCount = memoryType.max ?? defaultMaxPageCount
$s7WasmKit12MemoryEntityV5write6offset5bytesySi_s10ArraySliceVys5UInt8VGtKF:
  531|     38|    mutating func write(offset: Int, bytes: ArraySlice<UInt8>) throws {
  532|     38|        let endOffset = offset + bytes.count
  533|     38|        guard endOffset <= data.count else {
  534|      3|            throw Trap(.memoryOutOfBounds)
  535|     35|        }
  536|     35|        data[offset..<endOffset] = bytes
  537|     35|    }
$s7WasmKit12MemoryEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  541|     62|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  542|     62|        ValidationError(.indexOutOfBounds("memory", index, max: count))
  543|     62|    }
$s7WasmKit6MemoryV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  555|    561|    init(handle: InternalMemory, allocator: StoreAllocator) {
  556|    561|        self.handle = handle
  557|    561|        self.allocator = allocator
  558|    561|    }
$s7WasmKit6MemoryV5store4typeAcA5StoreC_0A6Parser6LimitsVtKcfC:
  582|    572|    public init(store: Store, type: MemoryType) throws {
  583|    572|        // Validate the memory type because the type is not validated at instantiation time.
  584|    572|        try ModuleValidator.checkMemoryType(type, features: store.engine.configuration.features)
  585|    571|
  586|    571|        self.init(
  587|    571|            handle: try store.allocator.allocate(memoryType: type, resourceLimiter: store.resourceLimiter),
  588|    561|            allocator: store.allocator
  589|    561|        )
  590|    561|    }
$s7WasmKit12GlobalEntityV5value0A5Types5ValueOvg:
  622|     26|        get { rawValue.cast(to: globalType.valueType) }
$s7WasmKit12GlobalEntityV10globalType12initialValueAC0A6Parser0cF0V_0A5Types0H0OtKcfC:
  627|  9.43k|    init(globalType: GlobalType, initialValue: Value) throws {
  628|  9.43k|        try initialValue.checkType(globalType.valueType)
  629|  9.42k|        rawValue = UntypedValue(initialValue)
  630|  9.42k|        self.globalType = globalType
  631|  9.42k|    }
$s7WasmKit12GlobalEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  635|     55|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  636|     55|        ValidationError(.indexOutOfBounds("global", index, max: count))
  637|     55|    }
$s7WasmKit6GlobalV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  667|     23|    init(handle: InternalGlobal, allocator: StoreAllocator) {
  668|     23|        self.handle = handle
  669|     23|        self.allocator = allocator
  670|     23|    }
$s7WasmKit6GlobalV5store4type5valueAcA5StoreC_0A6Parser0C4TypeV0A5Types5ValueOtKcfC:
  703|     29|    public init(store: Store, type: GlobalType, value: Value) throws {
  704|     29|        let handle = try store.allocator.allocate(globalType: type, initialValue: value)
  705|     23|        self.init(handle: handle, allocator: store.allocator)
  706|     23|    }
$s7WasmKit20ElementSegmentEntityV22createOutOfBoundsError5index5counts0J0_pSi_SitFZ:
  721|      4|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  722|      4|        ValidationError(.indexOutOfBounds("element", index, max: count))
  723|      4|    }
$s7WasmKit13ExternalValueO11internalizeAA08InternalcD0O_AA14StoreAllocatorCtyF:
  762|    602|    func internalize() -> (InternalExternalValue, StoreAllocator) {
  763|    602|        switch self {
  764|    602|        case .function(let function):
  765|     23|            return (.function(function.handle), function.store.allocator)
  766|    602|        case .table(let table):
  767|     13|            return (.table(table.handle), table.allocator)
  768|    602|        case .memory(let memory):
  769|    549|            return (.memory(memory.handle), memory.allocator)
  770|    602|        case .global(let global):
  771|     17|            return (.global(global.handle), global.allocator)
  772|    602|        }
  773|    602|    }

$s7WasmKit11InstructionO16CopyStackOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  421|  11.4k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  422|  11.4k|            emitSlot { unsafeBitCast(($0.source, $0.dest) as (LVReg, LVReg), to: CodeSlot.self) }
  423|  11.4k|        }
$s7WasmKit11InstructionO16CopyStackOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  422|  11.4k|            emitSlot { unsafeBitCast(($0.source, $0.dest) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  434|  46.1k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  435|  46.1k|            emitSlot { unsafeBitCast(($0.reg) as (LLVReg), to: CodeSlot.self) }
  436|  46.1k|            emitSlot { $0.rawGlobal }
  437|  46.1k|        }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  435|  46.1k|            emitSlot { unsafeBitCast(($0.reg) as (LLVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  436|  46.1k|            emitSlot { $0.rawGlobal }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  448|  3.18k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  449|  3.18k|            emitSlot { $0.rawCallee }
  450|  3.18k|            emitSlot { unsafeBitCast(($0.spAddend, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  451|  3.18k|        }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  449|  3.18k|            emitSlot { $0.rawCallee }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  450|  3.18k|            emitSlot { unsafeBitCast(($0.spAddend, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  464|    187|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  465|    187|            emitSlot { unsafeBitCast(($0.tableIndex, $0.rawType) as (UInt32, UInt32), to: CodeSlot.self) }
  466|    187|            emitSlot { unsafeBitCast(($0.index, $0.spAddend, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  467|    187|        }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  465|    187|            emitSlot { unsafeBitCast(($0.tableIndex, $0.rawType) as (UInt32, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  466|    187|            emitSlot { unsafeBitCast(($0.index, $0.spAddend, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO11BrIfOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  477|  5.61k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  478|  5.61k|            emitSlot { unsafeBitCast(($0.condition, $0.offset) as (LVReg, Int32), to: CodeSlot.self) }
  479|  5.61k|        }
$s7WasmKit11InstructionO11BrIfOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  478|  2.20k|            emitSlot { unsafeBitCast(($0.condition, $0.offset) as (LVReg, Int32), to: CodeSlot.self) }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  491|    917|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  492|    917|            emitSlot { $0.rawBaseAddress }
  493|    917|            emitSlot { unsafeBitCast(($0.count, $0.index, 0, 0, 0, 0) as (UInt16, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  494|    917|        }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  492|    917|            emitSlot { $0.rawBaseAddress }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  493|    917|            emitSlot { unsafeBitCast(($0.count, $0.index, 0, 0, 0, 0) as (UInt16, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  506|  7.51k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  507|  7.51k|            emitSlot { $0.offset }
  508|  7.51k|            emitSlot { unsafeBitCast(($0.pointer, $0.result, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  509|  7.51k|        }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  507|  7.51k|            emitSlot { $0.offset }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  508|  7.51k|            emitSlot { unsafeBitCast(($0.pointer, $0.result, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  521|    692|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  522|    692|            emitSlot { $0.offset }
  523|    692|            emitSlot { unsafeBitCast(($0.pointer, $0.value, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  524|    692|        }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  522|    692|            emitSlot { $0.offset }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  523|    692|            emitSlot { unsafeBitCast(($0.pointer, $0.value, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemorySizeOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  534|  3.66k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  535|  3.66k|            emitSlot { unsafeBitCast(($0.memoryIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  536|  3.66k|        }
$s7WasmKit11InstructionO17MemorySizeOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  535|  3.66k|            emitSlot { unsafeBitCast(($0.memoryIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryGrowOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  547|  1.08k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  548|  1.08k|            emitSlot { unsafeBitCast(($0.result, $0.delta, $0.memory) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  549|  1.08k|        }
$s7WasmKit11InstructionO17MemoryGrowOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  548|  1.08k|            emitSlot { unsafeBitCast(($0.result, $0.delta, $0.memory) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryFillOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  600|      1|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  601|      1|            emitSlot { unsafeBitCast(($0.destOffset, $0.value, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
  602|      1|        }
$s7WasmKit11InstructionO17MemoryFillOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  601|      1|            emitSlot { unsafeBitCast(($0.destOffset, $0.value, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const32OperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  612|  3.35k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  613|  3.35k|            emitSlot { unsafeBitCast(($0.value, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  614|  3.35k|        }
$s7WasmKit11InstructionO14Const32OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  613|  3.35k|            emitSlot { unsafeBitCast(($0.value, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  625|  1.23k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  626|  1.23k|            emitSlot { unsafeBitCast(($0.value) as (UntypedValue), to: CodeSlot.self) }
  627|  1.23k|            emitSlot { unsafeBitCast(($0.result) as (LLVReg), to: CodeSlot.self) }
  628|  1.23k|        }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  626|  1.23k|            emitSlot { unsafeBitCast(($0.value) as (UntypedValue), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  627|  1.23k|            emitSlot { unsafeBitCast(($0.result) as (LLVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO13BinaryOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  639|  26.2k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  640|  26.2k|            emitSlot { unsafeBitCast(($0.result, $0.lhs, $0.rhs) as (LVReg, VReg, VReg), to: CodeSlot.self) }
  641|  26.2k|        }
$s7WasmKit11InstructionO13BinaryOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  640|  26.2k|            emitSlot { unsafeBitCast(($0.result, $0.lhs, $0.rhs) as (LVReg, VReg, VReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO12UnaryOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  651|  63.8k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  652|  63.8k|            emitSlot { unsafeBitCast(($0.result, $0.input) as (LVReg, LVReg), to: CodeSlot.self) }
  653|  63.8k|        }
$s7WasmKit11InstructionO12UnaryOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  652|  63.8k|            emitSlot { unsafeBitCast(($0.result, $0.input) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO13SelectOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  665|      2|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  666|      2|            emitSlot { unsafeBitCast(($0.result, $0.condition, $0.onTrue, $0.onFalse) as (VReg, VReg, VReg, VReg), to: CodeSlot.self) }
  667|      2|        }
$s7WasmKit11InstructionO13SelectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  666|      2|            emitSlot { unsafeBitCast(($0.result, $0.condition, $0.onTrue, $0.onFalse) as (VReg, VReg, VReg, VReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14RefNullOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  677|      6|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  678|      6|            emitSlot { unsafeBitCast(($0.result, $0.rawType, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  679|      6|        }
$s7WasmKit11InstructionO14RefNullOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  678|      6|            emitSlot { unsafeBitCast(($0.result, $0.rawType, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO15TableGetOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  714|      7|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  715|      7|            emitSlot { unsafeBitCast(($0.index, $0.result, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  716|      7|        }
$s7WasmKit11InstructionO15TableGetOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  715|      7|            emitSlot { unsafeBitCast(($0.index, $0.result, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO16TableSizeOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  739|      4|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  740|      4|            emitSlot { unsafeBitCast(($0.tableIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  741|      4|        }
$s7WasmKit11InstructionO16TableSizeOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  740|      4|            emitSlot { unsafeBitCast(($0.tableIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO12rawImmediateAA0cE0_pSgvg:
  823|   191k|    var rawImmediate: (any InstructionImmediate)? {
  824|   191k|        switch self {
  825|   191k|        case .copyStack(let immediate): return immediate
  826|   191k|        case .globalGet(let immediate): return immediate
  827|   191k|        case .globalSet(let immediate): return immediate
  828|   191k|        case .call(let immediate): return immediate
  829|   191k|        case .compilingCall(let immediate): return immediate
  830|   191k|        case .internalCall(let immediate): return immediate
  831|   191k|        case .callIndirect(let immediate): return immediate
  832|   191k|        case .br(let immediate): return immediate
  833|   191k|        case .brIf(let immediate): return immediate
  834|   191k|        case .brIfNot(let immediate): return immediate
  835|   191k|        case .brTable(let immediate): return immediate
  836|   191k|        case .i32Load(let immediate): return immediate
  837|   191k|        case .i64Load(let immediate): return immediate
  838|   191k|        case .f32Load(let immediate): return immediate
  839|   191k|        case .f64Load(let immediate): return immediate
  840|   191k|        case .i32Load8S(let immediate): return immediate
  841|   191k|        case .i32Load8U(let immediate): return immediate
  842|   191k|        case .i32Load16S(let immediate): return immediate
  843|   191k|        case .i32Load16U(let immediate): return immediate
  844|   191k|        case .i64Load8S(let immediate): return immediate
  845|   191k|        case .i64Load8U(let immediate): return immediate
  846|   191k|        case .i64Load16S(let immediate): return immediate
  847|   191k|        case .i64Load16U(let immediate): return immediate
  848|   191k|        case .i64Load32S(let immediate): return immediate
  849|   191k|        case .i64Load32U(let immediate): return immediate
  850|   191k|        case .i32Store(let immediate): return immediate
  851|   191k|        case .i64Store(let immediate): return immediate
  852|   191k|        case .f32Store(let immediate): return immediate
  853|   191k|        case .f64Store(let immediate): return immediate
  854|   191k|        case .i32Store8(let immediate): return immediate
  855|   191k|        case .i32Store16(let immediate): return immediate
  856|   191k|        case .i64Store8(let immediate): return immediate
  857|   191k|        case .i64Store16(let immediate): return immediate
  858|   191k|        case .i64Store32(let immediate): return immediate
  859|   191k|        case .memorySize(let immediate): return immediate
  860|   191k|        case .memoryGrow(let immediate): return immediate
  861|   191k|        case .memoryInit(let immediate): return immediate
  862|   191k|        case .memoryDataDrop(let immediate): return immediate
  863|   191k|        case .memoryCopy(let immediate): return immediate
  864|   191k|        case .memoryFill(let immediate): return immediate
  865|   191k|        case .const32(let immediate): return immediate
  866|   191k|        case .const64(let immediate): return immediate
  867|   191k|        case .i32Add(let immediate): return immediate
  868|   191k|        case .i64Add(let immediate): return immediate
  869|   191k|        case .i32Sub(let immediate): return immediate
  870|   191k|        case .i64Sub(let immediate): return immediate
  871|   191k|        case .i32Mul(let immediate): return immediate
  872|   191k|        case .i64Mul(let immediate): return immediate
  873|   191k|        case .i32And(let immediate): return immediate
  874|   191k|        case .i64And(let immediate): return immediate
  875|   191k|        case .i32Or(let immediate): return immediate
  876|   191k|        case .i64Or(let immediate): return immediate
  877|   191k|        case .i32Xor(let immediate): return immediate
  878|   191k|        case .i64Xor(let immediate): return immediate
  879|   191k|        case .i32Shl(let immediate): return immediate
  880|   191k|        case .i64Shl(let immediate): return immediate
  881|   191k|        case .i32ShrS(let immediate): return immediate
  882|   191k|        case .i64ShrS(let immediate): return immediate
  883|   191k|        case .i32ShrU(let immediate): return immediate
  884|   191k|        case .i64ShrU(let immediate): return immediate
  885|   191k|        case .i32Rotl(let immediate): return immediate
  886|   191k|        case .i64Rotl(let immediate): return immediate
  887|   191k|        case .i32Rotr(let immediate): return immediate
  888|   191k|        case .i64Rotr(let immediate): return immediate
  889|   191k|        case .i32DivS(let immediate): return immediate
  890|   191k|        case .i64DivS(let immediate): return immediate
  891|   191k|        case .i32DivU(let immediate): return immediate
  892|   191k|        case .i64DivU(let immediate): return immediate
  893|   191k|        case .i32RemS(let immediate): return immediate
  894|   191k|        case .i64RemS(let immediate): return immediate
  895|   191k|        case .i32RemU(let immediate): return immediate
  896|   191k|        case .i64RemU(let immediate): return immediate
  897|   191k|        case .i32Eq(let immediate): return immediate
  898|   191k|        case .i64Eq(let immediate): return immediate
  899|   191k|        case .i32Ne(let immediate): return immediate
  900|   191k|        case .i64Ne(let immediate): return immediate
  901|   191k|        case .i32LtS(let immediate): return immediate
  902|   191k|        case .i64LtS(let immediate): return immediate
  903|   191k|        case .i32LtU(let immediate): return immediate
  904|   191k|        case .i64LtU(let immediate): return immediate
  905|   191k|        case .i32GtS(let immediate): return immediate
  906|   191k|        case .i64GtS(let immediate): return immediate
  907|   191k|        case .i32GtU(let immediate): return immediate
  908|   191k|        case .i64GtU(let immediate): return immediate
  909|   191k|        case .i32LeS(let immediate): return immediate
  910|   191k|        case .i64LeS(let immediate): return immediate
  911|   191k|        case .i32LeU(let immediate): return immediate
  912|   191k|        case .i64LeU(let immediate): return immediate
  913|   191k|        case .i32GeS(let immediate): return immediate
  914|   191k|        case .i64GeS(let immediate): return immediate
  915|   191k|        case .i32GeU(let immediate): return immediate
  916|   191k|        case .i64GeU(let immediate): return immediate
  917|   191k|        case .i32Clz(let immediate): return immediate
  918|   191k|        case .i64Clz(let immediate): return immediate
  919|   191k|        case .i32Ctz(let immediate): return immediate
  920|   191k|        case .i64Ctz(let immediate): return immediate
  921|   191k|        case .i32Popcnt(let immediate): return immediate
  922|   191k|        case .i64Popcnt(let immediate): return immediate
  923|   191k|        case .i32Eqz(let immediate): return immediate
  924|   191k|        case .i64Eqz(let immediate): return immediate
  925|   191k|        case .i32WrapI64(let immediate): return immediate
  926|   191k|        case .i64ExtendI32S(let immediate): return immediate
  927|   191k|        case .i64ExtendI32U(let immediate): return immediate
  928|   191k|        case .i32Extend8S(let immediate): return immediate
  929|   191k|        case .i64Extend8S(let immediate): return immediate
  930|   191k|        case .i32Extend16S(let immediate): return immediate
  931|   191k|        case .i64Extend16S(let immediate): return immediate
  932|   191k|        case .i64Extend32S(let immediate): return immediate
  933|   191k|        case .i32TruncF32S(let immediate): return immediate
  934|   191k|        case .i32TruncF32U(let immediate): return immediate
  935|   191k|        case .i32TruncSatF32S(let immediate): return immediate
  936|   191k|        case .i32TruncSatF32U(let immediate): return immediate
  937|   191k|        case .i32TruncF64S(let immediate): return immediate
  938|   191k|        case .i32TruncF64U(let immediate): return immediate
  939|   191k|        case .i32TruncSatF64S(let immediate): return immediate
  940|   191k|        case .i32TruncSatF64U(let immediate): return immediate
  941|   191k|        case .i64TruncF32S(let immediate): return immediate
  942|   191k|        case .i64TruncF32U(let immediate): return immediate
  943|   191k|        case .i64TruncSatF32S(let immediate): return immediate
  944|   191k|        case .i64TruncSatF32U(let immediate): return immediate
  945|   191k|        case .i64TruncF64S(let immediate): return immediate
  946|   191k|        case .i64TruncF64U(let immediate): return immediate
  947|   191k|        case .i64TruncSatF64S(let immediate): return immediate
  948|   191k|        case .i64TruncSatF64U(let immediate): return immediate
  949|   191k|        case .f32ConvertI32S(let immediate): return immediate
  950|   191k|        case .f32ConvertI32U(let immediate): return immediate
  951|   191k|        case .f32ConvertI64S(let immediate): return immediate
  952|   191k|        case .f32ConvertI64U(let immediate): return immediate
  953|   191k|        case .f64ConvertI32S(let immediate): return immediate
  954|   191k|        case .f64ConvertI32U(let immediate): return immediate
  955|   191k|        case .f64ConvertI64S(let immediate): return immediate
  956|   191k|        case .f64ConvertI64U(let immediate): return immediate
  957|   191k|        case .f32ReinterpretI32(let immediate): return immediate
  958|   191k|        case .f64ReinterpretI64(let immediate): return immediate
  959|   191k|        case .i32ReinterpretF32(let immediate): return immediate
  960|   191k|        case .i64ReinterpretF64(let immediate): return immediate
  961|   191k|        case .f32Add(let immediate): return immediate
  962|   191k|        case .f64Add(let immediate): return immediate
  963|   191k|        case .f32Sub(let immediate): return immediate
  964|   191k|        case .f64Sub(let immediate): return immediate
  965|   191k|        case .f32Mul(let immediate): return immediate
  966|   191k|        case .f64Mul(let immediate): return immediate
  967|   191k|        case .f32Div(let immediate): return immediate
  968|   191k|        case .f64Div(let immediate): return immediate
  969|   191k|        case .f32Min(let immediate): return immediate
  970|   191k|        case .f64Min(let immediate): return immediate
  971|   191k|        case .f32Max(let immediate): return immediate
  972|   191k|        case .f64Max(let immediate): return immediate
  973|   191k|        case .f32CopySign(let immediate): return immediate
  974|   191k|        case .f64CopySign(let immediate): return immediate
  975|   191k|        case .f32Eq(let immediate): return immediate
  976|   191k|        case .f64Eq(let immediate): return immediate
  977|   191k|        case .f32Ne(let immediate): return immediate
  978|   191k|        case .f64Ne(let immediate): return immediate
  979|   191k|        case .f32Lt(let immediate): return immediate
  980|   191k|        case .f64Lt(let immediate): return immediate
  981|   191k|        case .f32Gt(let immediate): return immediate
  982|   191k|        case .f64Gt(let immediate): return immediate
  983|   191k|        case .f32Le(let immediate): return immediate
  984|   191k|        case .f64Le(let immediate): return immediate
  985|   191k|        case .f32Ge(let immediate): return immediate
  986|   191k|        case .f64Ge(let immediate): return immediate
  987|   191k|        case .f32Abs(let immediate): return immediate
  988|   191k|        case .f64Abs(let immediate): return immediate
  989|   191k|        case .f32Neg(let immediate): return immediate
  990|   191k|        case .f64Neg(let immediate): return immediate
  991|   191k|        case .f32Ceil(let immediate): return immediate
  992|   191k|        case .f64Ceil(let immediate): return immediate
  993|   191k|        case .f32Floor(let immediate): return immediate
  994|   191k|        case .f64Floor(let immediate): return immediate
  995|   191k|        case .f32Trunc(let immediate): return immediate
  996|   191k|        case .f64Trunc(let immediate): return immediate
  997|   191k|        case .f32Nearest(let immediate): return immediate
  998|   191k|        case .f64Nearest(let immediate): return immediate
  999|   191k|        case .f32Sqrt(let immediate): return immediate
 1000|   191k|        case .f64Sqrt(let immediate): return immediate
 1001|   191k|        case .f64PromoteF32(let immediate): return immediate
 1002|   191k|        case .f32DemoteF64(let immediate): return immediate
 1003|   191k|        case .select(let immediate): return immediate
 1004|   191k|        case .refNull(let immediate): return immediate
 1005|   191k|        case .refIsNull(let immediate): return immediate
 1006|   191k|        case .refFunc(let immediate): return immediate
 1007|   191k|        case .tableGet(let immediate): return immediate
 1008|   191k|        case .tableSet(let immediate): return immediate
 1009|   191k|        case .tableSize(let immediate): return immediate
 1010|   191k|        case .tableGrow(let immediate): return immediate
 1011|   191k|        case .tableFill(let immediate): return immediate
 1012|   191k|        case .tableCopy(let immediate): return immediate
 1013|   191k|        case .tableInit(let immediate): return immediate
 1014|   191k|        case .tableElementDrop(let immediate): return immediate
 1015|   191k|        case .onEnter(let immediate): return immediate
 1016|   191k|        case .onExit(let immediate): return immediate
 1017|   191k|        default: return nil
 1018|   191k|        }
 1019|   191k|    }
$s7WasmKit11InstructionO8opcodeIDs6UInt64Vvg:
 1025|   191k|    var opcodeID: OpcodeID {
 1026|   191k|        switch self {
 1027|   191k|        case .copyStack: return 0
 1028|   191k|        case .globalGet: return 1
 1029|   191k|        case .globalSet: return 2
 1030|   191k|        case .call: return 3
 1031|   191k|        case .compilingCall: return 4
 1032|   191k|        case .internalCall: return 5
 1033|   191k|        case .callIndirect: return 6
 1034|   191k|        case .unreachable: return 7
 1035|   191k|        case .nop: return 8
 1036|   191k|        case .br: return 9
 1037|   191k|        case .brIf: return 10
 1038|   191k|        case .brIfNot: return 11
 1039|   191k|        case .brTable: return 12
 1040|   191k|        case ._return: return 13
 1041|   191k|        case .endOfExecution: return 14
 1042|   191k|        case .i32Load: return 15
 1043|   191k|        case .i64Load: return 16
 1044|   191k|        case .f32Load: return 17
 1045|   191k|        case .f64Load: return 18
 1046|   191k|        case .i32Load8S: return 19
 1047|   191k|        case .i32Load8U: return 20
 1048|   191k|        case .i32Load16S: return 21
 1049|   191k|        case .i32Load16U: return 22
 1050|   191k|        case .i64Load8S: return 23
 1051|   191k|        case .i64Load8U: return 24
 1052|   191k|        case .i64Load16S: return 25
 1053|   191k|        case .i64Load16U: return 26
 1054|   191k|        case .i64Load32S: return 27
 1055|   191k|        case .i64Load32U: return 28
 1056|   191k|        case .i32Store: return 29
 1057|   191k|        case .i64Store: return 30
 1058|   191k|        case .f32Store: return 31
 1059|   191k|        case .f64Store: return 32
 1060|   191k|        case .i32Store8: return 33
 1061|   191k|        case .i32Store16: return 34
 1062|   191k|        case .i64Store8: return 35
 1063|   191k|        case .i64Store16: return 36
 1064|   191k|        case .i64Store32: return 37
 1065|   191k|        case .memorySize: return 38
 1066|   191k|        case .memoryGrow: return 39
 1067|   191k|        case .memoryInit: return 40
 1068|   191k|        case .memoryDataDrop: return 41
 1069|   191k|        case .memoryCopy: return 42
 1070|   191k|        case .memoryFill: return 43
 1071|   191k|        case .const32: return 44
 1072|   191k|        case .const64: return 45
 1073|   191k|        case .i32Add: return 46
 1074|   191k|        case .i64Add: return 47
 1075|   191k|        case .i32Sub: return 48
 1076|   191k|        case .i64Sub: return 49
 1077|   191k|        case .i32Mul: return 50
 1078|   191k|        case .i64Mul: return 51
 1079|   191k|        case .i32And: return 52
 1080|   191k|        case .i64And: return 53
 1081|   191k|        case .i32Or: return 54
 1082|   191k|        case .i64Or: return 55
 1083|   191k|        case .i32Xor: return 56
 1084|   191k|        case .i64Xor: return 57
 1085|   191k|        case .i32Shl: return 58
 1086|   191k|        case .i64Shl: return 59
 1087|   191k|        case .i32ShrS: return 60
 1088|   191k|        case .i64ShrS: return 61
 1089|   191k|        case .i32ShrU: return 62
 1090|   191k|        case .i64ShrU: return 63
 1091|   191k|        case .i32Rotl: return 64
 1092|   191k|        case .i64Rotl: return 65
 1093|   191k|        case .i32Rotr: return 66
 1094|   191k|        case .i64Rotr: return 67
 1095|   191k|        case .i32DivS: return 68
 1096|   191k|        case .i64DivS: return 69
 1097|   191k|        case .i32DivU: return 70
 1098|   191k|        case .i64DivU: return 71
 1099|   191k|        case .i32RemS: return 72
 1100|   191k|        case .i64RemS: return 73
 1101|   191k|        case .i32RemU: return 74
 1102|   191k|        case .i64RemU: return 75
 1103|   191k|        case .i32Eq: return 76
 1104|   191k|        case .i64Eq: return 77
 1105|   191k|        case .i32Ne: return 78
 1106|   191k|        case .i64Ne: return 79
 1107|   191k|        case .i32LtS: return 80
 1108|   191k|        case .i64LtS: return 81
 1109|   191k|        case .i32LtU: return 82
 1110|   191k|        case .i64LtU: return 83
 1111|   191k|        case .i32GtS: return 84
 1112|   191k|        case .i64GtS: return 85
 1113|   191k|        case .i32GtU: return 86
 1114|   191k|        case .i64GtU: return 87
 1115|   191k|        case .i32LeS: return 88
 1116|   191k|        case .i64LeS: return 89
 1117|   191k|        case .i32LeU: return 90
 1118|   191k|        case .i64LeU: return 91
 1119|   191k|        case .i32GeS: return 92
 1120|   191k|        case .i64GeS: return 93
 1121|   191k|        case .i32GeU: return 94
 1122|   191k|        case .i64GeU: return 95
 1123|   191k|        case .i32Clz: return 96
 1124|   191k|        case .i64Clz: return 97
 1125|   191k|        case .i32Ctz: return 98
 1126|   191k|        case .i64Ctz: return 99
 1127|   191k|        case .i32Popcnt: return 100
 1128|   191k|        case .i64Popcnt: return 101
 1129|   191k|        case .i32Eqz: return 102
 1130|   191k|        case .i64Eqz: return 103
 1131|   191k|        case .i32WrapI64: return 104
 1132|   191k|        case .i64ExtendI32S: return 105
 1133|   191k|        case .i64ExtendI32U: return 106
 1134|   191k|        case .i32Extend8S: return 107
 1135|   191k|        case .i64Extend8S: return 108
 1136|   191k|        case .i32Extend16S: return 109
 1137|   191k|        case .i64Extend16S: return 110
 1138|   191k|        case .i64Extend32S: return 111
 1139|   191k|        case .i32TruncF32S: return 112
 1140|   191k|        case .i32TruncF32U: return 113
 1141|   191k|        case .i32TruncSatF32S: return 114
 1142|   191k|        case .i32TruncSatF32U: return 115
 1143|   191k|        case .i32TruncF64S: return 116
 1144|   191k|        case .i32TruncF64U: return 117
 1145|   191k|        case .i32TruncSatF64S: return 118
 1146|   191k|        case .i32TruncSatF64U: return 119
 1147|   191k|        case .i64TruncF32S: return 120
 1148|   191k|        case .i64TruncF32U: return 121
 1149|   191k|        case .i64TruncSatF32S: return 122
 1150|   191k|        case .i64TruncSatF32U: return 123
 1151|   191k|        case .i64TruncF64S: return 124
 1152|   191k|        case .i64TruncF64U: return 125
 1153|   191k|        case .i64TruncSatF64S: return 126
 1154|   191k|        case .i64TruncSatF64U: return 127
 1155|   191k|        case .f32ConvertI32S: return 128
 1156|   191k|        case .f32ConvertI32U: return 129
 1157|   191k|        case .f32ConvertI64S: return 130
 1158|   191k|        case .f32ConvertI64U: return 131
 1159|   191k|        case .f64ConvertI32S: return 132
 1160|   191k|        case .f64ConvertI32U: return 133
 1161|   191k|        case .f64ConvertI64S: return 134
 1162|   191k|        case .f64ConvertI64U: return 135
 1163|   191k|        case .f32ReinterpretI32: return 136
 1164|   191k|        case .f64ReinterpretI64: return 137
 1165|   191k|        case .i32ReinterpretF32: return 138
 1166|   191k|        case .i64ReinterpretF64: return 139
 1167|   191k|        case .f32Add: return 140
 1168|   191k|        case .f64Add: return 141
 1169|   191k|        case .f32Sub: return 142
 1170|   191k|        case .f64Sub: return 143
 1171|   191k|        case .f32Mul: return 144
 1172|   191k|        case .f64Mul: return 145
 1173|   191k|        case .f32Div: return 146
 1174|   191k|        case .f64Div: return 147
 1175|   191k|        case .f32Min: return 148
 1176|   191k|        case .f64Min: return 149
 1177|   191k|        case .f32Max: return 150
 1178|   191k|        case .f64Max: return 151
 1179|   191k|        case .f32CopySign: return 152
 1180|   191k|        case .f64CopySign: return 153
 1181|   191k|        case .f32Eq: return 154
 1182|   191k|        case .f64Eq: return 155
 1183|   191k|        case .f32Ne: return 156
 1184|   191k|        case .f64Ne: return 157
 1185|   191k|        case .f32Lt: return 158
 1186|   191k|        case .f64Lt: return 159
 1187|   191k|        case .f32Gt: return 160
 1188|   191k|        case .f64Gt: return 161
 1189|   191k|        case .f32Le: return 162
 1190|   191k|        case .f64Le: return 163
 1191|   191k|        case .f32Ge: return 164
 1192|   191k|        case .f64Ge: return 165
 1193|   191k|        case .f32Abs: return 166
 1194|   191k|        case .f64Abs: return 167
 1195|   191k|        case .f32Neg: return 168
 1196|   191k|        case .f64Neg: return 169
 1197|   191k|        case .f32Ceil: return 170
 1198|   191k|        case .f64Ceil: return 171
 1199|   191k|        case .f32Floor: return 172
 1200|   191k|        case .f64Floor: return 173
 1201|   191k|        case .f32Trunc: return 174
 1202|   191k|        case .f64Trunc: return 175
 1203|   191k|        case .f32Nearest: return 176
 1204|   191k|        case .f64Nearest: return 177
 1205|   191k|        case .f32Sqrt: return 178
 1206|   191k|        case .f64Sqrt: return 179
 1207|   191k|        case .f64PromoteF32: return 180
 1208|   191k|        case .f32DemoteF64: return 181
 1209|   191k|        case .select: return 182
 1210|   191k|        case .refNull: return 183
 1211|   191k|        case .refIsNull: return 184
 1212|   191k|        case .refFunc: return 185
 1213|   191k|        case .tableGet: return 186
 1214|   191k|        case .tableSet: return 187
 1215|   191k|        case .tableSize: return 188
 1216|   191k|        case .tableGrow: return 189
 1217|   191k|        case .tableFill: return 190
 1218|   191k|        case .tableCopy: return 191
 1219|   191k|        case .tableInit: return 192
 1220|   191k|        case .tableElementDrop: return 193
 1221|   191k|        case .onEnter: return 194
 1222|   191k|        case .onExit: return 195
 1223|   191k|        }
 1224|   191k|    }

$s7WasmKit5LVRegVyACs5Int16VcfC:
   20|   186k|    init(_ value: VReg) {
   21|   186k|        // Pre-shift to avoid runtime shift operation by using
   22|   186k|        // unused high bits.
   23|   186k|        self.value = Int32(value) * Int32(MemoryLayout<StackSlot>.size)
   24|   186k|    }
$s7WasmKit6LLVRegVyACs5Int16VcfC:
   40|  47.4k|    init(_ value: VReg) {
   41|  47.4k|        // Pre-shift to avoid runtime shift operation by using
   42|  47.4k|        // unused high bits.
   43|  47.4k|        self.value = Int64(value) * Int64(MemoryLayout<StackSlot>.size)
   44|  47.4k|    }
$s7WasmKit20InstructionImmediatePAAE4emit2toyys6UInt64Vc_tF:
   79|   178k|    func emit(to emitSlot: @escaping (CodeSlot) -> Void) {
   80|   178k|        Self.emit { buildCodeSlot in
   81|   178k|            emitSlot(buildCodeSlot(self))
   82|   178k|        }
   83|   178k|    }
$s7WasmKit20InstructionImmediatePAAE4emit2toyys6UInt64Vc_tFyAGxXEcfU_:
   80|   238k|        Self.emit { buildCodeSlot in
   81|   238k|            emitSlot(buildCodeSlot(self))
   82|   238k|        }
$ss5Int32V7WasmKitE4emit2toyys6UInt64VABXEc_tFZ:
   99|  16.3k|    static func emit(to emitSlot: @escaping ((Self) -> CodeSlot) -> Void) {
  100|  16.3k|        emitSlot { CodeSlot(UInt32(bitPattern: $0)) }
  101|  16.3k|    }
$ss5Int32V7WasmKitE4emit2toyys6UInt64VABXEc_tFZAgBXEfU_:
  100|  6.87k|        emitSlot { CodeSlot(UInt32(bitPattern: $0)) }
$s7WasmKit11InstructionO14RefNullOperandV6result4typeAEs5Int16V_0A5Types13ReferenceTypeOtcfC:
  107|      6|    init(result: VReg, type: ReferenceType) {
  108|      6|        self.init(result: result, rawType: type.rawValue)
  109|      6|    }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV3reg6globalAeA6LLVRegV_AA12EntityHandleVyAA0dK0VGtcfC:
  117|  46.1k|    init(reg: LLVReg, global: InternalGlobal) {
  118|  46.1k|        self.init(reg: reg, rawGlobal: UInt64(UInt(bitPattern: global.bitPattern)))
  119|  46.1k|    }
$s7WasmKit11InstructionO14BrTableOperandV11baseAddress5count5indexAESPyAE5EntryVG_s6UInt16Vs5Int16VtcfC:
  130|    917|    init(baseAddress: UnsafePointer<Entry>, count: UInt16, index: VReg) {
  131|    917|        self.init(rawBaseAddress: UInt64(UInt(bitPattern: baseAddress)), count: count, index: index)
  132|    917|    }
$s7WasmKit11InstructionO11CallOperandV6callee8spAddendAeA16InternalFunctionV_s5Int16VtcfC:
  140|  3.18k|    init(callee: InternalFunction, spAddend: VReg) {
  141|  3.18k|        self.init(rawCallee: UInt64(UInt(bitPattern: callee.bitPattern)), spAddend: spAddend)
  142|  3.18k|    }
$s7WasmKit11InstructionO19CallIndirectOperandV10tableIndex4type5index8spAddendAEs6UInt32V_AA8InternedVy0A5Types12FunctionTypeVGs5Int16VAStcfC:
  151|    187|    init(tableIndex: UInt32, type: InternedFuncType, index: VReg, spAddend: VReg) {
  152|    187|        self.init(tableIndex: tableIndex, rawType: type.id, index: index, spAddend: spAddend)
  153|    187|    }
$s7WasmKit11InstructionO8headSlot14threadingModels6UInt64VAA19EngineConfigurationV09ThreadingG0O_tF:
  200|   191k|    func headSlot(threadingModel: EngineConfiguration.ThreadingModel) -> CodeSlot {
  201|   191k|        switch threadingModel {
  202|   191k|        case .direct:
  203|   191k|            return CodeSlot(handler)
  204|   191k|        case .token:
  205|      0|            return opcodeID
  206|   191k|        }
  207|   191k|    }

$s7WasmKit12NameRegistryV13functionNames33_41338D6D703C89393C72591DE351AF00LLSDyAA16InternalFunctionVSSGvpfi:
    7|  2.12k|    private var functionNames: [InternalFunction: String] = [:]
$s7WasmKit12NameRegistryV13materializers33_41338D6D703C89393C72591DE351AF00LLSayyACzKcGvpfi:
    8|  2.12k|    private var materializers: [(inout NameRegistry) throws -> Void] = []
$s7WasmKit12NameRegistryVACycfC:
   10|  2.12k|    init() {}

$s7WasmKit5StoreC12nameRegistryAA04NameE0Vvpfi:
    7|  2.12k|    var nameRegistry = NameRegistry()
$s7WasmKit5StoreC15resourceLimiterAA08ResourceE0_pvpfi:
    9|  2.12k|    public var resourceLimiter: ResourceLimiter = DefaultResourceLimiter()
$s7WasmKit5StoreC6engineAcA6EngineC_tcfc:
   22|  2.12k|    public init(engine: Engine) {
   23|  2.12k|        self.engine = engine
   24|  2.12k|        self.allocator = StoreAllocator(funcTypeInterner: engine.funcTypeInterner)
   25|  2.12k|    }

$s7WasmKit13BumpAllocatorC5pages33_8EACE635DD16791045BB0F1DDDCAD7E4LLSaySryxGGvpfi:
    5|  19.1k|    private var pages: [UnsafeMutableBufferPointer<T>] = []
$s7WasmKit13BumpAllocatorC13currentOffset33_8EACE635DD16791045BB0F1DDDCAD7E4LLSivpfi:
    7|  19.1k|    private var currentOffset: Int = 0
$s7WasmKit13BumpAllocatorC15initialCapacityACyxGSi_tcfc:
   11|  19.1k|    init(initialCapacity: Int) {
   12|  19.1k|        currentPageSize = initialCapacity
   13|  19.1k|        currentPage = .allocate(capacity: currentPageSize)
   14|  19.1k|    }
$s7WasmKit13BumpAllocatorCfd:
   16|  19.1k|    deinit {
   17|  19.1k|        for page in pages {
   18|     11|            page.deinitialize().deallocate()
   19|  19.1k|        }
   20|  30.7k|        for i in 0..<currentOffset {
   21|  30.7k|            currentPage.deinitializeElement(at: i)
   22|  30.7k|        }
   23|  19.1k|        currentPage.deallocate()
   24|  19.1k|    }
$s7WasmKit13BumpAllocatorC12startNewPage33_8EACE635DD16791045BB0F1DDDCAD7E4LLyyF:
   27|     11|    private func startNewPage() {
   28|     11|        pages.append(currentPage)
   29|     11|        // TODO: Should we grow the page size?
   30|     11|        let page = UnsafeMutableBufferPointer<T>.allocate(capacity: currentPageSize)
   31|     11|        currentPage = page
   32|     11|        currentOffset = 0
   33|     11|    }
$s7WasmKit13BumpAllocatorC8allocate12initializingSpyxGx_tF:
   39|  28.6k|    func allocate(initializing value: T) -> UnsafeMutablePointer<T> {
   40|  28.6k|        let pointer = allocate()
   41|  28.6k|        pointer.initialize(to: value)
   42|  28.6k|        return pointer
   43|  28.6k|    }
$s7WasmKit13BumpAllocatorC8allocateSpyxGyF:
   51|  30.7k|    func allocate() -> UnsafeMutablePointer<T> {
   52|  30.7k|        if currentOffset == currentPageSize {
   53|     11|            startNewPage()
   54|     11|        }
   55|  30.7k|        let pointer = currentPage.baseAddress!.advanced(by: currentOffset)
   56|  30.7k|        currentOffset += 1
   57|  30.7k|        return pointer
   58|  30.7k|    }
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC12arrayBuffersSaySvGvpfi:
   68|  2.12k|    private var arrayBuffers: [UnsafeMutableRawPointer] = []
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC8allocate5countSryxGSi_tlF:
   73|  12.3k|    func allocate<T>(count: Int) -> UnsafeMutableBufferPointer<T> {
   74|  12.3k|        // We only support trivial types for now. Otherwise, we have to track the element type
   75|  12.3k|        // until the deallocation of this allocator.
   76|  12.3k|        assert(_isPOD(T.self), "ImmutableArrayAllocator only supports trivial element types.")
   77|  12.3k|        let buffer = UnsafeMutableBufferPointer<T>.allocate(capacity: count)
   78|  12.3k|        // If count is zero, don't manage such empty buffer.
   79|  12.3k|        if let baseAddress = buffer.baseAddress {
   80|  12.3k|            arrayBuffers.append(baseAddress)
   81|  12.3k|        }
   82|  12.3k|        return buffer
   83|  12.3k|    }
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC8allocate5countSryxGSi_tlFSbyXEfu_:
   76|  12.3k|        assert(_isPOD(T.self), "ImmutableArrayAllocator only supports trivial element types.")
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLCfd:
   85|  2.12k|    deinit {
   86|  12.3k|        for buffer in arrayBuffers {
   87|  12.3k|            buffer.deallocate()
   88|  12.3k|        }
   89|  2.12k|    }
$s7WasmKit14ImmutableArrayV9allocator5count10initializeACyxGAA0cD9Allocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC_SiySryxGKXEtKcAILlfC:
  102|  12.3k|    fileprivate init(allocator: ImmutableArrayAllocator, count: Int, initialize: (UnsafeMutableBufferPointer<T>) throws -> Void) rethrows {
  103|  12.3k|        let mutable: UnsafeMutableBufferPointer<T> = allocator.allocate(count: count)
  104|  12.3k|        try initialize(mutable)
  105|  12.3k|        buffer = UnsafeBufferPointer(mutable)
  106|  12.3k|    }
$s7WasmKit14ImmutableArrayVACyxGycfC:
  109|    558|    init() {
  110|    558|        buffer = UnsafeBufferPointer(start: nil, count: 0)
  111|    558|    }
$s7WasmKit14ImmutableArrayVyxSicig:
  114|  49.3k|    subscript(index: Int) -> T {
  115|  49.3k|        buffer[index]
  116|  49.3k|    }
$s7WasmKit14ImmutableArrayV10validatingxSi_tcAA17ValidatableEntityRzluig:
  124|  65.6k|        get throws {
  125|  65.6k|            return try self[validating: index, T.createOutOfBoundsError]
  126|  65.6k|        }
$s7WasmKit14ImmutableArrayV10validatingxSi_tcAA17ValidatableEntityRzluigs5Error_pSi_Sitcfu_:
  125|    196|            return try self[validating: index, T.createOutOfBoundsError]
$s7WasmKit14ImmutableArrayV10validating_xSi_s5Error_pSi_SitXEtcig:
  132|  65.6k|        get throws {
  133|  65.6k|            guard index >= 0 && index < buffer.count else {
  134|    196|                throw createError(index, buffer.count)
  135|  65.4k|            }
  136|  65.4k|            return buffer[index]
  137|  65.6k|        }
$s7WasmKit14ImmutableArrayV10validating_xSi_s5Error_pSi_SitXEtcigSbyKXEfu_:
  133|  65.6k|            guard index >= 0 && index < buffer.count else {
$s7WasmKit14ImmutableArrayV12makeIteratorSR0F0Vyx_GyF:
  151|  3.96k|    func makeIterator() -> Iterator {
  152|  3.96k|        buffer.makeIterator()
  153|  3.96k|    }
$s7WasmKit8InternerCACyxGycfc:
  174|  2.12k|    init() {
  175|  2.12k|        itemByIntern = []
  176|  2.12k|        internByItem = [:]
  177|  2.12k|    }
$s7WasmKit8InternerC6internyAA8InternedVyxGxF:
  181|  9.17k|    func intern(_ item: Item) -> Interned<Item> {
  182|  9.17k|        if let interned = internByItem[item] {
  183|  7.00k|            return interned
  184|  7.00k|        }
  185|  2.17k|        let id = itemByIntern.count
  186|  2.17k|        itemByIntern.append(item)
  187|  2.17k|        let newInterned = Interned<Item>(id: Item.Offset(id))
  188|  2.17k|        internByItem[item] = newInterned
  189|  2.17k|        return newInterned
  190|  9.17k|    }
$s7WasmKit8InternerC7resolveyxAA8InternedVyxGF:
  193|  5.93k|    func resolve(_ interned: Interned<Item>) -> Item {
  194|  5.93k|        return itemByIntern[Int(interned.id)]
  195|  5.93k|    }
$s7WasmKit14StoreAllocatorC16funcTypeInternerAcA0G0Cy0A5Types08FunctionF0VG_tcfc:
  224|  2.12k|    init(funcTypeInterner: Interner<FunctionType>) {
  225|  2.12k|        instances = BumpAllocator(initialCapacity: 2)
  226|  2.12k|        functions = BumpAllocator(initialCapacity: 64)
  227|  2.12k|        hostFunctions = BumpAllocator(initialCapacity: 32)
  228|  2.12k|        codes = BumpAllocator(initialCapacity: 64)
  229|  2.12k|        tables = BumpAllocator(initialCapacity: 2)
  230|  2.12k|        memories = BumpAllocator(initialCapacity: 2)
  231|  2.12k|        globals = BumpAllocator(initialCapacity: 256)
  232|  2.12k|        elements = BumpAllocator(initialCapacity: 2)
  233|  2.12k|        datas = BumpAllocator(initialCapacity: 64)
  234|  2.12k|        arrayAllocator = ImmutableArrayAllocator()
  235|  2.12k|        iseqAllocator = ISeqAllocator()
  236|  2.12k|        self.funcTypeInterner = funcTypeInterner
  237|  2.12k|    }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF:
  255|  2.09k|    ) throws -> InternalInstance {
  256|  2.09k|        // Step 1 of module allocation algorithm, according to Wasm 2.0 spec.
  257|  2.09k|
  258|  2.09k|        let types = module.types
  259|  2.09k|        var importedFunctions: [InternalFunction] = []
  260|  2.09k|        var importedTables: [InternalTable] = []
  261|  2.09k|        var importedMemories: [InternalMemory] = []
  262|  2.09k|        var importedGlobals: [InternalGlobal] = []
  263|  2.09k|
  264|  2.09k|        // External values imported in this module should be included in corresponding index spaces before definitions
  265|  2.09k|        // local to to the module are added.
  266|  2.09k|        for importEntry in module.imports {
  267|    602|            guard let (external, allocator) = imports.lookup(module: importEntry.module, name: importEntry.name) else {
  268|      0|                throw ImportError(.missing(moduleName: importEntry.module, externalName: importEntry.name))
  269|    602|            }
  270|    602|            guard allocator === self else {
  271|      0|                throw ImportError(.importedEntityFromDifferentStore(importEntry))
  272|    602|            }
  273|    602|
  274|    602|            switch (importEntry.descriptor, external) {
  275|    602|            case let (.function(typeIndex), .function(externalFunc)):
  276|     23|                let type = externalFunc.type
  277|     23|                guard typeIndex < module.types.count else {
  278|      0|                    throw ValidationError(.indexOutOfBounds("type", typeIndex, max: module.types.count))
  279|     23|                }
  280|     23|                let expected = module.types[Int(typeIndex)]
  281|     23|                guard engine.internType(expected) == type else {
  282|      0|                    let actual = engine.resolveType(type)
  283|      0|                    throw ImportError(.incompatibleFunctionType(importEntry, actual: actual, expected: expected))
  284|     23|                }
  285|     23|                importedFunctions.append(externalFunc)
  286|    602|
  287|    602|            case let (.table(tableType), .table(table)):
  288|     13|                if let max = table.limits.max, max < tableType.limits.min {
  289|      0|                    throw ImportError(.incompatibleTableType(importEntry, actual: tableType, expected: table.tableType))
  290|     13|                }
  291|     13|                importedTables.append(table)
  292|    602|
  293|    602|            case let (.memory(memoryType), .memory(memory)):
  294|    546|                if let max = memory.limit.max, max < memoryType.min {
  295|      0|                    throw ImportError(.incompatibleMemoryType(importEntry, actual: memoryType, expected: memory.limit))
  296|    546|                }
  297|    546|                importedMemories.append(memory)
  298|    602|
  299|    602|            case let (.global(globalType), .global(global)):
  300|     17|                guard globalType == global.globalType else {
  301|      2|                    throw ImportError(.incompatibleGlobalType(importEntry, actual: global.globalType, expected: globalType))
  302|     15|                }
  303|     15|                importedGlobals.append(global)
  304|    602|
  305|    602|            default:
  306|      3|                throw ImportError(.incompatibleType(importEntry, entity: external))
  307|    602|            }
  308|  2.08k|        }
  309|  2.08k|
  310|  2.08k|        func allocateEntities<EntityHandle, Internals: Collection>(
  311|  2.08k|            imports: [EntityHandle],
  312|  2.08k|            internals: Internals, allocateHandle: (Internals.Element, Int) throws -> EntityHandle
  313|  2.08k|        ) rethrows -> ImmutableArray<EntityHandle> {
  314|  2.08k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  2.08k|                for (index, importedEntity) in imports.enumerated() {
  316|  2.08k|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  2.08k|                }
  318|  2.08k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  2.08k|                    let index = imports.count + internalIndex
  320|  2.08k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  2.08k|                    buffer.initializeElement(at: index, to: allocated)
  322|  2.08k|                }
  323|  2.08k|            }
  324|  2.08k|        }
  325|  2.08k|
  326|  2.08k|        // Uninitialized instance
  327|  2.08k|        let instancePointer = instances.allocate()
  328|  2.08k|        var instanceInitialized = false
  329|  2.08k|        defer {
  330|  2.08k|            // If the instance is not initialized due to an exception, initialize it with an empty instance
  331|  2.08k|            // to allow bump deallocation by the bump allocator.
  332|  2.08k|            // This is not optimal as it leaves an empty instance without deallocating the space but
  333|  2.08k|            // good at code simplicity.
  334|  2.08k|            if !instanceInitialized {
  335|  2.08k|                instancePointer.initialize(to: .empty)
  336|  2.08k|            }
  337|  2.08k|        }
  338|  2.08k|        let instanceHandle = InternalInstance(unsafe: instancePointer)
  339|  2.08k|
  340|  2.08k|        // Step 2.
  341|  2.08k|        let functions = allocateEntities(
  342|  2.08k|            imports: importedFunctions,
  343|  2.08k|            internals: module.functions,
  344|  2.08k|            allocateHandle: { f, index in
  345|  2.08k|                allocate(function: f, index: FunctionIndex(index), instance: instanceHandle, engine: engine)
  346|  2.08k|            }
  347|  2.08k|        )
  348|  2.08k|
  349|  2.08k|        // Step 3.
  350|  2.08k|        let tables = try allocateEntities(
  351|  2.08k|            imports: importedTables,
  352|  2.08k|            internals: module.internalTables,
  353|  2.08k|            allocateHandle: { t, _ in try allocate(tableType: t, resourceLimiter: resourceLimiter) }
  354|  2.08k|        )
  355|  2.08k|
  356|  2.08k|        // Step 4.
  357|  2.08k|        let memories = try allocateEntities(
  358|  2.08k|            imports: importedMemories,
  359|  2.08k|            internals: module.internalMemories,
  360|  2.08k|            allocateHandle: { m, _ in try allocate(memoryType: m, resourceLimiter: resourceLimiter) }
  361|  2.08k|        )
  362|  2.08k|
  363|  2.08k|        var functionRefs: Set<InternalFunction> = []
  364|  2.08k|        // Step 5.
  365|  2.08k|        let constEvalContext = ConstEvaluationContext(
  366|  2.08k|            functions: functions,
  367|  2.08k|            globals: importedGlobals.map(\.value),
  368|  2.08k|            onFunctionReferenced: { function in
  369|  2.08k|                functionRefs.insert(function)
  370|  2.08k|            }
  371|  2.08k|        )
  372|  2.08k|
  373|  2.08k|        let globals = try allocateEntities(
  374|  2.08k|            imports: importedGlobals,
  375|  2.08k|            internals: module.globals,
  376|  2.08k|            allocateHandle: { global, _ in
  377|  2.08k|                let initialValue = try global.initializer.evaluate(
  378|  2.08k|                    context: constEvalContext, expectedType: global.type.valueType
  379|  2.08k|                )
  380|  2.08k|                return try allocate(globalType: global.type, initialValue: initialValue)
  381|  2.08k|            }
  382|  2.08k|        )
  383|  2.02k|
  384|  2.02k|        // Step 6.
  385|  2.02k|        let elements = try ImmutableArray<InternalElementSegment>(allocator: arrayAllocator, count: module.elements.count) { buffer in
  386|  2.02k|            for (index, element) in module.elements.enumerated() {
  387|  2.02k|                // TODO: Avoid evaluating element expr twice in `Module.instantiate` and here.
  388|  2.02k|                var references = try element.evaluateInits(context: constEvalContext)
  389|  2.02k|                switch element.mode {
  390|  2.02k|                case .active, .declarative:
  391|  2.02k|                    // active & declarative segments are unavailable at runtime
  392|  2.02k|                    references = []
  393|  2.02k|                case .passive: break
  394|  2.02k|                }
  395|  2.02k|                let handle = allocate(elementType: element.type, references: references)
  396|  2.02k|                buffer.initializeElement(at: index, to: handle)
  397|  2.02k|            }
  398|  2.02k|        }
  399|  2.01k|
  400|  2.01k|        // Step 13.
  401|  2.01k|        let dataSegments = ImmutableArray<InternalDataSegment>(allocator: arrayAllocator, count: module.data.count) { buffer in
  402|  2.01k|            for (index, datum) in module.data.enumerated() {
  403|  2.01k|                let segment: InternalDataSegment
  404|  2.01k|                switch datum {
  405|  2.01k|                case let .passive(bytes):
  406|  2.01k|                    segment = allocate(bytes: bytes)
  407|  2.01k|                case .active:
  408|  2.01k|                    // Active segments are copied into memories while instantiation
  409|  2.01k|                    // They are semantically dropped after instantiation, so we don't
  410|  2.01k|                    // need them at runtime
  411|  2.01k|                    segment = allocate(bytes: [])
  412|  2.01k|                }
  413|  2.01k|                buffer.initializeElement(at: index, to: segment)
  414|  2.01k|            }
  415|  2.01k|        }
  416|  2.01k|
  417|  2.01k|        func createExportValue(_ export: WasmParser.Export) throws -> InternalExternalValue {
  418|  2.01k|            switch export.descriptor {
  419|  2.01k|            case let .function(index):
  420|  2.01k|                let handle = try functions[validating: Int(index)]
  421|  2.01k|                return .function(handle)
  422|  2.01k|            case let .table(index):
  423|  2.01k|                let handle = try tables[validating: Int(index)]
  424|  2.01k|                return .table(handle)
  425|  2.01k|            case let .memory(index):
  426|  2.01k|                let handle = try memories[validating: Int(index)]
  427|  2.01k|                return .memory(handle)
  428|  2.01k|            case let .global(index):
  429|  2.01k|                let handle = try globals[validating: Int(index)]
  430|  2.01k|                return .global(handle)
  431|  2.01k|            }
  432|  2.01k|        }
  433|  2.01k|
  434|  2.01k|        let exports: [String: InternalExternalValue] = try module.exports.reduce(into: [:]) { result, export in
  435|  2.01k|            guard result[export.name] == nil else {
  436|  2.01k|                throw ValidationError(.duplicateExportName(name: export.name))
  437|  2.01k|            }
  438|  2.01k|            result[export.name] = try createExportValue(export)
  439|  2.01k|        }
  440|  1.99k|
  441|  1.99k|        // Steps 20-21.
  442|  1.99k|        let instanceEntity = InstanceEntity(
  443|  1.99k|            types: types,
  444|  1.99k|            functions: functions,
  445|  1.99k|            tables: tables,
  446|  1.99k|            memories: memories,
  447|  1.99k|            globals: globals,
  448|  1.99k|            elementSegments: elements,
  449|  1.99k|            dataSegments: dataSegments,
  450|  1.99k|            exports: exports,
  451|  1.99k|            functionRefs: functionRefs,
  452|  1.99k|            features: module.features,
  453|  1.99k|            dataCount: module.dataCount
  454|  1.99k|        )
  455|  1.99k|        instancePointer.initialize(to: instanceEntity)
  456|  1.99k|        instanceInitialized = true
  457|  1.99k|        return instanceHandle
  458|  2.09k|    }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0E8EntitiesL_AH9internals0eL0AA14ImmutableArrayVyxGSayxG_q_x7ElementQy__SitKXEtKSlR_r0_lF:
  313|  8.34k|        ) rethrows -> ImmutableArray<EntityHandle> {
  314|  8.34k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  8.34k|                for (index, importedEntity) in imports.enumerated() {
  316|  8.34k|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  8.34k|                }
  318|  8.34k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  8.34k|                    let index = imports.count + internalIndex
  320|  8.34k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  8.34k|                    buffer.initializeElement(at: index, to: allocated)
  322|  8.34k|                }
  323|  8.34k|            }
  324|  8.34k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0E8EntitiesL_AH9internals0eL0AA14ImmutableArrayVyxGSayxG_q_x7ElementQy__SitKXEtKSlR_r0_lFySryxGKXEfU_:
  314|  8.34k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  8.34k|                for (index, importedEntity) in imports.enumerated() {
  316|    595|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  8.34k|                }
  318|  19.0k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  19.0k|                    let index = imports.count + internalIndex
  320|  19.0k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  18.9k|                    buffer.initializeElement(at: index, to: allocated)
  322|  18.9k|                }
  323|  8.28k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAA16InternalFunctionVAA05GuestS0V_SitXEfU_:
  344|  8.94k|            allocateHandle: { f, index in
  345|  8.94k|                allocate(function: f, index: FunctionIndex(index), instance: instanceHandle, engine: engine)
  346|  8.94k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA05TableK0VG0A6Parser0R4TypeV_SitKXEfU0_:
  353|    294|            allocateHandle: { t, _ in try allocate(tableType: t, resourceLimiter: resourceLimiter) }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA06MemoryK0VG0A6Parser6LimitsV_SitKXEfU1_:
  360|    310|            allocateHandle: { m, _ in try allocate(memoryType: m, resourceLimiter: resourceLimiter) }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0A5Types5ValueOAJyAA06GlobalK0VGcfu_:
  367|     13|            globals: importedGlobals.map(\.value),
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFyAA16InternalFunctionVcfU2_:
  368|      2|            onFunctionReferenced: { function in
  369|      2|                functionRefs.insert(function)
  370|      2|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA06GlobalK0VG0A6Parser0R0V_SitKXEfU3_:
  376|  9.46k|            allocateHandle: { global, _ in
  377|  9.46k|                let initialValue = try global.initializer.evaluate(
  378|  9.46k|                    context: constEvalContext, expectedType: global.type.valueType
  379|  9.46k|                )
  380|  9.40k|                return try allocate(globalType: global.type, initialValue: initialValue)
  381|  9.46k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySryAJyAA014ElementSegmentK0VGGKXEfU4_:
  385|  2.02k|        let elements = try ImmutableArray<InternalElementSegment>(allocator: arrayAllocator, count: module.elements.count) { buffer in
  386|  2.02k|            for (index, element) in module.elements.enumerated() {
  387|     47|                // TODO: Avoid evaluating element expr twice in `Module.instantiate` and here.
  388|     47|                var references = try element.evaluateInits(context: constEvalContext)
  389|     34|                switch element.mode {
  390|     34|                case .active, .declarative:
  391|     31|                    // active & declarative segments are unavailable at runtime
  392|     31|                    references = []
  393|     34|                case .passive: break
  394|     34|                }
  395|     34|                let handle = allocate(elementType: element.type, references: references)
  396|     34|                buffer.initializeElement(at: index, to: handle)
  397|  2.01k|            }
  398|  2.01k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySryAJyAA011DataSegmentK0VGGXEfU5_:
  401|  2.01k|        let dataSegments = ImmutableArray<InternalDataSegment>(allocator: arrayAllocator, count: module.data.count) { buffer in
  402|  2.01k|            for (index, datum) in module.data.enumerated() {
  403|     68|                let segment: InternalDataSegment
  404|     68|                switch datum {
  405|     68|                case let .passive(bytes):
  406|      2|                    segment = allocate(bytes: bytes)
  407|     68|                case .active:
  408|     66|                    // Active segments are copied into memories while instantiation
  409|     66|                    // They are semantically dropped after instantiation, so we don't
  410|     66|                    // need them at runtime
  411|     66|                    segment = allocate(bytes: [])
  412|     68|                }
  413|     68|                buffer.initializeElement(at: index, to: segment)
  414|  2.01k|            }
  415|  2.01k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF17createExportValueL_yAA016InternalExternalT0O0A6Parser0S0VKF:
  417|  1.95k|        func createExportValue(_ export: WasmParser.Export) throws -> InternalExternalValue {
  418|  1.95k|            switch export.descriptor {
  419|  1.95k|            case let .function(index):
  420|     54|                let handle = try functions[validating: Int(index)]
  421|     51|                return .function(handle)
  422|  1.95k|            case let .table(index):
  423|    220|                let handle = try tables[validating: Int(index)]
  424|    217|                return .table(handle)
  425|  1.95k|            case let .memory(index):
  426|    571|                let handle = try memories[validating: Int(index)]
  427|    564|                return .memory(handle)
  428|  1.95k|            case let .global(index):
  429|  1.10k|                let handle = try globals[validating: Int(index)]
  430|  1.10k|                return .global(handle)
  431|  1.95k|            }
  432|  1.95k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySDySSAA21InternalExternalValueOGz_0A6Parser6ExportVtKXEfU6_:
  434|  1.95k|        let exports: [String: InternalExternalValue] = try module.exports.reduce(into: [:]) { result, export in
  435|  1.95k|            guard result[export.name] == nil else {
  436|      3|                throw ValidationError(.duplicateExportName(name: export.name))
  437|  1.95k|            }
  438|  1.95k|            result[export.name] = try createExportValue(export)
  439|  1.93k|        }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL8function5index8instance6engineAA16InternalFunctionVAA05GuestQ0V_s6UInt32VAA12EntityHandleVyAA08InstanceT0VGAA6EngineCtF:
  467|  8.94k|    ) -> InternalFunction {
  468|  8.94k|        let code = InternalUncompiledCode(unsafe: codes.allocate(initializing: function.code))
  469|  8.94k|        let pointer = functions.allocate(
  470|  8.94k|            initializing: WasmFunctionEntity(
  471|  8.94k|                index: index, type: engine.internType(function.type),
  472|  8.94k|                code: code,
  473|  8.94k|                instance: instance
  474|  8.94k|            )
  475|  8.94k|        )
  476|  8.94k|        return InternalFunction.wasm(EntityHandle(unsafe: pointer))
  477|  8.94k|    }
$s7WasmKit14StoreAllocatorC8allocate4type14implementation6engineAA16InternalFunctionV0A5Types0J4TypeV_SayAJ5ValueOGAA6CallerV_AOtKcAA6EngineCtF:
  483|     23|    ) -> InternalFunction {
  484|     23|        let pointer = hostFunctions.allocate(
  485|     23|            initializing: HostFunctionEntity(
  486|     23|                type: engine.internType(type), implementation: implementation
  487|     23|            )
  488|     23|        )
  489|     23|        return InternalFunction.host(EntityHandle(unsafe: pointer))
  490|     23|    }
$s7WasmKit14StoreAllocatorC8allocate9tableType15resourceLimiterAA12EntityHandleVyAA05TableJ0VG0A6Parser0lG0V_AA08ResourceI0_ptKF:
  494|    326|    func allocate(tableType: TableType, resourceLimiter: any ResourceLimiter) throws -> InternalTable {
  495|    326|        let pointer = try tables.allocate(initializing: TableEntity(tableType, resourceLimiter: resourceLimiter))
  496|    326|        return InternalTable(unsafe: pointer)
  497|    326|    }
$s7WasmKit14StoreAllocatorC8allocate10memoryType15resourceLimiterAA12EntityHandleVyAA06MemoryJ0VG0A6Parser6LimitsV_AA08ResourceI0_ptKF:
  501|    881|    func allocate(memoryType: MemoryType, resourceLimiter: any ResourceLimiter) throws -> InternalMemory {
  502|    881|        let pointer = try memories.allocate(initializing: MemoryEntity(memoryType, resourceLimiter: resourceLimiter))
  503|    871|        return InternalMemory(unsafe: pointer)
  504|    881|    }
$s7WasmKit14StoreAllocatorC8allocate10globalType12initialValueAA12EntityHandleVyAA06GlobalJ0VG0A6Parser0lG0V_0A5Types0I0OtKF:
  508|  9.43k|    func allocate(globalType: GlobalType, initialValue: Value) throws -> InternalGlobal {
  509|  9.43k|        let pointer = try globals.allocate(initializing: GlobalEntity(globalType: globalType, initialValue: initialValue))
  510|  9.42k|        return InternalGlobal(unsafe: pointer)
  511|  9.43k|    }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL11elementType10referencesAA12EntityHandleVyAA014ElementSegmentO0VG0A5Types09ReferenceM0O_SayAM0T0OGtF:
  515|     34|    private func allocate(elementType: ReferenceType, references: [Reference]) -> InternalElementSegment {
  516|     34|        let pointer = elements.allocate(initializing: ElementSegmentEntity(type: elementType, references: references))
  517|     34|        return InternalElementSegment(unsafe: pointer)
  518|     34|    }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL5bytesAA12EntityHandleVyAA011DataSegmentM0VGs10ArraySliceVys5UInt8VG_tF:
  522|     68|    private func allocate(bytes: ArraySlice<UInt8>) -> InternalDataSegment {
  523|     68|        let pointer = datas.allocate(initializing: DataSegmentEntity(data: bytes))
  524|     68|        return EntityHandle(unsafe: pointer)
  525|     68|    }

$s7WasmKit12UntypedValueV3i32yACs6UInt32VFZ:
   32|  16.7k|    static func i32(_ value: UInt32) -> UntypedValue {
   33|  16.7k|        return UntypedValue(storage: UInt64(value))
   34|  16.7k|    }
$s7WasmKit12UntypedValueV3i64yACs6UInt64VFZ:
   35|  12.6k|    static func i64(_ value: UInt64) -> UntypedValue {
   36|  12.6k|        return UntypedValue(storage: value)
   37|  12.6k|    }
$s7WasmKit12UntypedValueV6rawF32yACs6UInt32VFZ:
   38|  12.5k|    static func rawF32(_ value: UInt32) -> UntypedValue {
   39|  12.5k|        return UntypedValue(storage: UInt64(value))
   40|  12.5k|    }
$s7WasmKit12UntypedValueV6rawF64yACs6UInt64VFZ:
   41|  7.92k|    static func rawF64(_ value: UInt64) -> UntypedValue {
   42|  7.92k|        return UntypedValue(storage: value)
   43|  7.92k|    }
$s7WasmKit12UntypedValueV7storageACs6UInt64V_tcfC:
   58|  49.8k|    init(storage: UInt64) {
   59|  49.8k|        self.storage = storage
   60|  49.8k|    }
$s7WasmKit12UntypedValueVyAC0A5Types0D0OcfC:
   63|  49.8k|    init(_ value: Value) {
   64|  49.8k|        func encodeOptionalInt(_ value: Int?) -> UInt64 {
   65|  49.8k|            guard let value = value else { return Self.isNullMaskPattern }
   66|  49.8k|            let unsigned = UInt64(bitPattern: Int64(value))
   67|  49.8k|            // Check if the value does not exceed the 63-bits limit.
   68|  49.8k|            precondition(unsigned & Self.isNullMaskPattern == 0)
   69|  49.8k|            return unsigned
   70|  49.8k|        }
   71|  49.8k|        switch value {
   72|  49.8k|        case .i32(let value): self = .i32(value)
   73|  49.8k|        case .i64(let value): self = .i64(value)
   74|  49.8k|        case .f32(let value): self = .rawF32(value)
   75|  49.8k|        case .f64(let value): self = .rawF64(value)
   76|  49.8k|        case .ref(.function(let value)), .ref(.extern(let value)):
   77|      0|            storage = encodeOptionalInt(value)
   78|  49.8k|        }
   79|  49.8k|    }
$s7WasmKit12UntypedValueV3i32s6UInt32Vvg:
   83|     26|    var i32: UInt32 {
   84|     26|        return UInt32(truncatingIfNeeded: storage & 0x0000_0000_ffff_ffff)
   85|     26|    }
$s7WasmKit12UntypedValueV4cast2to0A5Types0D0OAF0D4TypeO_tF:
  139|     26|    func cast(to type: ValueType) -> Value {
  140|     26|        switch type {
  141|     26|        case .i32: return .i32(i32)
  142|     26|        case .i64: return .i64(i64)
  143|     26|        case .f32: return .f32(rawF32)
  144|     26|        case .f64: return .f64(rawF64)
  145|     26|        case .ref(let referenceType):
  146|      0|            return .ref(asReference(referenceType))
  147|     26|        }
  148|     26|    }

$s9WasmTypes5ValueO0A3KitE18maybeAddressOffsetys6UInt64VSgSbF:
   10|     38|    func maybeAddressOffset(_ isMemory64: Bool) -> UInt64? {
   11|     38|        switch (isMemory64, self) {
   12|     38|        case (true, .i64(let value)): return value
   13|     38|        case (false, .i32(let value)): return UInt64(value)
   14|     38|        default: return nil
   15|     38|        }
   16|     38|    }
$s9WasmTypes9ValueTypeO0A3KitE07addressD010isMemory64ACSb_tFZ:
   94|    393|    static func addressType(isMemory64: Bool) -> ValueType {
   95|    393|        return isMemory64 ? .i64 : .i32
   96|    393|    }

$s7WasmKit7ImportsV11definitions33_6D96F85BFFF5D538ECAADDF4180F550ALLSDySSSDySSAA13ExternalValueOGGvpfi:
   26|  2.12k|    private var definitions: [String: [String: ExternalValue]] = [:]
$s7WasmKit7ImportsVACycfC:
   29|  2.12k|    public init() {
   30|  2.12k|    }
$s7WasmKit7ImportsV6define6module4name_ySS_SSxtAA24ExternalValueConvertibleRzlF:
   33|    639|    public mutating func define<Extern: ExternalValueConvertible>(module: String, name: String, _ value: Extern) {
   34|    639|        definitions[module, default: [:]][name] = value.externalValue
   35|    639|    }
$s7WasmKit7ImportsV6define6module4name_ySS_SSxtAA24ExternalValueConvertibleRzlFSDySSAA0gH0OGyXEfu_:
   34|    612|        definitions[module, default: [:]][name] = value.externalValue
$s7WasmKit7ImportsV6lookup6module4nameAA21InternalExternalValueO_AA14StoreAllocatorCtSgSS_SStF:
   50|    602|    func lookup(module: String, name: String) -> (InternalExternalValue, StoreAllocator)? {
   51|    602|        definitions[module]?[name]?.internalize()
   52|    602|    }
$s7WasmKit13ExternalValueO08externalD0ACvg:
   61|    639|    public var externalValue: ExternalValue { self }
$s7WasmKit6MemoryV13externalValueAA08ExternalE0Ovg:
   65|    561|    public var externalValue: ExternalValue { .memory(self) }
$s7WasmKit5TableV13externalValueAA08ExternalE0Ovg:
   69|     32|    public var externalValue: ExternalValue { .table(self) }
$s7WasmKit6GlobalV13externalValueAA08ExternalE0Ovg:
   73|     23|    public var externalValue: ExternalValue { .global(self) }
$s7WasmKit8FunctionV13externalValueAA08ExternalE0Ovg:
   77|     23|    public var externalValue: ExternalValue { .function(self) }

$s7WasmKit13ModuleImportsV5build4from19functionTypeIndices11globalTypes06memoryK005tableK0ACSay0A6Parser6ImportVG_Says6UInt32VGzSayAJ06GlobalH0VGzSayAJ6LimitsVGzSayAJ05TableH0VGztFZ:
   15|  2.12k|    ) -> ModuleImports {
   16|  2.12k|        var numberOfFunctions: Int = 0
   17|  2.12k|        var numberOfGlobals: Int = 0
   18|  2.12k|        var numberOfMemories: Int = 0
   19|  2.12k|        var numberOfTables: Int = 0
   20|  2.12k|        for item in imports {
   21|    672|            switch item.descriptor {
   22|    672|            case .function(let typeIndex):
   23|     29|                numberOfFunctions += 1
   24|     29|                functionTypeIndices.append(typeIndex)
   25|    672|            case .table(let tableType):
   26|     32|                numberOfTables += 1
   27|     32|                tableTypes.append(tableType)
   28|    672|            case .memory(let memoryType):
   29|    574|                numberOfMemories += 1
   30|    574|                memoryTypes.append(memoryType)
   31|    672|            case .global(let globalType):
   32|     37|                numberOfGlobals += 1
   33|     37|                globalTypes.append(globalType)
   34|    672|            }
   35|  2.12k|        }
   36|  2.12k|        return ModuleImports(
   37|  2.12k|            numberOfFunctions: numberOfFunctions,
   38|  2.12k|            numberOfGlobals: numberOfGlobals,
   39|  2.12k|            numberOfMemories: numberOfMemories,
   40|  2.12k|            numberOfTables: numberOfTables
   41|  2.12k|        )
   42|  2.12k|    }
$s7WasmKit6ModuleV5types9functions8elements4data5start7imports7exports7globals8memories6tables14customSections8features0G5CountACSay0A5Types12FunctionTypeVG_SayAA05GuestS0VGSay0A6Parser14ElementSegmentVGSayAX04DataX0OGs6UInt32VSgSayAX6ImportVGSayAX6ExportVGSayAX6GlobalVGSayAX6LimitsVGSayAX05TableT0VGSayAX13CustomSectionVGAX0A10FeatureSetVA5_tcfC:
   81|  2.12k|    ) {
   82|  2.12k|        self.functions = functions
   83|  2.12k|        self.elements = elements
   84|  2.12k|        self.data = data
   85|  2.12k|        self.start = start
   86|  2.12k|        self.imports = imports
   87|  2.12k|        self.exports = exports
   88|  2.12k|        self.globals = globals
   89|  2.12k|        self.customSections = customSections
   90|  2.12k|        self.features = features
   91|  2.12k|        self.dataCount = dataCount
   92|  2.12k|
   93|  2.12k|        var importedFunctionTypes: [TypeIndex] = []
   94|  2.12k|        var globalTypes: [GlobalType] = []
   95|  2.12k|        var memoryTypes: [MemoryType] = []
   96|  2.12k|        var tableTypes: [TableType] = []
   97|  2.12k|
   98|  2.12k|        self.moduleImports = ModuleImports.build(
   99|  2.12k|            from: imports,
  100|  2.12k|            functionTypeIndices: &importedFunctionTypes,
  101|  2.12k|            globalTypes: &globalTypes,
  102|  2.12k|            memoryTypes: &memoryTypes,
  103|  2.12k|            tableTypes: &tableTypes
  104|  2.12k|        )
  105|  2.12k|        self.types = types
  106|  2.12k|        self.importedFunctionTypes = importedFunctionTypes
  107|  2.12k|        self.memoryTypes = memoryTypes + memories
  108|  2.12k|        self.tableTypes = tableTypes + tables
  109|  2.12k|    }
$s7WasmKit6ModuleV11resolveType_11typeSection0A5Types08FunctionE0Vs6UInt32V_SayAHGtKFZ:
  111|  9.06k|    static func resolveType(_ index: TypeIndex, typeSection: [FunctionType]) throws -> FunctionType {
  112|  9.06k|        guard Int(index) < typeSection.count else {
  113|      7|            throw TranslationError("Type index \(index) is out of range")
  114|  9.06k|        }
  115|  9.06k|        return typeSection[Int(index)]
  116|  9.06k|    }
$s7WasmKit6ModuleV19resolveFunctionTypey0A5Types0eF0Vs6UInt32VKF:
  118|      2|    internal func resolveFunctionType(_ index: FunctionIndex) throws -> FunctionType {
  119|      2|        guard Int(index) < functions.count + self.moduleImports.numberOfFunctions else {
  120|      2|            throw TranslationError("Function index \(index) is out of range")
  121|      2|        }
  122|      0|        if Int(index) < self.moduleImports.numberOfFunctions {
  123|      0|            return try Self.resolveType(
  124|      0|                importedFunctionTypes[Int(index)],
  125|      0|                typeSection: types
  126|      0|            )
  127|      0|        }
  128|      0|        return functions[Int(index) - self.moduleImports.numberOfFunctions].type
  129|      2|    }
$s7WasmKit6ModuleV11instantiate5store7importsAA8InstanceVAA5StoreC_AA7ImportsVtKF:
  137|  2.10k|    public func instantiate(store: Store, imports: Imports = [:]) throws -> Instance {
  138|  2.10k|        Instance(handle: try self.instantiateHandle(store: store, imports: imports), store: store)
  139|    108|    }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKF:
  143|  2.10k|    private func instantiateHandle(store: Store, imports: Imports) throws -> InternalInstance {
  144|  2.10k|        try ModuleValidator(module: self).validate()
  145|  2.09k|
  146|  2.09k|        // Steps 5-8.
  147|  2.09k|
  148|  2.09k|        // Step 9.
  149|  2.09k|        // Process `elem.init` evaluation during allocation
  150|  2.09k|
  151|  2.09k|        // Step 11.
  152|  2.09k|        let instance = try store.allocator.allocate(
  153|  2.09k|            module: self, engine: store.engine,
  154|  2.09k|            resourceLimiter: store.resourceLimiter,
  155|  2.09k|            imports: imports
  156|  2.09k|        )
  157|  1.99k|
  158|  1.99k|        if let nameSection = customSections.first(where: { $0.name == "name" }) {
  159|      0|            // FIXME?: Just ignore parsing error of name section for now.
  160|      0|            // Should emit warning instead of just discarding it?
  161|      0|            try? store.nameRegistry.register(instance: instance, nameSection: nameSection)
  162|      0|        }
  163|  1.99k|
  164|  1.99k|        let constEvalContext = ConstEvaluationContext(instance: instance, moduleImports: moduleImports)
  165|  1.99k|        // Step 12-13.
  166|  1.99k|
  167|  1.99k|        // Steps 14-15.
  168|  1.99k|        for element in elements {
  169|     13|            guard case let .active(tableIndex, offset) = element.mode else { continue }
  170|     10|            let table = try instance.tables[validating: Int(tableIndex)]
  171|      0|            let offsetValue = try offset.evaluate(
  172|      0|                context: constEvalContext,
  173|      0|                expectedType: .addressType(isMemory64: table.limits.isMemory64)
  174|      0|            )
  175|      0|            try table.withValue { table in
  176|      0|                guard let offset = offsetValue.maybeAddressOffset(table.limits.isMemory64) else {
  177|      0|                    throw ValidationError(
  178|      0|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: table.limits.isMemory64), got: offsetValue)
  179|      0|                    )
  180|      0|                }
  181|      0|                guard table.tableType.elementType == element.type else {
  182|      0|                    throw ValidationError(
  183|      0|                        .elementSegmentTypeMismatch(
  184|      0|                            elementType: element.type,
  185|      0|                            tableElementType: table.tableType.elementType
  186|      0|                        )
  187|      0|                    )
  188|      0|                }
  189|      0|                let references = try element.evaluateInits(context: constEvalContext)
  190|      0|                try table.initialize(
  191|      0|                    references, from: 0, to: Int(offset), count: references.count
  192|      0|                )
  193|      0|            }
  194|  1.98k|        }
  195|  1.98k|
  196|  1.98k|        // Step 16.
  197|  1.98k|        for case let .active(data) in data {
  198|     48|            let memory = try instance.memories[validating: Int(data.index)]
  199|     40|            let offsetValue = try data.offset.evaluate(
  200|     40|                context: constEvalContext,
  201|     40|                expectedType: .addressType(isMemory64: memory.limit.isMemory64)
  202|     40|            )
  203|     38|            try memory.withValue { memory in
  204|     38|                guard let offset = offsetValue.maybeAddressOffset(memory.limit.isMemory64) else {
  205|     38|                    throw ValidationError(
  206|     38|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: memory.limit.isMemory64), got: offsetValue)
  207|     38|                    )
  208|     38|                }
  209|     38|                try memory.write(offset: Int(offset), bytes: data.initializer)
  210|     38|            }
  211|  1.97k|        }
  212|  1.97k|
  213|  1.97k|        // Step 17.
  214|  1.97k|        if let startIndex = start {
  215|      0|            let startFunction = try instance.functions[validating: Int(startIndex)]
  216|      0|            _ = try startFunction.invoke([], store: store)
  217|  1.97k|        }
  218|  1.97k|
  219|  1.97k|        // Compile all functions eagerly if the engine is in eager compilation mode
  220|  1.97k|        if store.engine.configuration.compilationMode == .eager {
  221|  1.97k|            try instance.withValue {
  222|  1.97k|                try $0.compileAllFunctions(store: store)
  223|  1.97k|            }
  224|    108|        }
  225|    108|
  226|    108|        return instance
  227|  2.10k|    }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFSb0A6Parser13CustomSectionVXEfU_:
  158|    364|        if let nameSection = customSections.first(where: { $0.name == "name" }) {
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFyAA06MemoryR0VzKXEfU1_:
  203|     38|            try memory.withValue { memory in
  204|     38|                guard let offset = offsetValue.maybeAddressOffset(memory.limit.isMemory64) else {
  205|      0|                    throw ValidationError(
  206|      0|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: memory.limit.isMemory64), got: offsetValue)
  207|      0|                    )
  208|     38|                }
  209|     38|                try memory.write(offset: Int(offset), bytes: data.initializer)
  210|     35|            }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFyAKzKXEfU2_:
  221|  1.97k|            try instance.withValue {
  222|  1.97k|                try $0.compileAllFunctions(store: store)
  223|    108|            }
$s7WasmKit6ModuleV16internalMemoriess10ArraySliceVy0A6Parser6LimitsVGvg:
  235|  2.08k|    var internalMemories: ArraySlice<MemoryType> {
  236|  2.08k|        return memoryTypes[moduleImports.numberOfMemories...]
  237|  2.08k|    }
$s7WasmKit6ModuleV14internalTabless10ArraySliceVy0A6Parser9TableTypeVGvg:
  238|  2.08k|    var internalTables: ArraySlice<TableType> {
  239|  2.08k|        return tableTypes[moduleImports.numberOfTables...]
  240|  2.08k|    }

$s7WasmKit05parseA05bytes8featuresAA6ModuleVSays5UInt8VG_0A6Parser0A10FeatureSetVtKF:
   28|  7.38k|public func parseWasm(bytes: [UInt8], features: WasmFeatureSet = .default) throws -> Module {
   29|  7.38k|    let stream = StaticByteStream(bytes: bytes)
   30|  7.38k|    let module = try parseModule(stream: stream, features: features)
   31|  2.12k|    return module
   32|  7.38k|}
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlF:
   36|  7.38k|func parseModule<Stream: ByteStream>(stream: Stream, features: WasmFeatureSet = .default) throws -> Module {
   37|  7.38k|    var types: [FunctionType] = []
   38|  7.38k|    var typeIndices: [TypeIndex] = []
   39|  7.38k|    var codes: [Code] = []
   40|  7.38k|    var tables: [TableType] = []
   41|  7.38k|    var memories: [MemoryType] = []
   42|  7.38k|    var globals: [WasmParser.Global] = []
   43|  7.38k|    var elements: [ElementSegment] = []
   44|  7.38k|    var data: [DataSegment] = []
   45|  7.38k|    var start: FunctionIndex?
   46|  7.38k|    var imports: [Import] = []
   47|  7.38k|    var exports: [Export] = []
   48|  7.38k|    var customSections: [CustomSection] = []
   49|  7.38k|    var dataCount: UInt32?
   50|  7.38k|
   51|  7.38k|    var parser = WasmParser.Parser<Stream>(
   52|  7.38k|        stream: stream, features: features
   53|  7.38k|    )
   54|  7.38k|
   55|  27.0k|    while let payload = try parser.parseNext() {
   56|  27.0k|        switch payload {
   57|  27.0k|        case .header: break
   58|  27.0k|        case .customSection(let customSection):
   59|  3.34k|            customSections.append(customSection)
   60|  27.0k|        case .typeSection(let typeSection):
   61|  3.75k|            types = typeSection
   62|  27.0k|        case .importSection(let importSection):
   63|  2.55k|            imports = importSection
   64|  27.0k|        case .functionSection(let types):
   65|  2.50k|            typeIndices = types
   66|  27.0k|        case .tableSection(let tableSection):
   67|  1.08k|            tables = tableSection.map(\.type)
   68|  27.0k|        case .memorySection(let memorySection):
   69|    921|            memories = memorySection.map(\.type)
   70|  27.0k|        case .globalSection(let globalSection):
   71|  2.19k|            globals = globalSection
   72|  27.0k|        case .exportSection(let exportSection):
   73|  1.22k|            exports = exportSection
   74|  27.0k|        case .startSection(let functionIndex):
   75|     12|            start = functionIndex
   76|  27.0k|        case .elementSection(let elementSection):
   77|     33|            elements = elementSection
   78|  27.0k|        case .codeSection(let codeSection):
   79|  2.02k|            codes = codeSection
   80|  27.0k|        case .dataSection(let dataSection):
   81|     54|            data = dataSection
   82|  27.0k|        case .dataCount(let count):
   83|      5|            dataCount = count
   84|  27.0k|        }
   85|  27.0k|    }
   86|  2.13k|
   87|  2.13k|    guard typeIndices.count == codes.count else {
   88|      2|        throw ValidationError(
   89|      2|            .inconsistentFunctionAndCodeLength(
   90|      2|                functionCount: typeIndices.count,
   91|      2|                codeCount: codes.count
   92|      2|            ))
   93|  2.13k|    }
   94|  2.13k|
   95|  2.13k|    if let dataCount = dataCount, dataCount != UInt32(data.count) {
   96|      1|        throw ValidationError(
   97|      1|            .inconsistentDataCountAndDataSectionLength(
   98|      1|                dataCount: dataCount,
   99|      1|                dataSection: data.count
  100|      1|            ))
  101|  2.13k|    }
  102|  2.13k|
  103|  2.13k|    let functions = try codes.enumerated().map { index, code in
  104|  2.13k|        // SAFETY: The number of typeIndices is guaranteed to be the same as the number of codes
  105|  2.13k|        let funcTypeIndex = typeIndices[index]
  106|  2.13k|        let funcType = try Module.resolveType(funcTypeIndex, typeSection: types)
  107|  2.13k|        return GuestFunction(
  108|  2.13k|            type: funcType,
  109|  2.13k|            code: code
  110|  2.13k|        )
  111|  2.13k|    }
  112|  2.12k|
  113|  2.12k|    return Module(
  114|  2.12k|        types: types,
  115|  2.12k|        functions: functions,
  116|  2.12k|        elements: elements,
  117|  2.12k|        data: data,
  118|  2.12k|        start: start,
  119|  2.12k|        imports: imports,
  120|  2.12k|        exports: exports,
  121|  2.12k|        globals: globals,
  122|  2.12k|        memories: memories,
  123|  2.12k|        tables: tables,
  124|  2.12k|        customSections: customSections,
  125|  2.12k|        features: features,
  126|  2.12k|        dataCount: dataCount
  127|  2.12k|    )
  128|  7.38k|}
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAG9TableTypeVAG0L0Vcfu_:
   67|  1.07k|            tables = tableSection.map(\.type)
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAG6LimitsVAG6MemoryVcfu0_:
   69|    921|            memories = memorySection.map(\.type)
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAA13GuestFunctionVSi_AG4CodeVtKXEfU_:
  103|  9.06k|    let functions = try codes.enumerated().map { index, code in
  104|  9.06k|        // SAFETY: The number of typeIndices is guaranteed to be the same as the number of codes
  105|  9.06k|        let funcTypeIndex = typeIndices[index]
  106|  9.06k|        let funcType = try Module.resolveType(funcTypeIndex, typeSection: types)
  107|  9.06k|        return GuestFunction(
  108|  9.06k|            type: funcType,
  109|  9.06k|            code: code
  110|  9.06k|        )
  111|  9.06k|    }

$s7WasmKit13ISeqAllocatorC7buffers021_3C1F9FC595E9AC192A47I10B121D811E8LLSaySwGvpfi:
    6|  2.12k|    private var buffers: [UnsafeMutableRawBufferPointer] = []
$s7WasmKit13ISeqAllocatorC15allocateBrTable8capacitySryAA11InstructionO0fG7OperandV5EntryVGSi_tF:
    8|    917|    func allocateBrTable(capacity: Int) -> UnsafeMutableBufferPointer<Instruction.BrTableOperand.Entry> {
    9|    917|        assert(_isPOD(Instruction.BrTableOperand.Entry.self), "Instruction.BrTableOperand.Entry must be POD")
   10|    917|        let buffer = UnsafeMutableBufferPointer<Instruction.BrTableOperand.Entry>.allocate(capacity: capacity)
   11|    917|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   12|    917|        return buffer
   13|    917|    }
$s7WasmKit13ISeqAllocatorC15allocateBrTable8capacitySryAA11InstructionO0fG7OperandV5EntryVGSi_tFSbyXEfu_:
    9|    917|        assert(_isPOD(Instruction.BrTableOperand.Entry.self), "Instruction.BrTableOperand.Entry must be POD")
$s7WasmKit13ISeqAllocatorC17allocateConstantsySRyAA12UntypedValueVGSayAFGF:
   15|    878|    func allocateConstants(_ slots: [UntypedValue]) -> UnsafeBufferPointer<UntypedValue> {
   16|    878|        let buffer = UnsafeMutableBufferPointer<UntypedValue>.allocate(capacity: slots.count)
   17|    878|        _ = buffer.initialize(fromContentsOf: slots)
   18|    878|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   19|    878|        return UnsafeBufferPointer(buffer)
   20|    878|    }
$s7WasmKit13ISeqAllocatorC20allocateInstructions8capacitySrys6UInt64VGSi_tF:
   22|    878|    func allocateInstructions(capacity: Int) -> UnsafeMutableBufferPointer<UInt64> {
   23|    878|        assert(_isPOD(Instruction.self), "Instruction must be POD")
   24|    878|        let buffer = UnsafeMutableBufferPointer<UInt64>.allocate(capacity: capacity)
   25|    878|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   26|    878|        return buffer
   27|    878|    }
$s7WasmKit13ISeqAllocatorC20allocateInstructions8capacitySrys6UInt64VGSi_tFSbyXEfu_:
   23|    878|        assert(_isPOD(Instruction.self), "Instruction must be POD")
$s7WasmKit13ISeqAllocatorCfd:
   29|  2.12k|    deinit {
   30|  2.67k|        for buffer in buffers {
   31|  2.67k|            buffer.deallocate()
   32|  2.67k|        }
   33|  2.12k|    }
$s7WasmKit17TranslatorContextPAAE11addressType11memoryIndex0A5Types05ValueF0Os6UInt32V_tKF:
   53|     28|    func addressType(memoryIndex: MemoryIndex) throws -> ValueType {
   54|     28|        return ValueType.addressType(isMemory64: try isMemory64(memoryIndex: memoryIndex))
   55|     28|    }
$s7WasmKit17TranslatorContextPAAE11addressType10tableIndex0A5Types05ValueF0Os6UInt32V_tKF:
   56|    345|    func addressType(tableIndex: TableIndex) throws -> ValueType {
   57|    345|        return ValueType.addressType(isMemory64: try isMemory64(tableIndex: tableIndex))
   58|    345|    }
$s7WasmKit17TranslatorContextPAAE22validateElementSegmentyys6UInt32VKF:
   59|      4|    func validateElementSegment(_ index: ElementIndex) throws {
   60|      4|        _ = try elementType(index)
   61|      0|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE11resolveTypey0A5Types08FunctionG0Vs6UInt32VKF:
   65|    256|    func resolveType(_ index: TypeIndex) throws -> FunctionType {
   66|    256|        guard Int(index) < self.types.count else {
   67|      3|            throw ValidationError(.indexOutOfBounds("type", index, max: UInt32(self.types.count)))
   68|    253|        }
   69|    253|        return self.types[Int(index)]
   70|    256|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE16resolveBlockTypey0A5Types08FunctionH0V0A6Parser0gH0OKF:
   71|  17.5k|    func resolveBlockType(_ blockType: BlockType) throws -> FunctionType {
   72|  17.5k|        try FunctionType(blockType: blockType, typeSection: self.types)
   73|  17.5k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE12functionType_8interner0A5Types08FunctionG0Vs6UInt32V_AA8InternerCyAJGtKF:
   74|  3.20k|    func functionType(_ index: FunctionIndex, interner: Interner<FunctionType>) throws -> FunctionType {
   75|  3.20k|        return try interner.resolve(self.functions[validating: Int(index)].type)
   76|  3.20k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10globalTypey0A5Types05ValueG0Os6UInt32VKF:
   77|  46.2k|    func globalType(_ index: GlobalIndex) throws -> ValueType {
   78|  46.2k|        return try self.globals[validating: Int(index)].globalType.valueType
   79|  46.2k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10isMemory6411memoryIndexSbs6UInt32V_tKF:
   80|  13.7k|    func isMemory64(memoryIndex index: MemoryIndex) throws -> Bool {
   81|  13.7k|        return try self.memories[validating: Int(index)].limit.isMemory64
   82|  13.7k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10isMemory6410tableIndexSbs6UInt32V_tKF:
   83|    345|    func isMemory64(tableIndex index: TableIndex) throws -> Bool {
   84|    345|        return try self.tables[validating: Int(index)].limits.isMemory64
   85|    345|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9tableTypey0A6Parser05TableG0Vs6UInt32VKF:
   86|     89|    func tableType(_ index: TableIndex) throws -> TableType {
   87|     89|        return try self.tables[validating: Int(index)].tableType
   88|     89|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE11elementTypey0A5Types09ReferenceG0Os6UInt32VKF:
   89|      4|    func elementType(_ index: ElementIndex) throws -> ReferenceType {
   90|      4|        try self.elementSegments[validating: Int(index)].type
   91|      0|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE13resolveCalleeyAA16InternalFunctionVSgs6UInt32VF:
   93|  3.18k|    func resolveCallee(_ index: FunctionIndex) -> InternalFunction? {
   94|  3.18k|        return self.functions[Int(index)]
   95|  3.18k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE13resolveGlobalyACyAA0gC0VGSgs6UInt32VF:
   96|  46.1k|    func resolveGlobal(_ index: GlobalIndex) -> InternalGlobal? {
   97|  46.1k|        return self.globals[Int(index)]
   98|  46.1k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE06isSameE0ySbACyAEGF:
   99|  3.18k|    func isSameInstance(_ instance: InternalInstance) -> Bool {
  100|  3.18k|        return instance == self
  101|  3.18k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE21validateFunctionIndexyys6UInt32VKF:
  102|      4|    func validateFunctionIndex(_ index: FunctionIndex) throws {
  103|      4|        let function = try self.functions[validating: Int(index)]
  104|      2|        guard self.functionRefs.contains(function) else {
  105|      2|            throw ValidationError(.functionIndexNotDeclared(index: index))
  106|      2|        }
  107|      0|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9dataCounts6UInt32VSgvg:
  108|      4|    var dataCount: UInt32? {
  109|      4|        self.withValue { $0.dataCount }
  110|      4|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9dataCounts6UInt32VSgvgAiEzXEfU_:
  109|      4|        self.withValue { $0.dataCount }
$s7WasmKit17FrameHeaderLayoutV4typeAC0A5Types12FunctionTypeV_tcfC:
  183|  2.74k|    init(type: FunctionType) {
  184|  2.74k|        self.type = type
  185|  2.74k|        self.size = Self.size(of: type)
  186|  2.74k|    }
$s7WasmKit17FrameHeaderLayoutV8paramRegys5Int16VSiF:
  188|  7.21k|    func paramReg(_ index: Int) -> VReg {
  189|  7.21k|        VReg(index) - size
  190|  7.21k|    }
$s7WasmKit17FrameHeaderLayoutV9returnRegys5Int16VSiF:
  192|  1.30k|    func returnReg(_ index: Int) -> VReg {
  193|  1.30k|        return VReg(index) - size
  194|  1.30k|    }
$s7WasmKit17FrameHeaderLayoutV4size2ofs5Int16V0A5Types12FunctionTypeV_tFZ:
  196|  6.17k|    internal static func size(of: FunctionType) -> VReg {
  197|  6.17k|        size(parameters: of.parameters.count, results: of.results.count)
  198|  6.17k|    }
$s7WasmKit17FrameHeaderLayoutV4size10parameters7resultss5Int16VSi_SitFZ:
  199|  6.17k|    internal static func size(parameters: Int, results: Int) -> VReg {
  200|  6.17k|        VReg(max(parameters, results)) + VReg(numberOfSavingSlots)
  201|  6.17k|    }
$s7WasmKit17FrameHeaderLayoutV19numberOfSavingSlotsSivgZ:
  203|  6.17k|    internal static var numberOfSavingSlots: Int { 3 }
$s7WasmKit11StackLayoutV12stackRegBases5Int16Vvg:
  211|  2.74k|    var stackRegBase: VReg {
  212|  2.74k|        return VReg(numberOfLocals + constantSlotSize)
  213|  2.74k|    }
$s7WasmKit11StackLayoutV4type14numberOfLocals8codeSizeAC0A5Types12FunctionTypeV_S2itKcfC:
  215|  2.74k|    init(type: FunctionType, numberOfLocals: Int, codeSize: Int) throws {
  216|  2.74k|        self.frameHeader = FrameHeaderLayout(type: type)
  217|  2.74k|        self.numberOfLocals = numberOfLocals
  218|  2.74k|        // The number of constant slots is determined by the code size
  219|  2.74k|        // This is a heuristic value to balance the fast access to constants
  220|  2.74k|        // and the size of stack frame. Cap the slot size to avoid size explosion.
  221|  2.74k|        self.constantSlotSize = min(max(codeSize / 20, 4), 128)
  222|  2.74k|        let (maxSlots, overflow) = self.constantSlotSize.addingReportingOverflow(numberOfLocals)
  223|  2.74k|        guard !overflow, maxSlots < VReg.max else {
  224|      0|            throw TranslationError("The number of constant slots overflows")
  225|  2.74k|        }
  226|  2.74k|    }
$s7WasmKit11StackLayoutV8localRegys5Int16Vs6UInt32VF:
  228|  8.95k|    func localReg(_ index: LocalIndex) -> VReg {
  229|  8.95k|        if isParameter(index) {
  230|  7.21k|            return frameHeader.paramReg(Int(index))
  231|  7.21k|        } else {
  232|  1.74k|            return VReg(index) - VReg(frameHeader.type.parameters.count)
  233|  1.74k|        }
  234|  8.95k|    }
$s7WasmKit11StackLayoutV11isParameterySbs6UInt32VF:
  236|  8.95k|    func isParameter(_ index: LocalIndex) -> Bool {
  237|  8.95k|        index < frameHeader.type.parameters.count
  238|  8.95k|    }
$s7WasmKit11StackLayoutV8constRegys5Int16VSiF:
  240|  28.0k|    func constReg(_ index: Int) -> VReg {
  241|  28.0k|        return VReg(numberOfLocals + index)
  242|  28.0k|    }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV4KindO5blockAIyx___GvgZ:
  300|  7.39k|                static var block: Kind { .block(root: false) }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9reachableSbvpfi:
  308|  20.2k|            var reachable: Bool = true
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9copyTypesSay0aI09ValueTypeOGvg:
  310|  53.9k|            var copyTypes: [ValueType] {
  311|  53.9k|                switch self.kind {
  312|  53.9k|                case .block, .if:
  313|  25.7k|                    return blockType.results
  314|  53.9k|                case .loop:
  315|  28.2k|                    return blockType.parameters
  316|  53.9k|                }
  317|  53.9k|            }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9copyCounts6UInt16Vvg:
  318|  37.1k|            var copyCount: UInt16 {
  319|  37.1k|                return UInt16(copyTypes.count)
  320|  37.1k|            }
$s7WasmKit21InstructionTranslatorV12ControlStackV6frames021_3C1F9FC595E9AC192A47K10B121D811E8LLSayAE0E5FrameVyx__GGvpfi:
  323|  2.74k|        private var frames: [ControlFrame] = []
$s7WasmKit21InstructionTranslatorV12ControlStackV14numberOfFramesSivg:
  325|    920|        var numberOfFrames: Int { frames.count }
$s7WasmKit21InstructionTranslatorV12ControlStackV9pushFrameyyAE0eH0Vyx__GF:
  327|  20.9k|        mutating func pushFrame(_ frame: ControlFrame) {
  328|  20.9k|            self.frames.append(frame)
  329|  20.9k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV8popFrameAE0eH0Vyx__GSgyF:
  331|  10.0k|        mutating func popFrame() -> ControlFrame? {
  332|  10.0k|            self.frames.popLast()
  333|  10.0k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV15markUnreachableyyKF:
  335|  16.4k|        mutating func markUnreachable() throws {
  336|  16.4k|            try setReachability(false)
  337|  16.4k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV17resetReachabilityyyKF:
  338|    680|        mutating func resetReachability() throws {
  339|    680|            try setReachability(true)
  340|    680|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV15setReachability021_3C1F9FC595E9AC192A47L10B121D811E8LLyySbKF:
  342|  17.1k|        private mutating func setReachability(_ value: Bool) throws {
  343|  17.1k|            guard !self.frames.isEmpty else {
  344|      0|                throw ValidationError(.controlStackEmpty)
  345|  17.1k|            }
  346|  17.1k|            self.frames[self.frames.count - 1].reachable = value
  347|  17.1k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV12currentFrameAE0eH0Vyx__GyKF:
  349|   216k|        func currentFrame() throws -> ControlFrame {
  350|   216k|            guard let frame = self.frames.last else {
  351|      0|                throw ValidationError(.controlStackEmpty)
  352|   216k|            }
  353|   216k|            return frame
  354|   216k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV12branchTarget13relativeDepthAE0E5FrameVyx__Gs6UInt32V_tKF:
  356|  20.6k|        func branchTarget(relativeDepth: UInt32) throws -> ControlFrame {
  357|  20.6k|            let index = frames.count - 1 - Int(relativeDepth)
  358|  20.6k|            guard frames.indices.contains(index) else {
  359|     53|                throw ValidationError(.relativeDepthOutOfRange(relativeDepth: relativeDepth))
  360|  20.5k|            }
  361|  20.5k|            return frames[index]
  362|  20.6k|        }
$s7WasmKit21InstructionTranslatorV16MetaValueOnStackO4typeAC0eF0Oyx_Gvg:
  375|   171k|        var type: MetaValue {
  376|   171k|            switch self {
  377|   171k|            case .local(let type, _): return .some(type)
  378|   171k|            case .stack(let type): return type
  379|   171k|            case .const(let type, _): return .some(type)
  380|   171k|            }
  381|   171k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV6values021_3C1F9FC595E9AC192A47K10B121D811E8LLSayAC04Metae2OnF0Oyx_GGvpfi:
  391|  2.74k|        private var values: [MetaValueOnStack] = []
$s7WasmKit21InstructionTranslatorV10ValueStackV9maxHeightSivpfi:
  393|  2.74k|        private(set) var maxHeight: Int = 0
$s7WasmKit21InstructionTranslatorV10ValueStackV6heightSivg:
  394|   768k|        var height: Int { values.count }
$s7WasmKit21InstructionTranslatorV10ValueStackV11stackLayoutAEyx_GAA0fH0V_tcfC:
  398|  2.74k|        init(stackLayout: StackLayout) {
  399|  2.74k|            self.stackRegBase = stackLayout.stackRegBase
  400|  2.74k|            self.stackLayout = stackLayout
  401|  2.74k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16V0A5Types0E4TypeOF:
  403|   156k|        mutating func push(_ value: ValueType) -> VReg {
  404|   156k|            push(.some(value))
  405|   156k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16VAC04MetaE0Oyx_GF:
  406|   156k|        mutating func push(_ value: MetaValue) -> VReg {
  407|   156k|            // Record the maximum height of the stack we have seen
  408|   156k|            maxHeight = max(maxHeight, height)
  409|   156k|            let usedRegister = self.values.count
  410|   156k|            self.values.append(.stack(value))
  411|   156k|            assert(height < UInt16.max)
  412|   156k|            return stackRegBase + VReg(usedRegister)
  413|   156k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16VAC04MetaE0Oyx_GFSbyXEfu_:
  411|   156k|            assert(height < UInt16.max)
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushLocal_6localsys6UInt32V_AC6LocalsVyx_GztKF:
  414|  4.38k|        mutating func pushLocal(_ localIndex: LocalIndex, locals: inout Locals) throws {
  415|  4.38k|            let type = try locals.type(of: localIndex)
  416|  4.36k|            self.values.append(.local(type, localIndex))
  417|  4.36k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushConst_4typeySi_0A5Types0E4TypeOtF:
  418|  34.1k|        mutating func pushConst(_ index: Int, type: ValueType) {
  419|  34.1k|            assert(index < stackLayout.constantSlotSize)
  420|  34.1k|            self.values.append(.const(type, index))
  421|  34.1k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushConst_4typeySi_0A5Types0E4TypeOtFSbyXEfu_:
  419|  34.1k|            assert(index < stackLayout.constantSlotSize)
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveLocalsOnF0ySays5Int16VGs6UInt32VF:
  422|  4.95k|        mutating func preserveLocalsOnStack(_ localIndex: LocalIndex) -> [VReg] {
  423|  4.95k|            var copyTo: [VReg] = []
  424|  31.7k|            for i in 0..<values.count {
  425|  31.7k|                guard case .local(let type, localIndex) = self.values[i] else { continue }
  426|    295|                self.values[i] = .stack(.some(type))
  427|    295|                copyTo.append(stackRegBase + VReg(i))
  428|  4.95k|            }
  429|  4.95k|            return copyTo
  430|  4.95k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveLocalsOnF05depthSays6UInt32V6source_s5Int16V2totGSi_tF:
  432|  41.2k|        mutating func preserveLocalsOnStack(depth: Int) -> [(source: LocalIndex, to: VReg)] {
  433|  41.2k|            var copies: [(source: LocalIndex, to: VReg)] = []
  434|  80.6k|            for offset in 0..<min(depth, self.values.count) {
  435|  80.6k|                let valueIndex = self.values.count - 1 - offset
  436|  80.6k|                let value = self.values[valueIndex]
  437|  80.6k|                guard case .local(let type, let localIndex) = value else { continue }
  438|  1.22k|                self.values[valueIndex] = .stack(.some(type))
  439|  1.22k|                copies.append((localIndex, self.stackRegBase + VReg(valueIndex)))
  440|  41.2k|            }
  441|  41.2k|            return copies
  442|  41.2k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveConstsOnF05depthSays5Int16V6source_AI2totGSi_tF:
  444|  32.0k|        mutating func preserveConstsOnStack(depth: Int) -> [(source: VReg, to: VReg)] {
  445|  32.0k|            var copies: [(source: VReg, to: VReg)] = []
  446|  32.0k|            for offset in 0..<min(depth, self.values.count) {
  447|  12.7k|                let valueIndex = self.values.count - 1 - offset
  448|  12.7k|                let value = self.values[valueIndex]
  449|  12.7k|                guard case .const(let type, let index) = value else { continue }
  450|  5.30k|                self.values[valueIndex] = .stack(.some(type))
  451|  5.30k|                copies.append((stackLayout.constReg(index), self.stackRegBase + VReg(valueIndex)))
  452|  32.0k|            }
  453|  32.0k|            return copies
  454|  32.0k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV8peekType5depthAC04MetaE0Oyx_GSi_tF:
  460|    984|        func peekType(depth: Int) -> MetaValue {
  461|    984|            return self.values[height - 1 - depth].type
  462|    984|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV04makeE6Source021_3C1F9FC595E9AC192A47L10B121D811E8LLyAC0eH0Oyx_GAC04Metae2OnF0Oyx_GF:
  464|   170k|        private func makeValueSource(_ value: MetaValueOnStack) -> ValueSource {
  465|   170k|            let source: ValueSource
  466|   170k|            switch value {
  467|   170k|            case .local(_, let localIndex):
  468|  2.50k|                source = .local(localIndex)
  469|   170k|            case .stack:
  470|   143k|                source = .vreg(stackRegBase + VReg(height))
  471|   170k|            case .const(let type, let index):
  472|  24.3k|                source = .const(index, type)
  473|   170k|            }
  474|   170k|            return source
  475|   170k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV3popAC04MetaE0Oyx_G_AC0E6SourceOyx_GtyKF:
  477|   170k|        mutating func pop() throws -> (MetaValue, ValueSource) {
  478|   170k|            guard let value = self.values.popLast() else {
  479|      6|                throw TranslationError("Expected a value on stack but it's empty")
  480|   170k|            }
  481|   170k|            let source = makeValueSource(value)
  482|   170k|            return (value.type, source)
  483|   170k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV3popyAC0E6SourceOyx_G0A5Types0E4TypeOKF:
  484|   170k|        mutating func pop(_ expected: ValueType) throws -> ValueSource {
  485|   170k|            let (value, register) = try pop()
  486|   170k|            switch value {
  487|   170k|            case .some(let actual):
  488|   170k|                guard actual == expected else {
  489|    851|                    throw TranslationError("Expected \(expected) on the stack top but got \(actual)")
  490|    851|                }
  491|   170k|            case .unknown: break  // OK
  492|   170k|            }
  493|   169k|            return register
  494|   170k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV6popRefAC0E6SourceOyx_GyKF:
  495|     17|        mutating func popRef() throws -> ValueSource {
  496|     17|            let (value, register) = try pop()
  497|     11|            switch value {
  498|     11|            case .some(let actual):
  499|     11|                guard case .ref = actual else {
  500|     11|                    throw TranslationError("Expected reference value on the stack top but got \(actual)")
  501|     11|                }
  502|     11|            case .unknown: break  // OK
  503|     11|            }
  504|      0|            return register
  505|     17|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV8truncate6heightySi_tKF:
  506|  16.4k|        mutating func truncate(height: Int) throws {
  507|  16.4k|            guard height <= self.height else {
  508|      0|                throw TranslationError("Truncating to \(height) but the stack height is \(self.height)")
  509|  16.4k|            }
  510|  28.2k|            while height != self.height {
  511|  11.7k|                guard self.values.popLast() != nil else {
  512|      0|                    throw TranslationError("Internal consistency error: Stack height is \(self.height) but failed to pop")
  513|  11.7k|                }
  514|  16.4k|            }
  515|  16.4k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV9LabelUserV11descriptionSSvg:
  544|      7|            var description: String {
  545|      7|                "LabelUser:\(sourceLine)"
  546|      7|            }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6labelsSayAF10LabelEntryOyx__GGvpfi:
  559|  2.74k|        private var labels: [LabelEntry] = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV14unpinnedLabelsShySiGvpfi:
  560|  2.74k|        private var unpinnedLabels: Set<LabelRef> = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12instructionsSays6UInt64VGvpfi:
  561|  2.74k|        private var instructions: [UInt64] = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV11insertingPCAA18MetaProgramCounterAELLVvg:
  563|   224k|        fileprivate var insertingPC: MetaProgramCounter {
  564|   224k|            MetaProgramCounter(offsetFromHead: instructions.count)
  565|   224k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV19engineConfigurationAFyx_GAA06EngineQ0V_tcfC:
  568|  2.74k|        init(engineConfiguration: EngineConfiguration) {
  569|  2.74k|            self.engineConfiguration = engineConfiguration
  570|  2.74k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV20assertDanglingLabelsyyKF:
  572|    884|        func assertDanglingLabels() throws {
  573|    884|            for ref in unpinnedLabels {
  574|    152|                let label = labels[ref]
  575|    152|                switch label {
  576|    152|                case .unpinned(let users):
  577|    152|                    guard !users.isEmpty else { continue }
  578|      6|                    throw TranslationError("Internal consistency error: Label (#\(ref)) is used but not pinned at finalization-time: \(users)")
  579|    152|                case .pinned: break  // unreachable in theory
  580|    152|                }
  581|    878|            }
  582|    878|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV5traceyySSyXKF:
  584|   646k|        func trace(_ message: @autoclosure () -> String) {
  585|       |            #if WASMKIT_TRANSLATOR_TRACE
  586|       |                print(message())
  587|       |            #endif
  588|   646k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6assign2at_ySi_AA0C0OtF:
  590|  10.3k|        private mutating func assign(at index: Int, _ instruction: Instruction) {
  591|  10.3k|            trace("assign: \(instruction)")
  592|  10.3k|            let headSlot = instruction.headSlot(threadingModel: engineConfiguration.threadingModel)
  593|  10.3k|            trace("        [\(index)] = 0x\(String(headSlot, radix: 16))")
  594|  10.3k|            self.instructions[index] = headSlot
  595|  10.3k|            if let immediate = instruction.rawImmediate {
  596|  10.3k|                var slots: [CodeSlot] = []
  597|  10.3k|                immediate.emit(to: { slots.append($0) })
  598|  10.4k|                for (i, slot) in slots.enumerated() {
  599|  10.4k|                    let slotIndex = index + 1 + i
  600|  10.4k|                    trace("        [\(slotIndex)] = 0x\(String(slot, radix: 16))")
  601|  10.4k|                    self.instructions[slotIndex] = slot
  602|  10.4k|                }
  603|  10.3k|            }
  604|  10.3k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6assign2at_ySi_AA0C0OtFys6UInt64VcfU_:
  597|  10.4k|                immediate.emit(to: { slots.append($0) })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV17resetLastEmissionyyF:
  606|   216k|        mutating func resetLastEmission() {
  607|   216k|            lastEmission = nil
  608|   216k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV010relinkLastC6ResultySbs5Int16VF:
  610|  1.85k|        mutating func relinkLastInstructionResult(_ newResult: VReg) -> Bool {
  611|  1.85k|            guard let lastEmission = self.lastEmission,
  612|  1.85k|                let resultRelink = lastEmission.resultRelink
  613|  1.85k|            else { return false }
  614|  1.31k|            let newInstruction = resultRelink(newResult)
  615|  1.31k|            assign(at: lastEmission.position.offsetFromHead, newInstruction)
  616|  1.31k|            resetLastEmission()
  617|  1.31k|            return true
  618|  1.85k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8emitSlotyys6UInt64VF:
  620|   434k|        private mutating func emitSlot(_ codeSlot: CodeSlot) {
  621|   434k|            trace("emitSlot[\(instructions.count)]: 0x\(String(codeSlot, radix: 16))")
  622|   434k|            self.instructions.append(codeSlot)
  623|   434k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8finalizeSays6UInt64VGyF:
  631|    878|        func finalize() -> [UInt64] {
  632|    878|            return instructions
  633|    878|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV4emit_12resultRelinkyAA0C0O_AJs5Int16VcSgtF:
  635|   180k|        mutating func emit(_ instruction: Instruction, resultRelink: ResultRelink? = nil) {
  636|   180k|            self.lastEmission = LastEmission(position: insertingPC, resultRelink: resultRelink)
  637|   180k|            trace("emitInstruction: \(instruction)")
  638|   180k|            emitSlot(instruction.headSlot(threadingModel: engineConfiguration.threadingModel))
  639|   180k|            if let immediate = instruction.rawImmediate {
  640|   168k|                var slots: [CodeSlot] = []
  641|   168k|                immediate.emit(to: { slots.append($0) })
  642|   228k|                for slot in slots { emitSlot(slot) }
  643|   168k|            }
  644|   180k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV4emit_12resultRelinkyAA0C0O_AJs5Int16VcSgtFys6UInt64VcfU_:
  641|   228k|                immediate.emit(to: { slots.append($0) })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8putLabelSiyF:
  646|  8.38k|        mutating func putLabel() -> LabelRef {
  647|  8.38k|            let ref = labels.count
  648|  8.38k|            self.labels.append(.pinned(insertingPC))
  649|  8.38k|            return ref
  650|  8.38k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV10allocLabelSiyF:
  652|  14.0k|        mutating func allocLabel() -> LabelRef {
  653|  14.0k|            let ref = labels.count
  654|  14.0k|            self.labels.append(.unpinned(users: []))
  655|  14.0k|            self.unpinnedLabels.insert(ref)
  656|  14.0k|            return ref
  657|  14.0k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12resolveLabelyAA18MetaProgramCounterAELLVSgSiF:
  659|    776|        fileprivate func resolveLabel(_ ref: LabelRef) -> MetaProgramCounter? {
  660|    776|            let entry = self.labels[ref]
  661|    776|            switch entry {
  662|    776|            case .pinned(let pc): return pc
  663|    776|            case .unpinned: return nil
  664|    776|            }
  665|    776|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8pinLabel_2pcySi_AA18MetaProgramCounterAELLVtKF:
  667|  6.47k|        fileprivate mutating func pinLabel(_ ref: LabelRef, pc: MetaProgramCounter) throws {
  668|  6.47k|            switch self.labels[ref] {
  669|  6.47k|            case .pinned(let oldPC):
  670|     14|                throw TranslationError("Internal consistency error: Label \(ref) is already pinned at \(oldPC), but tried to pin at \(pc) again")
  671|  6.47k|            case .unpinned(let users):
  672|  6.45k|                self.labels[ref] = .pinned(pc)
  673|  6.45k|                self.unpinnedLabels.remove(ref)
  674|  6.45k|                for user in users {
  675|  3.89k|                    switch user.action {
  676|  3.89k|                    case let .emitInstruction(insertAt, source, make):
  677|  3.52k|                        assign(at: insertAt.offsetFromHead, make(self, source, pc))
  678|  3.89k|                    case let .fillBrTableEntry(brTable, index, make):
  679|    361|                        brTable[index] = make(self, pc)
  680|  3.89k|                    }
  681|  3.89k|                }
  682|  6.47k|            }
  683|  6.45k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12pinLabelHereyySiKF:
  685|  6.47k|        mutating func pinLabelHere(_ ref: LabelRef) throws {
  686|  6.47k|            try pinLabel(ref, pc: insertingPC)
  687|  6.45k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lF:
  704|  12.8k|        ) {
  705|  12.8k|            let insertAt = insertingPC
  706|  12.8k|
  707|  12.8k|            // Emit dummy instruction to be replaced later
  708|  12.8k|            emitSlot(0)  // dummy opcode
  709|  12.8k|            var immediateSlots = 0
  710|  12.8k|            Immediate.emit(to: { _ in immediateSlots += 1 })
  711|  12.8k|            for _ in 0..<immediateSlots { emitSlot(0) }
  712|  12.8k|
  713|  12.8k|            // Schedule actual emission
  714|  12.8k|            emitWithLabel(
  715|  12.8k|                ref, insertAt: insertAt, line: line,
  716|  12.8k|                make: {
  717|  12.8k|                    makeInstruction(make($0, $1, $2))
  718|  12.8k|                })
  719|  12.8k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lFys6UInt64Vqd__XEcfU_:
  710|  12.8k|            Immediate.emit(to: { _ in immediateSlots += 1 })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lFAkL_A2NtcfU0_:
  716|  9.08k|                make: {
  717|  9.08k|                    makeInstruction(make($0, $1, $2))
  718|  9.08k|                })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel_8insertAt4line4makeySi_AA18MetaProgramCounterAELLVSuAA0C0OAFyx_G_A2LtctF:
  729|  12.8k|        ) {
  730|  12.8k|            switch self.labels[ref] {
  731|  12.8k|            case .pinned(let pc):
  732|  5.55k|                assign(at: insertAt.offsetFromHead, make(self, insertingPC, pc))
  733|  12.8k|            case .unpinned(var users):
  734|  7.30k|                users.append(LabelUser(action: .emitInstruction(insertAt: insertAt, source: insertingPC, make), sourceLine: line))
  735|  7.30k|                self.labels[ref] = .unpinned(users: users)
  736|  12.8k|            }
  737|  12.8k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV16fillBrTableEntry_5table5index4line4makeySi_SryAA0C0O0qR7OperandV0S0VGSiSuAqFyx_G_AA18MetaProgramCounterAELLVtctF:
  750|  1.67k|        ) {
  751|  1.67k|            switch self.labels[ref] {
  752|  1.67k|            case .pinned(let pc):
  753|  1.01k|                table[index] = make(self, pc)
  754|  1.67k|            case .unpinned(var users):
  755|    662|                users.append(LabelUser(action: .fillBrTableEntry(buildingTable: table, index: index, make: make), sourceLine: line))
  756|    662|                self.labels[ref] = .unpinned(users: users)
  757|  1.67k|            }
  758|  1.67k|        }
$s7WasmKit21InstructionTranslatorV6LocalsV4type2of0A5Types9ValueTypeOs6UInt32V_tKF:
  766|  9.33k|        func type(of localIndex: UInt32) throws -> ValueType {
  767|  9.33k|            guard Int(localIndex) < types.count else {
  768|     30|                throw TranslationError("Local index \(localIndex) is out of range")
  769|  9.30k|            }
  770|  9.30k|            return self.types[Int(localIndex)]
  771|  9.33k|        }
$s7WasmKit21InstructionTranslatorV10ConstSlotsV11stackLayoutAEyx_GAA05StackH0V_tcfC:
  779|  2.74k|        init(stackLayout: StackLayout) {
  780|  2.74k|            self.values = []
  781|  2.74k|            self.indexByValue = [:]
  782|  2.74k|            self.stackLayout = stackLayout
  783|  2.74k|        }
$s7WasmKit21InstructionTranslatorV10ConstSlotsV8allocateySiSg0A5Types5ValueOF:
  785|  37.2k|        mutating func allocate(_ value: Value) -> Int? {
  786|  37.2k|            let untyped = UntypedValue(value)
  787|  37.2k|            if let allocated = indexByValue[untyped] {
  788|  2.64k|                // NOTE: Share the same const slot for exactly the same bit pattern
  789|  2.64k|                // values even having different types
  790|  2.64k|                return allocated
  791|  34.6k|            }
  792|  34.6k|            guard values.count < stackLayout.constantSlotSize else { return nil }
  793|  31.4k|            let constSlotIndex = values.count
  794|  31.4k|            values.append(untyped)
  795|  31.4k|            indexByValue[untyped] = constSlotIndex
  796|  31.4k|            return constSlotIndex
  797|  37.2k|        }
$s7WasmKit21InstructionTranslatorV9allocator19engineConfiguration16funcTypeInterner6module4type6locals13functionIndex8codeSize12interceptingACyxGAA13ISeqAllocatorC_AA06EngineG0VAA0J0Cy0A5Types08FunctionI0VGxAVSayAT05ValueI0OGs6UInt32VSiSbtKcfC:
  826|  2.74k|    ) throws {
  827|  2.74k|        self.allocator = allocator
  828|  2.74k|        self.funcTypeInterner = funcTypeInterner
  829|  2.74k|        self.type = type
  830|  2.74k|        self.module = module
  831|  2.74k|        self.iseqBuilder = ISeqBuilder(engineConfiguration: engineConfiguration)
  832|  2.74k|        self.controlStack = ControlStack()
  833|  2.74k|        self.stackLayout = try StackLayout(
  834|  2.74k|            type: type,
  835|  2.74k|            numberOfLocals: locals.count,
  836|  2.74k|            codeSize: codeSize
  837|  2.74k|        )
  838|  2.74k|        self.valueStack = ValueStack(stackLayout: stackLayout)
  839|  2.74k|        self.locals = Locals(types: type.parameters + locals)
  840|  2.74k|        self.functionIndex = functionIndex
  841|  2.74k|        self.intercepting = intercepting
  842|  2.74k|        self.constantSlots = ConstSlots(stackLayout: stackLayout)
  843|  2.74k|        self.validator = InstructionValidator(context: module)
  844|  2.74k|
  845|  2.74k|        do {
  846|  2.74k|            let endLabel = self.iseqBuilder.allocLabel()
  847|  2.74k|            let rootFrame = ControlStack.ControlFrame(
  848|  2.74k|                blockType: type,
  849|  2.74k|                stackHeight: 0,
  850|  2.74k|                continuation: endLabel,
  851|  2.74k|                kind: .block(root: true)
  852|  2.74k|            )
  853|  2.74k|            self.controlStack.pushFrame(rootFrame)
  854|  2.74k|        }
  855|  2.74k|    }
$s7WasmKit21InstructionTranslatorV9returnReg021_3C1F9FC595E9AC192A47J10B121D811E8LLys5Int16VSiF:
  857|  1.30k|    private func returnReg(_ index: Int) -> VReg {
  858|  1.30k|        return stackLayout.frameHeader.returnReg(index)
  859|  1.30k|    }
$s7WasmKit21InstructionTranslatorV8localReg021_3C1F9FC595E9AC192A47J10B121D811E8LLys5Int16Vs6UInt32VF:
  860|  6.47k|    private func localReg(_ index: LocalIndex) -> VReg {
  861|  6.47k|        return stackLayout.localReg(index)
  862|  6.47k|    }
$s7WasmKit21InstructionTranslatorV4emit021_3C1F9FC595E9AC192A47I10B121D811E8LL_12resultRelinkyAA0C0O_AHs5Int16VcSgtF:
  864|   177k|    private mutating func emit(_ instruction: Instruction, resultRelink: ISeqBuilder.ResultRelink? = nil) {
  865|   177k|        iseqBuilder.emit(instruction, resultRelink: resultRelink)
  866|   177k|    }
$s7WasmKit21InstructionTranslatorV13emitCopyStack021_3C1F9FC595E9AC192A47K10B121D811E8LL4from2toSbs5Int16V_AItF:
  869|  11.8k|    private mutating func emitCopyStack(from source: VReg, to dest: VReg) -> Bool {
  870|  11.8k|        guard source != dest else { return false }
  871|  11.4k|        emit(.copyStack(Instruction.CopyStackOperand(source: LVReg(source), dest: LVReg(dest))))
  872|  11.4k|        return true
  873|  11.8k|    }
$s7WasmKit21InstructionTranslatorV15preserveOnStack021_3C1F9FC595E9AC192A47K10B121D811E8LL5depthySi_tF:
  875|  32.0k|    private mutating func preserveOnStack(depth: Int) {
  876|  32.0k|        preserveLocalsOnStack(depth: depth)
  877|  32.0k|        for (source, dest) in valueStack.preserveConstsOnStack(depth: depth) {
  878|  5.30k|            emitCopyStack(from: source, to: dest)
  879|  32.0k|        }
  880|  32.0k|    }
$s7WasmKit21InstructionTranslatorV21preserveLocalsOnStack021_3C1F9FC595E9AC192A47L10B121D811E8LLyys6UInt32VF:
  882|  4.95k|    private mutating func preserveLocalsOnStack(_ localIndex: LocalIndex) {
  883|  4.95k|        for copyTo in valueStack.preserveLocalsOnStack(localIndex) {
  884|    295|            emitCopyStack(from: localReg(localIndex), to: copyTo)
  885|  4.95k|        }
  886|  4.95k|    }
$s7WasmKit21InstructionTranslatorV21preserveLocalsOnStack021_3C1F9FC595E9AC192A47L10B121D811E8LL5depthySi_tF:
  893|  41.2k|    private mutating func preserveLocalsOnStack(depth: Int) {
  894|  41.2k|        for (sourceLocal, destReg) in valueStack.preserveLocalsOnStack(depth: depth) {
  895|  1.22k|            emitCopyStack(from: localReg(sourceLocal), to: destReg)
  896|  41.2k|        }
  897|  41.2k|    }
$s7WasmKit21InstructionTranslatorV14checkBeforePop021_3C1F9FC595E9AC192A47K10B121D811E8LL8typeHint12controlFrameSb0A5Types9ValueTypeOSg_AC12ControlStackV0xT0Vyx__GtKF:
  903|   184k|    private func checkBeforePop(typeHint: ValueType?, controlFrame: ControlStack.ControlFrame) throws -> Bool {
  904|   184k|        if _slowPath(valueStack.height <= controlFrame.stackHeight) {
  905|  13.1k|            if controlFrame.reachable {
  906|    134|                let message: String
  907|    134|                if let typeHint {
  908|    124|                    message = "Expected a \(typeHint) value on stack but it's empty"
  909|    124|                } else {
  910|     10|                    message = "Expected a value on stack but it's empty"
  911|     10|                }
  912|    134|                throw TranslationError(message)
  913|  13.0k|            }
  914|  13.0k|            // Too many pop on unreachable path is ignored
  915|  13.0k|            return false
  916|   171k|        }
  917|   171k|        return true
  918|   184k|    }
$s7WasmKit21InstructionTranslatorV14checkBeforePop021_3C1F9FC595E9AC192A47K10B121D811E8LL8typeHintSb0A5Types9ValueTypeOSg_tKF:
  919|   176k|    private func checkBeforePop(typeHint: ValueType?) throws -> Bool {
  920|   176k|        let controlFrame = try controlStack.currentFrame()
  921|   176k|        return try self.checkBeforePop(typeHint: typeHint, controlFrame: controlFrame)
  922|   176k|    }
$s7WasmKit21InstructionTranslatorV12ensureOnVReg021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VAC11ValueSourceOyx_GF:
  923|   157k|    private mutating func ensureOnVReg(_ source: ValueSource) -> VReg {
  924|   157k|        // TODO: Copy to stack if source is on preg
  925|   157k|        // let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
  926|   157k|        switch source {
  927|   157k|        case .vreg(let register):
  928|   133k|            return register
  929|   157k|        case .local(let index):
  930|  2.48k|            return stackLayout.localReg(index)
  931|   157k|        case .const(let index, _):
  932|  22.4k|            return stackLayout.constReg(index)
  933|   157k|        }
  934|   157k|    }
$s7WasmKit21InstructionTranslatorV13ensureOnStack021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VAC11ValueSourceOyx_GF:
  935|    459|    private mutating func ensureOnStack(_ source: ValueSource) -> VReg {
  936|    459|        let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
  937|    459|        switch source {
  938|    459|        case .vreg(let vReg):
  939|    128|            return vReg
  940|    459|        case .local(let localIndex):
  941|      9|            emitCopyStack(from: localReg(localIndex), to: copyTo)
  942|      9|            return copyTo
  943|    459|        case .const(let index, _):
  944|    322|            emitCopyStack(from: stackLayout.constReg(index), to: copyTo)
  945|    322|            return copyTo
  946|    459|        }
  947|    459|    }
$s7WasmKit21InstructionTranslatorV10popOperand021_3C1F9FC595E9AC192A47J10B121D811E8LLyAC11ValueSourceOyx_GSg0A5Types0P4TypeOKF:
  948|   170k|    private mutating func popOperand(_ type: ValueType) throws -> ValueSource? {
  949|   170k|        guard try checkBeforePop(typeHint: type) else {
  950|  11.9k|            return nil
  951|   158k|        }
  952|   158k|        iseqBuilder.resetLastEmission()
  953|   158k|        return try valueStack.pop(type)
  954|   170k|    }
$s7WasmKit21InstructionTranslatorV17popOnStackOperand021_3C1F9FC595E9AC192A47L10B121D811E8LLys5Int16VSg0A5Types9ValueTypeOKF:
  956|    471|    private mutating func popOnStackOperand(_ type: ValueType) throws -> VReg? {
  957|    471|        guard let op = try popOperand(type) else { return nil }
  958|    459|        return ensureOnStack(op)
  959|    471|    }
$s7WasmKit21InstructionTranslatorV14popVRegOperand021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VSg0A5Types9ValueTypeOKF:
  961|   164k|    private mutating func popVRegOperand(_ type: ValueType) throws -> VReg? {
  962|   164k|        guard let op = try popOperand(type) else { return nil }
  963|   153k|        return ensureOnVReg(op)
  964|   164k|    }
$s7WasmKit21InstructionTranslatorV13popAnyOperand021_3C1F9FC595E9AC192A47K10B121D811E8LLAC9MetaValueOyx_G_AC0R6SourceOyx_GSgtyKF:
  966|    432|    private mutating func popAnyOperand() throws -> (MetaValue, ValueSource?) {
  967|    432|        guard try checkBeforePop(typeHint: nil) else {
  968|    351|            return (.unknown, nil)
  969|    351|        }
  970|     71|        iseqBuilder.resetLastEmission()
  971|     71|        return try valueStack.pop()
  972|    432|    }
$s7WasmKit21InstructionTranslatorV13popPushValues021_3C1F9FC595E9AC192A47K10B121D811E8LLySiSay0A5Types9ValueTypeOGKF:
  975|  7.86k|    private mutating func popPushValues(_ valueTypes: [ValueType]) throws -> Int {
  976|  7.86k|        var values: [ValueSource?] = []
  977|  7.86k|        for type in valueTypes.reversed() {
  978|  1.14k|            values.append(try popOperand(type))
  979|  7.85k|        }
  980|  7.85k|        let stackHeight = self.valueStack.height
  981|  7.85k|        for (type, value) in zip(valueTypes, values.reversed()) {
  982|  1.14k|            switch value {
  983|  1.14k|            case .local(let localIndex):
  984|      0|                // Re-push local variables to the stack
  985|      0|                _ = try valueStack.pushLocal(localIndex, locals: &locals)
  986|  1.14k|            case .vreg, nil:
  987|  1.13k|                _ = valueStack.push(type)
  988|  1.14k|            case .const(let index, let type):
  989|      4|                valueStack.pushConst(index, type: type)
  990|  1.14k|            }
  991|  7.85k|        }
  992|  7.85k|        return stackHeight
  993|  7.86k|    }
$s7WasmKit21InstructionTranslatorV13checkStackTop021_3C1F9FC595E9AC192A47K10B121D811E8LLyySay0A5Types9ValueTypeOGKF:
  995|  2.67k|    private func checkStackTop(_ valueTypes: [ValueType]) throws {
  996|  2.67k|        for (stackDepth, type) in valueTypes.reversed().enumerated() {
  997|  1.00k|            guard try checkBeforePop(typeHint: type) else { return }
  998|    984|            let actual = valueStack.peekType(depth: stackDepth)
  999|    984|            switch actual {
 1000|    984|            case .some(let actualType):
 1001|    984|                guard actualType == type else {
 1002|      6|                    throw ValidationError(.expectedTypeOnStack(expected: type, actual: actualType))
 1003|      6|                }
 1004|    984|            case .unknown: break
 1005|    984|            }
 1006|  2.65k|        }
 1007|  2.65k|    }
$s7WasmKit21InstructionTranslatorV15visitReturnLike021_3C1F9FC595E9AC192A47K10B121D811E8LLyyKF:
 1009|  1.65k|    private mutating func visitReturnLike() throws {
 1010|  1.65k|        var copies: [(source: VReg, dest: VReg)] = []
 1011|  2.31k|        for (index, resultType) in self.type.results.enumerated().reversed() {
 1012|  2.31k|            guard let operand = try popOperand(resultType) else { continue }
 1013|    914|            var source = ensureOnVReg(operand)
 1014|    914|            if case .local(let localIndex) = operand, stackLayout.isParameter(localIndex) {
 1015|      2|                // Parameter space is shared with return values, so we need to copy it to the stack
 1016|      2|                // before copying to the return slot to avoid overwriting the parameter value.
 1017|      2|                let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
 1018|      2|                emitCopyStack(from: localReg(localIndex), to: copyTo)
 1019|      2|                source = copyTo
 1020|      2|            }
 1021|    914|            let dest = returnReg(index)
 1022|    914|            copies.append((source, dest))
 1023|  1.64k|        }
 1024|  1.64k|        for (source, dest) in copies {
 1025|    914|            emitCopyStack(from: source, to: dest)
 1026|  1.64k|        }
 1027|  1.64k|    }
$s7WasmKit21InstructionTranslatorV12copyOnBranch021_3C1F9FC595E9AC192A47K10B121D811E8LL11targetFrameSbAC12ControlStackV0sR0Vyx__G_tKF:
 1030|  10.4k|    private mutating func copyOnBranch(targetFrame frame: ControlStack.ControlFrame) throws -> Bool {
 1031|  10.4k|        preserveOnStack(depth: min(Int(frame.copyCount), valueStack.height - frame.stackHeight))
 1032|  10.4k|        let copyCount = VReg(frame.copyCount)
 1033|  10.4k|        let sourceBase = valueStack.stackRegBase + VReg(valueStack.height)
 1034|  10.4k|        let destBase = valueStack.stackRegBase + VReg(frame.stackHeight)
 1035|  10.4k|        var emittedCopy = false
 1036|  10.4k|        for i in (0..<copyCount).reversed() {
 1037|  2.76k|            let source = sourceBase - 1 - VReg(i)
 1038|  2.76k|            let dest: VReg
 1039|  2.76k|            if case .block(root: true) = frame.kind {
 1040|    390|                dest = returnReg(Int(copyCount - 1 - i))
 1041|  2.37k|            } else {
 1042|  2.37k|                dest = destBase + copyCount - 1 - VReg(i)
 1043|  2.37k|            }
 1044|  2.76k|            let copied = emitCopyStack(from: source, to: dest)
 1045|  2.76k|            emittedCopy = emittedCopy || copied
 1046|  10.4k|        }
 1047|  10.4k|        return emittedCopy
 1048|  10.4k|    }
$s7WasmKit21InstructionTranslatorV12copyOnBranch021_3C1F9FC595E9AC192A47K10B121D811E8LL11targetFrameSbAC12ControlStackV0sR0Vyx__G_tKFSbyKXEfu_:
 1045|  2.70k|            emittedCopy = emittedCopy || copied
$s7WasmKit21InstructionTranslatorV15translateReturn021_3C1F9FC595E9AC192A47J10B121D811E8LLyyKF:
 1049|  1.65k|    private mutating func translateReturn() throws {
 1050|  1.65k|        if intercepting {
 1051|      0|            // Emit `onExit` instruction before every `return` instruction
 1052|      0|            emit(.onExit(functionIndex))
 1053|      0|        }
 1054|  1.65k|        try visitReturnLike()
 1055|  1.64k|        iseqBuilder.emit(._return)
 1056|  1.64k|    }
$s7WasmKit21InstructionTranslatorV15markUnreachable021_3C1F9FC595E9AC192A47J10B121D811E8LLyyKF:
 1057|  16.4k|    private mutating func markUnreachable() throws {
 1058|  16.4k|        try controlStack.markUnreachable()
 1059|  16.4k|        let currentFrame = try controlStack.currentFrame()
 1060|  16.4k|        try valueStack.truncate(height: currentFrame.stackHeight)
 1061|  16.4k|    }
$s7WasmKit21InstructionTranslatorV8finalize021_3C1F9FC595E9AC192A47I10B121D811E8LLAA0C8SequenceVyKF:
 1063|    902|    private mutating func finalize() throws -> InstructionSequence {
 1064|    902|        if controlStack.numberOfFrames > 1 {
 1065|     18|            throw ValidationError(.expectedMoreEndInstructions(count: controlStack.numberOfFrames - 1))
 1066|    884|        }
 1067|    884|        // Check dangling labels
 1068|    884|        try iseqBuilder.assertDanglingLabels()
 1069|    878|
 1070|    878|        iseqBuilder.emit(._return)
 1071|    878|        let instructions = iseqBuilder.finalize()
 1072|    878|        // TODO: Figure out a way to avoid the copy here while keeping the execution performance.
 1073|    878|        let buffer = allocator.allocateInstructions(capacity: instructions.count)
 1074|   242k|        for (idx, instruction) in instructions.enumerated() {
 1075|   242k|            buffer[idx] = instruction
 1076|   242k|        }
 1077|    878|        let constants = allocator.allocateConstants(self.constantSlots.values)
 1078|    878|        return InstructionSequence(
 1079|    878|            instructions: buffer,
 1080|    878|            maxStackHeight: Int(valueStack.stackRegBase) + valueStack.maxHeight,
 1081|    878|            constants: constants
 1082|    878|        )
 1083|    902|    }
$s7WasmKit21InstructionTranslatorV9translate4code8instanceAA0C8SequenceV0A6Parser4CodeV_AA12EntityHandleVyAA08InstanceK0VGtKF:
 1091|  2.74k|    ) throws -> InstructionSequence {
 1092|  2.74k|        if intercepting {
 1093|      0|            // Emit `onEnter` instruction at the beginning of the function
 1094|      0|            emit(.onEnter(functionIndex))
 1095|      0|        }
 1096|  2.74k|        var parser = ExpressionParser(code: code)
 1097|  2.74k|        var offset = parser.offset
 1098|  2.74k|        do {
 1099|   257k|            while try parser.visit(visitor: &self) {
 1100|   254k|                offset = parser.offset
 1101|   254k|            }
 1102|    902|        } catch var error as ValidationError {
 1103|    488|            error.offset = offset
 1104|    488|            throw error
 1105|    902|        }
 1106|    902|        return try finalize()
 1107|  2.74k|    }
$s7WasmKit21InstructionTranslatorV16visitUnreachableyyKF:
 1111|  7.52k|    mutating func visitUnreachable() throws -> Output {
 1112|  7.52k|        emit(.unreachable)
 1113|  7.52k|        try markUnreachable()
 1114|  7.52k|    }
$s7WasmKit21InstructionTranslatorV8visitNopyyF:
 1115|  2.43k|    mutating func visitNop() -> Output { emit(.nop) }
$s7WasmKit21InstructionTranslatorV10visitBlock9blockTypey0A6Parser0fH0O_tKF:
 1117|  7.43k|    mutating func visitBlock(blockType: WasmParser.BlockType) throws -> Output {
 1118|  7.43k|        let blockType = try module.resolveBlockType(blockType)
 1119|  7.40k|        let endLabel = iseqBuilder.allocLabel()
 1120|  7.40k|        self.preserveLocalsOnStack(depth: self.valueStack.height)
 1121|  7.40k|        let stackHeight = try popPushValues(blockType.parameters)
 1122|  7.39k|        controlStack.pushFrame(ControlStack.ControlFrame(blockType: blockType, stackHeight: stackHeight, continuation: endLabel, kind: .block))
 1123|  7.39k|    }
$s7WasmKit21InstructionTranslatorV9visitLoop9blockTypey0A6Parser05BlockH0O_tKF:
 1125|  8.40k|    mutating func visitLoop(blockType: WasmParser.BlockType) throws -> Output {
 1126|  8.40k|        let blockType = try module.resolveBlockType(blockType)
 1127|  8.38k|        preserveOnStack(depth: blockType.parameters.count)
 1128|  8.38k|        iseqBuilder.resetLastEmission()
 1129|  8.38k|        for param in blockType.parameters.reversed() {
 1130|    112|            _ = try popOperand(param)
 1131|  8.38k|        }
 1132|  8.38k|        let headLabel = iseqBuilder.putLabel()
 1133|  8.38k|        let stackHeight = self.valueStack.height
 1134|  8.38k|        for param in blockType.parameters {
 1135|    105|            _ = valueStack.push(param)
 1136|  8.38k|        }
 1137|  8.38k|        controlStack.pushFrame(ControlStack.ControlFrame(blockType: blockType, stackHeight: stackHeight, continuation: headLabel, kind: .loop))
 1138|  8.38k|    }
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKF:
 1140|  1.75k|    mutating func visitIf(blockType: WasmParser.BlockType) throws -> Output {
 1141|  1.75k|        // Pop condition value
 1142|  1.75k|        let condition = try popVRegOperand(.i32)
 1143|  1.74k|        let blockType = try module.resolveBlockType(blockType)
 1144|  1.72k|        self.preserveLocalsOnStack(depth: self.valueStack.height)
 1145|  1.72k|        preserveOnStack(depth: blockType.parameters.count)
 1146|  1.72k|        let endLabel = iseqBuilder.allocLabel()
 1147|  1.72k|        let elseLabel = iseqBuilder.allocLabel()
 1148|  1.72k|        for param in blockType.parameters.reversed() {
 1149|    181|            _ = try popOperand(param)
 1150|  1.72k|        }
 1151|  1.72k|        let stackHeight = self.valueStack.height
 1152|  1.72k|        for param in blockType.parameters {
 1153|    179|            _ = valueStack.push(param)
 1154|  1.72k|        }
 1155|  1.72k|        controlStack.pushFrame(
 1156|  1.72k|            ControlStack.ControlFrame(
 1157|  1.72k|                blockType: blockType, stackHeight: stackHeight, continuation: endLabel,
 1158|  1.72k|                kind: .if(elseLabel: elseLabel, endLabel: endLabel, isElse: false)
 1159|  1.72k|            )
 1160|  1.72k|        )
 1161|  1.72k|        guard let condition = condition else { return }
 1162|  1.64k|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
 1163|  1.64k|            let targetPC: MetaProgramCounter
 1164|  1.64k|            if let elsePC = iseqBuilder.resolveLabel(elseLabel) {
 1165|  1.64k|                targetPC = elsePC
 1166|  1.64k|            } else {
 1167|  1.64k|                targetPC = endPC
 1168|  1.64k|            }
 1169|  1.64k|            let elseOrEnd = UInt32(targetPC.offsetFromHead - selfPC.offsetFromHead)
 1170|  1.64k|            return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(elseOrEnd))
 1171|  1.64k|        }
 1172|  1.64k|    }
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0OAJ02BrF7OperandVcAJmcfu_:
 1162|  1.64k|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0OAJ02BrF7OperandVcAJmcfu_AjLcfu0_:
 1162|    776|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0O02BrF7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47R10B121D811E8LLVyx_G_AA18MetaProgramCounterANLLVARtcfU_:
 1162|    776|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
 1163|    776|            let targetPC: MetaProgramCounter
 1164|    776|            if let elsePC = iseqBuilder.resolveLabel(elseLabel) {
 1165|    620|                targetPC = elsePC
 1166|    620|            } else {
 1167|    156|                targetPC = endPC
 1168|    156|            }
 1169|    776|            let elseOrEnd = UInt32(targetPC.offsetFromHead - selfPC.offsetFromHead)
 1170|    776|            return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(elseOrEnd))
 1171|    776|        }
$s7WasmKit21InstructionTranslatorV9visitElseyyKF:
 1174|    704|    mutating func visitElse() throws -> Output {
 1175|    704|        var frame = try controlStack.currentFrame()
 1176|    704|        guard case let .if(elseLabel, endLabel, _) = frame.kind else {
 1177|     24|            throw ValidationError(.expectedIfControlFrame)
 1178|    680|        }
 1179|    680|        preserveOnStack(depth: valueStack.height - frame.stackHeight)
 1180|    680|        try controlStack.resetReachability()
 1181|    680|        iseqBuilder.resetLastEmission()
 1182|    680|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
 1183|    680|            let offset = endPC.offsetFromHead - selfPC.offsetFromHead
 1184|    680|            return Int32(offset)
 1185|    680|        }
 1186|    680|        for result in frame.blockType.results.reversed() {
 1187|    653|            guard try checkBeforePop(typeHint: result, controlFrame: frame) else { continue }
 1188|    629|            _ = try valueStack.pop(result)
 1189|    672|        }
 1190|    672|        guard valueStack.height == frame.stackHeight else {
 1191|      7|            throw ValidationError(.valuesRemainingAtEndOfBlock)
 1192|    665|        }
 1193|    665|        _ = controlStack.popFrame()
 1194|    665|        frame.kind = .if(elseLabel: elseLabel, endLabel: endLabel, isElse: true)
 1195|    665|        frame.reachable = true
 1196|    665|        controlStack.pushFrame(frame)
 1197|    665|
 1198|    665|        // Re-push parameters
 1199|    665|        for parameter in frame.blockType.parameters {
 1200|     50|            _ = valueStack.push(parameter)
 1201|    665|        }
 1202|    665|        try iseqBuilder.pinLabelHere(elseLabel)
 1203|    662|    }
$s7WasmKit21InstructionTranslatorV9visitElseyyKFAA0C0Os5Int32VcAFmcfu_:
 1182|    680|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV9visitElseyyKFAA0C0Os5Int32VcAFmcfu_AfHcfu0_:
 1182|    637|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV9visitElseyyKFs5Int32VAC11ISeqBuilder021_3C1F9FC595E9AC192A47M10B121D811E8LLVyx_G_AA18MetaProgramCounterAHLLVALtcfU_:
 1182|    637|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
 1183|    637|            let offset = endPC.offsetFromHead - selfPC.offsetFromHead
 1184|    637|            return Int32(offset)
 1185|    637|        }
$s7WasmKit21InstructionTranslatorV8visitEndyyKF:
 1205|  10.3k|    mutating func visitEnd() throws -> Output {
 1206|  10.3k|        let toBePopped = try controlStack.currentFrame()
 1207|  10.3k|        iseqBuilder.resetLastEmission()
 1208|  10.3k|        if case .block(root: true) = toBePopped.kind {
 1209|    933|            try translateReturn()
 1210|    925|            guard valueStack.height == toBePopped.stackHeight else {
 1211|      6|                throw ValidationError(.valuesRemainingAtEndOfBlock)
 1212|    919|            }
 1213|    919|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1214|    908|            return
 1215|  9.45k|        }
 1216|  9.45k|
 1217|  9.45k|        if case .if(_, _, isElse: false) = toBePopped.kind {
 1218|    169|            let blockType = toBePopped.blockType
 1219|    169|            guard blockType.parameters == blockType.results else {
 1220|     13|                throw ValidationError(.parameterResultTypeMismatch(blockType: blockType))
 1221|    156|            }
 1222|  9.43k|        }
 1223|  9.43k|
 1224|  9.43k|        preserveOnStack(depth: Int(valueStack.height - toBePopped.stackHeight))
 1225|  9.43k|        switch toBePopped.kind {
 1226|  9.43k|        case .block:
 1227|  3.65k|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1228|  9.43k|        case .loop: break
 1229|  9.43k|        case .if:
 1230|    793|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1231|  9.43k|        }
 1232|  9.43k|        for result in toBePopped.blockType.results.reversed() {
 1233|  6.88k|            guard try checkBeforePop(typeHint: result, controlFrame: toBePopped) else { continue }
 1234|  6.15k|            _ = try valueStack.pop(result)
 1235|  9.39k|        }
 1236|  9.39k|        guard valueStack.height == toBePopped.stackHeight else {
 1237|     59|            throw ValidationError(.valuesRemainingAtEndOfBlock)
 1238|  9.33k|        }
 1239|  9.33k|        for result in toBePopped.blockType.results {
 1240|  6.82k|            _ = valueStack.push(result)
 1241|  9.33k|        }
 1242|  9.33k|        _ = controlStack.popFrame()
 1243|  9.33k|    }
$s7WasmKit21InstructionTranslatorV15computePopCount021_3C1F9FC595E9AC192A47K10B121D811E8LL11destination12currentFrame0R6Heights6UInt32VAC12ControlStackV0vS0Vyx__G_AOSitKFZ:
 1249|  7.78k|    ) throws -> UInt32 {
 1250|  7.78k|        let popCount: UInt32
 1251|  7.78k|        if _fastPath(currentFrame.reachable) {
 1252|  5.73k|            let count = currentHeight - Int(destination.copyCount) - destination.stackHeight
 1253|  5.73k|            guard count >= 0 else {
 1254|      7|                throw ValidationError(.stackHeightUnderflow(available: currentHeight, required: destination.stackHeight + Int(destination.copyCount)))
 1255|  5.72k|            }
 1256|  5.72k|            popCount = UInt32(count)
 1257|  5.72k|        } else {
 1258|  2.05k|            // Slow path: This path is taken when "br" is placed after "unreachable"
 1259|  2.05k|            // It's ok to put the fake popCount because it will not be executed at runtime.
 1260|  2.05k|            popCount = 0
 1261|  7.78k|        }
 1262|  7.78k|        return popCount
 1263|  7.78k|    }
$s7WasmKit21InstructionTranslatorV10emitBranch021_3C1F9FC595E9AC192A47J10B121D811E8LL_13relativeDepth4makeyAA0C0Oqd__c_s6UInt32Vqd__s5Int32V_A2KtctKAA0C9ImmediateRd__lF:
 1269|  7.78k|    ) throws {
 1270|  7.78k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1271|  7.78k|        let copyCount = frame.copyCount
 1272|  7.78k|        let popCount = try Self.computePopCount(
 1273|  7.78k|            destination: frame,
 1274|  7.78k|            currentFrame: try controlStack.currentFrame(),
 1275|  7.78k|            currentHeight: valueStack.height
 1276|  7.78k|        )
 1277|  7.78k|        iseqBuilder.emitWithLabel(makeInstruction, frame.continuation) { _, selfPC, continuation in
 1278|  7.78k|            let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1279|  7.78k|            return make(Int32(relativeOffset), UInt32(copyCount), popCount)
 1280|  7.78k|        }
 1281|  7.78k|    }
$s7WasmKit21InstructionTranslatorV10emitBranch021_3C1F9FC595E9AC192A47J10B121D811E8LL_13relativeDepth4makeyAA0C0Oqd__c_s6UInt32Vqd__s5Int32V_A2KtctKAA0C9ImmediateRd__lFqd__AC11ISeqBuilderAELLVyx_G_AA18MetaProgramCounterAELLVAStcfU_:
 1277|  5.91k|        iseqBuilder.emitWithLabel(makeInstruction, frame.continuation) { _, selfPC, continuation in
 1278|  5.91k|            let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1279|  5.91k|            return make(Int32(relativeOffset), UInt32(copyCount), popCount)
 1280|  5.91k|        }
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKF:
 1282|  7.37k|    mutating func visitBr(relativeDepth: UInt32) throws -> Output {
 1283|  7.37k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1284|  7.34k|
 1285|  7.34k|        // Copy from the stack top to the bottom to avoid overwrites
 1286|  7.34k|        //              [BLOCK1]
 1287|  7.34k|        //              [      ]
 1288|  7.34k|        //              [      ]
 1289|  7.34k|        //              [BLOCK2] () -> (i32, i64)
 1290|  7.34k|        // copy [1] +-->[  i32 ]
 1291|  7.34k|        //          +---[  i32 ]<--+ copy [2]
 1292|  7.34k|        //              [  i64 ]---+
 1293|  7.34k|        try copyOnBranch(targetFrame: frame)
 1294|  7.34k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1295|  7.34k|            return offset
 1296|  7.34k|        }
 1297|  7.34k|        for type in frame.copyTypes.reversed() {
 1298|  1.29k|            _ = try popOperand(type)
 1299|  7.30k|        }
 1300|  7.30k|        try markUnreachable()
 1301|  7.30k|    }
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu_:
 1294|  7.34k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu_AiKcfu0_:
 1294|  5.72k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFs5Int32VAI_A2GtcfU_:
 1294|  5.72k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1295|  5.72k|            return offset
 1296|  5.72k|        }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKF:
 1303|  1.82k|    mutating func visitBrIf(relativeDepth: UInt32) throws -> Output {
 1304|  1.82k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1305|  1.81k|        let condition = try popVRegOperand(.i32)
 1306|  1.81k|
 1307|  1.81k|        if frame.copyCount == 0 {
 1308|  1.34k|            guard let condition else { return }
 1309|  1.31k|            // Optimization where we don't need copying values when the branch taken
 1310|  1.31k|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
 1311|  1.31k|                let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1312|  1.31k|                return Instruction.BrIfOperand(
 1313|  1.31k|                    condition: LVReg(condition), offset: Int32(relativeOffset)
 1314|  1.31k|                )
 1315|  1.31k|            }
 1316|  1.31k|            return
 1317|  1.34k|        }
 1318|    466|        preserveOnStack(depth: valueStack.height - frame.stackHeight)
 1319|    466|
 1320|    466|        if let condition {
 1321|    441|            // If branch taken, fallthrough to landing pad, copy stack values
 1322|    441|            // then branch to the actual place
 1323|    441|            // If branch not taken, branch to the next of the landing pad
 1324|    441|            //
 1325|    441|            // (block (result i32)
 1326|    441|            //   (i32.const 42)
 1327|    441|            //   (i32.const 24)
 1328|    441|            //   (local.get 0)
 1329|    441|            //   (br_if 0) ------+
 1330|    441|            //   (local.get 1)   |
 1331|    441|            // )         <-------+
 1332|    441|            //
 1333|    441|            // [0x00] (i32.const 42 reg:0)
 1334|    441|            // [0x01] (i32.const 24 reg:1)
 1335|    441|            // [0x02] (local.get 0 result=reg:2)
 1336|    441|            // [0x03] (br_if_z offset=+0x3 cond=reg:2) --+
 1337|    441|            // [0x04] (stack.copy reg:1 -> reg:0)        |
 1338|    441|            // [0x05] (br offset=+0x2) --------+         |
 1339|    441|            // [0x06] (local.get 1 reg:2) <----|---------+
 1340|    441|            // [0x07] ...              <-------+
 1341|    441|            let onBranchNotTaken = iseqBuilder.allocLabel()
 1342|    441|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
 1343|    441|                let relativeOffset = continuation.offsetFromHead - conditionCheckAt.offsetFromHead
 1344|    441|                return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(relativeOffset))
 1345|    441|            }
 1346|    441|            try copyOnBranch(targetFrame: frame)
 1347|    441|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1348|    441|                return offset
 1349|    441|            }
 1350|    439|            try iseqBuilder.pinLabelHere(onBranchNotTaken)
 1351|    464|        }
 1352|    464|        try popPushValues(frame.copyTypes)
 1353|    460|    }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu_:
 1310|  1.31k|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu_AiKcfu0_:
 1310|    993|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0O0fG7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAMLLVAQtcfU_:
 1310|    993|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
 1311|    993|                let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1312|    993|                return Instruction.BrIfOperand(
 1313|    993|                    condition: LVReg(condition), offset: Int32(relativeOffset)
 1314|    993|                )
 1315|    993|            }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu1_:
 1342|    441|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu1_AiKcfu2_:
 1342|    439|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0O0fG7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAMLLVAQtcfU0_:
 1342|    439|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
 1343|    439|                let relativeOffset = continuation.offsetFromHead - conditionCheckAt.offsetFromHead
 1344|    439|                return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(relativeOffset))
 1345|    439|            }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu3_:
 1347|    441|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu3_AiKcfu4_:
 1347|    182|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFs5Int32VAI_A2GtcfU1_:
 1347|    182|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1348|    182|                return offset
 1349|    182|            }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKF:
 1355|    959|    mutating func visitBrTable(targets: WasmParser.BrTable) throws -> Output {
 1356|    959|        guard let index = try popVRegOperand(.i32) else { return }
 1357|    922|
 1358|    922|        let defaultFrame = try controlStack.branchTarget(relativeDepth: targets.defaultIndex)
 1359|    917|
 1360|    917|        // If this instruction is unreachable, copyCount might be greater than the actual stack height
 1361|    917|        try preserveOnStack(
 1362|    917|            depth: min(
 1363|    917|                Int(defaultFrame.copyCount),
 1364|    917|                valueStack.height - controlStack.currentFrame().stackHeight
 1365|    917|            )
 1366|    917|        )
 1367|    917|        let allLabelIndices = targets.labelIndices + [targets.defaultIndex]
 1368|    917|        let tableBuffer = allocator.allocateBrTable(capacity: allLabelIndices.count)
 1369|    917|        let operand = Instruction.BrTableOperand(
 1370|    917|            baseAddress: tableBuffer.baseAddress!,
 1371|    917|            count: UInt16(tableBuffer.count), index: index
 1372|    917|        )
 1373|    917|        iseqBuilder.emit(.brTable(operand))
 1374|    917|        let brTableAt = iseqBuilder.insertingPC
 1375|    917|
 1376|    917|        //
 1377|    917|        // (block $l1 (result i32)
 1378|    917|        //   (i32.const 63)
 1379|    917|        //   (block $l2 (result i32)
 1380|    917|        //     (i32.const 42)
 1381|    917|        //     (i32.const 24)
 1382|    917|        //     (local.get 0)
 1383|    917|        //     (br_table $l1 $l2) ---+
 1384|    917|        //                           |
 1385|    917|        //   )               <-------+
 1386|    917|        //   (i32.const 36)          |
 1387|    917|        // )              <----------+
 1388|    917|        //
 1389|    917|        //
 1390|    917|        //           [0x00] (i32.const 63 reg:0)
 1391|    917|        //           [0x01] (i32.const 42 reg:1)
 1392|    917|        //           [0x02] (i32.const 24 reg:2)
 1393|    917|        //           [0x03] (local.get 0 result=reg:3)
 1394|    917|        //           [0x04] (br_table index=reg:3 offsets=[
 1395|    917|        //                    +0x01       -----------------+
 1396|    917|        //                    +0x03       -----------------|----+
 1397|    917|        //                  ])                             |    |
 1398|    917|        //           [0x05] (stack.copy reg:2 -> reg:0) <--+    |
 1399|    917|        //  +------- [0x06] (br offset=+0x03)                   |
 1400|    917|        //  |        [0x07] (stack.copy reg:2 -> reg:1)  <------+
 1401|    917|        //  |  +---- [0x08] (br offset=+0x03)
 1402|    917|        //  +--|---> [0x09] (i32.const 36 reg:2)
 1403|    917|        //     |     [0x0a] (stack.copy reg:2 -> reg:0)
 1404|    917|        //     +---> [0x0b] ...
 1405|  2.70k|        for (entryIndex, labelIndex) in allLabelIndices.enumerated() {
 1406|  2.70k|            let frame = try controlStack.branchTarget(relativeDepth: labelIndex)
 1407|  2.69k|
 1408|  2.69k|            // Check copyTypes consistency
 1409|  2.69k|            guard frame.copyTypes.count == defaultFrame.copyTypes.count else {
 1410|     17|                throw ValidationError(.expectedSameCopyTypes(frameCopyTypes: frame.copyTypes, defaultFrameCopyTypes: defaultFrame.copyTypes))
 1411|  2.67k|            }
 1412|  2.67k|            try checkStackTop(frame.copyTypes)
 1413|  2.67k|
 1414|  2.67k|            do {
 1415|  2.67k|                let relativeOffset = iseqBuilder.insertingPC.offsetFromHead - brTableAt.offsetFromHead
 1416|  2.67k|                tableBuffer[entryIndex] = Instruction.BrTableOperand.Entry(
 1417|  2.67k|                    offset: Int32(relativeOffset)
 1418|  2.67k|                )
 1419|  2.67k|            }
 1420|  2.67k|            let emittedCopy = try copyOnBranch(targetFrame: frame)
 1421|  2.67k|            if emittedCopy {
 1422|    992|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
 1423|    992|                    let relativeOffset = continuation.offsetFromHead - brAt.offsetFromHead
 1424|    992|                    return Int32(relativeOffset)
 1425|    992|                }
 1426|  1.67k|            } else {
 1427|  1.67k|                // Optimization: If no value is copied, we can directly jump to the target
 1428|  1.67k|                iseqBuilder.fillBrTableEntry(frame.continuation, table: tableBuffer, index: entryIndex) { _, continuation in
 1429|  1.67k|                    return Instruction.BrTableOperand.Entry(offset: Int32(continuation.offsetFromHead - brTableAt.offsetFromHead))
 1430|  1.67k|                }
 1431|  1.67k|            }
 1432|  2.67k|        }
 1433|    882|        // Pop branch copy values for type checking
 1434|    882|        for type in defaultFrame.copyTypes.reversed() {
 1435|    495|            _ = try popOperand(type)
 1436|    882|        }
 1437|    882|        try markUnreachable()
 1438|    882|    }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0Os5Int32VcAJmcfu_:
 1422|    992|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0Os5Int32VcAJmcfu_AjLcfu0_:
 1422|    329|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFs5Int32VAC11ISeqBuilder021_3C1F9FC595E9AC192A47P10B121D811E8LLVyx_G_AA18MetaProgramCounterALLLVAPtcfU_:
 1422|    329|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
 1423|    329|                    let relativeOffset = continuation.offsetFromHead - brAt.offsetFromHead
 1424|    329|                    return Int32(relativeOffset)
 1425|    329|                }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0O0fG7OperandV5EntryVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAPLLVtcfU0_:
 1428|  1.37k|                iseqBuilder.fillBrTableEntry(frame.continuation, table: tableBuffer, index: entryIndex) { _, continuation in
 1429|  1.37k|                    return Instruction.BrTableOperand.Entry(offset: Int32(continuation.offsetFromHead - brTableAt.offsetFromHead))
 1430|  1.37k|                }
$s7WasmKit21InstructionTranslatorV11visitReturnyyKF:
 1440|    725|    mutating func visitReturn() throws -> Output {
 1441|    725|        try translateReturn()
 1442|    723|        try markUnreachable()
 1443|    723|    }
$s7WasmKit21InstructionTranslatorV13visitCallLike021_3C1F9FC595E9AC192A47K10B121D811E8LL10calleeTypes5Int16VSg0A5Types08FunctionR0V_tKF:
 1445|  3.44k|    private mutating func visitCallLike(calleeType: FunctionType) throws -> VReg? {
 1446|  3.44k|        for parameter in calleeType.parameters.reversed() {
 1447|    471|            guard (try popOnStackOperand(parameter)) != nil else { return nil }
 1448|  3.43k|        }
 1449|  3.43k|
 1450|  3.43k|        let spAddend =
 1451|  3.43k|            valueStack.stackRegBase + VReg(valueStack.height)
 1452|  3.43k|            + FrameHeaderLayout.size(of: calleeType)
 1453|  3.43k|
 1454|  8.59k|        for result in calleeType.results {
 1455|  8.59k|            _ = valueStack.push(result)
 1456|  8.59k|        }
 1457|  3.43k|        return VReg(spAddend)
 1458|  3.44k|    }
$s7WasmKit21InstructionTranslatorV9visitCall13functionIndexys6UInt32V_tKF:
 1459|  3.20k|    mutating func visitCall(functionIndex: UInt32) throws -> Output {
 1460|  3.20k|        let calleeType = try self.module.functionType(functionIndex, interner: funcTypeInterner)
 1461|  3.19k|        guard let spAddend = try visitCallLike(calleeType: calleeType) else { return }
 1462|  3.18k|        guard let callee = self.module.resolveCallee(functionIndex) else {
 1463|      0|            // Skip actual code emission if validation-only mode
 1464|      0|            return
 1465|  3.18k|        }
 1466|  3.18k|        if callee.isWasm {
 1467|  3.18k|            if module.isSameInstance(callee.wasm.instance) {
 1468|  3.18k|                emit(.compilingCall(Instruction.CallOperand(callee: callee, spAddend: spAddend)))
 1469|  3.18k|                return
 1470|  3.18k|            }
 1471|      2|        }
 1472|      2|        emit(.call(Instruction.CallOperand(callee: callee, spAddend: spAddend)))
 1473|      2|    }
$s7WasmKit21InstructionTranslatorV17visitCallIndirect9typeIndex05tableI0ys6UInt32V_AHtKF:
 1475|    267|    mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws -> Output {
 1476|    267|        let addressType = try module.addressType(tableIndex: tableIndex)
 1477|    258|        let address = try popVRegOperand(addressType)  // function address
 1478|    256|        let calleeType = try self.module.resolveType(typeIndex)
 1479|    253|        guard let spAddend = try visitCallLike(calleeType: calleeType) else { return }
 1480|    252|        guard let address = address else { return }
 1481|    187|        let internType = funcTypeInterner.intern(calleeType)
 1482|    187|        let operand = Instruction.CallIndirectOperand(
 1483|    187|            tableIndex: tableIndex,
 1484|    187|            type: internType,
 1485|    187|            index: address,
 1486|    187|            spAddend: spAddend
 1487|    187|        )
 1488|    187|        emit(.callIndirect(operand))
 1489|    187|    }
$s7WasmKit21InstructionTranslatorV9visitDropyyKF:
 1491|    245|    mutating func visitDrop() throws -> Output {
 1492|    245|        _ = try popAnyOperand()
 1493|    241|        iseqBuilder.resetLastEmission()
 1494|    241|    }
$s7WasmKit21InstructionTranslatorV11visitSelectyyKF:
 1495|     70|    mutating func visitSelect() throws -> Output {
 1496|     70|        let condition = try popVRegOperand(.i32)
 1497|     66|        let (value1Type, value1) = try popAnyOperand()
 1498|     64|        let (value2Type, value2) = try popAnyOperand()
 1499|     62|        switch (value1Type, value2Type) {
 1500|     62|        case (.some(.ref(_)), _), (_, .some(.ref(_))):
 1501|      0|            throw ValidationError(.cannotSelectOnReferenceTypes)
 1502|     62|        case let (.some(type1), .some(type2)):
 1503|     13|            guard type1 == type2 else {
 1504|     11|                throw ValidationError(.typeMismatchOnSelect(expected: type1, actual: type2))
 1505|     11|            }
 1506|     62|        case (.unknown, _), (_, .unknown):
 1507|     49|            break
 1508|     62|        }
 1509|     51|        let result = valueStack.push(value1Type)
 1510|     51|        if let condition = condition, let value1 = value1, let value2 = value2 {
 1511|      2|            let operand = Instruction.SelectOperand(
 1512|      2|                result: result,
 1513|      2|                condition: condition,
 1514|      2|                onTrue: ensureOnVReg(value2),
 1515|      2|                onFalse: ensureOnVReg(value1)
 1516|      2|            )
 1517|      2|            emit(.select(operand))
 1518|      2|        }
 1519|     51|    }
$s7WasmKit21InstructionTranslatorV16visitTypedSelect4typey0A5Types9ValueTypeO_tKF:
 1520|     32|    mutating func visitTypedSelect(type: WasmTypes.ValueType) throws -> Output {
 1521|     32|        let condition = try popVRegOperand(.i32)
 1522|     29|        let (value1Type, value1) = try popAnyOperand()
 1523|     28|        let (_, value2) = try popAnyOperand()
 1524|     27|        // TODO: Perform actual validation
 1525|     27|        // guard value1 == ValueType(type) else {
 1526|     27|        //     throw TranslationError("Type mismatch on `select`. Expected \(value1) and \(type) to be same")
 1527|     27|        // }
 1528|     27|        // guard value2 == ValueType(type) else {
 1529|     27|        //     throw TranslationError("Type mismatch on `select`. Expected \(value2) and \(type) to be same")
 1530|     27|        // }
 1531|     27|        let result = valueStack.push(value1Type)
 1532|     27|        if let condition = condition, let value1 = value1, let value2 = value2 {
 1533|      0|            let operand = Instruction.SelectOperand(
 1534|      0|                result: result,
 1535|      0|                condition: condition,
 1536|      0|                onTrue: ensureOnVReg(value2),
 1537|      0|                onFalse: ensureOnVReg(value1)
 1538|      0|            )
 1539|      0|            emit(.select(operand))
 1540|      0|        }
 1541|     27|    }
$s7WasmKit21InstructionTranslatorV13visitLocalGet10localIndexys6UInt32V_tKF:
 1542|  3.18k|    mutating func visitLocalGet(localIndex: UInt32) throws -> Output {
 1543|  3.18k|        iseqBuilder.resetLastEmission()
 1544|  3.18k|        try valueStack.pushLocal(localIndex, locals: &locals)
 1545|  3.17k|    }
$s7WasmKit21InstructionTranslatorV18visitLocalSetOrTee10localIndex02isI0ys6UInt32V_SbtKF:
 1546|  4.95k|    mutating func visitLocalSetOrTee(localIndex: UInt32, isTee: Bool) throws {
 1547|  4.95k|        preserveLocalsOnStack(localIndex)
 1548|  4.95k|        let type = try locals.type(of: localIndex)
 1549|  4.94k|        let result = localReg(localIndex)
 1550|  4.94k|
 1551|  4.94k|        guard try checkBeforePop(typeHint: type) else { return }
 1552|  4.90k|        let op = try valueStack.pop(type)
 1553|  4.89k|
 1554|  4.89k|        if case .const(let slotIndex, _) = op {
 1555|  1.42k|            // Optimize (local.set $x (i32.const $c)) to reg:$x = 42 rather than through const slot
 1556|  1.42k|            let value = constantSlots.values[slotIndex]
 1557|  1.42k|            let is32Bit = type == .i32 || type == .f32
 1558|  1.42k|            if is32Bit {
 1559|  1.30k|                emit(.const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg(result))))
 1560|  1.30k|            } else {
 1561|    123|                emit(.const64(Instruction.Const64Operand(value: value, result: LLVReg(result))))
 1562|    123|            }
 1563|  1.42k|            return
 1564|  3.47k|        }
 1565|  3.47k|
 1566|  3.47k|        let value = ensureOnVReg(op)
 1567|  3.47k|        guard try controlStack.currentFrame().reachable else { return }
 1568|  2.33k|        if !isTee, iseqBuilder.relinkLastInstructionResult(result) {
 1569|  1.31k|            // Good news, copyStack is optimized out :)
 1570|  1.31k|            return
 1571|  1.31k|        }
 1572|  1.02k|        emitCopyStack(from: value, to: result)
 1573|  1.02k|    }
$s7WasmKit21InstructionTranslatorV18visitLocalSetOrTee10localIndex02isI0ys6UInt32V_SbtKFSbyKXEfu_:
 1557|    710|            let is32Bit = type == .i32 || type == .f32
$s7WasmKit21InstructionTranslatorV13visitLocalSet10localIndexys6UInt32V_tKF:
 1574|  3.75k|    mutating func visitLocalSet(localIndex: UInt32) throws -> Output {
 1575|  3.75k|        try visitLocalSetOrTee(localIndex: localIndex, isTee: false)
 1576|  3.72k|    }
$s7WasmKit21InstructionTranslatorV13visitLocalTee10localIndexys6UInt32V_tKF:
 1577|  1.20k|    mutating func visitLocalTee(localIndex: UInt32) throws -> Output {
 1578|  1.20k|        try visitLocalSetOrTee(localIndex: localIndex, isTee: true)
 1579|  1.19k|        _ = try valueStack.pushLocal(localIndex, locals: &locals)
 1580|  1.19k|    }
$s7WasmKit21InstructionTranslatorV14visitGlobalGet11globalIndexys6UInt32V_tKF:
 1581|  25.8k|    mutating func visitGlobalGet(globalIndex: UInt32) throws -> Output {
 1582|  25.8k|        let type = try module.globalType(globalIndex)
 1583|  25.8k|        let result = valueStack.push(type)
 1584|  25.8k|        guard let global = module.resolveGlobal(globalIndex) else {
 1585|      0|            // Skip actual code emission if validation-only mode
 1586|      0|            return
 1587|  25.8k|        }
 1588|  25.8k|        emit(.globalGet(Instruction.GlobalAndVRegOperand(reg: LLVReg(result), global: global)))
 1589|  25.8k|    }
$s7WasmKit21InstructionTranslatorV14visitGlobalSet11globalIndexys6UInt32V_tKF:
 1590|  20.3k|    mutating func visitGlobalSet(globalIndex: UInt32) throws -> Output {
 1591|  20.3k|        let type = try module.globalType(globalIndex)
 1592|  20.3k|        guard let value = try popVRegOperand(type) else { return }
 1593|  20.3k|        guard let global = module.resolveGlobal(globalIndex) else {
 1594|      0|            // Skip actual code emission if validation-only mode
 1595|      0|            return
 1596|  20.3k|        }
 1597|  20.3k|        try validator.validateGlobalSet(global.globalType)
 1598|  20.3k|        emit(.globalSet(Instruction.GlobalAndVRegOperand(reg: LLVReg(value), global: global)))
 1599|  20.3k|    }
$s7WasmKit21InstructionTranslatorV8pushEmit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0Os5Int16VctF:
 1604|  6.81k|    ) {
 1605|  6.81k|        let register = valueStack.push(type)
 1606|  6.81k|        emit(
 1607|  6.81k|            instruction(register),
 1608|  6.81k|            resultRelink: { newResult in
 1609|  6.81k|                instruction(newResult)
 1610|  6.81k|            })
 1611|  6.81k|    }
$s7WasmKit21InstructionTranslatorV8pushEmit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0Os5Int16VctFAjLcfU_:
 1608|     37|            resultRelink: { newResult in
 1609|     37|                instruction(newResult)
 1610|     37|            })
$s7WasmKit21InstructionTranslatorV11popPushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0Os5Int16V_AlC0R5StackVyx_GtctKF:
 1616|  76.9k|    ) throws {
 1617|  76.9k|        let value = try popVRegOperand(pop)
 1618|  76.6k|        let result = valueStack.push(push)
 1619|  76.6k|        if let value = value {
 1620|  71.1k|            emit(
 1621|  71.1k|                instruction(value, result, valueStack),
 1622|  71.1k|                resultRelink: { [valueStack] newResult in
 1623|  71.1k|                    instruction(value, newResult, valueStack)
 1624|  71.1k|                })
 1625|  71.1k|        }
 1626|  76.6k|    }
$s7WasmKit21InstructionTranslatorV11popPushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0Os5Int16V_AlC0R5StackVyx_GtctKFAjLcfU_:
 1622|  1.26k|                resultRelink: { [valueStack] newResult in
 1623|  1.26k|                    instruction(value, newResult, valueStack)
 1624|  1.26k|                })
$s7WasmKit21InstructionTranslatorV8pop3Emit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_A2Ht_AA0C0Os5Int16V_A2Lt_AC0Q5StackVyx_GztXEtKF:
 1634|     24|    ) throws {
 1635|     24|        guard let pop1 = try popVRegOperand(pops.0),
 1636|     20|            let pop2 = try popVRegOperand(pops.1),
 1637|     18|            let pop3 = try popVRegOperand(pops.2)
 1638|     16|        else { return }
 1639|      1|        emit(instruction((pop1, pop2, pop3), &valueStack))
 1640|      1|    }
$s7WasmKit21InstructionTranslatorV8pop2Emit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AHt_AA0C0Os5Int16V_ALt_AC0Q5StackVyx_GztXEtKF:
 1648|     43|    ) throws {
 1649|     43|        guard let pop1 = try popVRegOperand(pops.0),
 1650|     34|            let pop2 = try popVRegOperand(pops.1)
 1651|     34|        else { return }
 1652|      0|        emit(instruction((pop1, pop2), &valueStack))
 1653|      0|    }
$s7WasmKit21InstructionTranslatorV12pop2PushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AHt_AhA0C0Os5Int16V_ALt_ALtctKF:
 1662|      2|    ) throws {
 1663|      2|        guard let pop1 = try popVRegOperand(pops.0),
 1664|      2|            let pop2 = try popVRegOperand(pops.1)
 1665|      1|        else { return }
 1666|      0|        let result = valueStack.push(push)
 1667|      0|        emit(
 1668|      0|            instruction((pop1, pop2), result),
 1669|      0|            resultRelink: { result in
 1670|      0|                instruction((pop1, pop2), result)
 1671|      0|            })
 1672|      0|    }
$s7WasmKit21InstructionTranslatorV9visitLoad021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVctKF:
 1679|  8.08k|    ) throws {
 1680|  8.08k|        let isMemory64 = try module.isMemory64(memoryIndex: 0)
 1681|  8.05k|        try validator.validateMemArg(memarg, naturalAlignment: naturalAlignment)
 1682|  8.01k|        try popPushEmit(.address(isMemory64: isMemory64), type) { value, result, stack in
 1683|  8.01k|            let loadOperand = Instruction.LoadOperand(
 1684|  8.01k|                offset: memarg.offset,
 1685|  8.01k|                pointer: value,
 1686|  8.01k|                result: result
 1687|  8.01k|            )
 1688|  8.01k|            return instruction(loadOperand)
 1689|  8.01k|        }
 1690|  7.99k|    }
$s7WasmKit21InstructionTranslatorV9visitLoad021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVctKFAMs5Int16V_AqC0T5StackVyx_GtcfU_:
 1682|  7.51k|        try popPushEmit(.address(isMemory64: isMemory64), type) { value, result, stack in
 1683|  7.51k|            let loadOperand = Instruction.LoadOperand(
 1684|  7.51k|                offset: memarg.offset,
 1685|  7.51k|                pointer: value,
 1686|  7.51k|                result: result
 1687|  7.51k|            )
 1688|  7.51k|            return instruction(loadOperand)
 1689|  7.51k|        }
$s7WasmKit21InstructionTranslatorV10visitStore021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVXEtKF:
 1696|    850|    ) throws {
 1697|    850|        let isMemory64 = try module.isMemory64(memoryIndex: 0)
 1698|    841|        try validator.validateMemArg(memarg, naturalAlignment: naturalAlignment)
 1699|    818|        let value = try popVRegOperand(type)
 1700|    807|        let pointer = try popVRegOperand(.address(isMemory64: isMemory64))
 1701|    798|        if let value = value, let pointer = pointer {
 1702|    692|            let storeOperand = Instruction.StoreOperand(
 1703|    692|                offset: memarg.offset,
 1704|    692|                pointer: pointer,
 1705|    692|                value: value
 1706|    692|            )
 1707|    692|            emit(instruction(storeOperand))
 1708|    692|        }
 1709|    798|    }
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKF:
 1711|  8.08k|    mutating func visitLoad(_ load: WasmParser.Instruction.Load, memarg: MemArg) throws {
 1712|  8.08k|        let instruction: (Instruction.LoadOperand) -> Instruction
 1713|  8.08k|        switch load {
 1714|  8.08k|        case .i32Load: instruction = Instruction.i32Load
 1715|  8.08k|        case .i64Load: instruction = Instruction.i64Load
 1716|  8.08k|        case .f32Load: instruction = Instruction.f32Load
 1717|  8.08k|        case .f64Load: instruction = Instruction.f64Load
 1718|  8.08k|        case .i32Load8S: instruction = Instruction.i32Load8S
 1719|  8.08k|        case .i32Load8U: instruction = Instruction.i32Load8U
 1720|  8.08k|        case .i32Load16S: instruction = Instruction.i32Load16S
 1721|  8.08k|        case .i32Load16U: instruction = Instruction.i32Load16U
 1722|  8.08k|        case .i64Load8S: instruction = Instruction.i64Load8S
 1723|  8.08k|        case .i64Load8U: instruction = Instruction.i64Load8U
 1724|  8.08k|        case .i64Load16S: instruction = Instruction.i64Load16S
 1725|  8.08k|        case .i64Load16U: instruction = Instruction.i64Load16U
 1726|  8.08k|        case .i64Load32S: instruction = Instruction.i64Load32S
 1727|  8.08k|        case .i64Load32U: instruction = Instruction.i64Load32U
 1728|  8.08k|        }
 1729|  8.08k|        try visitLoad(memarg, load.type, load.naturalAlignment, instruction)
 1730|  7.99k|    }
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_:
 1714|  1.17k|        case .i32Load: instruction = Instruction.i32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_AmOcfu0_:
 1714|  1.16k|        case .i32Load: instruction = Instruction.i32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_:
 1715|    575|        case .i64Load: instruction = Instruction.i64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_AmOcfu2_:
 1715|    569|        case .i64Load: instruction = Instruction.i64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_:
 1716|    589|        case .f32Load: instruction = Instruction.f32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_AmOcfu4_:
 1716|    556|        case .f32Load: instruction = Instruction.f32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_:
 1717|    658|        case .f64Load: instruction = Instruction.f64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_AmOcfu6_:
 1717|    652|        case .f64Load: instruction = Instruction.f64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_:
 1718|    165|        case .i32Load8S: instruction = Instruction.i32Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_AmOcfu8_:
 1718|    159|        case .i32Load8S: instruction = Instruction.i32Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_:
 1719|     21|        case .i32Load8U: instruction = Instruction.i32Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_AmOcfu10_:
 1719|      9|        case .i32Load8U: instruction = Instruction.i32Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_:
 1720|    831|        case .i32Load16S: instruction = Instruction.i32Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_AmOcfu12_:
 1720|    821|        case .i32Load16S: instruction = Instruction.i32Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_:
 1721|  1.27k|        case .i32Load16U: instruction = Instruction.i32Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_AmOcfu14_:
 1721|  1.25k|        case .i32Load16U: instruction = Instruction.i32Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_:
 1722|    923|        case .i64Load8S: instruction = Instruction.i64Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_AmOcfu16_:
 1722|    902|        case .i64Load8S: instruction = Instruction.i64Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu17_:
 1723|    345|        case .i64Load8U: instruction = Instruction.i64Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu17_AmOcfu18_:
 1723|    332|        case .i64Load8U: instruction = Instruction.i64Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu19_:
 1724|     58|        case .i64Load16S: instruction = Instruction.i64Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu19_AmOcfu20_:
 1724|     47|        case .i64Load16S: instruction = Instruction.i64Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu21_:
 1725|    252|        case .i64Load16U: instruction = Instruction.i64Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu21_AmOcfu22_:
 1725|    244|        case .i64Load16U: instruction = Instruction.i64Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu23_:
 1726|    553|        case .i64Load32S: instruction = Instruction.i64Load32S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu23_AmOcfu24_:
 1726|    517|        case .i64Load32S: instruction = Instruction.i64Load32S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu25_:
 1727|    663|        case .i64Load32U: instruction = Instruction.i64Load32U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu25_AmOcfu26_:
 1727|    286|        case .i64Load32U: instruction = Instruction.i64Load32U
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKF:
 1732|    850|    mutating func visitStore(_ store: WasmParser.Instruction.Store, memarg: MemArg) throws {
 1733|    850|        let instruction: (Instruction.StoreOperand) -> Instruction
 1734|    850|        switch store {
 1735|    850|        case .i32Store: instruction = Instruction.i32Store
 1736|    850|        case .i64Store: instruction = Instruction.i64Store
 1737|    850|        case .f32Store: instruction = Instruction.f32Store
 1738|    850|        case .f64Store: instruction = Instruction.f64Store
 1739|    850|        case .i32Store8: instruction = Instruction.i32Store8
 1740|    850|        case .i32Store16: instruction = Instruction.i32Store16
 1741|    850|        case .i64Store8: instruction = Instruction.i64Store8
 1742|    850|        case .i64Store16: instruction = Instruction.i64Store16
 1743|    850|        case .i64Store32: instruction = Instruction.i64Store32
 1744|    850|        }
 1745|    850|        try visitStore(memarg, store.type, store.naturalAlignment, instruction)
 1746|    798|    }
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_:
 1735|     53|        case .i32Store: instruction = Instruction.i32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_AmOcfu0_:
 1735|      6|        case .i32Store: instruction = Instruction.i32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_:
 1736|      6|        case .i64Store: instruction = Instruction.i64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_:
 1737|    457|        case .f32Store: instruction = Instruction.f32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_AmOcfu4_:
 1737|    440|        case .f32Store: instruction = Instruction.f32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_:
 1738|      6|        case .f64Store: instruction = Instruction.f64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_AmOcfu6_:
 1738|      2|        case .f64Store: instruction = Instruction.f64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_:
 1739|    224|        case .i32Store8: instruction = Instruction.i32Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_AmOcfu8_:
 1739|    217|        case .i32Store8: instruction = Instruction.i32Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_:
 1740|      8|        case .i32Store16: instruction = Instruction.i32Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_AmOcfu10_:
 1740|      4|        case .i32Store16: instruction = Instruction.i32Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_:
 1741|     12|        case .i64Store8: instruction = Instruction.i64Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_AmOcfu12_:
 1741|      3|        case .i64Store8: instruction = Instruction.i64Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_:
 1742|     80|        case .i64Store16: instruction = Instruction.i64Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_AmOcfu14_:
 1742|     19|        case .i64Store16: instruction = Instruction.i64Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_:
 1743|      4|        case .i64Store32: instruction = Instruction.i64Store32
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_AmOcfu16_:
 1743|      1|        case .i64Store32: instruction = Instruction.i64Store32
$s7WasmKit21InstructionTranslatorV15visitMemorySize6memoryys6UInt32V_tKF:
 1747|  3.66k|    mutating func visitMemorySize(memory: UInt32) throws -> Output {
 1748|  3.66k|        let sizeType: ValueType = try module.isMemory64(memoryIndex: memory) ? .i64 : .i32
 1749|  3.66k|        pushEmit(sizeType, { .memorySize(Instruction.MemorySizeOperand(memoryIndex: memory, result: LVReg($0))) })
 1750|  3.66k|    }
$s7WasmKit21InstructionTranslatorV15visitMemorySize6memoryys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 1749|  3.66k|        pushEmit(sizeType, { .memorySize(Instruction.MemorySizeOperand(memoryIndex: memory, result: LVReg($0))) })
$s7WasmKit21InstructionTranslatorV15visitMemoryGrow6memoryys6UInt32V_tKF:
 1751|  1.08k|    mutating func visitMemoryGrow(memory: UInt32) throws -> Output {
 1752|  1.08k|        let isMemory64 = try module.isMemory64(memoryIndex: memory)
 1753|  1.08k|        let sizeType = ValueType.address(isMemory64: isMemory64)
 1754|  1.08k|        // Just pop/push the same type (i64 or i32) value
 1755|  1.08k|        try popPushEmit(sizeType, sizeType) { value, result, stack in
 1756|  1.08k|            .memoryGrow(
 1757|  1.08k|                Instruction.MemoryGrowOperand(
 1758|  1.08k|                    result: result, delta: value, memory: memory
 1759|  1.08k|                ))
 1760|  1.08k|        }
 1761|  1.08k|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryGrow6memoryys6UInt32V_tKFAA0C0Os5Int16V_AkC10ValueStackVyx_GtcfU_:
 1755|  1.08k|        try popPushEmit(sizeType, sizeType) { value, result, stack in
 1756|  1.08k|            .memoryGrow(
 1757|  1.08k|                Instruction.MemoryGrowOperand(
 1758|  1.08k|                    result: result, delta: value, memory: memory
 1759|  1.08k|                ))
 1760|  1.08k|        }
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtF:
 1763|  37.2k|    private mutating func visitConst(_ type: ValueType, _ value: Value) {
 1764|  37.2k|        if let constSlotIndex = constantSlots.allocate(value) {
 1765|  34.1k|            valueStack.pushConst(constSlotIndex, type: type)
 1766|  34.1k|            iseqBuilder.resetLastEmission()
 1767|  34.1k|            return
 1768|  34.1k|        }
 1769|  3.13k|        let value = UntypedValue(value)
 1770|  3.13k|        let is32Bit = type == .i32 || type == .f32
 1771|  3.13k|        if is32Bit {
 1772|  2.05k|            pushEmit(
 1773|  2.05k|                type,
 1774|  2.05k|                {
 1775|  2.05k|                    .const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg($0)))
 1776|  2.05k|                })
 1777|  2.05k|        } else {
 1778|  1.08k|            pushEmit(type, { .const64(Instruction.Const64Operand(value: value, result: LLVReg($0))) })
 1779|  1.08k|        }
 1780|  3.13k|    }
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFSbyKXEfu_:
 1770|  1.95k|        let is32Bit = type == .i32 || type == .f32
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFAA0C0Os5Int16VcfU_:
 1774|  2.05k|                {
 1775|  2.05k|                    .const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg($0)))
 1776|  2.05k|                })
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFAA0C0Os5Int16VcfU0_:
 1778|  1.11k|            pushEmit(type, { .const64(Instruction.Const64Operand(value: value, result: LLVReg($0))) })
$s7WasmKit21InstructionTranslatorV13visitI32Const5valueys5Int32V_tF:
 1781|  10.0k|    mutating func visitI32Const(value: Int32) -> Output { visitConst(.i32, .i32(UInt32(bitPattern: value))) }
$s7WasmKit21InstructionTranslatorV13visitI64Const5valueys5Int64V_tF:
 1782|  8.44k|    mutating func visitI64Const(value: Int64) -> Output { visitConst(.i64, .i64(UInt64(bitPattern: value))) }
$s7WasmKit21InstructionTranslatorV13visitF32Const5valuey0A6Parser7IEEE754O7Float32V_tF:
 1783|  11.3k|    mutating func visitF32Const(value: IEEE754.Float32) -> Output { visitConst(.f32, .f32(value.bitPattern)) }
$s7WasmKit21InstructionTranslatorV13visitF64Const5valuey0A6Parser7IEEE754O7Float64V_tF:
 1784|  7.47k|    mutating func visitF64Const(value: IEEE754.Float64) -> Output { visitConst(.f64, .f64(value.bitPattern)) }
$s7WasmKit21InstructionTranslatorV12visitRefNull4typey0A5Types13ReferenceTypeO_tF:
 1785|      6|    mutating func visitRefNull(type: WasmTypes.ReferenceType) -> Output {
 1786|      6|        pushEmit(.ref(type), { .refNull(Instruction.RefNullOperand(result: $0, type: type)) })
 1787|      6|    }
$s7WasmKit21InstructionTranslatorV12visitRefNull4typey0A5Types13ReferenceTypeO_tFAA0C0Os5Int16VcfU_:
 1786|      6|        pushEmit(.ref(type), { .refNull(Instruction.RefNullOperand(result: $0, type: type)) })
$s7WasmKit21InstructionTranslatorV14visitRefIsNullyyKF:
 1788|     17|    mutating func visitRefIsNull() throws -> Output {
 1789|     17|        let value = try valueStack.popRef()
 1790|      0|        let result = valueStack.push(.i32)
 1791|      0|        emit(.refIsNull(Instruction.RefIsNullOperand(value: LVReg(ensureOnVReg(value)), result: LVReg(result))))
 1792|      0|    }
$s7WasmKit21InstructionTranslatorV12visitRefFunc13functionIndexys6UInt32V_tKF:
 1793|      4|    mutating func visitRefFunc(functionIndex: UInt32) throws -> Output {
 1794|      4|        try validator.validateRefFunc(functionIndex: functionIndex)
 1795|      0|        pushEmit(.ref(.funcRef), { .refFunc(Instruction.RefFuncOperand(index: functionIndex, result: LVReg($0))) })
 1796|      0|    }
$s7WasmKit21InstructionTranslatorV10visitUnary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ0F7OperandVctKF:
 1798|  26.0k|    private mutating func visitUnary(_ operand: ValueType, _ instruction: @escaping (Instruction.UnaryOperand) -> Instruction) throws {
 1799|  26.0k|        try popPushEmit(operand, operand) { value, result, stack in
 1800|  26.0k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1801|  26.0k|        }
 1802|  25.9k|    }
$s7WasmKit21InstructionTranslatorV10visitUnary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ0F7OperandVctKFAJs5Int16V_AnC0Q5StackVyx_GtcfU_:
 1799|  24.6k|        try popPushEmit(operand, operand) { value, result, stack in
 1800|  24.6k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1801|  24.6k|        }
$s7WasmKit21InstructionTranslatorV11visitBinary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ0F7OperandVctKF:
 1807|  30.4k|    ) throws {
 1808|  30.4k|        let rhs = try popVRegOperand(operand)
 1809|  30.1k|        let lhs = try popVRegOperand(operand)
 1810|  30.0k|        let result = valueStack.push(result)
 1811|  30.0k|        guard let lhs = lhs, let rhs = rhs else { return }
 1812|  26.2k|        emit(
 1813|  26.2k|            instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs)),
 1814|  26.2k|            resultRelink: { result in
 1815|  26.2k|                return instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs))
 1816|  26.2k|            }
 1817|  26.2k|        )
 1818|  26.2k|    }
$s7WasmKit21InstructionTranslatorV11visitBinary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ0F7OperandVctKFAJs5Int16VcfU_:
 1814|      9|            resultRelink: { result in
 1815|      9|                return instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs))
 1816|      9|            }
$s7WasmKit21InstructionTranslatorV8visitCmp021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ13BinaryOperandVctKF:
 1819|  4.71k|    private mutating func visitCmp(_ operand: ValueType, _ instruction: @escaping (Instruction.BinaryOperand) -> Instruction) throws {
 1820|  4.71k|        try visitBinary(operand, .i32, instruction)
 1821|  4.54k|    }
$s7WasmKit21InstructionTranslatorV15visitConversion021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ12UnaryOperandVctKF:
 1822|  39.8k|    private mutating func visitConversion(_ from: ValueType, _ to: ValueType, _ instruction: @escaping (Instruction.UnaryOperand) -> Instruction) throws {
 1823|  39.8k|        try popPushEmit(from, to) { value, result, stack in
 1824|  39.8k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1825|  39.8k|        }
 1826|  39.6k|    }
$s7WasmKit21InstructionTranslatorV15visitConversion021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ12UnaryOperandVctKFAJs5Int16V_AnC0Q5StackVyx_GtcfU_:
 1823|  37.9k|        try popPushEmit(from, to) { value, result, stack in
 1824|  37.9k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1825|  37.9k|        }
$s7WasmKit21InstructionTranslatorV11visitI32EqzyyKF:
 1827|    629|    mutating func visitI32Eqz() throws -> Output {
 1828|    629|        try popPushEmit(.i32, .i32) { value, result, stack in
 1829|    629|            .i32Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1830|    629|        }
 1831|    627|    }
$s7WasmKit21InstructionTranslatorV11visitI32EqzyyKFAA0C0Os5Int16V_AhC10ValueStackVyx_GtcfU_:
 1828|    136|        try popPushEmit(.i32, .i32) { value, result, stack in
 1829|    136|            .i32Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1830|    136|        }
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKF:
 1832|  4.71k|    mutating func visitCmp(_ cmp: WasmParser.Instruction.Cmp) throws {
 1833|  4.71k|        let operand: ValueType
 1834|  4.71k|        let instruction: (Instruction.BinaryOperand) -> Instruction
 1835|  4.71k|        switch cmp {
 1836|  4.71k|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
 1837|  4.71k|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
 1838|  4.71k|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
 1839|  4.71k|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
 1840|  4.71k|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
 1841|  4.71k|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
 1842|  4.71k|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
 1843|  4.71k|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
 1844|  4.71k|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
 1845|  4.71k|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
 1846|  4.71k|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
 1847|  4.71k|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
 1848|  4.71k|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
 1849|  4.71k|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
 1850|  4.71k|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
 1851|  4.71k|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
 1852|  4.71k|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
 1853|  4.71k|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
 1854|  4.71k|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
 1855|  4.71k|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
 1856|  4.71k|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
 1857|  4.71k|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
 1858|  4.71k|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
 1859|  4.71k|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
 1860|  4.71k|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
 1861|  4.71k|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
 1862|  4.71k|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
 1863|  4.71k|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
 1864|  4.71k|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
 1865|  4.71k|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
 1866|  4.71k|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
 1867|  4.71k|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
 1868|  4.71k|        }
 1869|  4.71k|        try visitCmp(operand, instruction)
 1870|  4.54k|    }
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu_:
 1836|     12|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu_AjLcfu0_:
 1836|      6|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu1_:
 1837|      4|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu1_AjLcfu2_:
 1837|      2|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu3_:
 1838|    594|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu3_AjLcfu4_:
 1838|    479|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu5_:
 1839|     24|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu5_AjLcfu6_:
 1839|     18|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu7_:
 1840|    527|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu7_AjLcfu8_:
 1840|    510|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu9_:
 1841|    567|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu9_AjLcfu10_:
 1841|    518|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu11_:
 1842|     74|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu11_AjLcfu12_:
 1842|      3|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu13_:
 1843|     40|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu13_AjLcfu14_:
 1843|      5|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu15_:
 1844|    389|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu15_AjLcfu16_:
 1844|    364|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu17_:
 1845|     21|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu17_AjLcfu18_:
 1845|     11|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu19_:
 1846|      6|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu19_AjLcfu20_:
 1846|      2|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu21_:
 1847|     22|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu21_AjLcfu22_:
 1847|     15|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu23_:
 1848|    164|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu23_AjLcfu24_:
 1848|    157|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu25_:
 1849|      7|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu25_AjLcfu26_:
 1849|      4|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu27_:
 1850|      6|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu29_:
 1851|      9|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu29_AjLcfu30_:
 1851|      4|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu31_:
 1852|     51|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu31_AjLcfu32_:
 1852|     46|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu33_:
 1853|     20|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu33_AjLcfu34_:
 1853|     11|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu35_:
 1854|     12|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu35_AjLcfu36_:
 1854|      5|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu37_:
 1855|    129|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu37_AjLcfu38_:
 1855|    123|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu39_:
 1856|     13|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu39_AjLcfu40_:
 1856|      4|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu41_:
 1857|    253|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu41_AjLcfu42_:
 1857|    228|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu43_:
 1858|     17|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu43_AjLcfu44_:
 1858|     12|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu45_:
 1859|     10|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu45_AjLcfu46_:
 1859|      4|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu47_:
 1860|    332|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu47_AjLcfu48_:
 1860|    314|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu49_:
 1861|     85|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu49_AjLcfu50_:
 1861|     57|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu51_:
 1862|    706|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu51_AjLcfu52_:
 1862|    552|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu53_:
 1863|    376|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu53_AjLcfu54_:
 1863|    373|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu55_:
 1864|    219|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu55_AjLcfu56_:
 1864|    207|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu57_:
 1865|      9|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu57_AjLcfu58_:
 1865|      3|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu59_:
 1866|      9|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu59_AjLcfu60_:
 1866|      3|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu61_:
 1867|     12|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu61_AjLcfu62_:
 1867|      5|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKF:
 1871|  25.7k|    public mutating func visitBinary(_ binary: WasmParser.Instruction.Binary) throws {
 1872|  25.7k|        let operand: ValueType
 1873|  25.7k|        let result: ValueType
 1874|  25.7k|        let instruction: (Instruction.BinaryOperand) -> Instruction
 1875|  25.7k|        switch binary {
 1876|  25.7k|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
 1877|  25.7k|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
 1878|  25.7k|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
 1879|  25.7k|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
 1880|  25.7k|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
 1881|  25.7k|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
 1882|  25.7k|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
 1883|  25.7k|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
 1884|  25.7k|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
 1885|  25.7k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
 1886|  25.7k|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
 1887|  25.7k|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
 1888|  25.7k|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
 1889|  25.7k|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
 1890|  25.7k|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
 1891|  25.7k|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
 1892|  25.7k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
 1893|  25.7k|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
 1894|  25.7k|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
 1895|  25.7k|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
 1896|  25.7k|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
 1897|  25.7k|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
 1898|  25.7k|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
 1899|  25.7k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
 1900|  25.7k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
 1901|  25.7k|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
 1902|  25.7k|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
 1903|  25.7k|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
 1904|  25.7k|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
 1905|  25.7k|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
 1906|  25.7k|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
 1907|  25.7k|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
 1908|  25.7k|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
 1909|  25.7k|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
 1910|  25.7k|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
 1911|  25.7k|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
 1912|  25.7k|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
 1913|  25.7k|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
 1914|  25.7k|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
 1915|  25.7k|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
 1916|  25.7k|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
 1917|  25.7k|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
 1918|  25.7k|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
 1919|  25.7k|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
 1920|  25.7k|        }
 1921|  25.7k|        try visitBinary(operand, result, instruction)
 1922|  25.4k|    }
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_:
 1876|      5|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_AjLcfu0_:
 1876|      3|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_:
 1877|     27|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_AjLcfu2_:
 1877|     11|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_:
 1878|     11|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_AjLcfu4_:
 1878|      6|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_:
 1879|    130|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_AjLcfu6_:
 1879|     12|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_:
 1880|    224|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_AjLcfu8_:
 1880|    202|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_:
 1881|    137|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_AjLcfu10_:
 1881|      3|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_:
 1882|    803|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_AjLcfu12_:
 1882|    506|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_:
 1883|     23|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_AjLcfu14_:
 1883|     14|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_:
 1884|     18|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_AjLcfu16_:
 1884|     14|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_:
 1885|  12.1k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_AjLcfu18_:
 1885|  11.3k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_:
 1886|     13|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_AjLcfu20_:
 1886|      5|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_:
 1887|     20|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_AjLcfu22_:
 1887|      2|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_:
 1888|    323|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_AjLcfu24_:
 1888|    315|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_:
 1889|     11|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_AjLcfu26_:
 1889|      6|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_:
 1890|    456|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_AjLcfu28_:
 1890|    450|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_:
 1891|    338|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_AjLcfu30_:
 1891|      7|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_:
 1892|    109|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_AjLcfu32_:
 1892|      2|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_:
 1893|     54|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_AjLcfu34_:
 1893|     20|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_:
 1894|    522|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_AjLcfu36_:
 1894|    407|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_:
 1895|    104|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_AjLcfu38_:
 1895|      8|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_:
 1896|    443|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_AjLcfu40_:
 1896|    305|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_:
 1897|     64|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_AjLcfu42_:
 1897|     16|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_:
 1898|     89|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_AjLcfu44_:
 1898|      5|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_:
 1899|    214|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_AjLcfu46_:
 1899|     19|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_:
 1900|  7.82k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_AjLcfu48_:
 1900|  7.73k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu49_:
 1901|     20|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu49_AjLcfu50_:
 1901|      5|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu51_:
 1902|     30|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu51_AjLcfu52_:
 1902|      3|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu53_:
 1903|      5|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu53_AjLcfu54_:
 1903|      2|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu55_:
 1904|    122|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu55_AjLcfu56_:
 1904|    113|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu57_:
 1905|    190|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu57_AjLcfu58_:
 1905|    165|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu59_:
 1906|    155|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu59_AjLcfu60_:
 1906|    124|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu61_:
 1907|      5|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu61_AjLcfu62_:
 1907|      2|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu63_:
 1908|      6|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu63_AjLcfu64_:
 1908|      1|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu65_:
 1909|      7|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu65_AjLcfu66_:
 1909|      1|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu67_:
 1910|     15|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu67_AjLcfu68_:
 1910|      2|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu69_:
 1911|      5|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu69_AjLcfu70_:
 1911|      2|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu71_:
 1912|     27|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu71_AjLcfu72_:
 1912|      2|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu73_:
 1913|    397|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu73_AjLcfu74_:
 1913|      2|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu75_:
 1914|    237|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu75_AjLcfu76_:
 1914|     24|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu77_:
 1915|     54|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu77_AjLcfu78_:
 1915|      4|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu79_:
 1916|    324|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu79_AjLcfu80_:
 1916|    305|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu81_:
 1917|      4|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu81_AjLcfu82_:
 1917|      2|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu83_:
 1918|      7|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu83_AjLcfu84_:
 1918|      2|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu85_:
 1919|     14|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu85_AjLcfu86_:
 1919|      4|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
$s7WasmKit21InstructionTranslatorV11visitI64EqzyyKF:
 1923|  1.29k|    mutating func visitI64Eqz() throws -> Output {
 1924|  1.29k|        try popPushEmit(.i64, .i32) { value, result, stack in
 1925|  1.29k|            .i64Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1926|  1.29k|        }
 1927|  1.28k|    }
$s7WasmKit21InstructionTranslatorV11visitI64EqzyyKFAA0C0Os5Int16V_AhC10ValueStackVyx_GtcfU_:
 1924|  1.17k|        try popPushEmit(.i64, .i32) { value, result, stack in
 1925|  1.17k|            .i64Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1926|  1.17k|        }
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKF:
 1928|  26.0k|    mutating func visitUnary(_ unary: WasmParser.Instruction.Unary) throws {
 1929|  26.0k|        let operand: ValueType
 1930|  26.0k|        let instruction: (Instruction.UnaryOperand) -> Instruction
 1931|  26.0k|        switch unary {
 1932|  26.0k|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
 1933|  26.0k|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
 1934|  26.0k|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
 1935|  26.0k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
 1936|  26.0k|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
 1937|  26.0k|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
 1938|  26.0k|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
 1939|  26.0k|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
 1940|  26.0k|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
 1941|  26.0k|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
 1942|  26.0k|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
 1943|  26.0k|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
 1944|  26.0k|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
 1945|  26.0k|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
 1946|  26.0k|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
 1947|  26.0k|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
 1948|  26.0k|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
 1949|  26.0k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
 1950|  26.0k|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
 1951|  26.0k|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
 1952|  26.0k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
 1953|  26.0k|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
 1954|  26.0k|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
 1955|  26.0k|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
 1956|  26.0k|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
 1957|  26.0k|        }
 1958|  26.0k|        try visitUnary(operand, instruction)
 1959|  25.9k|    }
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_:
 1932|  1.08k|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_AjLcfu0_:
 1932|  1.07k|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_:
 1933|    388|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_AjLcfu2_:
 1933|    523|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_:
 1934|    551|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_AjLcfu4_:
 1934|    548|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_:
 1935|  1.16k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_AjLcfu6_:
 1935|    830|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_:
 1936|  1.59k|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_AjLcfu8_:
 1936|  1.55k|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_:
 1937|  1.91k|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_AjLcfu10_:
 1937|  1.47k|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_:
 1938|    891|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_AjLcfu12_:
 1938|    526|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_:
 1939|    496|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_AjLcfu14_:
 1939|    486|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_:
 1940|    429|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_AjLcfu16_:
 1940|    414|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_:
 1941|  1.14k|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_AjLcfu18_:
 1941|  1.11k|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_:
 1942|    732|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_AjLcfu20_:
 1942|    723|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_:
 1943|    574|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_AjLcfu22_:
 1943|    564|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_:
 1944|    720|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_AjLcfu24_:
 1944|    695|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_:
 1945|  2.44k|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_AjLcfu26_:
 1945|  2.37k|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_:
 1946|  2.28k|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_AjLcfu28_:
 1946|  2.64k|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_:
 1947|    464|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_AjLcfu30_:
 1947|    459|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_:
 1948|  1.38k|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_AjLcfu32_:
 1948|  1.37k|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_:
 1949|    452|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_AjLcfu34_:
 1949|    429|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_:
 1950|    834|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_AjLcfu36_:
 1950|    797|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_:
 1951|    751|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_AjLcfu38_:
 1951|    745|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_:
 1952|    423|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_AjLcfu40_:
 1952|    404|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_:
 1953|  1.73k|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_AjLcfu42_:
 1953|  1.51k|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_:
 1954|  1.79k|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_AjLcfu44_:
 1954|  1.54k|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_:
 1955|  1.23k|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_AjLcfu46_:
 1955|  1.21k|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_:
 1956|    590|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_AjLcfu48_:
 1956|    580|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKF:
 1960|  39.8k|    mutating func visitConversion(_ conversion: WasmParser.Instruction.Conversion) throws {
 1961|  39.8k|        let from: ValueType
 1962|  39.8k|        let to: ValueType
 1963|  39.8k|        let instruction: (Instruction.UnaryOperand) -> Instruction
 1964|  39.8k|        switch conversion {
 1965|  39.8k|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
 1966|  39.8k|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
 1967|  39.8k|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
 1968|  39.8k|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
 1969|  39.8k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
 1970|  39.8k|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
 1971|  39.8k|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
 1972|  39.8k|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
 1973|  39.8k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
 1974|  39.8k|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
 1975|  39.8k|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
 1976|  39.8k|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
 1977|  39.8k|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
 1978|  39.8k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
 1979|  39.8k|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
 1980|  39.8k|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
 1981|  39.8k|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
 1982|  39.8k|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
 1983|  39.8k|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
 1984|  39.8k|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
 1985|  39.8k|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
 1986|  39.8k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
 1987|  39.8k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
 1988|  39.8k|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
 1989|  39.8k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
 1990|  39.8k|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
 1991|  39.8k|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
 1992|  39.8k|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
 1993|  39.8k|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
 1994|  39.8k|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
 1995|  39.8k|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
 1996|  39.8k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
 1997|  39.8k|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
 1998|  39.8k|        }
 1999|  39.8k|        try visitConversion(from, to, instruction)
 2000|  39.6k|    }
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu_:
 1965|  2.07k|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu_AjLcfu0_:
 1965|  2.06k|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu1_:
 1966|    242|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu1_AjLcfu2_:
 1966|    236|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu3_:
 1967|    587|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu3_AjLcfu4_:
 1967|    573|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu5_:
 1968|    445|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu5_AjLcfu6_:
 1968|    436|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu7_:
 1969|  1.86k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu7_AjLcfu8_:
 1969|  2.01k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu9_:
 1970|    895|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu9_AjLcfu10_:
 1970|    890|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu11_:
 1971|    384|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu11_AjLcfu12_:
 1971|    375|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu13_:
 1972|  1.23k|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu13_AjLcfu14_:
 1972|  1.23k|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu15_:
 1973|    428|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu15_AjLcfu16_:
 1973|    419|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu17_:
 1974|  1.00k|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu17_AjLcfu18_:
 1974|    846|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu19_:
 1975|     10|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu19_AjLcfu20_:
 1975|      4|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu21_:
 1976|    560|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu21_AjLcfu22_:
 1976|    556|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu23_:
 1977|    283|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu23_AjLcfu24_:
 1977|    276|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu25_:
 1978|  1.49k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu25_AjLcfu26_:
 1978|  1.52k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu27_:
 1979|     96|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu27_AjLcfu28_:
 1979|      5|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu29_:
 1980|    407|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu29_AjLcfu30_:
 1980|    385|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu31_:
 1981|  1.35k|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu31_AjLcfu32_:
 1981|  1.34k|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu33_:
 1982|     34|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu33_AjLcfu34_:
 1982|     20|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu35_:
 1983|  1.95k|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu35_AjLcfu36_:
 1983|  1.94k|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu37_:
 1984|  1.03k|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu37_AjLcfu38_:
 1984|    522|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu39_:
 1985|  2.06k|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu39_AjLcfu40_:
 1985|  2.57k|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu41_:
 1986|  6.18k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu41_AjLcfu42_:
 1986|  5.42k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu43_:
 1987|  6.35k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu43_AjLcfu44_:
 1987|  5.57k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu45_:
 1988|    962|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu45_AjLcfu46_:
 1988|    944|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu47_:
 1989|  2.88k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu47_AjLcfu48_:
 1989|  2.77k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu49_:
 1990|    135|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu49_AjLcfu50_:
 1990|    133|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu51_:
 1991|  1.32k|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu51_AjLcfu52_:
 1991|  1.31k|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu53_:
 1992|     79|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu53_AjLcfu54_:
 1992|     77|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu55_:
 1993|    518|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu55_AjLcfu56_:
 1993|    515|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu57_:
 1994|  1.51k|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu57_AjLcfu58_:
 1994|  1.48k|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu59_:
 1995|    932|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu59_AjLcfu60_:
 1995|    930|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu61_:
 1996|    416|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu61_AjLcfu62_:
 1996|    414|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu63_:
 1997|     72|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu63_AjLcfu64_:
 1997|     70|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitMemoryInit9dataIndexys6UInt32V_tKF:
 2002|      2|    mutating func visitMemoryInit(dataIndex: UInt32) throws -> Output {
 2003|      2|        try self.validator.validateDataSegment(dataIndex)
 2004|      0|        let addressType = try module.addressType(memoryIndex: 0)
 2005|      0|        try pop3Emit((.i32, .i32, addressType)) { values, stack in
 2006|      0|            let (size, sourceOffset, destOffset) = values
 2007|      0|            return .memoryInit(
 2008|      0|                Instruction.MemoryInitOperand(
 2009|      0|                    segmentIndex: dataIndex,
 2010|      0|                    destOffset: destOffset,
 2011|      0|                    sourceOffset: sourceOffset,
 2012|      0|                    size: size
 2013|      0|                )
 2014|      0|            )
 2015|      0|        }
 2016|      0|    }
$s7WasmKit21InstructionTranslatorV13visitDataDrop9dataIndexys6UInt32V_tKF:
 2017|      2|    mutating func visitDataDrop(dataIndex: UInt32) throws -> Output {
 2018|      2|        try self.validator.validateDataSegment(dataIndex)
 2019|      0|        emit(.memoryDataDrop(Instruction.MemoryDataDropOperand(segmentIndex: dataIndex)))
 2020|      0|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryCopy6dstMem03srcI0ys6UInt32V_AHtKF:
 2021|      5|    mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws -> Output {
 2022|      5|        //     C.mems[0] = it limits
 2023|      5|        // -----------------------------
 2024|      5|        // C ⊦ memory.fill : [it i32 it] → []
 2025|      5|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2026|      5|        let addressType = try module.addressType(memoryIndex: 0)
 2027|      3|        try pop3Emit((addressType, addressType, addressType)) { values, stack in
 2028|      3|            let (size, sourceOffset, destOffset) = values
 2029|      3|            return .memoryCopy(
 2030|      3|                Instruction.MemoryCopyOperand(
 2031|      3|                    destOffset: destOffset,
 2032|      3|                    sourceOffset: sourceOffset,
 2033|      3|                    size: LVReg(size)
 2034|      3|                )
 2035|      3|            )
 2036|      3|        }
 2037|      1|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryFill6memoryys6UInt32V_tKF:
 2038|     23|    mutating func visitMemoryFill(memory: UInt32) throws -> Output {
 2039|     23|        //     C.mems[0] = it limits
 2040|     23|        // -----------------------------
 2041|     23|        // C ⊦ memory.fill : [it i32 it] → []
 2042|     23|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2043|     23|        let addressType = try module.addressType(memoryIndex: 0)
 2044|     21|        try pop3Emit((addressType, .i32, addressType)) { values, stack in
 2045|     21|            let (size, value, destOffset) = values
 2046|     21|            return .memoryFill(
 2047|     21|                Instruction.MemoryFillOperand(
 2048|     21|                    destOffset: destOffset,
 2049|     21|                    value: value,
 2050|     21|                    size: LVReg(size)
 2051|     21|                )
 2052|     21|            )
 2053|     21|        }
 2054|     15|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryFill6memoryys6UInt32V_tKFAA0C0Os5Int16V_A2Kt_AC10ValueStackVyx_GztXEfU_:
 2044|      1|        try pop3Emit((addressType, .i32, addressType)) { values, stack in
 2045|      1|            let (size, value, destOffset) = values
 2046|      1|            return .memoryFill(
 2047|      1|                Instruction.MemoryFillOperand(
 2048|      1|                    destOffset: destOffset,
 2049|      1|                    value: value,
 2050|      1|                    size: LVReg(size)
 2051|      1|                )
 2052|      1|            )
 2053|      1|        }
$s7WasmKit21InstructionTranslatorV14visitTableInit9elemIndex5tableys6UInt32V_AHtKF:
 2055|      2|    mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws -> Output {
 2056|      2|        try validator.validateTableInit(elemIndex: elemIndex, table: table)
 2057|      0|
 2058|      0|        try pop3Emit((.i32, .i32, module.addressType(tableIndex: table))) { values, stack in
 2059|      0|            let (size, sourceOffset, destOffset) = values
 2060|      0|            return .tableInit(
 2061|      0|                Instruction.TableInitOperand(
 2062|      0|                    tableIndex: table,
 2063|      0|                    segmentIndex: elemIndex,
 2064|      0|                    destOffset: destOffset,
 2065|      0|                    sourceOffset: sourceOffset,
 2066|      0|                    size: size
 2067|      0|                )
 2068|      0|            )
 2069|      0|        }
 2070|      0|    }
$s7WasmKit21InstructionTranslatorV13visitElemDrop9elemIndexys6UInt32V_tKF:
 2071|      4|    mutating func visitElemDrop(elemIndex: UInt32) throws -> Output {
 2072|      4|        try self.module.validateElementSegment(elemIndex)
 2073|      0|        emit(.tableElementDrop(Instruction.TableElementDropOperand(index: elemIndex)))
 2074|      0|    }
$s7WasmKit21InstructionTranslatorV14visitTableCopy03dstF003srcF0ys6UInt32V_AHtKF:
 2075|      5|    mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws -> Output {
 2076|      5|        //   C.tables[d] = iN limits t   C.tables[s] = iM limits t    K = min {N, M}
 2077|      5|        // -----------------------------------------------------------------------------
 2078|      5|        // C ⊦ table.copy d s : [iN iM iK] → []
 2079|      5|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2080|      5|        try validator.validateTableCopy(dest: dstTable, source: srcTable)
 2081|      0|        let destIsMemory64 = try module.isMemory64(tableIndex: dstTable)
 2082|      0|        let sourceIsMemory64 = try module.isMemory64(tableIndex: srcTable)
 2083|      0|        let lengthIsMemory64 = destIsMemory64 && sourceIsMemory64
 2084|      0|        try pop3Emit(
 2085|      0|            (
 2086|      0|                .address(isMemory64: lengthIsMemory64),
 2087|      0|                .address(isMemory64: sourceIsMemory64),
 2088|      0|                .address(isMemory64: destIsMemory64)
 2089|      0|            )
 2090|      0|        ) { values, stack in
 2091|      0|            let (size, sourceOffset, destOffset) = values
 2092|      0|            return .tableCopy(
 2093|      0|                Instruction.TableCopyOperand(
 2094|      0|                    sourceIndex: srcTable,
 2095|      0|                    destIndex: dstTable,
 2096|      0|                    destOffset: destOffset,
 2097|      0|                    sourceOffset: sourceOffset,
 2098|      0|                    size: size
 2099|      0|                )
 2100|      0|            )
 2101|      0|        }
 2102|      0|    }
$s7WasmKit21InstructionTranslatorV14visitTableFill5tableys6UInt32V_tKF:
 2103|      2|    mutating func visitTableFill(table: UInt32) throws -> Output {
 2104|      2|        let address = try module.addressType(tableIndex: table)
 2105|      0|        let type = try module.tableType(table)
 2106|      0|        try pop3Emit((address, .ref(type.elementType), address)) { values, stack in
 2107|      0|            let (size, value, destOffset) = values
 2108|      0|            return .tableFill(
 2109|      0|                Instruction.TableFillOperand(
 2110|      0|                    tableIndex: table,
 2111|      0|                    destOffset: destOffset,
 2112|      0|                    value: value,
 2113|      0|                    size: size
 2114|      0|                )
 2115|      0|            )
 2116|      0|        }
 2117|      0|    }
$s7WasmKit21InstructionTranslatorV13visitTableGet5tableys6UInt32V_tKF:
 2118|     24|    mutating func visitTableGet(table: UInt32) throws -> Output {
 2119|     24|        let type = try module.tableType(table)
 2120|     22|        try popPushEmit(
 2121|     22|            module.addressType(tableIndex: table),
 2122|     22|            .ref(type.elementType)
 2123|     22|        ) { index, result, stack in
 2124|     22|            return .tableGet(
 2125|     22|                Instruction.TableGetOperand(
 2126|     22|                    index: index,
 2127|     22|                    result: result,
 2128|     22|                    tableIndex: table
 2129|     22|                )
 2130|     22|            )
 2131|     22|        }
 2132|     19|    }
$s7WasmKit21InstructionTranslatorV13visitTableGet5tableys6UInt32V_tKFAA0C0Os5Int16V_AkC10ValueStackVyx_GtcfU_:
 2123|      7|        ) { index, result, stack in
 2124|      7|            return .tableGet(
 2125|      7|                Instruction.TableGetOperand(
 2126|      7|                    index: index,
 2127|      7|                    result: result,
 2128|      7|                    tableIndex: table
 2129|      7|                )
 2130|      7|            )
 2131|      7|        }
$s7WasmKit21InstructionTranslatorV13visitTableSet5tableys6UInt32V_tKF:
 2133|     53|    mutating func visitTableSet(table: UInt32) throws -> Output {
 2134|     53|        let type = try module.tableType(table)
 2135|     43|        try pop2Emit((.ref(type.elementType), module.addressType(tableIndex: table))) { values, stack in
 2136|     43|            let (value, index) = values
 2137|     43|            return .tableSet(
 2138|     43|                Instruction.TableSetOperand(
 2139|     43|                    index: index,
 2140|     43|                    value: value,
 2141|     43|                    tableIndex: table
 2142|     43|                )
 2143|     43|            )
 2144|     43|        }
 2145|     34|    }
$s7WasmKit21InstructionTranslatorV14visitTableGrow5tableys6UInt32V_tKF:
 2146|      4|    mutating func visitTableGrow(table: UInt32) throws -> Output {
 2147|      4|        let address = try module.addressType(tableIndex: table)
 2148|      2|        let type = try module.tableType(table)
 2149|      2|        try pop2PushEmit((address, .ref(type.elementType)), address) { values, result in
 2150|      2|            let (delta, value) = values
 2151|      2|            return .tableGrow(
 2152|      2|                Instruction.TableGrowOperand(
 2153|      2|                    tableIndex: table,
 2154|      2|                    result: result,
 2155|      2|                    delta: delta,
 2156|      2|                    value: value
 2157|      2|                )
 2158|      2|            )
 2159|      2|        }
 2160|      1|    }
$s7WasmKit21InstructionTranslatorV14visitTableSize5tableys6UInt32V_tKF:
 2161|      7|    mutating func visitTableSize(table: UInt32) throws -> Output {
 2162|      7|        pushEmit(try module.addressType(tableIndex: table)) { result in
 2163|      4|            return .tableSize(Instruction.TableSizeOperand(tableIndex: table, result: LVReg(result)))
 2164|      4|        }
 2165|      4|    }
$s7WasmKit21InstructionTranslatorV14visitTableSize5tableys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 2162|      4|        pushEmit(try module.addressType(tableIndex: table)) { result in
 2163|      4|            return .tableSize(Instruction.TableSizeOperand(tableIndex: table, result: LVReg(result)))
 2164|      4|        }
$s7WasmKit16TranslationErrorVyACSScfC:
 2171|  1.06k|    init(_ description: String) {
 2172|  1.06k|        self.description = description
 2173|  1.06k|    }
$s9WasmTypes12FunctionTypeV0A3KitE05blockD011typeSectionAC0A6Parser05BlockD0O_SayACGtKc021_3C1F9FC595E9AC192A47N10B121D811E8LlfC:
 2177|  17.5k|    fileprivate init(blockType: WasmParser.BlockType, typeSection: [FunctionType]) throws {
 2178|  17.5k|        switch blockType {
 2179|  17.5k|        case .type(let valueType):
 2180|  6.76k|            self.init(parameters: [], results: [valueType])
 2181|  17.5k|        case .empty:
 2182|  8.19k|            self.init(parameters: [], results: [])
 2183|  17.5k|        case let .funcType(typeIndex):
 2184|  2.62k|            let typeIndex = Int(typeIndex)
 2185|  2.62k|            guard typeIndex < typeSection.count else {
 2186|     68|                throw ValidationError(.indexOutOfBounds("type", typeIndex, max: typeSection.count))
 2187|  2.55k|            }
 2188|  2.55k|            let funcType = typeSection[typeIndex]
 2189|  2.55k|            self.init(
 2190|  2.55k|                parameters: funcType.parameters,
 2191|  2.55k|                results: funcType.results
 2192|  2.55k|            )
 2193|  17.5k|        }
 2194|  17.5k|    }
$s9WasmTypes9ValueTypeO0A3KitE7address021_3C1F9FC595E9AC192A47J10B121D811E8LL10isMemory64ACSb_tFZ:
 2198|  9.91k|    fileprivate static func address(isMemory64: Bool) -> ValueType {
 2199|  9.91k|        return isMemory64 ? .i64 : .i32
 2200|  9.91k|    }

$s7WasmKit15ValidationErrorV7MessageVyAESScfC:
    9|    644|        init(_ text: String) {
   10|    644|            self.text = text
   11|    644|        }
$s7WasmKit15ValidationErrorVyA2C7MessageVcfC:
   30|    644|    init(_ message: Message) {
   31|    644|        self.message = message
   32|    644|    }
$s7WasmKit15ValidationErrorV7MessageV22invalidMemArgAlignment6memarg07naturalI0AE0A6Parser0gH0V_SitFZ:
   36|     59|    static func invalidMemArgAlignment(memarg: MemArg, naturalAlignment: Int) -> Self {
   37|     59|        Self("alignment 2**\(memarg.align) is out of limit \(naturalAlignment)")
   38|     59|    }
$s7WasmKit15ValidationErrorV7MessageV17globalSetConstantAEvgZ:
   40|      4|    static var globalSetConstant: Self {
   41|      4|        Self("cannot set a constant global")
   42|      4|    }
$s7WasmKit15ValidationErrorV7MessageV28multipleMemoriesNotPermittedAEvgZ:
   44|      7|    static var multipleMemoriesNotPermitted: Self {
   45|      7|        Self("multiple memories are not permitted")
   46|      7|    }
$s7WasmKit15ValidationErrorV7MessageV19sizeMinimumExceeded3maxAEs6UInt64V_tFZ:
   56|      2|    static func sizeMinimumExceeded(max: UInt64) -> Self {
   57|      2|        Self("size minimum must not be greater than \(max)")
   58|      2|    }
$s7WasmKit15ValidationErrorV7MessageV19sizeMaximumExceeded3maxAEs6UInt64V_tFZ:
   60|      2|    static func sizeMaximumExceeded(max: UInt64) -> Self {
   61|      2|        Self("size maximum must not be greater than \(max)")
   62|      2|    }
$s7WasmKit15ValidationErrorV7MessageV24dataCountSectionRequiredAEvgZ:
   72|      4|    static var dataCountSectionRequired: Self {
   73|      4|        Self("data count section is required but not found")
   74|      4|    }
$s7WasmKit15ValidationErrorV7MessageV16indexOutOfBounds__3maxAEs12StaticStringV_xq_tSjRzSjR_r0_lFZ:
   76|    269|    static func indexOutOfBounds<Index: Numeric, Max: Numeric>(_ entity: StaticString, _ index: Index, max: Max) -> Self {
   77|    269|        Self("\(entity) index out of bounds: \(index) (max: \(max))")
   78|    269|    }
$s7WasmKit15ValidationErrorV7MessageV16expectTypeButGot8expected3gotAESS_SStFZ:
   84|     33|    static func expectTypeButGot(expected: String, got: String) -> Self {
   85|     33|        Self("expect \(expected) but got \(got)")
   86|     33|    }
$s7WasmKit15ValidationErrorV7MessageV31sizeMinimumMustNotExceedMaximumAEvgZ:
   88|      5|    static var sizeMinimumMustNotExceedMaximum: Self {
   89|      5|        Self("size minimum must not be greater than maximum")
   90|      5|    }
$s7WasmKit15ValidationErrorV7MessageV24functionIndexNotDeclared5indexAEs6UInt32V_tFZ:
   92|      2|    static func functionIndexNotDeclared(index: FunctionIndex) -> Self {
   93|      2|        Self("function index \(index) is not declared but referenced as a function reference")
   94|      2|    }
$s7WasmKit15ValidationErrorV7MessageV19duplicateExportName4nameAESS_tFZ:
   96|      3|    static func duplicateExportName(name: String) -> Self {
   97|      3|        Self("duplicate export name: \(name)")
   98|      3|    }
$s7WasmKit15ValidationErrorV7MessageV23relativeDepthOutOfRange0fG0AEs6UInt32V_tFZ:
  111|     53|    static func relativeDepthOutOfRange(relativeDepth: UInt32) -> Self {
  112|     53|        Self("relative depth \(relativeDepth) is out of range")
  113|     53|    }
$s7WasmKit15ValidationErrorV7MessageV22expectedIfControlFrameAEvgZ:
  115|     24|    static var expectedIfControlFrame: Self {
  116|     24|        Self("expected `if` control frame on top of the stack for `else`")
  117|     24|    }
$s7WasmKit15ValidationErrorV7MessageV27valuesRemainingAtEndOfBlockAEvgZ:
  119|     72|    static var valuesRemainingAtEndOfBlock: Self {
  120|     72|        Self("values remaining on stack at end of block")
  121|     72|    }
$s7WasmKit15ValidationErrorV7MessageV27parameterResultTypeMismatch05blockH0AE0A5Types08FunctionH0V_tFZ:
  123|     13|    static func parameterResultTypeMismatch(blockType: FunctionType) -> Self {
  124|     13|        Self("expected the same parameter and result types for `if` block but got \(blockType)")
  125|     13|    }
$s7WasmKit15ValidationErrorV7MessageV20stackHeightUnderflow9available8requiredAESi_SitFZ:
  127|      7|    static func stackHeightUnderflow(available: Int, required: Int) -> Self {
  128|      7|        Self("stack height underflow: available \(available), required \(required)")
  129|      7|    }
$s7WasmKit15ValidationErrorV7MessageV19expectedTypeOnStack0F06actualAE0A5Types05ValueG0O_AKtFZ:
  131|      6|    static func expectedTypeOnStack(expected: ValueType, actual: ValueType) -> Self {
  132|      6|        Self("expected \(expected) on the stack top but got \(actual)")
  133|      6|    }
$s7WasmKit15ValidationErrorV7MessageV27expectedMoreEndInstructions5countAESi_tFZ:
  135|     18|    static func expectedMoreEndInstructions(count: Int) -> Self {
  136|     18|        Self("expect \(count) more `end` instructions")
  137|     18|    }
$s7WasmKit15ValidationErrorV7MessageV21expectedSameCopyTypes05framehI0012defaultFramehI0AESay0aI09ValueTypeOG_ALtFZ:
  142|     17|    ) -> Self {
  143|     17|        Self("expected the same copy types for all branches in `br_table` but got \(frameCopyTypes) and \(defaultFrameCopyTypes)")
  144|     17|    }
$s7WasmKit15ValidationErrorV7MessageV20typeMismatchOnSelect8expected6actualAE0A5Types9ValueTypeO_AKtFZ:
  150|     11|    static func typeMismatchOnSelect(expected: ValueType, actual: ValueType) -> Self {
  151|     11|        Self("type mismatch on `select`. Expected \(expected) and \(actual) to be same")
  152|     11|    }
$s7WasmKit15ValidationErrorV7MessageV29expectedEndAtOffsetExpressionAEvgZ:
  166|     12|    static var expectedEndAtOffsetExpression: Self {
  167|     12|        Self("expect `end` at the end of offset expression")
  168|     12|    }
$s7WasmKit15ValidationErrorV7MessageV33illegalConstExpressionInstructionyAE0A6Parser0I0OFZ:
  170|     18|    static func illegalConstExpressionInstruction(_ constInst: WasmParser.Instruction) -> Self {
  171|     18|        Self("illegal const expression instruction: \(constInst)")
  172|     18|    }
$s7WasmKit15ValidationErrorV7MessageV33inconsistentFunctionAndCodeLength13functionCount04codeL0AESi_SitFZ:
  174|      2|    static func inconsistentFunctionAndCodeLength(functionCount: Int, codeCount: Int) -> Self {
  175|      2|        Self("Inconsistent function and code length: \(functionCount) vs \(codeCount)")
  176|      2|    }
$s7WasmKit15ValidationErrorV7MessageV024inconsistentDataCountAndG13SectionLength04dataH00lJ0AEs6UInt32V_SitFZ:
  178|      1|    static func inconsistentDataCountAndDataSectionLength(dataCount: UInt32, dataSection: Int) -> Self {
  179|      1|        Self("Inconsistent data count and data section length: \(dataCount) vs \(dataSection)")
  180|      1|    }
$s7WasmKit20InstructionValidatorV14validateMemArg_16naturalAlignmenty0A6Parser0fG0V_SitKF:
  187|  8.89k|    func validateMemArg(_ memarg: MemArg, naturalAlignment: Int) throws {
  188|  8.89k|        if memarg.align > naturalAlignment {
  189|     59|            throw ValidationError(.invalidMemArgAlignment(memarg: memarg, naturalAlignment: naturalAlignment))
  190|  8.83k|        }
  191|  8.83k|    }
$s7WasmKit20InstructionValidatorV17validateGlobalSetyy0A6Parser0F4TypeVKF:
  193|  20.3k|    func validateGlobalSet(_ type: GlobalType) throws {
  194|  20.3k|        switch type.mutability {
  195|  20.3k|        case .constant:
  196|      4|            throw ValidationError(.globalSetConstant)
  197|  20.3k|        case .variable:
  198|  20.3k|            break
  199|  20.3k|        }
  200|  20.3k|    }
$s7WasmKit20InstructionValidatorV17validateTableInit9elemIndex5tableys6UInt32V_AHtKF:
  202|      2|    func validateTableInit(elemIndex: UInt32, table: UInt32) throws {
  203|      2|        let tableType = try context.tableType(table)
  204|      0|        let elementType = try context.elementType(elemIndex)
  205|      0|        guard tableType.elementType == elementType else {
  206|      0|            throw ValidationError(.tableElementTypeMismatch(tableType: "\(tableType.elementType)", elementType: "\(elementType)"))
  207|      0|        }
  208|      0|    }
$s7WasmKit20InstructionValidatorV17validateTableCopy4dest6sourceys6UInt32V_AHtKF:
  210|      5|    func validateTableCopy(dest: UInt32, source: UInt32) throws {
  211|      5|        let tableType1 = try context.tableType(source)
  212|      3|        let tableType2 = try context.tableType(dest)
  213|      0|        guard tableType1.elementType == tableType2.elementType else {
  214|      0|            throw ValidationError(.tableElementTypeMismatch(tableType: "\(tableType1.elementType)", elementType: "\(tableType2.elementType)"))
  215|      0|        }
  216|      0|    }
$s7WasmKit20InstructionValidatorV15validateRefFunc13functionIndexys6UInt32V_tKF:
  218|      4|    func validateRefFunc(functionIndex: UInt32) throws {
  219|      4|        try context.validateFunctionIndex(functionIndex)
  220|      0|    }
$s7WasmKit20InstructionValidatorV19validateDataSegmentyys6UInt32VKF:
  222|      4|    func validateDataSegment(_ dataIndex: DataIndex) throws {
  223|      4|        guard let dataCount = context.dataCount else {
  224|      4|            throw ValidationError(.dataCountSectionRequired)
  225|      4|        }
  226|      0|        guard dataIndex < dataCount else {
  227|      0|            throw ValidationError(.indexOutOfBounds("data", dataIndex, max: dataCount))
  228|      0|        }
  229|      0|    }
$s7WasmKit15ModuleValidatorV6moduleAcA0C0V_tcfC:
  235|  2.10k|    init(module: Module) {
  236|  2.10k|        self.module = module
  237|  2.10k|    }
$s7WasmKit15ModuleValidatorV8validateyyKF:
  239|  2.10k|    func validate() throws {
  240|  2.10k|        if module.memoryTypes.count > 1 {
  241|      7|            throw ValidationError(.multipleMemoriesNotPermitted)
  242|  2.10k|        }
  243|  2.10k|        for memoryType in module.memoryTypes {
  244|    865|            try Self.checkMemoryType(memoryType, features: module.features)
  245|  2.09k|        }
  246|  2.09k|        for tableType in module.tableTypes {
  247|    319|            try Self.checkTableType(tableType, features: module.features)
  248|  2.09k|        }
  249|  2.09k|        try checkStartFunction()
  250|  2.09k|    }
$s7WasmKit15ModuleValidatorV18checkStartFunctionyyKF:
  252|  2.09k|    func checkStartFunction() throws {
  253|  2.09k|        if let startFunction = module.start {
  254|      2|            let type = try module.resolveFunctionType(startFunction)
  255|      0|            guard type.parameters.isEmpty, type.results.isEmpty else {
  256|      0|                throw ValidationError(.startFunctionInvalidParameters())
  257|      0|            }
  258|  2.09k|        }
  259|  2.09k|    }
$s7WasmKit15ModuleValidatorV15checkMemoryType_8featuresy0A6Parser6LimitsV_AF0A10FeatureSetVtKFZ:
  261|  1.43k|    static func checkMemoryType(_ type: MemoryType, features: WasmFeatureSet) throws {
  262|  1.43k|        try checkLimit(type)
  263|  1.43k|
  264|  1.43k|        if type.isMemory64 {
  265|      0|            guard features.contains(.memory64) else {
  266|      0|                throw ValidationError(.memory64FeatureRequired)
  267|      0|            }
  268|  1.43k|        }
  269|  1.43k|
  270|  1.43k|        let hardMax = MemoryEntity.maxPageCount(isMemory64: type.isMemory64)
  271|  1.43k|
  272|  1.43k|        if type.min > hardMax {
  273|      2|            throw ValidationError(.sizeMinimumExceeded(max: hardMax))
  274|  1.43k|        }
  275|  1.43k|
  276|  1.43k|        if let max = type.max, max > hardMax {
  277|      2|            throw ValidationError(.sizeMaximumExceeded(max: hardMax))
  278|  1.43k|        }
  279|  1.43k|
  280|  1.43k|        if type.shared {
  281|      0|            guard features.contains(.threads) else {
  282|      0|                throw ValidationError(.referenceTypesFeatureRequiredForSharedMemories)
  283|      0|            }
  284|  1.43k|        }
  285|  1.43k|    }
$s7WasmKit15ModuleValidatorV14checkTableType_8featuresy0A6Parser0fG0V_AF0A10FeatureSetVtKFZ:
  287|    319|    static func checkTableType(_ type: TableType, features: WasmFeatureSet) throws {
  288|    319|        if type.elementType != .funcRef, !features.contains(.referenceTypes) {
  289|      0|            throw ValidationError(.referenceTypesFeatureRequiredForNonFuncrefTables)
  290|    319|        }
  291|    319|        try checkLimit(type.limits)
  292|    316|
  293|    316|        if type.limits.isMemory64 {
  294|      0|            guard features.contains(.memory64) else {
  295|      0|                throw ValidationError(.memory64FeatureRequired)
  296|      0|            }
  297|    316|        }
  298|    316|
  299|    316|        let hardMax = TableEntity.maxSize(isMemory64: type.limits.isMemory64)
  300|    316|
  301|    316|        if type.limits.min > hardMax {
  302|      0|            throw ValidationError(.sizeMinimumExceeded(max: hardMax))
  303|    316|        }
  304|    316|
  305|    316|        if let max = type.limits.max, max > hardMax {
  306|      0|            throw ValidationError(.sizeMaximumExceeded(max: hardMax))
  307|    316|        }
  308|    316|    }
$s7WasmKit15ModuleValidatorV10checkLimit33_9F66C7BE5EF9F2BC43AA30FD76E78754LLyy0A6Parser6LimitsVKFZ:
  310|  1.75k|    private static func checkLimit(_ limit: Limits) throws {
  311|  1.75k|        guard let max = limit.max else { return }
  312|  1.68k|        if limit.min > max {
  313|      5|            throw ValidationError(.sizeMinimumMustNotExceedMaximum)
  314|  1.68k|        }
  315|  1.68k|    }
$s9WasmTypes5ValueO0A3KitE9checkTypeyyAA0cF0OKF:
  332|  18.9k|    func checkType(_ type: WasmTypes.ValueType) throws {
  333|  18.9k|        switch (self, type) {
  334|  18.9k|        case (.i32, .i32): return
  335|  18.9k|        case (.i64, .i64): return
  336|  18.9k|        case (.f32, .f32): return
  337|  18.9k|        case (.f64, .f64): return
  338|  18.9k|        case (.ref(let ref), .ref(let refType)):
  339|      0|            try ref.checkType(refType)
  340|  18.9k|        default:
  341|     33|            throw ValidationError(.expectTypeButGot(expected: "\(type)", got: "\(self)"))
  342|  18.9k|        }
  343|      0|    }

$s10WasmParser21AnyInstructionVisitorPAAE16visitUnreachableyyKF:
  236|   129k|    public mutating func visitUnreachable() throws { return try self.visit(.unreachable) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitNopyyKF:
  237|  15.6k|    public mutating func visitNop() throws { return try self.visit(.nop) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitBlock9blockTypeyAA0gI0O_tKF:
  238|  8.67k|    public mutating func visitBlock(blockType: BlockType) throws { return try self.visit(.block(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitLoop9blockTypeyAA05BlockI0O_tKF:
  239|  9.49k|    public mutating func visitLoop(blockType: BlockType) throws { return try self.visit(.loop(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE7visitIf9blockTypeyAA05BlockI0O_tKF:
  240|  5.27k|    public mutating func visitIf(blockType: BlockType) throws { return try self.visit(.if(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitElseyyKF:
  241|  1.27k|    public mutating func visitElse() throws { return try self.visit(.else) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitEndyyKF:
  242|  20.5k|    public mutating func visitEnd() throws { return try self.visit(.end) }
$s10WasmParser21AnyInstructionVisitorPAAE7visitBr13relativeDepthys6UInt32V_tKF:
  243|  9.88k|    public mutating func visitBr(relativeDepth: UInt32) throws { return try self.visit(.br(relativeDepth: relativeDepth)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitBrIf13relativeDepthys6UInt32V_tKF:
  244|  6.61k|    public mutating func visitBrIf(relativeDepth: UInt32) throws { return try self.visit(.brIf(relativeDepth: relativeDepth)) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitBrTable7targetsyAA0gH0V_tKF:
  245|  6.18k|    public mutating func visitBrTable(targets: BrTable) throws { return try self.visit(.brTable(targets: targets)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitReturnyyKF:
  246|  2.98k|    public mutating func visitReturn() throws { return try self.visit(.return) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitCall13functionIndexys6UInt32V_tKF:
  247|  5.94k|    public mutating func visitCall(functionIndex: UInt32) throws { return try self.visit(.call(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE17visitCallIndirect9typeIndex05tableJ0ys6UInt32V_AHtKF:
  248|    730|    public mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try self.visit(.callIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitDropyyKF:
  249|  1.62k|    public mutating func visitDrop() throws { return try self.visit(.drop) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitSelectyyKF:
  250|  1.13k|    public mutating func visitSelect() throws { return try self.visit(.select) }
$s10WasmParser21AnyInstructionVisitorPAAE16visitTypedSelect4typey0A5Types9ValueTypeO_tKF:
  251|  5.02k|    public mutating func visitTypedSelect(type: ValueType) throws { return try self.visit(.typedSelect(type: type)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalGet10localIndexys6UInt32V_tKF:
  252|  9.40k|    public mutating func visitLocalGet(localIndex: UInt32) throws { return try self.visit(.localGet(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalSet10localIndexys6UInt32V_tKF:
  253|  3.81k|    public mutating func visitLocalSet(localIndex: UInt32) throws { return try self.visit(.localSet(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalTee10localIndexys6UInt32V_tKF:
  254|  1.99k|    public mutating func visitLocalTee(localIndex: UInt32) throws { return try self.visit(.localTee(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitGlobalGet11globalIndexys6UInt32V_tKF:
  255|  10.4k|    public mutating func visitGlobalGet(globalIndex: UInt32) throws { return try self.visit(.globalGet(globalIndex: globalIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitGlobalSet11globalIndexys6UInt32V_tKF:
  256|  3.30k|    public mutating func visitGlobalSet(globalIndex: UInt32) throws { return try self.visit(.globalSet(globalIndex: globalIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitLoad_6memargyAA0D0O0G0O_AA6MemArgVtKF:
  257|  20.2k|    public mutating func visitLoad(_ load: Instruction.Load, memarg: MemArg) throws { return try self.visit(.load(load, memarg: memarg)) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitStore_6memargyAA0D0O0G0O_AA6MemArgVtKF:
  258|  16.5k|    public mutating func visitStore(_ store: Instruction.Store, memarg: MemArg) throws { return try self.visit(.store(store, memarg: memarg)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemorySize6memoryys6UInt32V_tKF:
  259|  1.14k|    public mutating func visitMemorySize(memory: UInt32) throws { return try self.visit(.memorySize(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryGrow6memoryys6UInt32V_tKF:
  260|  2.07k|    public mutating func visitMemoryGrow(memory: UInt32) throws { return try self.visit(.memoryGrow(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitI32Const5valueys5Int32V_tKF:
  261|  20.7k|    public mutating func visitI32Const(value: Int32) throws { return try self.visit(.i32Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitI64Const5valueys5Int64V_tKF:
  262|  12.0k|    public mutating func visitI64Const(value: Int64) throws { return try self.visit(.i64Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitF32Const5valueyAA7IEEE754O7Float32V_tKF:
  263|  12.4k|    public mutating func visitF32Const(value: IEEE754.Float32) throws { return try self.visit(.f32Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitF64Const5valueyAA7IEEE754O7Float64V_tKF:
  264|  6.41k|    public mutating func visitF64Const(value: IEEE754.Float64) throws { return try self.visit(.f64Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitRefNull4typey0A5Types13ReferenceTypeO_tKF:
  265|    836|    public mutating func visitRefNull(type: ReferenceType) throws { return try self.visit(.refNull(type: type)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitRefIsNullyyKF:
  266|    222|    public mutating func visitRefIsNull() throws { return try self.visit(.refIsNull) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitRefFunc13functionIndexys6UInt32V_tKF:
  267|  6.40k|    public mutating func visitRefFunc(functionIndex: UInt32) throws { return try self.visit(.refFunc(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitI32EqzyyKF:
  268|    464|    public mutating func visitI32Eqz() throws { return try self.visit(.i32Eqz) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitCmpyyAA0D0O0G0OKF:
  269|  53.7k|    public mutating func visitCmp(_ cmp: Instruction.Cmp) throws { return try self.visit(.cmp(cmp)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitI64EqzyyKF:
  270|    252|    public mutating func visitI64Eqz() throws { return try self.visit(.i64Eqz) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitUnaryyyAA0D0O0G0OKF:
  271|  52.2k|    public mutating func visitUnary(_ unary: Instruction.Unary) throws { return try self.visit(.unary(unary)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitBinaryyyAA0D0O0G0OKF:
  272|  66.6k|    public mutating func visitBinary(_ binary: Instruction.Binary) throws { return try self.visit(.binary(binary)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitConversionyyAA0D0O0G0OKF:
  273|  73.8k|    public mutating func visitConversion(_ conversion: Instruction.Conversion) throws { return try self.visit(.conversion(conversion)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryInit9dataIndexys6UInt32V_tKF:
  274|  1.46k|    public mutating func visitMemoryInit(dataIndex: UInt32) throws { return try self.visit(.memoryInit(dataIndex: dataIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitDataDrop9dataIndexys6UInt32V_tKF:
  275|  1.47k|    public mutating func visitDataDrop(dataIndex: UInt32) throws { return try self.visit(.dataDrop(dataIndex: dataIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryCopy6dstMem03srcJ0ys6UInt32V_AHtKF:
  276|    611|    public mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws { return try self.visit(.memoryCopy(dstMem: dstMem, srcMem: srcMem)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryFill6memoryys6UInt32V_tKF:
  277|    170|    public mutating func visitMemoryFill(memory: UInt32) throws { return try self.visit(.memoryFill(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableInit9elemIndex5tableys6UInt32V_AHtKF:
  278|  5.50k|    public mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws { return try self.visit(.tableInit(elemIndex: elemIndex, table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitElemDrop9elemIndexys6UInt32V_tKF:
  279|  2.00k|    public mutating func visitElemDrop(elemIndex: UInt32) throws { return try self.visit(.elemDrop(elemIndex: elemIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableCopy03dstG003srcG0ys6UInt32V_AHtKF:
  280|    718|    public mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws { return try self.visit(.tableCopy(dstTable: dstTable, srcTable: srcTable)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableFill5tableys6UInt32V_tKF:
  281|    130|    public mutating func visitTableFill(table: UInt32) throws { return try self.visit(.tableFill(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitTableGet5tableys6UInt32V_tKF:
  282|    567|    public mutating func visitTableGet(table: UInt32) throws { return try self.visit(.tableGet(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitTableSet5tableys6UInt32V_tKF:
  283|  9.91k|    public mutating func visitTableSet(table: UInt32) throws { return try self.visit(.tableSet(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableGrow5tableys6UInt32V_tKF:
  284|  3.21k|    public mutating func visitTableGrow(table: UInt32) throws { return try self.visit(.tableGrow(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableSize5tableys6UInt32V_tKF:
  285|    194|    public mutating func visitTableSize(table: UInt32) throws { return try self.visit(.tableSize(table: table)) }

$s10WasmParser12decodeLEB1286streamxq__tKs17FixedWidthIntegerRzSURzAA10ByteStreamR_r0_lF:
   10|   568k|) throws -> IntType where IntType: FixedWidthInteger, IntType: UnsignedInteger, Stream: ByteStream {
   11|   568k|    let firstByte = try stream.consumeAny()
   12|   567k|    var result: IntType = IntType(firstByte & 0b0111_1111)
   13|   567k|    if _fastPath(firstByte & 0b1000_0000 == 0) {
   14|   528k|        return result
   15|   528k|    }
   16|  39.3k|
   17|  39.3k|    var shift: UInt = 7
   18|  39.3k|
   19|  70.1k|    while true {
   20|  70.1k|        let byte = try stream.consumeAny()
   21|  70.0k|        let slice = IntType(byte & 0b0111_1111)
   22|  70.0k|        let nextShift = shift + 7
   23|  70.0k|        if nextShift >= IntType.bitWidth, (byte >> (UInt(IntType.bitWidth) - shift)) != 0 {
   24|     29|            throw LEBError.integerRepresentationTooLong
   25|  70.0k|        }
   26|  70.0k|        result |= slice << shift
   27|  70.0k|        shift = nextShift
   28|  70.0k|
   29|  70.0k|        guard byte & 0b1000_0000 != 0 else { break }
   30|  39.2k|    }
   31|  39.2k|
   32|  39.2k|    return result
   33|   568k|}
$s10WasmParser12decodeLEB1286streamxq__tKAA16RawSignedIntegerRzAA10ByteStreamR_r0_lF:
   37|  51.4k|) throws -> IntType where IntType: FixedWidthInteger, IntType: RawSignedInteger, Stream: ByteStream {
   38|  51.4k|    let firstByte = try stream.consumeAny()
   39|  51.4k|    var result = IntType.Unsigned(firstByte & 0b0111_1111)
   40|  51.4k|    if _fastPath(firstByte & 0b1000_0000 == 0) {
   41|  16.0k|        // Interpret Int${Self.bitWidth-1} as Int${Self.bitWidth}
   42|  16.0k|        return (IntType(bitPattern: result) << (IntType.bitWidth - 7)) >> (IntType.bitWidth - 7)
   43|  35.3k|    }
   44|  35.3k|
   45|  35.3k|    var shift: IntType = 7
   46|  35.3k|
   47|  35.3k|    var byte: UInt8
   48|   144k|    repeat {
   49|   144k|        byte = try stream.consumeAny()
   50|   144k|
   51|   144k|        let slice = IntType.Unsigned(byte & 0b0111_1111)
   52|   144k|        result |= slice << shift
   53|   144k|
   54|   144k|        // When we don't have enough bit width
   55|   144k|        if shift > (IntType.bitWidth - 7) {
   56|  12.9k|            let remainingBitWidth = IntType.bitWidth - Int(shift)
   57|  12.9k|            let continuationBit = (byte & 0b1000_0000) != 0
   58|  12.9k|            // When a next byte is expected
   59|  12.9k|            if continuationBit {
   60|     32|                throw LEBError.integerRepresentationTooLong
   61|  12.9k|            }
   62|  12.9k|
   63|  12.9k|            let signAndDiscardingBits = Int8(bitPattern: byte << 1) >> remainingBitWidth
   64|  12.9k|            // When meaningful bits are discarded
   65|  12.9k|            if signAndDiscardingBits != 0 && signAndDiscardingBits != -1 {
   66|     23|                throw LEBError.overflow
   67|  12.8k|            }
   68|  12.8k|            return IntType(bitPattern: result)
   69|   131k|        }
   70|   131k|
   71|   131k|        shift += 7
   72|   131k|    } while byte & 0b1000_0000 != 0
   73|  22.3k|
   74|  22.3k|    // Sign flag is second high-order bit
   75|  22.3k|    if byte & 0b0100_0000 != 0 {
   76|  7.37k|        // Sign extend
   77|  7.37k|        result |= IntType.Unsigned(bitPattern: ~0) << shift
   78|  7.37k|    }
   79|  22.3k|
   80|  22.3k|    return IntType(bitPattern: result)
   81|  51.4k|}
$s10WasmParser12decodeLEB1286streamxq__tKAA16RawSignedIntegerRzAA10ByteStreamR_r0_lFSbyKXEfu_:
   65|  7.21k|            if signAndDiscardingBits != 0 && signAndDiscardingBits != -1 {

$s10WasmParser13ParsingLimitsV7defaultACvgZ:
    7|  10.1k|    static var `default`: ParsingLimits {
    8|  10.1k|        return ParsingLimits(maxFunctionLocals: 50000)
    9|  10.1k|    }

$s10WasmParser16StaticByteStreamC5bytesACSays5UInt8VG_tcfc:
    7|  7.38k|    public init(bytes: [UInt8]) {
    8|  7.38k|        self.bytes = ArraySlice(bytes)
    9|  7.38k|        currentIndex = bytes.startIndex
   10|  7.38k|    }
$s10WasmParser16StaticByteStreamC5bytesACs10ArraySliceVys5UInt8VG_tcfc:
   12|  2.74k|    public init(bytes: ArraySlice<UInt8>) {
   13|  2.74k|        self.bytes = bytes
   14|  2.74k|        currentIndex = bytes.startIndex
   15|  2.74k|    }
$s10WasmParser16StaticByteStreamC10consumeAnys5UInt8VyKF:
   18|  1.87M|    public func consumeAny() throws -> UInt8 {
   19|  1.87M|        guard bytes.indices.contains(currentIndex) else {
   20|  4.23k|            throw StreamError<Element>.unexpectedEnd(expected: nil)
   21|  1.87M|        }
   22|  1.87M|
   23|  1.87M|        let consumed = bytes[currentIndex]
   24|  1.87M|        currentIndex = bytes.index(after: currentIndex)
   25|  1.87M|        return consumed
   26|  1.87M|    }
$s10WasmParser16StaticByteStreamC7consumeys5UInt8VShyAFGKF:
   29|  6.89k|    public func consume(_ expected: Set<UInt8>) throws -> UInt8 {
   30|  6.89k|        guard bytes.indices.contains(currentIndex) else {
   31|     11|            throw StreamError<Element>.unexpectedEnd(expected: Set(expected))
   32|  6.88k|        }
   33|  6.88k|
   34|  6.88k|        let consumed = bytes[currentIndex]
   35|  6.88k|        guard expected.contains(consumed) else {
   36|      6|            throw StreamError<Element>.unexpected(consumed, index: currentIndex, expected: Set(expected))
   37|  6.88k|        }
   38|  6.88k|
   39|  6.88k|        currentIndex = bytes.index(after: currentIndex)
   40|  6.88k|        return consumed
   41|  6.89k|    }
$s10WasmParser16StaticByteStreamC7consume5counts10ArraySliceVys5UInt8VGSi_tKF:
   43|  69.3k|    public func consume(count: Int) throws -> ArraySlice<UInt8> {
   44|  69.3k|        guard count > 0 else { return [] }
   45|  65.5k|        let updatedIndex = currentIndex + count
   46|  65.5k|
   47|  65.5k|        guard bytes.indices.contains(updatedIndex - 1) else {
   48|     63|            throw StreamError<Element>.unexpectedEnd(expected: nil)
   49|  65.5k|        }
   50|  65.5k|
   51|  65.5k|        defer { currentIndex = updatedIndex }
   52|  65.5k|
   53|  65.5k|        return bytes[currentIndex..<updatedIndex]
   54|  69.3k|    }
$s10WasmParser16StaticByteStreamC4peeks5UInt8VSgyF:
   56|   323k|    public func peek() -> UInt8? {
   57|   323k|        guard bytes.indices.contains(currentIndex) else {
   58|  3.14k|            return nil
   59|   320k|        }
   60|   320k|        return bytes[currentIndex]
   61|   323k|    }

$s10WasmParser6StreamPAAE13hasReachedEndSbyKF:
   24|   282k|    func hasReachedEnd() throws -> Bool {
   25|   282k|        try peek() == nil
   26|   282k|    }

$s10WasmParser0B0V13orderTrackingAC05OrderD0Vyx_Gvpfi:
   17|  10.1k|    var orderTracking = OrderTracking()
$s10WasmParser0B0V6offsetSivg:
   26|   261k|    public var offset: Int {
   27|   261k|        return stream.currentIndex
   28|   261k|    }
$s10WasmParser0B0V6stream8featuresACyxGx_AA0A10FeatureSetVtcfC:
   30|  10.1k|    public init(stream: Stream, features: WasmFeatureSet = .default) {
   31|  10.1k|        self.stream = stream
   32|  10.1k|        self.features = features
   33|  10.1k|        self.nextParseTarget = .header
   34|  10.1k|        self.limits = .default
   35|  10.1k|    }
$s10WasmParser0B0V9makeErroryAA0abD0VAF7MessageVF:
   38|    981|    internal func makeError(_ message: WasmParserError.Message) -> WasmParserError {
   39|    981|        return WasmParserError(message, offset: offset)
   40|    981|    }
$s10WasmParser010ExpressionB0V6offsetSivg:
  148|   257k|    public var offset: Int {
  149|   257k|        self.codeOffset + self.parser.offset - self.initialStreamOffset
  150|   257k|    }
$s10WasmParser010ExpressionB0V4codeAcA4CodeV_tcfC:
  152|  2.74k|    public init(code: Code) {
  153|  2.74k|        self.parser = Parser(
  154|  2.74k|            stream: StaticByteStream(bytes: code.expression),
  155|  2.74k|            features: code.features
  156|  2.74k|        )
  157|  2.74k|        self.codeOffset = code.offset
  158|  2.74k|        self.initialStreamOffset = self.parser.offset
  159|  2.74k|    }
$s10WasmParser010ExpressionB0V5visit7visitorSbxz_tKAA18InstructionVisitorRzlF:
  162|   257k|    public mutating func visit<V: InstructionVisitor>(visitor: inout V) throws -> Bool {
  163|   257k|        lastCode = try parser.parseInstruction(visitor: &visitor)
  164|   255k|        let shouldContinue = try !parser.stream.hasReachedEnd()
  165|   255k|        if !shouldContinue {
  166|    920|            guard lastCode == .end else {
  167|     18|                throw WasmParserError(.endOpcodeExpected, offset: offset)
  168|    902|            }
  169|   255k|        }
  170|   255k|        return shouldContinue
  171|   257k|    }
$s10WasmParser0A10FeatureSetV8rawValueACSi_tcfC:
  182|   113k|    public init(rawValue: Int) {
  183|   113k|        self.rawValue = rawValue
  184|   113k|    }
$s10WasmParser0aB5ErrorV7MessageVyAESScfC:
  205|    880|        init(_ text: String) {
  206|    880|            self.text = text
  207|    880|        }
$s10WasmParser0aB5ErrorV_6offsetA2C7MessageV_SitcfC:
  214|  1.00k|    init(_ message: Message, offset: Int) {
  215|  1.00k|        self.message = message
  216|  1.00k|        self.offset = offset
  217|  1.00k|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidMagicNumberyAESays5UInt8VGFZ:
  227|      3|    static func invalidMagicNumber(_ bytes: [UInt8]) -> Self {
  228|      3|        Self("magic header not detected: expected \(WASM_MAGIC) but got \(bytes)")
  229|      3|    }
$s10WasmParser0aB5ErrorV7MessageV14unknownVersionyAESays5UInt8VGFZ:
  231|      1|    static func unknownVersion(_ bytes: [UInt8]) -> Self {
  232|      1|        Self("unknown binary version: \(bytes)")
  233|      1|    }
$s10WasmParser0aB5ErrorV7MessageV11invalidUTF8yAESays5UInt8VGFZ:
  235|      6|    static func invalidUTF8(_ bytes: [UInt8]) -> Self {
  236|      6|        Self("malformed UTF-8 encoding: \(bytes)")
  237|      6|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidSectionSizeyAEs6UInt32VFZ:
  239|     20|    static func invalidSectionSize(_ size: UInt32) -> Self {
  240|     20|        // TODO: Remove size parameter
  241|     20|        Self("unexpected end-of-file")
  242|     20|    }
$s10WasmParser0aB5ErrorV7MessageV18malformedSectionIDyAEs5UInt8VFZ:
  244|      5|    static func malformedSectionID(_ id: UInt8) -> Self {
  245|      5|        Self("malformed section id: \(id)")
  246|      5|    }
$s10WasmParser0aB5ErrorV7MessageV12zeroExpected6actualAEs5UInt8V_tFZ:
  248|     59|    @usableFromInline static func zeroExpected(actual: UInt8) -> Self {
  249|     59|        Self("Zero expected but got \(actual)")
  250|     59|    }
$s10WasmParser0aB5ErrorV7MessageV13tooManyLocals_5limitAEs6UInt64V_AItFZ:
  252|      2|    static func tooManyLocals(_ count: UInt64, limit: UInt64) -> Self {
  253|      2|        Self("Too many locals: \(count) vs \(limit)")
  254|      2|    }
$s10WasmParser0aB5ErrorV7MessageV15expectedRefType6actualAE0A5Types05ValueG0O_tFZ:
  256|     10|    @usableFromInline static func expectedRefType(actual: ValueType) -> Self {
  257|     10|        Self("Expected reference type but got \(actual)")
  258|     10|    }
$s10WasmParser0aB5ErrorV7MessageV24unimplementedInstruction_6suffixAEs5UInt8V_s6UInt32VSgtFZ:
  260|     33|    @usableFromInline static func unimplementedInstruction(_ opcode: UInt8, suffix: UInt32? = nil) -> Self {
  261|     33|        let suffixText = suffix.map { " with suffix \($0)" } ?? ""
  262|     33|        return Self("Unimplemented instruction: \(opcode)\(suffixText)")
  263|     33|    }
$s10WasmParser0aB5ErrorV7MessageV24unimplementedInstruction_6suffixAEs5UInt8V_s6UInt32VSgtFZSSAKXEfU_:
  261|     33|        let suffixText = suffix.map { " with suffix \($0)" } ?? ""
$s10WasmParser0aB5ErrorV7MessageV21unexpectedElementKind8expected6actualAEs6UInt32V_AJtFZ:
  265|     66|    static func unexpectedElementKind(expected: UInt32, actual: UInt32) -> Self {
  266|     66|        Self("Unexpected element kind: expected \(expected) but got \(actual)")
  267|     66|    }
$s10WasmParser0aB5ErrorV7MessageV19sectionSizeMismatch8expected6actualAESi_SitFZ:
  276|     46|    static func sectionSizeMismatch(expected: Int, actual: Int) -> Self {
  277|     46|        Self("Section size mismatch: expected \(expected) but got \(actual)")
  278|     46|    }
$s10WasmParser0aB5ErrorV7MessageV13illegalOpcodeyAEs5UInt8VFZ:
  280|    594|    @usableFromInline static func illegalOpcode(_ opcode: UInt8) -> Self {
  281|    594|        Self("Illegal opcode: \(opcode)")
  282|    594|    }
$s10WasmParser0aB5ErrorV7MessageV19malformedMutabilityyAEs5UInt8VFZ:
  284|      5|    static func malformedMutability(_ byte: UInt8) -> Self {
  285|      5|        Self("Malformed mutability: \(byte)")
  286|      5|    }
$s10WasmParser0aB5ErrorV7MessageV21malformedFunctionTypeyAEs5UInt8VFZ:
  288|      9|    static func malformedFunctionType(_ byte: UInt8) -> Self {
  289|      9|        Self("Malformed function type: \(byte)")
  290|      9|    }
$s10WasmParser0aB5ErrorV7MessageV14malformedLimityAEs5UInt8VFZ:
  294|      5|    static func malformedLimit(_ byte: UInt8) -> Self {
  295|      5|        Self("Malformed limit: \(byte)")
  296|      5|    }
$s10WasmParser0aB5ErrorV7MessageV24malformedDataSegmentKindyAEs6UInt32VFZ:
  300|      1|    static func malformedDataSegmentKind(_ kind: UInt32) -> Self {
  301|      1|        Self("Malformed data segment kind: \(kind)")
  302|      1|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidResultArity8expected6actualAESi_SitFZ:
  304|     11|    @usableFromInline static func invalidResultArity(expected: Int, actual: Int) -> Self {
  305|     11|        Self("invalid result arity: expected \(expected) but got \(actual)")
  306|     11|    }
$s10WasmParser10ByteStreamPAAE11parseVector33_266B39EE9A5BCC72156BAE2430A75AC9LL7contentSayqd__Gqd__yKXE_tKlF:
  312|  77.9k|    fileprivate func parseVector<Content>(content parser: () throws -> Content) throws -> [Content] {
  313|  77.9k|        var contents = [Content]()
  314|  77.9k|        let count: UInt32 = try parseUnsigned()
  315|   200k|        for _ in 0..<count {
  316|   200k|            try contents.append(parser())
  317|   194k|        }
  318|  72.4k|        return contents
  319|  77.9k|    }
$s10WasmParser10ByteStreamPAAE13parseUnsignedyqd__qd__mKAA03RawF7IntegerRd__lF:
  327|   568k|    func parseUnsigned<T: RawUnsignedInteger>(_: T.Type = T.self) throws -> T {
  328|   568k|        try decodeLEB128(stream: self)
  329|   567k|    }
$s10WasmParser10ByteStreamPAAE11parseSignedqd__yKAA03RawF7IntegerRd__lF:
  332|  51.4k|    func parseSigned<T: FixedWidthInteger & RawSignedInteger>() throws -> T {
  333|  51.4k|        try decodeLEB128(stream: self)
  334|  51.3k|    }
$s10WasmParser10ByteStreamPAAE9parseName33_266B39EE9A5BCC72156BAE2430A75AC9LLSSyKF:
  340|  13.8k|    fileprivate func parseName() throws -> String {
  341|  13.8k|        let bytes = try parseVector { () -> UInt8 in
  342|  13.8k|            try consumeAny()
  343|  13.8k|        }
  344|  13.7k|
  345|  13.7k|        // TODO(optimize): Utilize ASCII fast path in UTF8 decoder
  346|  13.7k|        var name = ""
  347|  13.7k|
  348|  13.7k|        var iterator = bytes.makeIterator()
  349|  13.7k|        var decoder = UTF8()
  350|  24.5k|        Decode: while true {
  351|  24.5k|            switch decoder.decode(&iterator) {
  352|  24.5k|            case let .scalarValue(scalar): name.append(Character(scalar))
  353|  24.5k|            case .emptyInput: break Decode
  354|  24.5k|            case .error: throw WasmParserError(.invalidUTF8(bytes), offset: currentIndex)
  355|  24.5k|            }
  356|  13.7k|        }
  357|  13.7k|
  358|  13.7k|        return name
  359|  13.8k|    }
$s10WasmParser10ByteStreamPAAE9parseName33_266B39EE9A5BCC72156BAE2430A75AC9LLSSyKFs5UInt8VyKXEfU_:
  341|  11.2k|        let bytes = try parseVector { () -> UInt8 in
  342|  11.2k|            try consumeAny()
  343|  11.1k|        }
$s10WasmParser0B0V11parseVector7contentSayqd__Gqd__yKXE_tKlF:
  364|  64.1k|    func parseVector<Content>(content parser: () throws -> Content) throws -> [Content] {
  365|  64.1k|        try stream.parseVector(content: parser)
  366|  58.6k|    }
$s10WasmParser0B0V13parseUnsignedyqd__qd__mKAA03RawD7IntegerRd__lF:
  370|   490k|    func parseUnsigned<T: RawUnsignedInteger>(_: T.Type = T.self) throws -> T {
  371|   490k|        try stream.parseUnsigned(T.self)
  372|   489k|    }
$s10WasmParser0B0V12parseIntegerqd__yKAA011RawUnsignedD0Rd__lF:
  375|  51.4k|    func parseInteger<T: RawUnsignedInteger>() throws -> T {
  376|  51.4k|        let signed: T.Signed = try stream.parseSigned()
  377|  51.3k|        return T(bitPattern: signed)
  378|  51.4k|    }
$s10WasmParser0B0V9parseNameSSyKF:
  380|  13.8k|    func parseName() throws -> String {
  381|  13.8k|        try stream.parseName()
  382|  13.7k|    }
$s10WasmParser0B0V10parseFloats6UInt32VyKF:
  389|  23.7k|    func parseFloat() throws -> UInt32 {
  390|  23.7k|        let consumedLittleEndian = try stream.consume(count: 4).reversed()
  391|  23.7k|        let bitPattern = consumedLittleEndian.reduce(UInt32(0)) { acc, byte in
  392|  23.7k|            acc << 8 + UInt32(byte)
  393|  23.7k|        }
  394|  23.7k|        return bitPattern
  395|  23.7k|    }
$s10WasmParser0B0V10parseFloats6UInt32VyKFA2F_s5UInt8VtXEfU_:
  391|  95.0k|        let bitPattern = consumedLittleEndian.reduce(UInt32(0)) { acc, byte in
  392|  95.0k|            acc << 8 + UInt32(byte)
  393|  95.0k|        }
$s10WasmParser0B0V11parseDoubles6UInt64VyKF:
  398|  13.9k|    func parseDouble() throws -> UInt64 {
  399|  13.9k|        let consumedLittleEndian = try stream.consume(count: 8).reversed()
  400|  13.8k|        let bitPattern = consumedLittleEndian.reduce(UInt64(0)) { acc, byte in
  401|  13.8k|            acc << 8 + UInt64(byte)
  402|  13.8k|        }
  403|  13.8k|        return bitPattern
  404|  13.9k|    }
$s10WasmParser0B0V11parseDoubles6UInt64VyKFA2F_s5UInt8VtXEfU_:
  400|   111k|        let bitPattern = consumedLittleEndian.reduce(UInt64(0)) { acc, byte in
  401|   111k|            acc << 8 + UInt64(byte)
  402|   111k|        }
$s10WasmParser0B0V14parseValueType0A5Types0dE0OyKF:
  413|  49.9k|    func parseValueType() throws -> ValueType {
  414|  49.9k|        let b = try stream.consumeAny()
  415|  49.7k|
  416|  49.7k|        switch b {
  417|  49.7k|        case 0x7F: return .i32
  418|  49.7k|        case 0x7E: return .i64
  419|  49.7k|        case 0x7D: return .f32
  420|  49.7k|        case 0x7C: return .f64
  421|  49.7k|        case 0x70: return .ref(.funcRef)
  422|  49.7k|        case 0x6F: return .ref(.externRef)
  423|  49.7k|        default:
  424|    130|            throw StreamError<Stream.Element>.unexpected(b, index: offset, expected: Set(0x7C...0x7F))
  425|  49.7k|        }
  426|  49.7k|    }
$s10WasmParser0B0V15parseResultTypeAA05BlockE0OyKF:
  431|  41.1k|    func parseResultType() throws -> BlockType {
  432|  41.1k|        guard let nextByte = try stream.peek() else {
  433|     83|            throw makeError(.unexpectedEnd)
  434|  41.0k|        }
  435|  41.0k|        switch nextByte {
  436|  41.0k|        case 0x40:
  437|  13.8k|            _ = try stream.consumeAny()
  438|  13.8k|            return .empty
  439|  41.0k|        case 0x7C...0x7F, 0x70, 0x6F:
  440|  13.2k|            return try .type(parseValueType())
  441|  41.0k|        default:
  442|  13.9k|            return try .funcType(TypeIndex(stream.consumeAny()))
  443|  41.0k|        }
  444|  41.0k|    }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKF:
  448|  4.04k|    func parseFunctionType() throws -> FunctionType {
  449|  4.04k|        let opcode = try stream.consumeAny()
  450|  4.03k|
  451|  4.03k|        // XXX: spectest expects the first byte should be parsed as a LEB128 with 1 byte limit
  452|  4.03k|        // but the spec itself doesn't require it, so just check the continue bit of LEB128 here.
  453|  4.03k|        guard opcode & 0b10000000 == 0 else {
  454|      2|            throw makeError(.integerRepresentationTooLong)
  455|  4.03k|        }
  456|  4.03k|        guard opcode == 0x60 else {
  457|      9|            throw makeError(.malformedFunctionType(opcode))
  458|  4.02k|        }
  459|  4.02k|
  460|  4.02k|        let parameters = try parseVector { try parseValueType() }
  461|  3.99k|        let results = try parseVector { try parseValueType() }
  462|  3.97k|        return FunctionType(parameters: parameters, results: results)
  463|  4.04k|    }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKFAE05ValueE0OyKXEfU_:
  460|  6.63k|        let parameters = try parseVector { try parseValueType() }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKFAE05ValueE0OyKXEfU0_:
  461|  4.08k|        let results = try parseVector { try parseValueType() }
$s10WasmParser0B0V11parseLimitsAA0D0VyKF:
  467|  4.93k|    func parseLimits() throws -> Limits {
  468|  4.93k|        let b = try stream.consumeAny()
  469|  4.90k|        let sharedMask: UInt8 = 0b0010
  470|  4.90k|        let isMemory64Mask: UInt8 = 0b0100
  471|  4.90k|
  472|  4.90k|        let hasMax = b & 0b0001 != 0
  473|  4.90k|        let shared = b & sharedMask != 0
  474|  4.90k|        let isMemory64 = b & isMemory64Mask != 0
  475|  4.90k|
  476|  4.90k|        var flagMask: UInt8 = 0b0001
  477|  4.90k|        if features.contains(.threads) {
  478|      0|            flagMask |= sharedMask
  479|      0|        }
  480|  4.90k|        if features.contains(.memory64) {
  481|      0|            flagMask |= isMemory64Mask
  482|      0|        }
  483|  4.90k|        guard (b & ~flagMask) == 0 else {
  484|      5|            throw makeError(.malformedLimit(b))
  485|  4.90k|        }
  486|  4.90k|
  487|  4.90k|        let min: UInt64
  488|  4.90k|        if isMemory64 {
  489|      0|            min = try parseUnsigned(UInt64.self)
  490|  4.90k|        } else {
  491|  4.90k|            min = try UInt64(parseUnsigned(UInt32.self))
  492|  4.89k|        }
  493|  4.89k|        var max: UInt64?
  494|  4.89k|        if hasMax {
  495|  2.44k|            if isMemory64 {
  496|      0|                max = try parseUnsigned(UInt64.self)
  497|  2.44k|            } else {
  498|  2.44k|                max = try UInt64(parseUnsigned(UInt32.self))
  499|  2.44k|            }
  500|  4.89k|        }
  501|  4.89k|        return Limits(min: min, max: max, isMemory64: isMemory64, shared: shared)
  502|  4.93k|    }
$s10WasmParser0B0V15parseMemoryTypeAA6LimitsVyKF:
  506|  1.19k|    func parseMemoryType() throws -> MemoryType {
  507|  1.19k|        return try parseLimits()
  508|  1.19k|    }
$s10WasmParser0B0V14parseTableTypeAA0dE0VyKF:
  512|  2.43k|    func parseTableType() throws -> TableType {
  513|  2.43k|        let elementType: ReferenceType
  514|  2.43k|        let b = try stream.consumeAny()
  515|  2.40k|
  516|  2.40k|        switch b {
  517|  2.40k|        case 0x70:
  518|  2.37k|            elementType = .funcRef
  519|  2.40k|        case 0x6F:
  520|     15|            elementType = .externRef
  521|  2.40k|        default:
  522|     13|            throw StreamError.unexpected(b, index: offset, expected: [0x6F, 0x70])
  523|  2.40k|        }
  524|  2.39k|
  525|  2.39k|        let limits = try parseLimits()
  526|  2.38k|        return TableType(elementType: elementType, limits: limits)
  527|  2.43k|    }
$s10WasmParser0B0V15parseGlobalTypeAA0dE0VyKF:
  531|  14.6k|    func parseGlobalType() throws -> GlobalType {
  532|  14.6k|        let valueType = try parseValueType()
  533|  14.4k|        let mutability = try parseMutability()
  534|  14.4k|        return GlobalType(mutability: mutability, valueType: valueType)
  535|  14.6k|    }
$s10WasmParser0B0V15parseMutabilityAA0D0OyKF:
  537|  14.4k|    func parseMutability() throws -> Mutability {
  538|  14.4k|        let b = try stream.consumeAny()
  539|  14.4k|        switch b {
  540|  14.4k|        case 0x00:
  541|  3.93k|            return .constant
  542|  14.4k|        case 0x01:
  543|  10.4k|            return .variable
  544|  14.4k|        default:
  545|      5|            throw makeError(.malformedMutability(b))
  546|  14.4k|        }
  547|  14.4k|    }
$s10WasmParser0B0V11parseMemargAA6MemArgVyKF:
  552|  45.9k|    func parseMemarg() throws -> MemArg {
  553|  45.9k|        let align: UInt32 = try parseUnsigned()
  554|  45.8k|        let offset: UInt64 = try features.contains(.memory64) ? parseUnsigned(UInt64.self) : UInt64(parseUnsigned(UInt32.self))
  555|  45.7k|        return MemArg(offset: offset, align: align)
  556|  45.9k|    }
$s10WasmParser0B0V16parseVectorBytess10ArraySliceVys5UInt8VGyKF:
  558|  3.01k|    func parseVectorBytes() throws -> ArraySlice<UInt8> {
  559|  3.01k|        let count: UInt32 = try parseUnsigned()
  560|  3.00k|        return try stream.consume(count: Int(count))
  561|  3.01k|    }
$s10WasmParser0B0V16parseInstruction7visitorAA0D4CodeOqd__z_tKAA0D7VisitorRd__lF:
  568|   893k|    func parseInstruction<V: InstructionVisitor>(visitor v: inout V) throws -> InstructionCode {
  569|   893k|        let rawCode = try stream.consumeAny()
  570|   890k|        guard let code = InstructionCode(rawValue: rawCode) else {
  571|    594|            throw makeError(.illegalOpcode(rawCode))
  572|   889k|        }
  573|   889k|        try doParseInstruction(code: code, visitor: &v)
  574|   887k|        return code
  575|   893k|    }
$s10WasmParser0B0V18doParseInstruction4code7visitoryAA0E4CodeO_qd__ztKAA0E7VisitorRd__lF:
  578|   889k|    func doParseInstruction<V: InstructionVisitor>(code: InstructionCode, visitor v: inout V) throws {
  579|   889k|        switch code {
  580|   889k|        case .unreachable: return try v.visitUnreachable()
  581|   889k|        case .nop: return try v.visitNop()
  582|   889k|        case .block: return try v.visitBlock(blockType: try parseResultType())
  583|   889k|        case .loop: return try v.visitLoop(blockType: try parseResultType())
  584|   889k|        case .if: return try v.visitIf(blockType: try parseResultType())
  585|   889k|        case .else: return try v.visitElse()
  586|   889k|        case .end: return try v.visitEnd()
  587|   889k|        case .br:
  588|  17.2k|            let label: UInt32 = try parseUnsigned()
  589|  17.2k|            return try v.visitBr(relativeDepth: label)
  590|   889k|        case .br_if:
  591|  8.43k|            let label: UInt32 = try parseUnsigned()
  592|  8.43k|            return try v.visitBrIf(relativeDepth: label)
  593|   889k|        case .br_table:
  594|  7.21k|            let labelIndices: [UInt32] = try parseVector { try parseUnsigned() }
  595|  7.14k|            let labelIndex: UInt32 = try parseUnsigned()
  596|  7.13k|            return try v.visitBrTable(targets: BrTable(labelIndices: labelIndices, defaultIndex: labelIndex))
  597|   889k|        case .return:
  598|  3.71k|            return try v.visitReturn()
  599|   889k|        case .call:
  600|  9.15k|            let index: UInt32 = try parseUnsigned()
  601|  9.15k|            return try v.visitCall(functionIndex: index)
  602|   889k|        case .call_indirect:
  603|  1.00k|            let typeIndex: TypeIndex = try parseUnsigned()
  604|  1.00k|            if try !features.contains(.referenceTypes) && stream.peek() != 0 {
  605|      0|                // Check that reserved byte is zero when reference-types is disabled
  606|      0|                throw makeError(.malformedIndirectCall)
  607|  1.00k|            }
  608|  1.00k|            let tableIndex: TableIndex = try parseUnsigned()
  609|    997|            return try v.visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
  610|   889k|        case .drop: return try v.visitDrop()
  611|   889k|        case .select: return try v.visitSelect()
  612|   889k|        case .typed_select:
  613|  5.09k|            let results = try parseVector { try parseValueType() }
  614|  5.06k|            guard results.count == 1 else {
  615|     11|                throw makeError(.invalidResultArity(expected: 1, actual: results.count))
  616|  5.05k|            }
  617|  5.05k|            return try v.visitTypedSelect(type: results[0])
  618|   889k|
  619|   889k|        case .local_get:
  620|  12.5k|            let index: UInt32 = try parseUnsigned()
  621|  12.5k|            return try v.visitLocalGet(localIndex: index)
  622|   889k|        case .local_set:
  623|  7.57k|            let index: UInt32 = try parseUnsigned()
  624|  7.57k|            return try v.visitLocalSet(localIndex: index)
  625|   889k|        case .local_tee:
  626|  3.20k|            let index: UInt32 = try parseUnsigned()
  627|  3.20k|            return try v.visitLocalTee(localIndex: index)
  628|   889k|        case .global_get:
  629|  36.3k|            let index: UInt32 = try parseUnsigned()
  630|  36.3k|            return try v.visitGlobalGet(globalIndex: index)
  631|   889k|        case .global_set:
  632|  23.6k|            let index: UInt32 = try parseUnsigned()
  633|  23.6k|            return try v.visitGlobalSet(globalIndex: index)
  634|   889k|
  635|   889k|        case .i32_load: return try v.visitLoad(.i32Load, memarg: try parseMemarg())
  636|   889k|        case .i64_load: return try v.visitLoad(.i64Load, memarg: try parseMemarg())
  637|   889k|        case .f32_load: return try v.visitLoad(.f32Load, memarg: try parseMemarg())
  638|   889k|        case .f64_load: return try v.visitLoad(.f64Load, memarg: try parseMemarg())
  639|   889k|        case .i32_load8_s: return try v.visitLoad(.i32Load8S, memarg: try parseMemarg())
  640|   889k|        case .i32_load8_u: return try v.visitLoad(.i32Load8U, memarg: try parseMemarg())
  641|   889k|        case .i32_load16_s: return try v.visitLoad(.i32Load16S, memarg: try parseMemarg())
  642|   889k|        case .i32_load16_u: return try v.visitLoad(.i32Load16U, memarg: try parseMemarg())
  643|   889k|        case .i64_load8_s: return try v.visitLoad(.i64Load8S, memarg: try parseMemarg())
  644|   889k|        case .i64_load8_u: return try v.visitLoad(.i64Load8U, memarg: try parseMemarg())
  645|   889k|        case .i64_load16_s: return try v.visitLoad(.i64Load16S, memarg: try parseMemarg())
  646|   889k|        case .i64_load16_u: return try v.visitLoad(.i64Load16U, memarg: try parseMemarg())
  647|   889k|        case .i64_load32_s: return try v.visitLoad(.i64Load32S, memarg: try parseMemarg())
  648|   889k|        case .i64_load32_u: return try v.visitLoad(.i64Load32U, memarg: try parseMemarg())
  649|   889k|        case .i32_store: return try v.visitStore(.i32Store, memarg: try parseMemarg())
  650|   889k|        case .i64_store: return try v.visitStore(.i64Store, memarg: try parseMemarg())
  651|   889k|        case .f32_store: return try v.visitStore(.f32Store, memarg: try parseMemarg())
  652|   889k|        case .f64_store: return try v.visitStore(.f64Store, memarg: try parseMemarg())
  653|   889k|        case .i32_store8: return try v.visitStore(.i32Store8, memarg: try parseMemarg())
  654|   889k|        case .i32_store16: return try v.visitStore(.i32Store16, memarg: try parseMemarg())
  655|   889k|        case .i64_store8: return try v.visitStore(.i64Store8, memarg: try parseMemarg())
  656|   889k|        case .i64_store16: return try v.visitStore(.i64Store16, memarg: try parseMemarg())
  657|   889k|        case .i64_store32: return try v.visitStore(.i64Store32, memarg: try parseMemarg())
  658|   889k|        case .memory_size:
  659|  4.85k|            let zero = try stream.consumeAny()
  660|  4.85k|            guard zero == 0x00 else {
  661|     38|                throw makeError(.zeroExpected(actual: zero))
  662|  4.81k|            }
  663|  4.81k|            return try v.visitMemorySize(memory: UInt32(zero))
  664|   889k|        case .memory_grow:
  665|  3.20k|            let zero = try stream.consumeAny()
  666|  3.17k|            guard zero == 0x00 else {
  667|     12|                throw makeError(.zeroExpected(actual: zero))
  668|  3.16k|            }
  669|  3.16k|            return try v.visitMemoryGrow(memory: UInt32(zero))
  670|   889k|
  671|   889k|        case .i32_const:
  672|  30.8k|            let n: UInt32 = try parseInteger()
  673|  30.8k|            return try v.visitI32Const(value: Int32(bitPattern: n))
  674|   889k|        case .i64_const:
  675|  20.5k|            let n: UInt64 = try parseInteger()
  676|  20.5k|            return try v.visitI64Const(value: Int64(bitPattern: n))
  677|   889k|        case .f32_const:
  678|  23.7k|            let n = try parseFloat()
  679|  23.7k|            return try v.visitF32Const(value: IEEE754.Float32(bitPattern: n))
  680|   889k|        case .f64_const:
  681|  13.9k|            let n = try parseDouble()
  682|  13.8k|            return try v.visitF64Const(value: IEEE754.Float64(bitPattern: n))
  683|   889k|
  684|   889k|        case .i32_eqz: return try v.visitI32Eqz()
  685|   889k|        case .i32_eq: return try v.visitCmp(.i32Eq)
  686|   889k|        case .i32_ne: return try v.visitCmp(.i32Ne)
  687|   889k|        case .i32_lt_s: return try v.visitCmp(.i32LtS)
  688|   889k|        case .i32_lt_u: return try v.visitCmp(.i32LtU)
  689|   889k|        case .i32_gt_s: return try v.visitCmp(.i32GtS)
  690|   889k|        case .i32_gt_u: return try v.visitCmp(.i32GtU)
  691|   889k|        case .i32_le_s: return try v.visitCmp(.i32LeS)
  692|   889k|        case .i32_le_u: return try v.visitCmp(.i32LeU)
  693|   889k|        case .i32_ge_s: return try v.visitCmp(.i32GeS)
  694|   889k|        case .i32_ge_u: return try v.visitCmp(.i32GeU)
  695|   889k|
  696|   889k|        case .i64_eqz: return try v.visitI64Eqz()
  697|   889k|        case .i64_eq: return try v.visitCmp(.i64Eq)
  698|   889k|        case .i64_ne: return try v.visitCmp(.i64Ne)
  699|   889k|        case .i64_lt_s: return try v.visitCmp(.i64LtS)
  700|   889k|        case .i64_lt_u: return try v.visitCmp(.i64LtU)
  701|   889k|        case .i64_gt_s: return try v.visitCmp(.i64GtS)
  702|   889k|        case .i64_gt_u: return try v.visitCmp(.i64GtU)
  703|   889k|        case .i64_le_s: return try v.visitCmp(.i64LeS)
  704|   889k|        case .i64_le_u: return try v.visitCmp(.i64LeU)
  705|   889k|        case .i64_ge_s: return try v.visitCmp(.i64GeS)
  706|   889k|        case .i64_ge_u: return try v.visitCmp(.i64GeU)
  707|   889k|
  708|   889k|        case .f32_eq: return try v.visitCmp(.f32Eq)
  709|   889k|        case .f32_ne: return try v.visitCmp(.f32Ne)
  710|   889k|        case .f32_lt: return try v.visitCmp(.f32Lt)
  711|   889k|        case .f32_gt: return try v.visitCmp(.f32Gt)
  712|   889k|        case .f32_le: return try v.visitCmp(.f32Le)
  713|   889k|        case .f32_ge: return try v.visitCmp(.f32Ge)
  714|   889k|
  715|   889k|        case .f64_eq: return try v.visitCmp(.f64Eq)
  716|   889k|        case .f64_ne: return try v.visitCmp(.f64Ne)
  717|   889k|        case .f64_lt: return try v.visitCmp(.f64Lt)
  718|   889k|        case .f64_gt: return try v.visitCmp(.f64Gt)
  719|   889k|        case .f64_le: return try v.visitCmp(.f64Le)
  720|   889k|        case .f64_ge: return try v.visitCmp(.f64Ge)
  721|   889k|
  722|   889k|        case .i32_clz: return try v.visitUnary(.i32Clz)
  723|   889k|        case .i32_ctz: return try v.visitUnary(.i32Ctz)
  724|   889k|        case .i32_popcnt: return try v.visitUnary(.i32Popcnt)
  725|   889k|        case .i32_add: return try v.visitBinary(.i32Add)
  726|   889k|        case .i32_sub: return try v.visitBinary(.i32Sub)
  727|   889k|        case .i32_mul: return try v.visitBinary(.i32Mul)
  728|   889k|        case .i32_div_s: return try v.visitBinary(.i32DivS)
  729|   889k|        case .i32_div_u: return try v.visitBinary(.i32DivU)
  730|   889k|        case .i32_rem_s: return try v.visitBinary(.i32RemS)
  731|   889k|        case .i32_rem_u: return try v.visitBinary(.i32RemU)
  732|   889k|        case .i32_and: return try v.visitBinary(.i32And)
  733|   889k|        case .i32_or: return try v.visitBinary(.i32Or)
  734|   889k|        case .i32_xor: return try v.visitBinary(.i32Xor)
  735|   889k|        case .i32_shl: return try v.visitBinary(.i32Shl)
  736|   889k|        case .i32_shr_s: return try v.visitBinary(.i32ShrS)
  737|   889k|        case .i32_shr_u: return try v.visitBinary(.i32ShrU)
  738|   889k|        case .i32_rotl: return try v.visitBinary(.i32Rotl)
  739|   889k|        case .i32_rotr: return try v.visitBinary(.i32Rotr)
  740|   889k|
  741|   889k|        case .i64_clz: return try v.visitUnary(.i64Clz)
  742|   889k|        case .i64_ctz: return try v.visitUnary(.i64Ctz)
  743|   889k|        case .i64_popcnt: return try v.visitUnary(.i64Popcnt)
  744|   889k|        case .i64_add: return try v.visitBinary(.i64Add)
  745|   889k|        case .i64_sub: return try v.visitBinary(.i64Sub)
  746|   889k|        case .i64_mul: return try v.visitBinary(.i64Mul)
  747|   889k|        case .i64_div_s: return try v.visitBinary(.i64DivS)
  748|   889k|        case .i64_div_u: return try v.visitBinary(.i64DivU)
  749|   889k|        case .i64_rem_s: return try v.visitBinary(.i64RemS)
  750|   889k|        case .i64_rem_u: return try v.visitBinary(.i64RemU)
  751|   889k|        case .i64_and: return try v.visitBinary(.i64And)
  752|   889k|        case .i64_or: return try v.visitBinary(.i64Or)
  753|   889k|        case .i64_xor: return try v.visitBinary(.i64Xor)
  754|   889k|        case .i64_shl: return try v.visitBinary(.i64Shl)
  755|   889k|        case .i64_shr_s: return try v.visitBinary(.i64ShrS)
  756|   889k|        case .i64_shr_u: return try v.visitBinary(.i64ShrU)
  757|   889k|        case .i64_rotl: return try v.visitBinary(.i64Rotl)
  758|   889k|        case .i64_rotr: return try v.visitBinary(.i64Rotr)
  759|   889k|
  760|   889k|        case .f32_abs: return try v.visitUnary(.f32Abs)
  761|   889k|        case .f32_neg: return try v.visitUnary(.f32Neg)
  762|   889k|        case .f32_ceil: return try v.visitUnary(.f32Ceil)
  763|   889k|        case .f32_floor: return try v.visitUnary(.f32Floor)
  764|   889k|        case .f32_trunc: return try v.visitUnary(.f32Trunc)
  765|   889k|        case .f32_nearest: return try v.visitUnary(.f32Nearest)
  766|   889k|        case .f32_sqrt: return try v.visitUnary(.f32Sqrt)
  767|   889k|
  768|   889k|        case .f32_add: return try v.visitBinary(.f32Add)
  769|   889k|        case .f32_sub: return try v.visitBinary(.f32Sub)
  770|   889k|        case .f32_mul: return try v.visitBinary(.f32Mul)
  771|   889k|        case .f32_div: return try v.visitBinary(.f32Div)
  772|   889k|        case .f32_min: return try v.visitBinary(.f32Min)
  773|   889k|        case .f32_max: return try v.visitBinary(.f32Max)
  774|   889k|        case .f32_copysign: return try v.visitBinary(.f32Copysign)
  775|   889k|
  776|   889k|        case .f64_abs: return try v.visitUnary(.f64Abs)
  777|   889k|        case .f64_neg: return try v.visitUnary(.f64Neg)
  778|   889k|        case .f64_ceil: return try v.visitUnary(.f64Ceil)
  779|   889k|        case .f64_floor: return try v.visitUnary(.f64Floor)
  780|   889k|        case .f64_trunc: return try v.visitUnary(.f64Trunc)
  781|   889k|        case .f64_nearest: return try v.visitUnary(.f64Nearest)
  782|   889k|        case .f64_sqrt: return try v.visitUnary(.f64Sqrt)
  783|   889k|
  784|   889k|        case .f64_add: return try v.visitBinary(.f64Add)
  785|   889k|        case .f64_sub: return try v.visitBinary(.f64Sub)
  786|   889k|        case .f64_mul: return try v.visitBinary(.f64Mul)
  787|   889k|        case .f64_div: return try v.visitBinary(.f64Div)
  788|   889k|        case .f64_min: return try v.visitBinary(.f64Min)
  789|   889k|        case .f64_max: return try v.visitBinary(.f64Max)
  790|   889k|        case .f64_copysign: return try v.visitBinary(.f64Copysign)
  791|   889k|
  792|   889k|        case .i32_wrap_i64: return try v.visitConversion(.i32WrapI64)
  793|   889k|        case .i32_trunc_f32_s: return try v.visitConversion(.i32TruncF32S)
  794|   889k|        case .i32_trunc_f32_u: return try v.visitConversion(.i32TruncF32U)
  795|   889k|        case .i32_trunc_f64_s: return try v.visitConversion(.i32TruncF64S)
  796|   889k|        case .i32_trunc_f64_u: return try v.visitConversion(.i32TruncF64U)
  797|   889k|        case .i64_extend_i32_s: return try v.visitConversion(.i64ExtendI32S)
  798|   889k|        case .i64_extend_i32_u: return try v.visitConversion(.i64ExtendI32U)
  799|   889k|        case .i64_trunc_f32_s: return try v.visitConversion(.i64TruncF32S)
  800|   889k|        case .i64_trunc_f32_u: return try v.visitConversion(.i64TruncF32U)
  801|   889k|        case .i64_trunc_f64_s: return try v.visitConversion(.i64TruncF64S)
  802|   889k|        case .i64_trunc_f64_u: return try v.visitConversion(.i64TruncF64U)
  803|   889k|        case .f32_convert_i32_s: return try v.visitConversion(.f32ConvertI32S)
  804|   889k|        case .f32_convert_i32_u: return try v.visitConversion(.f32ConvertI32U)
  805|   889k|        case .f32_convert_i64_s: return try v.visitConversion(.f32ConvertI64S)
  806|   889k|        case .f32_convert_i64_u: return try v.visitConversion(.f32ConvertI64U)
  807|   889k|        case .f32_demote_f64: return try v.visitConversion(.f32DemoteF64)
  808|   889k|        case .f64_convert_i32_s: return try v.visitConversion(.f64ConvertI32S)
  809|   889k|        case .f64_convert_i32_u: return try v.visitConversion(.f64ConvertI32U)
  810|   889k|        case .f64_convert_i64_s: return try v.visitConversion(.f64ConvertI64S)
  811|   889k|        case .f64_convert_i64_u: return try v.visitConversion(.f64ConvertI64U)
  812|   889k|        case .f64_promote_f32: return try v.visitConversion(.f64PromoteF32)
  813|   889k|        case .i32_reinterpret_f32: return try v.visitConversion(.i32ReinterpretF32)
  814|   889k|        case .i64_reinterpret_f64: return try v.visitConversion(.i64ReinterpretF64)
  815|   889k|        case .f32_reinterpret_i32: return try v.visitConversion(.f32ReinterpretI32)
  816|   889k|        case .f64_reinterpret_i64: return try v.visitConversion(.f64ReinterpretI64)
  817|   889k|        case .i32_extend8_s: return try v.visitUnary(.i32Extend8S)
  818|   889k|        case .i32_extend16_s: return try v.visitUnary(.i32Extend16S)
  819|   889k|        case .i64_extend8_s: return try v.visitUnary(.i64Extend8S)
  820|   889k|        case .i64_extend16_s: return try v.visitUnary(.i64Extend16S)
  821|   889k|        case .i64_extend32_s: return try v.visitUnary(.i64Extend32S)
  822|   889k|
  823|   889k|        case .ref_null:
  824|    853|            let type = try parseValueType()
  825|    847|
  826|    847|            guard case let .ref(refType) = type else {
  827|      5|                throw makeError(.expectedRefType(actual: type))
  828|    842|            }
  829|    842|
  830|    842|            return try v.visitRefNull(type: refType)
  831|   889k|
  832|   889k|        case .ref_is_null: return try v.visitRefIsNull()
  833|   889k|
  834|   889k|        case .ref_func: return try v.visitRefFunc(functionIndex: try parseUnsigned())
  835|   889k|
  836|   889k|        case .table_get: return try v.visitTableGet(table: try parseUnsigned())
  837|   889k|
  838|   889k|        case .table_set: return try v.visitTableSet(table: try parseUnsigned())
  839|   889k|
  840|   889k|        case .wasm2InstructionPrefix:
  841|  45.9k|            let codeSuffix: UInt32 = try parseUnsigned()
  842|  45.9k|            switch codeSuffix {
  843|  45.9k|            case 0: return try v.visitConversion(.i32TruncSatF32S)
  844|  45.9k|            case 1: return try v.visitConversion(.i32TruncSatF32U)
  845|  45.9k|            case 2: return try v.visitConversion(.i32TruncSatF64S)
  846|  45.9k|            case 3: return try v.visitConversion(.i32TruncSatF64U)
  847|  45.9k|            case 4: return try v.visitConversion(.i64TruncSatF32S)
  848|  45.9k|            case 5: return try v.visitConversion(.i64TruncSatF32U)
  849|  45.9k|            case 6: return try v.visitConversion(.i64TruncSatF64S)
  850|  45.9k|            case 7: return try v.visitConversion(.i64TruncSatF64U)
  851|  45.9k|            case 8:
  852|  1.47k|                let dataIndex: DataIndex = try parseUnsigned()
  853|  1.47k|                let zero = try stream.consumeAny()
  854|  1.47k|                guard zero == 0x00 else {
  855|      3|                    throw makeError(.zeroExpected(actual: zero))
  856|  1.47k|                }
  857|  1.47k|
  858|  1.47k|                return try v.visitMemoryInit(dataIndex: dataIndex)
  859|  45.9k|            case 9:
  860|  1.48k|                return try v.visitDataDrop(dataIndex: try parseUnsigned())
  861|  45.9k|            case 10:
  862|    622|                let (zero1, zero2) = try (stream.consumeAny(), stream.consumeAny())
  863|    620|                guard zero1 == 0x00 else {
  864|      3|                    throw makeError(.zeroExpected(actual: zero1))
  865|    617|                }
  866|    617|                guard zero2 == 0x00 else {
  867|      1|                    throw makeError(.zeroExpected(actual: zero2))
  868|    616|                }
  869|    616|                return try v.visitMemoryCopy(dstMem: 0, srcMem: 0)
  870|  45.9k|            case 11:
  871|    197|                let zero = try stream.consumeAny()
  872|    195|                guard zero == 0x00 else {
  873|      2|                    throw makeError(.zeroExpected(actual: zero))
  874|    193|                }
  875|    193|
  876|    193|                return try v.visitMemoryFill(memory: 0)
  877|  45.9k|            case 12:
  878|  5.51k|                let elementIndex: ElementIndex = try parseUnsigned()
  879|  5.50k|                let tableIndex: TableIndex = try parseUnsigned()
  880|  5.50k|                return try v.visitTableInit(elemIndex: elementIndex, table: tableIndex)
  881|  45.9k|            case 13: return try v.visitElemDrop(elemIndex: try parseUnsigned())
  882|  45.9k|            case 14:
  883|    737|                let destinationTableIndex: TableIndex = try parseUnsigned()
  884|    736|                let sourceTableIndex: TableIndex = try parseUnsigned()
  885|    723|                return try v.visitTableCopy(dstTable: destinationTableIndex, srcTable: sourceTableIndex)
  886|  45.9k|            case 15: return try v.visitTableGrow(table: try parseUnsigned())
  887|  45.9k|            case 16: return try v.visitTableSize(table: try parseUnsigned())
  888|  45.9k|            case 17: return try v.visitTableFill(table: try parseUnsigned())
  889|  45.9k|            default:
  890|     33|                throw makeError(.unimplementedInstruction(code.rawValue, suffix: codeSuffix))
  891|  45.9k|            }
  892|   889k|        }
  893|   889k|    }
$s10WasmParser0B0V18doParseInstruction4code7visitoryAA0E4CodeO_qd__ztKAA0E7VisitorRd__lFs6UInt32VyKXEfU_:
  594|  62.5k|            let labelIndices: [UInt32] = try parseVector { try parseUnsigned() }
$s10WasmParser0B0V18doParseInstruction4code7visitoryAA0E4CodeO_qd__ztKAA0E7VisitorRd__lF0A5Types9ValueTypeOyKXEfU0_:
  613|  6.15k|            let results = try parseVector { try parseValueType() }
$s10WasmParser0B0V18InstructionFactoryV5instsSayAA0C0OGvpfi:
  896|  24.4k|        var insts: [Instruction] = []
$s10WasmParser0B0V18InstructionFactoryV5visityyAA0C0OKF:
  898|   631k|        mutating func visit(_ instruction: Instruction) throws {
  899|   631k|            insts.append(instruction)
  900|   631k|        }
$s10WasmParser0B0V20parseConstExpressionSayAA11InstructionOGyKF:
  903|  24.4k|    func parseConstExpression() throws -> ConstExpression {
  904|  24.4k|        var factory = InstructionFactory()
  905|  24.4k|        var inst: InstructionCode
  906|   635k|        repeat {
  907|   635k|            inst = try self.parseInstruction(visitor: &factory)
  908|   635k|        } while inst != .end
  909|  20.5k|        return factory.insts
  910|  24.4k|    }
$s10WasmParser0B0V18parseCustomSection4sizeAA0dE0Vs6UInt32V_tKF:
  918|  3.38k|    func parseCustomSection(size: UInt32) throws -> CustomSection {
  919|  3.38k|        let preNameIndex = stream.currentIndex
  920|  3.38k|        let name = try parseName()
  921|  3.36k|        let nameSize = stream.currentIndex - preNameIndex
  922|  3.36k|        let contentSize = Int(size) - nameSize
  923|  3.36k|
  924|  3.36k|        guard contentSize >= 0 else {
  925|     20|            throw makeError(.invalidSectionSize(size))
  926|  3.34k|        }
  927|  3.34k|
  928|  3.34k|        let bytes = try stream.consume(count: contentSize)
  929|  3.34k|
  930|  3.34k|        return CustomSection(name: name, bytes: bytes)
  931|  3.38k|    }
$s10WasmParser0B0V16parseTypeSectionSay0A5Types08FunctionD0VGyKF:
  935|  3.84k|    func parseTypeSection() throws -> [FunctionType] {
  936|  3.84k|        return try parseVector { try parseFunctionType() }
  937|  3.84k|    }
$s10WasmParser0B0V16parseTypeSectionSay0A5Types08FunctionD0VGyKFAGyKXEfU_:
  936|  4.04k|        return try parseVector { try parseFunctionType() }
$s10WasmParser0B0V18parseImportSectionSayAA0D0VGyKF:
  941|  2.65k|    func parseImportSection() throws -> [Import] {
  942|  2.65k|        return try parseVector {
  943|  2.65k|            let module = try parseName()
  944|  2.65k|            let name = try parseName()
  945|  2.65k|            let descriptor = try parseImportDescriptor()
  946|  2.65k|            return Import(module: module, name: name, descriptor: descriptor)
  947|  2.65k|        }
  948|  2.65k|    }
$s10WasmParser0B0V18parseImportSectionSayAA0D0VGyKFAFyKXEfU_:
  942|  3.47k|        return try parseVector {
  943|  3.47k|            let module = try parseName()
  944|  3.43k|            let name = try parseName()
  945|  3.41k|            let descriptor = try parseImportDescriptor()
  946|  3.39k|            return Import(module: module, name: name, descriptor: descriptor)
  947|  3.47k|        }
$s10WasmParser0B0V21parseImportDescriptorAA0dE0OyKF:
  952|  3.41k|    func parseImportDescriptor() throws -> ImportDescriptor {
  953|  3.41k|        let b = try stream.consume(Set(0x00...0x03))
  954|  3.41k|        switch b {
  955|  3.41k|        case 0x00: return try .function(parseUnsigned())
  956|  3.41k|        case 0x01: return try .table(parseTableType())
  957|  3.41k|        case 0x02: return try .memory(parseMemoryType())
  958|  3.41k|        case 0x03: return try .global(parseGlobalType())
  959|  3.41k|        default:
  960|      0|            preconditionFailure("should never reach here")
  961|  3.41k|        }
  962|      0|    }
$s10WasmParser0B0V20parseFunctionSectionSays6UInt32VGyKF:
  966|  2.63k|    func parseFunctionSection() throws -> [TypeIndex] {
  967|  2.63k|        return try parseVector { try parseUnsigned() }
  968|  2.63k|    }
$s10WasmParser0B0V20parseFunctionSectionSays6UInt32VGyKFAFyKXEfU_:
  967|  37.4k|        return try parseVector { try parseUnsigned() }
$s10WasmParser0B0V17parseTableSectionSayAA0D0VGyKF:
  972|  1.12k|    func parseTableSection() throws -> [Table] {
  973|  1.12k|        return try parseVector { try Table(type: parseTableType()) }
  974|  1.12k|    }
$s10WasmParser0B0V17parseTableSectionSayAA0D0VGyKFAFyKXEfU_:
  973|  1.48k|        return try parseVector { try Table(type: parseTableType()) }
$s10WasmParser0B0V18parseMemorySectionSayAA0D0VGyKF:
  978|    953|    func parseMemorySection() throws -> [Memory] {
  979|    953|        return try parseVector { try Memory(type: parseLimits()) }
  980|    953|    }
$s10WasmParser0B0V18parseMemorySectionSayAA0D0VGyKFAFyKXEfU_:
  979|  1.34k|        return try parseVector { try Memory(type: parseLimits()) }
$s10WasmParser0B0V18parseGlobalSectionSayAA0D0VGyKF:
  984|  5.30k|    func parseGlobalSection() throws -> [Global] {
  985|  5.30k|        return try parseVector {
  986|  5.30k|            let type = try parseGlobalType()
  987|  5.30k|            let expression = try parseConstExpression()
  988|  5.30k|            return Global(type: type, initializer: expression)
  989|  5.30k|        }
  990|  5.30k|    }
$s10WasmParser0B0V18parseGlobalSectionSayAA0D0VGyKFAFyKXEfU_:
  985|  13.9k|        return try parseVector {
  986|  13.9k|            let type = try parseGlobalType()
  987|  13.7k|            let expression = try parseConstExpression()
  988|  10.8k|            return Global(type: type, initializer: expression)
  989|  13.9k|        }
$s10WasmParser0B0V18parseExportSectionSayAA0D0VGyKF:
  994|  1.28k|    func parseExportSection() throws -> [Export] {
  995|  1.28k|        return try parseVector {
  996|  1.28k|            let name = try parseName()
  997|  1.28k|            let descriptor = try parseExportDescriptor()
  998|  1.28k|            return Export(name: name, descriptor: descriptor)
  999|  1.28k|        }
 1000|  1.28k|    }
$s10WasmParser0B0V18parseExportSectionSayAA0D0VGyKFAFyKXEfU_:
  995|  3.51k|        return try parseVector {
  996|  3.51k|            let name = try parseName()
  997|  3.48k|            let descriptor = try parseExportDescriptor()
  998|  3.46k|            return Export(name: name, descriptor: descriptor)
  999|  3.51k|        }
$s10WasmParser0B0V21parseExportDescriptorAA0dE0OyKF:
 1004|  3.48k|    func parseExportDescriptor() throws -> ExportDescriptor {
 1005|  3.48k|        let b = try stream.consume(Set(0x00...0x03))
 1006|  3.47k|        switch b {
 1007|  3.47k|        case 0x00: return try .function(parseUnsigned())
 1008|  3.47k|        case 0x01: return try .table(parseUnsigned())
 1009|  3.47k|        case 0x02: return try .memory(parseUnsigned())
 1010|  3.47k|        case 0x03: return try .global(parseUnsigned())
 1011|  3.47k|        default:
 1012|      0|            preconditionFailure("should never reach here")
 1013|  3.47k|        }
 1014|      0|    }
$s10WasmParser0B0V17parseStartSections6UInt32VyKF:
 1018|     17|    func parseStartSection() throws -> FunctionIndex {
 1019|     17|        return try parseUnsigned()
 1020|     17|    }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKF:
 1024|  1.20k|    func parseElementSection() throws -> [ElementSegment] {
 1025|  1.20k|        return try parseVector {
 1026|  1.20k|            let flag = try ElementSegment.Flag(rawValue: parseUnsigned())
 1027|  1.20k|
 1028|  1.20k|            let type: ReferenceType
 1029|  1.20k|            let initializer: [ConstExpression]
 1030|  1.20k|            let mode: ElementSegment.Mode
 1031|  1.20k|
 1032|  1.20k|            if flag.contains(.isPassiveOrDeclarative) {
 1033|  1.20k|                if flag.contains(.isDeclarative) {
 1034|  1.20k|                    mode = .declarative
 1035|  1.20k|                } else {
 1036|  1.20k|                    mode = .passive
 1037|  1.20k|                }
 1038|  1.20k|            } else {
 1039|  1.20k|                let table: TableIndex
 1040|  1.20k|
 1041|  1.20k|                if flag.contains(.hasTableIndex) {
 1042|  1.20k|                    table = try parseUnsigned()
 1043|  1.20k|                } else {
 1044|  1.20k|                    table = 0
 1045|  1.20k|                }
 1046|  1.20k|
 1047|  1.20k|                let offset = try parseConstExpression()
 1048|  1.20k|                mode = .active(table: table, offset: offset)
 1049|  1.20k|            }
 1050|  1.20k|
 1051|  1.20k|            if flag.segmentHasRefType {
 1052|  1.20k|                let valueType = try parseValueType()
 1053|  1.20k|
 1054|  1.20k|                guard case let .ref(refType) = valueType else {
 1055|  1.20k|                    throw makeError(.expectedRefType(actual: valueType))
 1056|  1.20k|                }
 1057|  1.20k|
 1058|  1.20k|                type = refType
 1059|  1.20k|            } else {
 1060|  1.20k|                type = .funcRef
 1061|  1.20k|            }
 1062|  1.20k|
 1063|  1.20k|            if flag.segmentHasElemKind {
 1064|  1.20k|                // `elemkind` parsing as defined in the spec
 1065|  1.20k|                let elemKind = try parseUnsigned() as UInt32
 1066|  1.20k|                guard elemKind == 0x00 else {
 1067|  1.20k|                    throw makeError(.unexpectedElementKind(expected: 0x00, actual: elemKind))
 1068|  1.20k|                }
 1069|  1.20k|            }
 1070|  1.20k|
 1071|  1.20k|            if flag.contains(.usesExpressions) {
 1072|  1.20k|                initializer = try parseVector { try parseConstExpression() }
 1073|  1.20k|            } else {
 1074|  1.20k|                initializer = try parseVector {
 1075|  1.20k|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
 1076|  1.20k|                }
 1077|  1.20k|            }
 1078|  1.20k|
 1079|  1.20k|            return ElementSegment(type: type, initializer: initializer, mode: mode)
 1080|  1.20k|        }
 1081|  1.20k|    }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_:
 1025|  12.7k|        return try parseVector {
 1026|  12.7k|            let flag = try ElementSegment.Flag(rawValue: parseUnsigned())
 1027|  12.6k|
 1028|  12.6k|            let type: ReferenceType
 1029|  12.6k|            let initializer: [ConstExpression]
 1030|  12.6k|            let mode: ElementSegment.Mode
 1031|  12.6k|
 1032|  12.6k|            if flag.contains(.isPassiveOrDeclarative) {
 1033|  4.46k|                if flag.contains(.isDeclarative) {
 1034|  1.40k|                    mode = .declarative
 1035|  3.06k|                } else {
 1036|  3.06k|                    mode = .passive
 1037|  3.06k|                }
 1038|  8.22k|            } else {
 1039|  8.22k|                let table: TableIndex
 1040|  8.22k|
 1041|  8.22k|                if flag.contains(.hasTableIndex) {
 1042|    515|                    table = try parseUnsigned()
 1043|  7.70k|                } else {
 1044|  7.70k|                    table = 0
 1045|  8.22k|                }
 1046|  8.22k|
 1047|  8.22k|                let offset = try parseConstExpression()
 1048|  7.45k|                mode = .active(table: table, offset: offset)
 1049|  11.9k|            }
 1050|  11.9k|
 1051|  11.9k|            if flag.segmentHasRefType {
 1052|    322|                let valueType = try parseValueType()
 1053|    263|
 1054|    263|                guard case let .ref(refType) = valueType else {
 1055|      5|                    throw makeError(.expectedRefType(actual: valueType))
 1056|    258|                }
 1057|    258|
 1058|    258|                type = refType
 1059|  11.5k|            } else {
 1060|  11.5k|                type = .funcRef
 1061|  11.8k|            }
 1062|  11.8k|
 1063|  11.8k|            if flag.segmentHasElemKind {
 1064|  4.67k|                // `elemkind` parsing as defined in the spec
 1065|  4.67k|                let elemKind = try parseUnsigned() as UInt32
 1066|  4.63k|                guard elemKind == 0x00 else {
 1067|     66|                    throw makeError(.unexpectedElementKind(expected: 0x00, actual: elemKind))
 1068|  4.56k|                }
 1069|  11.7k|            }
 1070|  11.7k|
 1071|  11.7k|            if flag.contains(.usesExpressions) {
 1072|  2.21k|                initializer = try parseVector { try parseConstExpression() }
 1073|  9.53k|            } else {
 1074|  9.53k|                initializer = try parseVector {
 1075|  9.53k|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
 1076|  9.53k|                }
 1077|  11.5k|            }
 1078|  11.5k|
 1079|  11.5k|            return ElementSegment(type: type, initializer: initializer, mode: mode)
 1080|  12.7k|        }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_SayAA11InstructionOGyKXEfU_:
 1072|  1.57k|                initializer = try parseVector { try parseConstExpression() }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_SayAA11InstructionOGyKXEfU0_:
 1074|  11.7k|                initializer = try parseVector {
 1075|  11.7k|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
 1076|  11.7k|                }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKF:
 1085|  2.09k|    func parseCodeSection() throws -> [Code] {
 1086|  2.09k|        return try parseVector {
 1087|  2.09k|            let size = try parseUnsigned() as UInt32
 1088|  2.09k|            let bodyStart = stream.currentIndex
 1089|  2.09k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
 1090|  2.09k|                let n: UInt32 = try parseUnsigned()
 1091|  2.09k|                let t = try parseValueType()
 1092|  2.09k|                return (n, t)
 1093|  2.09k|            }
 1094|  2.09k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
 1095|  2.09k|            guard totalLocals < limits.maxFunctionLocals else {
 1096|  2.09k|                throw makeError(.tooManyLocals(totalLocals, limit: limits.maxFunctionLocals))
 1097|  2.09k|            }
 1098|  2.09k|
 1099|  2.09k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
 1100|  2.09k|                return Array(repeating: type, count: Int(n))
 1101|  2.09k|            }
 1102|  2.09k|            let expressionStart = stream.currentIndex
 1103|  2.09k|            let expressionBytes = try stream.consume(
 1104|  2.09k|                count: Int(size) - (expressionStart - bodyStart)
 1105|  2.09k|            )
 1106|  2.09k|            return Code(
 1107|  2.09k|                locals: locals, expression: expressionBytes,
 1108|  2.09k|                offset: expressionStart, features: features
 1109|  2.09k|            )
 1110|  2.09k|        }
 1111|  2.09k|    }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_:
 1086|  10.5k|        return try parseVector {
 1087|  10.5k|            let size = try parseUnsigned() as UInt32
 1088|  10.5k|            let bodyStart = stream.currentIndex
 1089|  10.5k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
 1090|  10.5k|                let n: UInt32 = try parseUnsigned()
 1091|  10.5k|                let t = try parseValueType()
 1092|  10.5k|                return (n, t)
 1093|  10.5k|            }
 1094|  10.5k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
 1095|  10.5k|            guard totalLocals < limits.maxFunctionLocals else {
 1096|      2|                throw makeError(.tooManyLocals(totalLocals, limit: limits.maxFunctionLocals))
 1097|  10.5k|            }
 1098|  10.5k|
 1099|  10.5k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
 1100|  10.5k|                return Array(repeating: type, count: Int(n))
 1101|  10.5k|            }
 1102|  10.5k|            let expressionStart = stream.currentIndex
 1103|  10.5k|            let expressionBytes = try stream.consume(
 1104|  10.5k|                count: Int(size) - (expressionStart - bodyStart)
 1105|  10.5k|            )
 1106|  10.5k|            return Code(
 1107|  10.5k|                locals: locals, expression: expressionBytes,
 1108|  10.5k|                offset: expressionStart, features: features
 1109|  10.5k|            )
 1110|  10.5k|        }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_s6UInt32V1n_0A5Types9ValueTypeO4typetyKXEfU_:
 1089|  4.07k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
 1090|  4.07k|                let n: UInt32 = try parseUnsigned()
 1091|  4.07k|                let t = try parseValueType()
 1092|  4.04k|                return (n, t)
 1093|  4.07k|            }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_s6UInt64VAI_s6UInt32V1n_0A5Types9ValueTypeO4typettXEfU0_:
 1094|  3.48k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_Say0A5Types9ValueTypeOGs6UInt32V_AJtXEfU1_:
 1099|  3.47k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
 1100|  3.47k|                return Array(repeating: type, count: Int(n))
 1101|  3.47k|            }
$s10WasmParser0B0V16parseDataSectionSayAA0D7SegmentOGyKF:
 1115|    426|    func parseDataSection() throws -> [DataSegment] {
 1116|    426|        return try parseVector {
 1117|    426|            let kind: UInt32 = try parseUnsigned()
 1118|    426|            switch kind {
 1119|    426|            case 0:
 1120|    426|                let offset = try parseConstExpression()
 1121|    426|                let initializer = try parseVectorBytes()
 1122|    426|                return .active(.init(index: 0, offset: offset, initializer: initializer))
 1123|    426|
 1124|    426|            case 1:
 1125|    426|                return try .passive(parseVectorBytes())
 1126|    426|
 1127|    426|            case 2:
 1128|    426|                let index: UInt32 = try parseUnsigned()
 1129|    426|                let offset = try parseConstExpression()
 1130|    426|                let initializer = try parseVectorBytes()
 1131|    426|                return .active(.init(index: index, offset: offset, initializer: initializer))
 1132|    426|            default:
 1133|    426|                throw makeError(.malformedDataSegmentKind(kind))
 1134|    426|            }
 1135|    426|        }
 1136|    426|    }
$s10WasmParser0B0V16parseDataSectionSayAA0D7SegmentOGyKFAFyKXEfU_:
 1116|  3.37k|        return try parseVector {
 1117|  3.37k|            let kind: UInt32 = try parseUnsigned()
 1118|  3.31k|            switch kind {
 1119|  3.31k|            case 0:
 1120|    972|                let offset = try parseConstExpression()
 1121|    684|                let initializer = try parseVectorBytes()
 1122|    680|                return .active(.init(index: 0, offset: offset, initializer: initializer))
 1123|  3.31k|
 1124|  3.31k|            case 1:
 1125|  2.31k|                return try .passive(parseVectorBytes())
 1126|  3.31k|
 1127|  3.31k|            case 2:
 1128|     31|                let index: UInt32 = try parseUnsigned()
 1129|     30|                let offset = try parseConstExpression()
 1130|     22|                let initializer = try parseVectorBytes()
 1131|     19|                return .active(.init(index: index, offset: offset, initializer: initializer))
 1132|  3.31k|            default:
 1133|      1|                throw makeError(.malformedDataSegmentKind(kind))
 1134|  3.31k|            }
 1135|  3.31k|        }
$s10WasmParser0B0V21parseDataCountSections6UInt32VyKF:
 1140|      8|    func parseDataCountSection() throws -> UInt32 {
 1141|      8|        return try parseUnsigned()
 1142|      8|    }
$s10WasmParser0B0V16parseMagicNumberyyKF:
 1167|  7.38k|    func parseMagicNumber() throws {
 1168|  7.38k|        let magicNumber = try stream.consume(count: 4)
 1169|  7.38k|        guard magicNumber.elementsEqual(WASM_MAGIC) else {
 1170|      3|            throw makeError(.invalidMagicNumber(.init(magicNumber)))
 1171|  7.37k|        }
 1172|  7.37k|    }
$s10WasmParser0B0V12parseVersionSays5UInt8VGyKF:
 1176|  7.37k|    func parseVersion() throws -> [UInt8] {
 1177|  7.37k|        let version = try Array(stream.consume(count: 4))
 1178|  7.37k|        guard version == [0x01, 0x00, 0x00, 0x00] else {
 1179|      1|            throw makeError(.unknownVersion(.init(version)))
 1180|  7.37k|        }
 1181|  7.37k|        return version
 1182|  7.37k|    }
$s10WasmParser0B0V13OrderTrackingV4last33_266B39EE9A5BCC72156BAE2430A75AC9LLAE0C0Oyx__Gvpfi:
 1202|  10.1k|        private var last: Order = .initial
$s10WasmParser0B0V13OrderTrackingV5track5order6parseryAE0C0Oyx__G_ACyxGtKF:
 1203|  16.4k|        mutating func track(order: Order, parser: Parser) throws {
 1204|  16.4k|            guard last.rawValue < order.rawValue else {
 1205|     26|                throw parser.makeError(.sectionOutOfOrder)
 1206|  16.4k|            }
 1207|  16.4k|            last = order
 1208|  16.4k|        }
$s10WasmParser0B0V9parseNextAA14ParsingPayloadOSgyKF:
 1239|  34.4k|    public mutating func parseNext() throws -> ParsingPayload? {
 1240|  34.4k|        switch nextParseTarget {
 1241|  34.4k|        case .header:
 1242|  7.38k|            try parseMagicNumber()
 1243|  7.37k|            let version = try parseVersion()
 1244|  7.37k|            self.nextParseTarget = .section
 1245|  7.37k|            return .header(version: version)
 1246|  34.4k|        case .section:
 1247|  27.0k|            guard try !stream.hasReachedEnd() else {
 1248|  2.13k|                return nil
 1249|  24.9k|            }
 1250|  24.9k|            let sectionID = try stream.consumeAny()
 1251|  24.9k|            let sectionSize: UInt32 = try parseUnsigned()
 1252|  24.9k|            let sectionStart = stream.currentIndex
 1253|  24.9k|
 1254|  24.9k|            let payload: ParsingPayload
 1255|  24.9k|            let order: OrderTracking.Order?
 1256|  24.9k|            switch sectionID {
 1257|  24.9k|            case 0:
 1258|  3.38k|                order = nil
 1259|  3.38k|                payload = .customSection(try parseCustomSection(size: sectionSize))
 1260|  24.9k|            case 1:
 1261|  3.84k|                order = .type
 1262|  3.84k|                payload = .typeSection(try parseTypeSection())
 1263|  24.9k|            case 2:
 1264|  2.65k|                order = ._import
 1265|  2.65k|                payload = .importSection(try parseImportSection())
 1266|  24.9k|            case 3:
 1267|  2.63k|                order = .function
 1268|  2.63k|                payload = .functionSection(try parseFunctionSection())
 1269|  24.9k|            case 4:
 1270|  1.12k|                order = .table
 1271|  1.12k|                payload = .tableSection(try parseTableSection())
 1272|  24.9k|            case 5:
 1273|    953|                order = .memory
 1274|    953|                payload = .memorySection(try parseMemorySection())
 1275|  24.9k|            case 6:
 1276|  5.30k|                order = .global
 1277|  5.30k|                payload = .globalSection(try parseGlobalSection())
 1278|  24.9k|            case 7:
 1279|  1.28k|                order = .export
 1280|  1.28k|                payload = .exportSection(try parseExportSection())
 1281|  24.9k|            case 8:
 1282|     17|                order = .start
 1283|     17|                payload = .startSection(try parseStartSection())
 1284|  24.9k|            case 9:
 1285|  1.20k|                order = .element
 1286|  1.20k|                payload = .elementSection(try parseElementSection())
 1287|  24.9k|            case 10:
 1288|  2.09k|                order = .code
 1289|  2.09k|                payload = .codeSection(try parseCodeSection())
 1290|  24.9k|            case 11:
 1291|    426|                order = .data
 1292|    426|                payload = .dataSection(try parseDataSection())
 1293|  24.9k|            case 12:
 1294|      8|                order = .dataCount
 1295|      8|                payload = .dataCount(try parseDataCountSection())
 1296|  24.9k|            default:
 1297|      5|                throw makeError(.malformedSectionID(sectionID))
 1298|  24.9k|            }
 1299|  19.7k|            if let order = order {
 1300|  16.4k|                try orderTracking.track(order: order, parser: self)
 1301|  19.7k|            }
 1302|  19.7k|            let expectedSectionEnd = sectionStart + Int(sectionSize)
 1303|  19.7k|            guard expectedSectionEnd == stream.currentIndex else {
 1304|     46|                throw makeError(.sectionSizeMismatch(expected: expectedSectionEnd, actual: offset))
 1305|  19.7k|            }
 1306|  19.7k|            return payload
 1307|  34.4k|        }
 1308|  34.4k|    }

$s10WasmParser6MemArgV6offset5alignACs6UInt64V_s6UInt32VtcfC:
   29|  45.7k|    public init(offset: UInt64, align: UInt32) {
   30|  45.7k|        self.offset = offset
   31|  45.7k|        self.align = align
   32|  45.7k|    }
$s10WasmParser6LimitsV3min3max10isMemory646sharedACs6UInt64V_AISgS2btcfC:
   49|  4.89k|    public init(min: UInt64, max: UInt64? = nil, isMemory64: Bool = false, shared: Bool = false) {
   50|  4.89k|        self.min = min
   51|  4.89k|        self.max = max
   52|  4.89k|        self.isMemory64 = isMemory64
   53|  4.89k|        self.shared = shared
   54|  4.89k|    }
$s10WasmParser9TableTypeV07elementD06limitsAC0A5Types09ReferenceD0O_AA6LimitsVtcfC:
   67|  2.38k|    public init(elementType: ReferenceType, limits: Limits) {
   68|  2.38k|        self.elementType = elementType
   69|  2.38k|        self.limits = limits
   70|  2.38k|    }
$s10WasmParser10GlobalTypeV10mutability05valueD0AcA10MutabilityO_0A5Types05ValueD0OtcfC:
   86|  14.4k|    public init(mutability: Mutability, valueType: ValueType) {
   87|  14.4k|        self.mutability = mutability
   88|  14.4k|        self.valueType = valueType
   89|  14.4k|    }
$s10WasmParser7IEEE754O7Float32V10bitPatternAEs6UInt32V_tcfC:
  105|  23.7k|        public init(bitPattern: UInt32) {
  106|  23.7k|            self.bitPattern = bitPattern
  107|  23.7k|        }
$s10WasmParser7IEEE754O7Float64V10bitPatternAEs6UInt64V_tcfC:
  112|  13.8k|        public init(bitPattern: UInt64) {
  113|  13.8k|            self.bitPattern = bitPattern
  114|  13.8k|        }
$s10WasmParser7BrTableV12labelIndices12defaultIndexACSays6UInt32VG_AGtcfC:
  122|  7.13k|    public init(labelIndices: [UInt32], defaultIndex: UInt32) {
  123|  7.13k|        self.labelIndices = labelIndices
  124|  7.13k|        self.defaultIndex = defaultIndex
  125|  7.13k|    }
$s10WasmParser5TableV4typeAcA0C4TypeV_tcfC:
  160|  1.44k|    public init(type: TableType) {
  161|  1.44k|        self.type = type
  162|  1.44k|    }
$s10WasmParser14ElementSegmentV4FlagV8rawValueAEs6UInt32V_tcfC:
  186|   134k|        init(rawValue: UInt32) {
  187|   134k|            self.rawValue = rawValue
  188|   134k|        }
$s10WasmParser14ElementSegmentV4FlagV18segmentHasElemKindSbvg:
  190|  11.8k|        var segmentHasElemKind: Bool {
  191|  11.8k|            !contains(.usesExpressions) && rawValue != 0
  192|  11.8k|        }
$s10WasmParser14ElementSegmentV4FlagV18segmentHasElemKindSbvgSbyKXEfu_:
  191|  9.64k|            !contains(.usesExpressions) && rawValue != 0
$s10WasmParser14ElementSegmentV4FlagV17segmentHasRefTypeSbvg:
  194|  11.9k|        var segmentHasRefType: Bool {
  195|  11.9k|            contains(.usesExpressions) && rawValue != 4
  196|  11.9k|        }
$s10WasmParser14ElementSegmentV4FlagV17segmentHasRefTypeSbvgSbyKXEfu_:
  195|  2.27k|            contains(.usesExpressions) && rawValue != 4
$s10WasmParser6ExportV4name10descriptorACSS_AA0C10DescriptorOtcfC:
  238|  3.46k|    public init(name: String, descriptor: ExportDescriptor) {
  239|  3.46k|        self.name = name
  240|  3.46k|        self.descriptor = descriptor
  241|  3.46k|    }
$s10WasmParser6ImportV6module4name10descriptorACSS_SSAA0C10DescriptorOtcfC:
  267|  3.39k|    public init(module: String, name: String, descriptor: ImportDescriptor) {
  268|  3.39k|        self.module = module
  269|  3.39k|        self.name = name
  270|  3.39k|        self.descriptor = descriptor
  271|  3.39k|    }
$s10WasmParser11InstructionO4LoadO16naturalAlignmentSivg:
  329|  32.3k|    public var naturalAlignment: Int {
  330|  32.3k|        switch self {
  331|  32.3k|        case .i32Load: return 2
  332|  32.3k|        case .i64Load: return 3
  333|  32.3k|        case .f32Load: return 2
  334|  32.3k|        case .f64Load: return 3
  335|  32.3k|        case .i32Load8S: return 0
  336|  32.3k|        case .i32Load8U: return 0
  337|  32.3k|        case .i32Load16S: return 1
  338|  32.3k|        case .i32Load16U: return 1
  339|  32.3k|        case .i64Load8S: return 0
  340|  32.3k|        case .i64Load8U: return 0
  341|  32.3k|        case .i64Load16S: return 1
  342|  32.3k|        case .i64Load16U: return 1
  343|  32.3k|        case .i64Load32S: return 2
  344|  32.3k|        case .i64Load32U: return 2
  345|  32.3k|        }
  346|  32.3k|    }
$s10WasmParser11InstructionO4LoadO4type0A5Types9ValueTypeOvg:
  350|  32.3k|    public var type: ValueType {
  351|  32.3k|        switch self {
  352|  32.3k|        case .i32Load: return .i32
  353|  32.3k|        case .i64Load: return .i64
  354|  32.3k|        case .f32Load: return .f32
  355|  32.3k|        case .f64Load: return .f64
  356|  32.3k|        case .i32Load8S: return .i32
  357|  32.3k|        case .i32Load8U: return .i32
  358|  32.3k|        case .i32Load16S: return .i32
  359|  32.3k|        case .i32Load16U: return .i32
  360|  32.3k|        case .i64Load8S: return .i64
  361|  32.3k|        case .i64Load8U: return .i64
  362|  32.3k|        case .i64Load16S: return .i64
  363|  32.3k|        case .i64Load16U: return .i64
  364|  32.3k|        case .i64Load32S: return .i64
  365|  32.3k|        case .i64Load32U: return .i64
  366|  32.3k|        }
  367|  32.3k|    }
$s10WasmParser11InstructionO5StoreO16naturalAlignmentSivg:
  374|  3.40k|    public var naturalAlignment: Int {
  375|  3.40k|        switch self {
  376|  3.40k|        case .i32Store: return 2
  377|  3.40k|        case .i64Store: return 3
  378|  3.40k|        case .f32Store: return 2
  379|  3.40k|        case .f64Store: return 3
  380|  3.40k|        case .i32Store8: return 0
  381|  3.40k|        case .i32Store16: return 1
  382|  3.40k|        case .i64Store8: return 0
  383|  3.40k|        case .i64Store16: return 1
  384|  3.40k|        case .i64Store32: return 2
  385|  3.40k|        }
  386|  3.40k|    }
$s10WasmParser11InstructionO5StoreO4type0A5Types9ValueTypeOvg:
  390|  3.40k|    public var type: ValueType {
  391|  3.40k|        switch self {
  392|  3.40k|        case .i32Store: return .i32
  393|  3.40k|        case .i64Store: return .i64
  394|  3.40k|        case .f32Store: return .f32
  395|  3.40k|        case .f64Store: return .f64
  396|  3.40k|        case .i32Store8: return .i32
  397|  3.40k|        case .i32Store16: return .i32
  398|  3.40k|        case .i64Store8: return .i64
  399|  3.40k|        case .i64Store16: return .i64
  400|  3.40k|        case .i64Store32: return .i64
  401|  3.40k|        }
  402|  3.40k|    }

$s9WasmTypes12FunctionTypeV10parameters7resultsACSayAA05ValueD0OG_AHtcfC:
    6|  21.4k|    public init(parameters: [ValueType], results: [ValueType] = []) {
    7|  21.4k|        self.parameters = parameters
    8|  21.4k|        self.results = results
    9|  21.4k|    }

