$s14FuzzTranslator0A5Checkys5Int32VSPys5UInt8VG_SitF:
    5|  3.77k|public func FuzzCheck(_ start: UnsafePointer<UInt8>, _ count: Int) -> CInt {
    6|  3.77k|    let bytes = Array(UnsafeBufferPointer(start: start, count: count))
    7|  3.77k|    do {
    8|  3.77k|        try fuzzInstantiation(bytes: bytes)
    9|  3.70k|    } catch {
   10|  3.70k|        // Ignore errors
   11|  3.77k|    }
   12|  3.77k|    return 0
   13|  3.77k|}

$s14WasmKitFuzzing21FuzzerResourceLimiterVACycfC:
    7|  1.56k|    public init() {}
$s14WasmKitFuzzing21FuzzerResourceLimiterV17limitMemoryGrowth2toSbSi_tKF:
    9|   117k|    public func limitMemoryGrowth(to desired: Int) throws -> Bool {
   10|   117k|        return desired < 1024 * 1024 * 1024
   11|   117k|    }
$s14WasmKitFuzzing21FuzzerResourceLimiterV16limitTableGrowth2toSbSi_tKF:
   12|    316|    public func limitTableGrowth(to desired: Int) throws -> Bool {
   13|    316|        return desired < 1024 * 1024
   14|    316|    }
$s14WasmKitFuzzing17fuzzInstantiation5bytesySays5UInt8VG_tKF:
   20|  3.77k|public func fuzzInstantiation(bytes: [UInt8]) throws {
   21|  3.77k|    let module = try WasmKit.parseWasm(bytes: bytes)
   22|  1.56k|    let engine = Engine(configuration: EngineConfiguration(compilationMode: .eager))
   23|  1.56k|    let store = Store(engine: engine)
   24|  1.56k|    store.resourceLimiter = FuzzerResourceLimiter()
   25|  1.56k|
   26|  1.56k|    // Prepare dummy imports
   27|  1.56k|    var imports = Imports()
   28|  1.56k|    for importEntry in module.imports {
   29|    219|        let value: ExternalValueConvertible
   30|    219|        switch importEntry.descriptor {
   31|    219|        case .function(let typeIndex):
   32|     30|            guard typeIndex < module.types.count else {
   33|      6|                // Skip if import type index is out of bounds
   34|      6|                return
   35|     24|            }
   36|     24|            let type = module.types[Int(typeIndex)]
   37|     24|            value = Function(store: store, type: type) { _, _ in
   38|     24|                // Provide "start function" with empty results
   39|     24|                if type.results.isEmpty { return [] }
   40|     24|                fatalError("Unexpected function call")
   41|     24|            }
   42|    219|        case .global(let globalType):
   43|     44|            value = try Global(store: store, type: globalType, value: .i32(0))
   44|    219|        case .memory(let memoryType):
   45|    110|            value = try Memory(store: store, type: memoryType)
   46|    219|        case .table(let tableType):
   47|     35|            value = try Table(store: store, type: tableType)
   48|    219|        }
   49|    207|        imports.define(module: importEntry.module, name: importEntry.name, value.externalValue)
   50|  1.55k|    }
   51|  1.55k|
   52|  1.55k|    // Instantiate the module
   53|  1.55k|    _ = try module.instantiate(store: store, imports: imports)
   54|     65|}

$s7WasmKit6EngineC13configuration11interceptorAcA0C13ConfigurationV_AA0C11Interceptor_pSgtcfc:
   21|  1.56k|    public init(configuration: EngineConfiguration = EngineConfiguration(), interceptor: EngineInterceptor? = nil) {
   22|  1.56k|        self.configuration = configuration
   23|  1.56k|        self.interceptor = interceptor
   24|  1.56k|        self.funcTypeInterner = Interner()
   25|  1.56k|    }
$s7WasmKit19EngineConfigurationV14ThreadingModelO21useDirectThreadedCodeSbvgZ:
   46|  1.56k|        static var useDirectThreadedCode: Bool {
   47|  1.56k|            return WASMKIT_USE_DIRECT_THREADED_CODE == 1
   48|  1.56k|        }
$s7WasmKit19EngineConfigurationV14ThreadingModelO25defaultForCurrentPlatformAEvgZ:
   50|  1.56k|        static var defaultForCurrentPlatform: ThreadingModel {
   51|  1.56k|            return useDirectThreadedCode ? .direct : .token
   52|  1.56k|        }
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfC:
  109|  1.56k|    ) {
  110|  1.56k|        self.threadingModel = threadingModel ?? .defaultForCurrentPlatform
  111|  1.56k|        self.compilationMode = compilationMode ?? .lazy
  112|  1.56k|        self.stackSize = stackSize ?? (1 << 19)
  113|  1.56k|        self.features = features
  114|  1.56k|    }
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfcAIyKXEfu_:
  110|  1.56k|        self.threadingModel = threadingModel ?? .defaultForCurrentPlatform
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfcSiyKXEfu1_:
  112|  1.56k|        self.stackSize = stackSize ?? (1 << 19)
$s7WasmKit6EngineC11resolveTypey0A5Types08FunctionE0VAA8InternedVyAGGF:
  118|  2.30k|    func resolveType(_ type: InternedFuncType) -> FunctionType {
  119|  2.30k|        return funcTypeInterner.resolve(type)
  120|  2.30k|    }
$s7WasmKit6EngineC10internTypeyAA8InternedVy0A5Types08FunctionE0VGAIF:
  121|  4.27k|    func internType(_ type: FunctionType) -> InternedFuncType {
  122|  4.27k|        return funcTypeInterner.intern(type)
  123|  4.27k|    }

$s7WasmKit22ConstEvaluationContextV9functions7globals20onFunctionReferencedAcA14ImmutableArrayVyAA08InternalI0VG_Say0A5Types5ValueOGyAJcSgtcfC:
   17|  2.99k|    ) {
   18|  2.99k|        self.functions = functions
   19|  2.99k|        self.globals = globals
   20|  2.99k|        self.onFunctionReferenced = onFunctionReferenced
   21|  2.99k|    }
$s7WasmKit22ConstEvaluationContextV8instance13moduleImportsAcA12EntityHandleVyAA08InstanceI0VG_AA06ModuleH0VtcfC:
   23|  1.46k|    init(instance: InternalInstance, moduleImports: ModuleImports) {
   24|  1.46k|        // Constant expressions can only reference imported globals
   25|  1.46k|        let externalGlobals = instance.globals
   26|  1.46k|            .prefix(moduleImports.numberOfGlobals)
   27|  1.46k|            .map { $0.value }
   28|  1.46k|        self.init(functions: instance.functions, globals: Array(externalGlobals))
   29|  1.46k|    }
$s7WasmKit22ConstEvaluationContextV8instance13moduleImportsAcA12EntityHandleVyAA08InstanceI0VG_AA06ModuleH0Vtcfc0A5Types5ValueOAGyAA06GlobalI0VGXEfU_:
   27|     18|            .map { $0.value }
$s7WasmKit22ConstEvaluationContextV11functionRefy0A5Types9ReferenceOs6UInt32VKF:
   31|     11|    func functionRef(_ index: FunctionIndex) throws -> Reference {
   32|     11|        let function = try self.functions[validating: Int(index)]
   33|      7|        self.onFunctionReferenced?(function)
   34|      7|        return .function(from: function)
   35|     11|    }
$s7WasmKit22ConstEvaluationContextV11globalValuey0A5Types0G0Os6UInt32VKF:
   36|      2|    func globalValue(_ index: GlobalIndex) throws -> Value {
   37|      2|        guard index < globals.count else {
   38|      2|            throw GlobalEntity.createOutOfBoundsError(index: Int(index), count: globals.count)
   39|      2|        }
   40|      0|        return self.globals[Int(index)]
   41|      2|    }
$sSa7WasmKit0A6Parser11InstructionORszlE8evaluate7context12expectedType0A5Types5ValueOqd___AH0jH0OtKAA30ConstEvaluationContextProtocolRd__lF:
   45|  6.30k|    func evaluate<C: ConstEvaluationContextProtocol>(context: C, expectedType: WasmTypes.ValueType) throws -> Value {
   46|  6.30k|        let result = try self._evaluate(context: context)
   47|  6.28k|        try result.checkType(expectedType)
   48|  6.26k|        return result
   49|  6.30k|    }
$sSa7WasmKit0A6Parser11InstructionORszlE9_evaluate33_4813626859827C7082EA5FE0B7501990LL7context0A5Types5ValueOqd___tKAA30ConstEvaluationContextProtocolRd__lF:
   51|  6.30k|    private func _evaluate<C: ConstEvaluationContextProtocol>(context: C) throws -> Value {
   52|  6.30k|        guard self.last == .end, self.count == 2 else {
   53|      3|            throw ValidationError(.expectedEndAtOffsetExpression)
   54|  6.29k|        }
   55|  6.29k|        let constInst = self[0]
   56|  6.29k|        switch constInst {
   57|  6.29k|        case .i32Const(let value): return .i32(UInt32(bitPattern: value))
   58|  6.29k|        case .i64Const(let value): return .i64(UInt64(bitPattern: value))
   59|  6.29k|        case .f32Const(let value): return .f32(value.bitPattern)
   60|  6.29k|        case .f64Const(let value): return .f64(value.bitPattern)
   61|  6.29k|        case .globalGet(let globalIndex):
   62|      1|            return try context.globalValue(globalIndex)
   63|  6.29k|        case .refNull(let type):
   64|      0|            switch type {
   65|      0|            case .externRef: return .ref(.extern(nil))
   66|      0|            case .funcRef: return .ref(.function(nil))
   67|      0|            }
   68|  6.29k|        case .refFunc(let functionIndex):
   69|      8|            return try .ref(context.functionRef(functionIndex))
   70|  6.29k|        default:
   71|     10|            throw ValidationError(.illegalConstExpressionInstruction(constInst))
   72|  6.29k|        }
   73|  6.29k|    }
$s10WasmParser14ElementSegmentV0A3KitE13evaluateInits7contextSay0A5Types9ReferenceOGx_tKAD30ConstEvaluationContextProtocolRzlF:
   77|     93|    func evaluateInits<C: ConstEvaluationContextProtocol>(context: C) throws -> [Reference] {
   78|     93|        return try self.initializer.map { expression -> Reference in
   79|     93|            let result = try Self._evaluateInits(context: context, expression: expression)
   80|     93|            try result.checkType(self.type)
   81|     93|            return result
   82|     93|        }
   83|     93|    }
$s10WasmParser14ElementSegmentV0A3KitE13evaluateInits7contextSay0A5Types9ReferenceOGx_tKAD30ConstEvaluationContextProtocolRzlFAISayAA11InstructionOGKXEfU_:
   78|     15|        return try self.initializer.map { expression -> Reference in
   79|     15|            let result = try Self._evaluateInits(context: context, expression: expression)
   80|      0|            try result.checkType(self.type)
   81|      0|            return result
   82|     15|        }
$s10WasmParser14ElementSegmentV0A3KitE14_evaluateInits7context10expression0A5Types9ReferenceOx_SayAA11InstructionOGtKAD30ConstEvaluationContextProtocolRzlFZ:
   86|     15|    ) throws -> Reference {
   87|     15|        switch expression[0] {
   88|     15|        case let .refFunc(index):
   89|      3|            return try context.functionRef(index)
   90|     15|        case .refNull(.funcRef):
   91|      0|            return .function(nil)
   92|     15|        case .refNull(.externRef):
   93|      0|            return .extern(nil)
   94|     15|        case .globalGet(let index):
   95|      1|            let value = try context.globalValue(index)
   96|      0|            switch value {
   97|      0|            case .ref(.function(let addr)):
   98|      0|                return .function(addr)
   99|      0|            default:
  100|      0|                throw ValidationError(.unexpectedGlobalValueType)
  101|      0|            }
  102|     15|        default:
  103|     11|            throw ValidationError(.unexpectedElementInitializer(expression: "\(expression)"))
  104|     15|        }
  105|     15|    }

wasmkit_execute_copyStack:
  221|  99.7k|    mutating func execute_copyStack(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  222|  99.7k|        let immediate = Instruction.CopyStackOperand.load(from: &pc.pointee)
  223|  99.7k|        self.copyStack(sp: sp.pointee, immediate: immediate)
  224|  99.7k|        let next = pc.pointee.pointee
  225|  99.7k|        pc.pointee = pc.pointee.advanced(by: 1)
  226|  99.7k|        return next
  227|  99.7k|    }
wasmkit_execute_globalGet:
  229|  98.4k|    mutating func execute_globalGet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  230|  98.4k|        let immediate = Instruction.GlobalAndVRegOperand.load(from: &pc.pointee)
  231|  98.4k|        self.globalGet(sp: sp.pointee, immediate: immediate)
  232|  98.4k|        let next = pc.pointee.pointee
  233|  98.4k|        pc.pointee = pc.pointee.advanced(by: 1)
  234|  98.4k|        return next
  235|  98.4k|    }
wasmkit_execute_globalSet:
  237|  12.1k|    mutating func execute_globalSet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  238|  12.1k|        let immediate = Instruction.GlobalAndVRegOperand.load(from: &pc.pointee)
  239|  12.1k|        self.globalSet(sp: sp.pointee, immediate: immediate)
  240|  12.1k|        let next = pc.pointee.pointee
  241|  12.1k|        pc.pointee = pc.pointee.advanced(by: 1)
  242|  12.1k|        return next
  243|  12.1k|    }
wasmkit_execute_compilingCall:
  252|    582|    mutating func execute_compilingCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  253|    582|        let immediate = Instruction.CallOperand.load(from: &pc.pointee)
  254|    582|        let next: CodeSlot
  255|    582|        (pc.pointee, next) = try self.compilingCall(sp: &sp.pointee, pc: pc.pointee, immediate: immediate)
  256|    581|        return next
  257|    582|    }
wasmkit_execute_internalCall:
  259|   423k|    mutating func execute_internalCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  260|   423k|        let immediate = Instruction.CallOperand.load(from: &pc.pointee)
  261|   423k|        let next: CodeSlot
  262|   423k|        (pc.pointee, next) = try self.internalCall(sp: &sp.pointee, pc: pc.pointee, immediate: immediate)
  263|   423k|        return next
  264|   423k|    }
wasmkit_execute_unreachable:
  273|     61|    mutating func execute_unreachable(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  274|     61|        let next: CodeSlot
  275|     61|        (pc.pointee, next) = try self.unreachable(sp: sp.pointee, pc: pc.pointee)
  276|      0|        return next
  277|     61|    }
wasmkit_execute_nop:
  279|   154k|    mutating func execute_nop(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  280|   154k|        self.nop(sp: sp.pointee)
  281|   154k|        let next = pc.pointee.pointee
  282|   154k|        pc.pointee = pc.pointee.advanced(by: 1)
  283|   154k|        return next
  284|   154k|    }
wasmkit_execute_br:
  286|  4.41k|    mutating func execute_br(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  287|  4.41k|        let immediate = Instruction.BrOperand.load(from: &pc.pointee)
  288|  4.41k|        let next: CodeSlot
  289|  4.41k|        (pc.pointee, next) = self.br(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  290|  4.41k|        return next
  291|  4.41k|    }
wasmkit_execute_brIf:
  293|      1|    mutating func execute_brIf(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  294|      1|        let immediate = Instruction.BrIfOperand.load(from: &pc.pointee)
  295|      1|        let next: CodeSlot
  296|      1|        (pc.pointee, next) = self.brIf(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  297|      1|        return next
  298|      1|    }
wasmkit_execute_brIfNot:
  300|      2|    mutating func execute_brIfNot(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  301|      2|        let immediate = Instruction.BrIfOperand.load(from: &pc.pointee)
  302|      2|        let next: CodeSlot
  303|      2|        (pc.pointee, next) = self.brIfNot(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  304|      2|        return next
  305|      2|    }
wasmkit_execute_brTable:
  307|  11.8k|    mutating func execute_brTable(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  308|  11.8k|        let immediate = Instruction.BrTableOperand.load(from: &pc.pointee)
  309|  11.8k|        let next: CodeSlot
  310|  11.8k|        (pc.pointee, next) = self.brTable(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  311|  11.8k|        return next
  312|  11.8k|    }
wasmkit_execute__return:
  314|   202k|    mutating func execute__return(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  315|   202k|        let next: CodeSlot
  316|   202k|        (pc.pointee, next) = self._return(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee)
  317|   202k|        return next
  318|   202k|    }
wasmkit_execute_endOfExecution:
  320|     14|    mutating func execute_endOfExecution(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  321|     14|        let next: CodeSlot
  322|     14|        (pc.pointee, next) = try self.endOfExecution(sp: &sp.pointee, pc: pc.pointee)
  323|      0|        return next
  324|     14|    }
wasmkit_execute_i32Load:
  326|  5.22k|    mutating func execute_i32Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  327|  5.22k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  328|  5.22k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i32($0) })
  329|  5.22k|        let next = pc.pointee.pointee
  330|  5.22k|        pc.pointee = pc.pointee.advanced(by: 1)
  331|  5.22k|        return next
  332|  5.22k|    }
$s7WasmKit9ExecutionV15execute_i32Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  328|  5.22k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i32($0) })
wasmkit_execute_i64Load:
  334|  4.55k|    mutating func execute_i64Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  335|  4.55k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  336|  4.55k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .i64($0) })
  337|  4.55k|        let next = pc.pointee.pointee
  338|  4.55k|        pc.pointee = pc.pointee.advanced(by: 1)
  339|  4.55k|        return next
  340|  4.55k|    }
$s7WasmKit9ExecutionV15execute_i64Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVAJXEfU_:
  336|  4.55k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .i64($0) })
wasmkit_execute_f32Load:
  342|  6.63k|    mutating func execute_f32Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  343|  6.63k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  344|  6.63k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .rawF32($0) })
  345|  6.63k|        let next = pc.pointee.pointee
  346|  6.63k|        pc.pointee = pc.pointee.advanced(by: 1)
  347|  6.63k|        return next
  348|  6.63k|    }
$s7WasmKit9ExecutionV15execute_f32Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  344|  6.63k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .rawF32($0) })
wasmkit_execute_f64Load:
  350|   207k|    mutating func execute_f64Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  351|   207k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  352|   207k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .rawF64($0) })
  353|   207k|        let next = pc.pointee.pointee
  354|   207k|        pc.pointee = pc.pointee.advanced(by: 1)
  355|   207k|        return next
  356|   207k|    }
$s7WasmKit9ExecutionV15execute_f64Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVAJXEfU_:
  352|   207k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .rawF64($0) })
wasmkit_execute_i32Load8S:
  358|   124k|    mutating func execute_i32Load8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  359|   124k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  360|   124k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int32($0)) })
  361|   124k|        let next = pc.pointee.pointee
  362|   124k|        pc.pointee = pc.pointee.advanced(by: 1)
  363|   124k|        return next
  364|   124k|    }
$s7WasmKit9ExecutionV17execute_i32Load8S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs4Int8VXEfU_:
  360|   124k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int32($0)) })
wasmkit_execute_i32Load8U:
  366|  3.16k|    mutating func execute_i32Load8U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  367|  3.16k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  368|  3.16k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i32(UInt32($0)) })
  369|  3.15k|        let next = pc.pointee.pointee
  370|  3.15k|        pc.pointee = pc.pointee.advanced(by: 1)
  371|  3.15k|        return next
  372|  3.16k|    }
$s7WasmKit9ExecutionV17execute_i32Load8U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5UInt8VXEfU_:
  368|  3.15k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i32(UInt32($0)) })
wasmkit_execute_i32Load16S:
  374|   131k|    mutating func execute_i32Load16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  375|   131k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  376|   131k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int32($0)) })
  377|   131k|        let next = pc.pointee.pointee
  378|   131k|        pc.pointee = pc.pointee.advanced(by: 1)
  379|   131k|        return next
  380|   131k|    }
$s7WasmKit9ExecutionV18execute_i32Load16S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int16VXEfU_:
  376|   131k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int32($0)) })
wasmkit_execute_i32Load16U:
  382|  3.16k|    mutating func execute_i32Load16U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  383|  3.16k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  384|  3.16k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i32(UInt32($0)) })
  385|  3.15k|        let next = pc.pointee.pointee
  386|  3.15k|        pc.pointee = pc.pointee.advanced(by: 1)
  387|  3.15k|        return next
  388|  3.16k|    }
$s7WasmKit9ExecutionV18execute_i32Load16U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt16VXEfU_:
  384|  3.15k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i32(UInt32($0)) })
wasmkit_execute_i64Load8S:
  390|  4.53k|    mutating func execute_i64Load8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  391|  4.53k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  392|  4.53k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int64($0)) })
  393|  4.53k|        let next = pc.pointee.pointee
  394|  4.53k|        pc.pointee = pc.pointee.advanced(by: 1)
  395|  4.53k|        return next
  396|  4.53k|    }
$s7WasmKit9ExecutionV17execute_i64Load8S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs4Int8VXEfU_:
  392|  4.53k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load8U:
  398|  8.11k|    mutating func execute_i64Load8U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  399|  8.11k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  400|  8.11k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i64(UInt64($0)) })
  401|  8.11k|        let next = pc.pointee.pointee
  402|  8.11k|        pc.pointee = pc.pointee.advanced(by: 1)
  403|  8.11k|        return next
  404|  8.11k|    }
$s7WasmKit9ExecutionV17execute_i64Load8U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5UInt8VXEfU_:
  400|  8.11k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i64Load16S:
  406|   104k|    mutating func execute_i64Load16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  407|   104k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  408|   104k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int64($0)) })
  409|   104k|        let next = pc.pointee.pointee
  410|   104k|        pc.pointee = pc.pointee.advanced(by: 1)
  411|   104k|        return next
  412|   104k|    }
$s7WasmKit9ExecutionV18execute_i64Load16S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int16VXEfU_:
  408|   104k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load16U:
  414|  12.2k|    mutating func execute_i64Load16U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  415|  12.2k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  416|  12.2k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i64(UInt64($0)) })
  417|  12.2k|        let next = pc.pointee.pointee
  418|  12.2k|        pc.pointee = pc.pointee.advanced(by: 1)
  419|  12.2k|        return next
  420|  12.2k|    }
$s7WasmKit9ExecutionV18execute_i64Load16U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt16VXEfU_:
  416|  12.2k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i64Load32S:
  422|   331k|    mutating func execute_i64Load32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  423|   331k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  424|   331k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int32.self, castToValue: { .init(signed: Int64($0)) })
  425|   331k|        let next = pc.pointee.pointee
  426|   331k|        pc.pointee = pc.pointee.advanced(by: 1)
  427|   331k|        return next
  428|   331k|    }
$s7WasmKit9ExecutionV18execute_i64Load32S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int32VXEfU_:
  424|   331k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int32.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load32U:
  430|  4.70k|    mutating func execute_i64Load32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  431|  4.70k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  432|  4.70k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i64(UInt64($0)) })
  433|  4.70k|        let next = pc.pointee.pointee
  434|  4.70k|        pc.pointee = pc.pointee.advanced(by: 1)
  435|  4.70k|        return next
  436|  4.70k|    }
$s7WasmKit9ExecutionV18execute_i64Load32U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  432|  4.70k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i32Store:
  438|  7.12k|    mutating func execute_i32Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  439|  7.12k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  440|  7.12k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i32 })
  441|  7.12k|        let next = pc.pointee.pointee
  442|  7.12k|        pc.pointee = pc.pointee.advanced(by: 1)
  443|  7.12k|        return next
  444|  7.12k|    }
$s7WasmKit9ExecutionV16execute_i32Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  440|  7.12k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i32 })
wasmkit_execute_i64Store:
  446|      1|    mutating func execute_i64Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  447|      1|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  448|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i64 })
  449|      1|        let next = pc.pointee.pointee
  450|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  451|      1|        return next
  452|      1|    }
$s7WasmKit9ExecutionV16execute_i64Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAjA12UntypedValueVXEfU_:
  448|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i64 })
wasmkit_execute_f32Store:
  454|      1|    mutating func execute_f32Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  455|      1|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  456|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF32 })
  457|      1|        let next = pc.pointee.pointee
  458|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  459|      1|        return next
  460|      1|    }
$s7WasmKit9ExecutionV16execute_f32Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  456|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF32 })
wasmkit_execute_i32Store8:
  470|  2.10k|    mutating func execute_i32Store8(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  471|  2.10k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  472|  2.10k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
  473|  2.10k|        let next = pc.pointee.pointee
  474|  2.10k|        pc.pointee = pc.pointee.advanced(by: 1)
  475|  2.10k|        return next
  476|  2.10k|    }
$s7WasmKit9ExecutionV17execute_i32Store82sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs5UInt8VAA12UntypedValueVXEfU_:
  472|  2.10k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
wasmkit_execute_i32Store16:
  478|  3.11k|    mutating func execute_i32Store16(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  479|  3.11k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  480|  3.11k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
  481|  3.11k|        let next = pc.pointee.pointee
  482|  3.11k|        pc.pointee = pc.pointee.advanced(by: 1)
  483|  3.11k|        return next
  484|  3.11k|    }
$s7WasmKit9ExecutionV18execute_i32Store162sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt16VAA12UntypedValueVXEfU_:
  480|  3.11k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
wasmkit_execute_i64Store8:
  486|      1|    mutating func execute_i64Store8(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  487|      1|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  488|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
  489|      1|        let next = pc.pointee.pointee
  490|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  491|      1|        return next
  492|      1|    }
$s7WasmKit9ExecutionV17execute_i64Store82sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs5UInt8VAA12UntypedValueVXEfU_:
  488|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
wasmkit_execute_i64Store16:
  494|      1|    mutating func execute_i64Store16(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  495|      1|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  496|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
  497|      1|        let next = pc.pointee.pointee
  498|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  499|      1|        return next
  500|      1|    }
$s7WasmKit9ExecutionV18execute_i64Store162sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt16VAA12UntypedValueVXEfU_:
  496|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
wasmkit_execute_i64Store32:
  502|      2|    mutating func execute_i64Store32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  503|      2|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  504|      2|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
  505|      2|        let next = pc.pointee.pointee
  506|      2|        pc.pointee = pc.pointee.advanced(by: 1)
  507|      2|        return next
  508|      2|    }
$s7WasmKit9ExecutionV18execute_i64Store322sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  504|      2|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
wasmkit_execute_memorySize:
  510|   284k|    mutating func execute_memorySize(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  511|   284k|        let immediate = Instruction.MemorySizeOperand.load(from: &pc.pointee)
  512|   284k|        self.memorySize(sp: sp.pointee, immediate: immediate)
  513|   284k|        let next = pc.pointee.pointee
  514|   284k|        pc.pointee = pc.pointee.advanced(by: 1)
  515|   284k|        return next
  516|   284k|    }
wasmkit_execute_memoryGrow:
  518|   125k|    mutating func execute_memoryGrow(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  519|   125k|        let immediate = Instruction.MemoryGrowOperand.load(from: &pc.pointee)
  520|   125k|        try self.memoryGrow(sp: sp.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
  521|   125k|        let next = pc.pointee.pointee
  522|   125k|        pc.pointee = pc.pointee.advanced(by: 1)
  523|   125k|        return next
  524|   125k|    }
wasmkit_execute_const32:
  558|  4.83k|    mutating func execute_const32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  559|  4.83k|        let immediate = Instruction.Const32Operand.load(from: &pc.pointee)
  560|  4.83k|        self.const32(sp: sp.pointee, immediate: immediate)
  561|  4.83k|        let next = pc.pointee.pointee
  562|  4.83k|        pc.pointee = pc.pointee.advanced(by: 1)
  563|  4.83k|        return next
  564|  4.83k|    }
wasmkit_execute_i32Add:
  574|  1.77k|    mutating func execute_i32Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  575|  1.77k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  576|  1.77k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].add(sp.pointee[i32: immediate.rhs])
  577|  1.77k|        let next = pc.pointee.pointee
  578|  1.77k|        pc.pointee = pc.pointee.advanced(by: 1)
  579|  1.77k|        return next
  580|  1.77k|    }
wasmkit_execute_i64Add:
  582|  9.24k|    mutating func execute_i64Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  583|  9.24k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  584|  9.24k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].add(sp.pointee[i64: immediate.rhs])
  585|  9.24k|        let next = pc.pointee.pointee
  586|  9.24k|        pc.pointee = pc.pointee.advanced(by: 1)
  587|  9.24k|        return next
  588|  9.24k|    }
wasmkit_execute_i32Sub:
  590|  1.04k|    mutating func execute_i32Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  591|  1.04k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  592|  1.04k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].sub(sp.pointee[i32: immediate.rhs])
  593|  1.04k|        let next = pc.pointee.pointee
  594|  1.04k|        pc.pointee = pc.pointee.advanced(by: 1)
  595|  1.04k|        return next
  596|  1.04k|    }
wasmkit_execute_i64Sub:
  598|   157k|    mutating func execute_i64Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  599|   157k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  600|   157k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].sub(sp.pointee[i64: immediate.rhs])
  601|   157k|        let next = pc.pointee.pointee
  602|   157k|        pc.pointee = pc.pointee.advanced(by: 1)
  603|   157k|        return next
  604|   157k|    }
wasmkit_execute_i32Mul:
  606|      1|    mutating func execute_i32Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  607|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  608|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].mul(sp.pointee[i32: immediate.rhs])
  609|      1|        let next = pc.pointee.pointee
  610|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  611|      1|        return next
  612|      1|    }
wasmkit_execute_i64Mul:
  614|  7.15k|    mutating func execute_i64Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  615|  7.15k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  616|  7.15k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].mul(sp.pointee[i64: immediate.rhs])
  617|  7.15k|        let next = pc.pointee.pointee
  618|  7.15k|        pc.pointee = pc.pointee.advanced(by: 1)
  619|  7.15k|        return next
  620|  7.15k|    }
wasmkit_execute_i32And:
  622|  3.33k|    mutating func execute_i32And(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  623|  3.33k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  624|  3.33k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].and(sp.pointee[i32: immediate.rhs])
  625|  3.33k|        let next = pc.pointee.pointee
  626|  3.33k|        pc.pointee = pc.pointee.advanced(by: 1)
  627|  3.33k|        return next
  628|  3.33k|    }
wasmkit_execute_i64And:
  630|  7.03k|    mutating func execute_i64And(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  631|  7.03k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  632|  7.03k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].and(sp.pointee[i64: immediate.rhs])
  633|  7.03k|        let next = pc.pointee.pointee
  634|  7.03k|        pc.pointee = pc.pointee.advanced(by: 1)
  635|  7.03k|        return next
  636|  7.03k|    }
wasmkit_execute_i64Or:
  646|   124k|    mutating func execute_i64Or(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  647|   124k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  648|   124k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].or(sp.pointee[i64: immediate.rhs])
  649|   124k|        let next = pc.pointee.pointee
  650|   124k|        pc.pointee = pc.pointee.advanced(by: 1)
  651|   124k|        return next
  652|   124k|    }
wasmkit_execute_i32Xor:
  654|      1|    mutating func execute_i32Xor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  655|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  656|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].xor(sp.pointee[i32: immediate.rhs])
  657|      1|        let next = pc.pointee.pointee
  658|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  659|      1|        return next
  660|      1|    }
wasmkit_execute_i64Xor:
  662|  5.73k|    mutating func execute_i64Xor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  663|  5.73k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  664|  5.73k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].xor(sp.pointee[i64: immediate.rhs])
  665|  5.73k|        let next = pc.pointee.pointee
  666|  5.73k|        pc.pointee = pc.pointee.advanced(by: 1)
  667|  5.73k|        return next
  668|  5.73k|    }
wasmkit_execute_i32Shl:
  670|  5.34k|    mutating func execute_i32Shl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  671|  5.34k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  672|  5.34k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shl(sp.pointee[i32: immediate.rhs])
  673|  5.34k|        let next = pc.pointee.pointee
  674|  5.34k|        pc.pointee = pc.pointee.advanced(by: 1)
  675|  5.34k|        return next
  676|  5.34k|    }
wasmkit_execute_i64Shl:
  678|  6.45k|    mutating func execute_i64Shl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  679|  6.45k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  680|  6.45k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shl(sp.pointee[i64: immediate.rhs])
  681|  6.45k|        let next = pc.pointee.pointee
  682|  6.45k|        pc.pointee = pc.pointee.advanced(by: 1)
  683|  6.45k|        return next
  684|  6.45k|    }
wasmkit_execute_i32ShrS:
  686|  6.63k|    mutating func execute_i32ShrS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  687|  6.63k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  688|  6.63k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shrS(sp.pointee[i32: immediate.rhs])
  689|  6.63k|        let next = pc.pointee.pointee
  690|  6.63k|        pc.pointee = pc.pointee.advanced(by: 1)
  691|  6.63k|        return next
  692|  6.63k|    }
wasmkit_execute_i64ShrS:
  694|  18.2k|    mutating func execute_i64ShrS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  695|  18.2k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  696|  18.2k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shrS(sp.pointee[i64: immediate.rhs])
  697|  18.2k|        let next = pc.pointee.pointee
  698|  18.2k|        pc.pointee = pc.pointee.advanced(by: 1)
  699|  18.2k|        return next
  700|  18.2k|    }
wasmkit_execute_i32ShrU:
  702|  1.32k|    mutating func execute_i32ShrU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  703|  1.32k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  704|  1.32k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shrU(sp.pointee[i32: immediate.rhs])
  705|  1.32k|        let next = pc.pointee.pointee
  706|  1.32k|        pc.pointee = pc.pointee.advanced(by: 1)
  707|  1.32k|        return next
  708|  1.32k|    }
wasmkit_execute_i64ShrU:
  710|  6.43k|    mutating func execute_i64ShrU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  711|  6.43k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  712|  6.43k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shrU(sp.pointee[i64: immediate.rhs])
  713|  6.43k|        let next = pc.pointee.pointee
  714|  6.43k|        pc.pointee = pc.pointee.advanced(by: 1)
  715|  6.43k|        return next
  716|  6.43k|    }
wasmkit_execute_i32Rotl:
  718|  1.14k|    mutating func execute_i32Rotl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  719|  1.14k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  720|  1.14k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].rotl(sp.pointee[i32: immediate.rhs])
  721|  1.14k|        let next = pc.pointee.pointee
  722|  1.14k|        pc.pointee = pc.pointee.advanced(by: 1)
  723|  1.14k|        return next
  724|  1.14k|    }
wasmkit_execute_i64Rotl:
  726|  4.59k|    mutating func execute_i64Rotl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  727|  4.59k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  728|  4.59k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].rotl(sp.pointee[i64: immediate.rhs])
  729|  4.59k|        let next = pc.pointee.pointee
  730|  4.59k|        pc.pointee = pc.pointee.advanced(by: 1)
  731|  4.59k|        return next
  732|  4.59k|    }
wasmkit_execute_i32Rotr:
  734|  1.32k|    mutating func execute_i32Rotr(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  735|  1.32k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  736|  1.32k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].rotr(sp.pointee[i32: immediate.rhs])
  737|  1.32k|        let next = pc.pointee.pointee
  738|  1.32k|        pc.pointee = pc.pointee.advanced(by: 1)
  739|  1.32k|        return next
  740|  1.32k|    }
wasmkit_execute_i64Rotr:
  742|  2.02k|    mutating func execute_i64Rotr(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  743|  2.02k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  744|  2.02k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].rotr(sp.pointee[i64: immediate.rhs])
  745|  2.02k|        let next = pc.pointee.pointee
  746|  2.02k|        pc.pointee = pc.pointee.advanced(by: 1)
  747|  2.02k|        return next
  748|  2.02k|    }
wasmkit_execute_i32DivS:
  750|  4.29k|    mutating func execute_i32DivS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  751|  4.29k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  752|  4.29k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].divS(sp.pointee[i32: immediate.rhs])
  753|  4.29k|        let next = pc.pointee.pointee
  754|  4.29k|        pc.pointee = pc.pointee.advanced(by: 1)
  755|  4.29k|        return next
  756|  4.29k|    }
wasmkit_execute_i64DivS:
  758|  2.41k|    mutating func execute_i64DivS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  759|  2.41k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  760|  2.41k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].divS(sp.pointee[i64: immediate.rhs])
  761|  2.40k|        let next = pc.pointee.pointee
  762|  2.40k|        pc.pointee = pc.pointee.advanced(by: 1)
  763|  2.40k|        return next
  764|  2.41k|    }
wasmkit_execute_i32DivU:
  766|  6.78k|    mutating func execute_i32DivU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  767|  6.78k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  768|  6.78k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].divU(sp.pointee[i32: immediate.rhs])
  769|  6.78k|        let next = pc.pointee.pointee
  770|  6.78k|        pc.pointee = pc.pointee.advanced(by: 1)
  771|  6.78k|        return next
  772|  6.78k|    }
wasmkit_execute_i64DivU:
  774|  1.83k|    mutating func execute_i64DivU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  775|  1.83k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  776|  1.83k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].divU(sp.pointee[i64: immediate.rhs])
  777|  1.83k|        let next = pc.pointee.pointee
  778|  1.83k|        pc.pointee = pc.pointee.advanced(by: 1)
  779|  1.83k|        return next
  780|  1.83k|    }
wasmkit_execute_i32RemS:
  782|  3.84k|    mutating func execute_i32RemS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  783|  3.84k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  784|  3.84k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].remS(sp.pointee[i32: immediate.rhs])
  785|  3.84k|        let next = pc.pointee.pointee
  786|  3.84k|        pc.pointee = pc.pointee.advanced(by: 1)
  787|  3.84k|        return next
  788|  3.84k|    }
wasmkit_execute_i64RemS:
  790|  5.34k|    mutating func execute_i64RemS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  791|  5.34k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  792|  5.34k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].remS(sp.pointee[i64: immediate.rhs])
  793|  5.34k|        let next = pc.pointee.pointee
  794|  5.34k|        pc.pointee = pc.pointee.advanced(by: 1)
  795|  5.34k|        return next
  796|  5.34k|    }
wasmkit_execute_i32RemU:
  798|  6.25k|    mutating func execute_i32RemU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  799|  6.25k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  800|  6.25k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].remU(sp.pointee[i32: immediate.rhs])
  801|  6.24k|        let next = pc.pointee.pointee
  802|  6.24k|        pc.pointee = pc.pointee.advanced(by: 1)
  803|  6.24k|        return next
  804|  6.25k|    }
wasmkit_execute_i64RemU:
  806|  12.5k|    mutating func execute_i64RemU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  807|  12.5k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  808|  12.5k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].remU(sp.pointee[i64: immediate.rhs])
  809|  12.5k|        let next = pc.pointee.pointee
  810|  12.5k|        pc.pointee = pc.pointee.advanced(by: 1)
  811|  12.5k|        return next
  812|  12.5k|    }
wasmkit_execute_i32Eq:
  814|  3.80k|    mutating func execute_i32Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  815|  3.80k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  816|  3.80k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].eq(sp.pointee[i32: immediate.rhs])
  817|  3.80k|        let next = pc.pointee.pointee
  818|  3.80k|        pc.pointee = pc.pointee.advanced(by: 1)
  819|  3.80k|        return next
  820|  3.80k|    }
wasmkit_execute_i64Eq:
  822|      1|    mutating func execute_i64Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  823|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  824|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].eq(sp.pointee[i64: immediate.rhs])
  825|      1|        let next = pc.pointee.pointee
  826|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  827|      1|        return next
  828|      1|    }
wasmkit_execute_i32Ne:
  830|  5.00k|    mutating func execute_i32Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  831|  5.00k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  832|  5.00k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ne(sp.pointee[i32: immediate.rhs])
  833|  5.00k|        let next = pc.pointee.pointee
  834|  5.00k|        pc.pointee = pc.pointee.advanced(by: 1)
  835|  5.00k|        return next
  836|  5.00k|    }
wasmkit_execute_i64Ne:
  838|      1|    mutating func execute_i64Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  839|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  840|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ne(sp.pointee[i64: immediate.rhs])
  841|      1|        let next = pc.pointee.pointee
  842|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  843|      1|        return next
  844|      1|    }
wasmkit_execute_i32LtS:
  846|  10.6k|    mutating func execute_i32LtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  847|  10.6k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  848|  10.6k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ltS(sp.pointee[i32: immediate.rhs])
  849|  10.6k|        let next = pc.pointee.pointee
  850|  10.6k|        pc.pointee = pc.pointee.advanced(by: 1)
  851|  10.6k|        return next
  852|  10.6k|    }
wasmkit_execute_i64LtS:
  854|      1|    mutating func execute_i64LtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  855|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  856|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ltS(sp.pointee[i64: immediate.rhs])
  857|      1|        let next = pc.pointee.pointee
  858|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  859|      1|        return next
  860|      1|    }
wasmkit_execute_i32LtU:
  862|  16.6k|    mutating func execute_i32LtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  863|  16.6k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  864|  16.6k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ltU(sp.pointee[i32: immediate.rhs])
  865|  16.6k|        let next = pc.pointee.pointee
  866|  16.6k|        pc.pointee = pc.pointee.advanced(by: 1)
  867|  16.6k|        return next
  868|  16.6k|    }
wasmkit_execute_i64LtU:
  870|      1|    mutating func execute_i64LtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  871|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  872|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ltU(sp.pointee[i64: immediate.rhs])
  873|      1|        let next = pc.pointee.pointee
  874|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  875|      1|        return next
  876|      1|    }
wasmkit_execute_i32GtS:
  878|  5.81k|    mutating func execute_i32GtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  879|  5.81k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  880|  5.81k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].gtS(sp.pointee[i32: immediate.rhs])
  881|  5.81k|        let next = pc.pointee.pointee
  882|  5.81k|        pc.pointee = pc.pointee.advanced(by: 1)
  883|  5.81k|        return next
  884|  5.81k|    }
wasmkit_execute_i64GtS:
  886|      1|    mutating func execute_i64GtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  887|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  888|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].gtS(sp.pointee[i64: immediate.rhs])
  889|      1|        let next = pc.pointee.pointee
  890|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  891|      1|        return next
  892|      1|    }
wasmkit_execute_i32GtU:
  894|  7.70k|    mutating func execute_i32GtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  895|  7.70k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  896|  7.70k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].gtU(sp.pointee[i32: immediate.rhs])
  897|  7.70k|        let next = pc.pointee.pointee
  898|  7.70k|        pc.pointee = pc.pointee.advanced(by: 1)
  899|  7.70k|        return next
  900|  7.70k|    }
wasmkit_execute_i64GtU:
  902|      1|    mutating func execute_i64GtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  903|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  904|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].gtU(sp.pointee[i64: immediate.rhs])
  905|      1|        let next = pc.pointee.pointee
  906|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  907|      1|        return next
  908|      1|    }
wasmkit_execute_i32LeS:
  910|      1|    mutating func execute_i32LeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  911|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  912|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].leS(sp.pointee[i32: immediate.rhs])
  913|      1|        let next = pc.pointee.pointee
  914|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  915|      1|        return next
  916|      1|    }
wasmkit_execute_i64LeS:
  918|      1|    mutating func execute_i64LeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  919|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  920|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].leS(sp.pointee[i64: immediate.rhs])
  921|      1|        let next = pc.pointee.pointee
  922|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  923|      1|        return next
  924|      1|    }
wasmkit_execute_i32LeU:
  926|  9.89k|    mutating func execute_i32LeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  927|  9.89k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  928|  9.89k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].leU(sp.pointee[i32: immediate.rhs])
  929|  9.89k|        let next = pc.pointee.pointee
  930|  9.89k|        pc.pointee = pc.pointee.advanced(by: 1)
  931|  9.89k|        return next
  932|  9.89k|    }
wasmkit_execute_i64LeU:
  934|      1|    mutating func execute_i64LeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  935|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  936|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].leU(sp.pointee[i64: immediate.rhs])
  937|      1|        let next = pc.pointee.pointee
  938|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  939|      1|        return next
  940|      1|    }
wasmkit_execute_i32GeS:
  942|  7.17k|    mutating func execute_i32GeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  943|  7.17k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  944|  7.17k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].geS(sp.pointee[i32: immediate.rhs])
  945|  7.17k|        let next = pc.pointee.pointee
  946|  7.17k|        pc.pointee = pc.pointee.advanced(by: 1)
  947|  7.17k|        return next
  948|  7.17k|    }
wasmkit_execute_i64GeS:
  950|      1|    mutating func execute_i64GeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  951|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  952|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].geS(sp.pointee[i64: immediate.rhs])
  953|      1|        let next = pc.pointee.pointee
  954|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  955|      1|        return next
  956|      1|    }
wasmkit_execute_i32GeU:
  958|  7.08k|    mutating func execute_i32GeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  959|  7.08k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  960|  7.08k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].geU(sp.pointee[i32: immediate.rhs])
  961|  7.08k|        let next = pc.pointee.pointee
  962|  7.08k|        pc.pointee = pc.pointee.advanced(by: 1)
  963|  7.08k|        return next
  964|  7.08k|    }
wasmkit_execute_i64GeU:
  966|      1|    mutating func execute_i64GeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  967|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  968|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].geU(sp.pointee[i64: immediate.rhs])
  969|      1|        let next = pc.pointee.pointee
  970|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  971|      1|        return next
  972|      1|    }
wasmkit_execute_i32Clz:
  974|  6.96k|    mutating func execute_i32Clz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  975|  6.96k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
  976|  6.96k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].clz
  977|  6.96k|        let next = pc.pointee.pointee
  978|  6.96k|        pc.pointee = pc.pointee.advanced(by: 1)
  979|  6.96k|        return next
  980|  6.96k|    }
wasmkit_execute_i64Clz:
  982|   188k|    mutating func execute_i64Clz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  983|   188k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
  984|   188k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].clz
  985|   188k|        let next = pc.pointee.pointee
  986|   188k|        pc.pointee = pc.pointee.advanced(by: 1)
  987|   188k|        return next
  988|   188k|    }
wasmkit_execute_i32Ctz:
  990|  3.43k|    mutating func execute_i32Ctz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  991|  3.43k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
  992|  3.43k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].ctz
  993|  3.43k|        let next = pc.pointee.pointee
  994|  3.43k|        pc.pointee = pc.pointee.advanced(by: 1)
  995|  3.43k|        return next
  996|  3.43k|    }
wasmkit_execute_i64Ctz:
  998|  13.0k|    mutating func execute_i64Ctz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  999|  13.0k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1000|  13.0k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].ctz
 1001|  13.0k|        let next = pc.pointee.pointee
 1002|  13.0k|        pc.pointee = pc.pointee.advanced(by: 1)
 1003|  13.0k|        return next
 1004|  13.0k|    }
wasmkit_execute_i32Popcnt:
 1006|  11.2k|    mutating func execute_i32Popcnt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1007|  11.2k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1008|  11.2k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].popcnt
 1009|  11.2k|        let next = pc.pointee.pointee
 1010|  11.2k|        pc.pointee = pc.pointee.advanced(by: 1)
 1011|  11.2k|        return next
 1012|  11.2k|    }
wasmkit_execute_i64Popcnt:
 1014|  11.4k|    mutating func execute_i64Popcnt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1015|  11.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1016|  11.4k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].popcnt
 1017|  11.4k|        let next = pc.pointee.pointee
 1018|  11.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1019|  11.4k|        return next
 1020|  11.4k|    }
wasmkit_execute_i32Eqz:
 1022|  6.10k|    mutating func execute_i32Eqz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1023|  6.10k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1024|  6.10k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].eqz
 1025|  6.10k|        let next = pc.pointee.pointee
 1026|  6.10k|        pc.pointee = pc.pointee.advanced(by: 1)
 1027|  6.10k|        return next
 1028|  6.10k|    }
wasmkit_execute_i64Eqz:
 1030|      1|    mutating func execute_i64Eqz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1031|      1|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1032|      1|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.input].eqz
 1033|      1|        let next = pc.pointee.pointee
 1034|      1|        pc.pointee = pc.pointee.advanced(by: 1)
 1035|      1|        return next
 1036|      1|    }
wasmkit_execute_i32WrapI64:
 1038|  2.59k|    mutating func execute_i32WrapI64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1039|  2.59k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1040|  2.59k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.input].wrap
 1041|  2.59k|        let next = pc.pointee.pointee
 1042|  2.59k|        pc.pointee = pc.pointee.advanced(by: 1)
 1043|  2.59k|        return next
 1044|  2.59k|    }
wasmkit_execute_i64ExtendI32S:
 1046|  4.13k|    mutating func execute_i64ExtendI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1047|  4.13k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1048|  4.13k|        sp.pointee[i64: immediate.result] = sp.pointee[i32: immediate.input].extendI32S
 1049|  4.13k|        let next = pc.pointee.pointee
 1050|  4.13k|        pc.pointee = pc.pointee.advanced(by: 1)
 1051|  4.13k|        return next
 1052|  4.13k|    }
wasmkit_execute_i64ExtendI32U:
 1054|  5.42k|    mutating func execute_i64ExtendI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1055|  5.42k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1056|  5.42k|        sp.pointee[i64: immediate.result] = sp.pointee[i32: immediate.input].extendI32U
 1057|  5.42k|        let next = pc.pointee.pointee
 1058|  5.42k|        pc.pointee = pc.pointee.advanced(by: 1)
 1059|  5.42k|        return next
 1060|  5.42k|    }
wasmkit_execute_i32Extend8S:
 1062|   167k|    mutating func execute_i32Extend8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1063|   167k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1064|   167k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].extend8S
 1065|   167k|        let next = pc.pointee.pointee
 1066|   167k|        pc.pointee = pc.pointee.advanced(by: 1)
 1067|   167k|        return next
 1068|   167k|    }
wasmkit_execute_i64Extend8S:
 1070|  3.14k|    mutating func execute_i64Extend8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1071|  3.14k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1072|  3.14k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend8S
 1073|  3.14k|        let next = pc.pointee.pointee
 1074|  3.14k|        pc.pointee = pc.pointee.advanced(by: 1)
 1075|  3.14k|        return next
 1076|  3.14k|    }
wasmkit_execute_i32Extend16S:
 1078|  13.4k|    mutating func execute_i32Extend16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1079|  13.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1080|  13.4k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].extend16S
 1081|  13.4k|        let next = pc.pointee.pointee
 1082|  13.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1083|  13.4k|        return next
 1084|  13.4k|    }
wasmkit_execute_i64Extend16S:
 1086|  5.74k|    mutating func execute_i64Extend16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1087|  5.74k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1088|  5.74k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend16S
 1089|  5.74k|        let next = pc.pointee.pointee
 1090|  5.74k|        pc.pointee = pc.pointee.advanced(by: 1)
 1091|  5.74k|        return next
 1092|  5.74k|    }
wasmkit_execute_i64Extend32S:
 1094|  12.7k|    mutating func execute_i64Extend32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1095|  12.7k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1096|  12.7k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend32S
 1097|  12.7k|        let next = pc.pointee.pointee
 1098|  12.7k|        pc.pointee = pc.pointee.advanced(by: 1)
 1099|  12.7k|        return next
 1100|  12.7k|    }
wasmkit_execute_i32TruncF32S:
 1102|  6.75k|    mutating func execute_i32TruncF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1103|  6.75k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1104|  6.75k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncToI32S
 1105|  6.75k|        let next = pc.pointee.pointee
 1106|  6.75k|        pc.pointee = pc.pointee.advanced(by: 1)
 1107|  6.75k|        return next
 1108|  6.75k|    }
wasmkit_execute_i32TruncF32U:
 1110|  6.21k|    mutating func execute_i32TruncF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1111|  6.21k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1112|  6.21k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncToI32U
 1113|  6.21k|        let next = pc.pointee.pointee
 1114|  6.21k|        pc.pointee = pc.pointee.advanced(by: 1)
 1115|  6.21k|        return next
 1116|  6.21k|    }
wasmkit_execute_i32TruncSatF32S:
 1118|      1|    mutating func execute_i32TruncSatF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1119|      1|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1120|      1|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI32S
 1121|      1|        let next = pc.pointee.pointee
 1122|      1|        pc.pointee = pc.pointee.advanced(by: 1)
 1123|      1|        return next
 1124|      1|    }
wasmkit_execute_i32TruncSatF32U:
 1126|  1.87k|    mutating func execute_i32TruncSatF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1127|  1.87k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1128|  1.87k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI32U
 1129|  1.87k|        let next = pc.pointee.pointee
 1130|  1.87k|        pc.pointee = pc.pointee.advanced(by: 1)
 1131|  1.87k|        return next
 1132|  1.87k|    }
wasmkit_execute_i32TruncF64S:
 1134|  11.3k|    mutating func execute_i32TruncF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1135|  11.3k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1136|  11.3k|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncToI32S
 1137|  11.3k|        let next = pc.pointee.pointee
 1138|  11.3k|        pc.pointee = pc.pointee.advanced(by: 1)
 1139|  11.3k|        return next
 1140|  11.3k|    }
wasmkit_execute_i32TruncF64U:
 1142|   189k|    mutating func execute_i32TruncF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1143|   189k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1144|   189k|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncToI32U
 1145|   189k|        let next = pc.pointee.pointee
 1146|   189k|        pc.pointee = pc.pointee.advanced(by: 1)
 1147|   189k|        return next
 1148|   189k|    }
wasmkit_execute_i32TruncSatF64S:
 1150|      1|    mutating func execute_i32TruncSatF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1151|      1|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1152|      1|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI32S
 1153|      1|        let next = pc.pointee.pointee
 1154|      1|        pc.pointee = pc.pointee.advanced(by: 1)
 1155|      1|        return next
 1156|      1|    }
wasmkit_execute_i64TruncF32S:
 1166|  3.87k|    mutating func execute_i64TruncF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1167|  3.87k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1168|  3.87k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncToI64S
 1169|  3.87k|        let next = pc.pointee.pointee
 1170|  3.87k|        pc.pointee = pc.pointee.advanced(by: 1)
 1171|  3.87k|        return next
 1172|  3.87k|    }
wasmkit_execute_i64TruncF32U:
 1174|  27.4k|    mutating func execute_i64TruncF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1175|  27.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1176|  27.4k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncToI64U
 1177|  27.4k|        let next = pc.pointee.pointee
 1178|  27.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1179|  27.4k|        return next
 1180|  27.4k|    }
wasmkit_execute_i64TruncSatF64S:
 1214|   175k|    mutating func execute_i64TruncSatF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1215|   175k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1216|   175k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI64S
 1217|   175k|        let next = pc.pointee.pointee
 1218|   175k|        pc.pointee = pc.pointee.advanced(by: 1)
 1219|   175k|        return next
 1220|   175k|    }
wasmkit_execute_i64TruncSatF64U:
 1222|  31.9k|    mutating func execute_i64TruncSatF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1223|  31.9k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1224|  31.9k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI64U
 1225|  31.9k|        let next = pc.pointee.pointee
 1226|  31.9k|        pc.pointee = pc.pointee.advanced(by: 1)
 1227|  31.9k|        return next
 1228|  31.9k|    }
wasmkit_execute_f32ConvertI32S:
 1230|      1|    mutating func execute_f32ConvertI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1231|      1|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1232|      1|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].convertToF32S
 1233|      1|        let next = pc.pointee.pointee
 1234|      1|        pc.pointee = pc.pointee.advanced(by: 1)
 1235|      1|        return next
 1236|      1|    }
wasmkit_execute_f32ConvertI32U:
 1238|  5.42k|    mutating func execute_f32ConvertI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1239|  5.42k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1240|  5.42k|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].convertToF32U
 1241|  5.42k|        let next = pc.pointee.pointee
 1242|  5.42k|        pc.pointee = pc.pointee.advanced(by: 1)
 1243|  5.42k|        return next
 1244|  5.42k|    }
wasmkit_execute_f32ConvertI64S:
 1246|  44.4k|    mutating func execute_f32ConvertI64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1247|  44.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1248|  44.4k|        sp.pointee[f32: immediate.result] = sp.pointee[i64: immediate.input].convertToF32S
 1249|  44.4k|        let next = pc.pointee.pointee
 1250|  44.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1251|  44.4k|        return next
 1252|  44.4k|    }
wasmkit_execute_f32ConvertI64U:
 1254|  26.6k|    mutating func execute_f32ConvertI64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1255|  26.6k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1256|  26.6k|        sp.pointee[f32: immediate.result] = sp.pointee[i64: immediate.input].convertToF32U
 1257|  26.6k|        let next = pc.pointee.pointee
 1258|  26.6k|        pc.pointee = pc.pointee.advanced(by: 1)
 1259|  26.6k|        return next
 1260|  26.6k|    }
wasmkit_execute_f64ConvertI32U:
 1270|  3.91k|    mutating func execute_f64ConvertI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1271|  3.91k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1272|  3.91k|        sp.pointee[f64: immediate.result] = sp.pointee[i32: immediate.input].convertToF64U
 1273|  3.91k|        let next = pc.pointee.pointee
 1274|  3.91k|        pc.pointee = pc.pointee.advanced(by: 1)
 1275|  3.91k|        return next
 1276|  3.91k|    }
wasmkit_execute_f64ConvertI64S:
 1278|  5.72k|    mutating func execute_f64ConvertI64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1279|  5.72k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1280|  5.72k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].convertToF64S
 1281|  5.72k|        let next = pc.pointee.pointee
 1282|  5.72k|        pc.pointee = pc.pointee.advanced(by: 1)
 1283|  5.72k|        return next
 1284|  5.72k|    }
wasmkit_execute_f64ConvertI64U:
 1286|  7.18k|    mutating func execute_f64ConvertI64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1287|  7.18k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1288|  7.18k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].convertToF64U
 1289|  7.18k|        let next = pc.pointee.pointee
 1290|  7.18k|        pc.pointee = pc.pointee.advanced(by: 1)
 1291|  7.18k|        return next
 1292|  7.18k|    }
wasmkit_execute_f32ReinterpretI32:
 1294|  2.64k|    mutating func execute_f32ReinterpretI32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1295|  2.64k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1296|  2.64k|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].reinterpretToF32
 1297|  2.64k|        let next = pc.pointee.pointee
 1298|  2.64k|        pc.pointee = pc.pointee.advanced(by: 1)
 1299|  2.64k|        return next
 1300|  2.64k|    }
wasmkit_execute_f64ReinterpretI64:
 1302|   187k|    mutating func execute_f64ReinterpretI64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1303|   187k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1304|   187k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].reinterpretToF64
 1305|   187k|        let next = pc.pointee.pointee
 1306|   187k|        pc.pointee = pc.pointee.advanced(by: 1)
 1307|   187k|        return next
 1308|   187k|    }
wasmkit_execute_i32ReinterpretF32:
 1310|      3|    mutating func execute_i32ReinterpretF32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1311|      3|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1312|      3|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.input].reinterpretToI32
 1313|      3|        let next = pc.pointee.pointee
 1314|      3|        pc.pointee = pc.pointee.advanced(by: 1)
 1315|      3|        return next
 1316|      3|    }
wasmkit_execute_f32Ge:
 1518|      1|    mutating func execute_f32Ge(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1519|      1|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1520|      1|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].ge(sp.pointee[f32: immediate.rhs])
 1521|      1|        let next = pc.pointee.pointee
 1522|      1|        pc.pointee = pc.pointee.advanced(by: 1)
 1523|      1|        return next
 1524|      1|    }
wasmkit_execute_f32Abs:
 1534|  3.16k|    mutating func execute_f32Abs(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1535|  3.16k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1536|  3.16k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].abs
 1537|  3.16k|        let next = pc.pointee.pointee
 1538|  3.16k|        pc.pointee = pc.pointee.advanced(by: 1)
 1539|  3.16k|        return next
 1540|  3.16k|    }
wasmkit_execute_f64Abs:
 1542|  4.80k|    mutating func execute_f64Abs(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1543|  4.80k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1544|  4.80k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].abs
 1545|  4.80k|        let next = pc.pointee.pointee
 1546|  4.80k|        pc.pointee = pc.pointee.advanced(by: 1)
 1547|  4.80k|        return next
 1548|  4.80k|    }
wasmkit_execute_f32Neg:
 1550|  4.17k|    mutating func execute_f32Neg(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1551|  4.17k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1552|  4.17k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].neg
 1553|  4.17k|        let next = pc.pointee.pointee
 1554|  4.17k|        pc.pointee = pc.pointee.advanced(by: 1)
 1555|  4.17k|        return next
 1556|  4.17k|    }
wasmkit_execute_f64Neg:
 1558|  4.45k|    mutating func execute_f64Neg(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1559|  4.45k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1560|  4.45k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].neg
 1561|  4.45k|        let next = pc.pointee.pointee
 1562|  4.45k|        pc.pointee = pc.pointee.advanced(by: 1)
 1563|  4.45k|        return next
 1564|  4.45k|    }
wasmkit_execute_f32Ceil:
 1566|  2.60k|    mutating func execute_f32Ceil(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1567|  2.60k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1568|  2.60k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].ceil
 1569|  2.60k|        let next = pc.pointee.pointee
 1570|  2.60k|        pc.pointee = pc.pointee.advanced(by: 1)
 1571|  2.60k|        return next
 1572|  2.60k|    }
wasmkit_execute_f64Ceil:
 1574|  3.06k|    mutating func execute_f64Ceil(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1575|  3.06k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1576|  3.06k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].ceil
 1577|  3.06k|        let next = pc.pointee.pointee
 1578|  3.06k|        pc.pointee = pc.pointee.advanced(by: 1)
 1579|  3.06k|        return next
 1580|  3.06k|    }
wasmkit_execute_f32Floor:
 1582|  5.65k|    mutating func execute_f32Floor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1583|  5.65k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1584|  5.65k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].floor
 1585|  5.65k|        let next = pc.pointee.pointee
 1586|  5.65k|        pc.pointee = pc.pointee.advanced(by: 1)
 1587|  5.65k|        return next
 1588|  5.65k|    }
wasmkit_execute_f64Floor:
 1590|   106k|    mutating func execute_f64Floor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1591|   106k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1592|   106k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].floor
 1593|   106k|        let next = pc.pointee.pointee
 1594|   106k|        pc.pointee = pc.pointee.advanced(by: 1)
 1595|   106k|        return next
 1596|   106k|    }
wasmkit_execute_f32Trunc:
 1598|  7.74k|    mutating func execute_f32Trunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1599|  7.74k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1600|  7.74k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].trunc
 1601|  7.74k|        let next = pc.pointee.pointee
 1602|  7.74k|        pc.pointee = pc.pointee.advanced(by: 1)
 1603|  7.74k|        return next
 1604|  7.74k|    }
wasmkit_execute_f64Trunc:
 1606|  74.9k|    mutating func execute_f64Trunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1607|  74.9k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1608|  74.9k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].trunc
 1609|  74.9k|        let next = pc.pointee.pointee
 1610|  74.9k|        pc.pointee = pc.pointee.advanced(by: 1)
 1611|  74.9k|        return next
 1612|  74.9k|    }
wasmkit_execute_f64Nearest:
 1622|  3.59k|    mutating func execute_f64Nearest(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1623|  3.59k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1624|  3.59k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].nearest
 1625|  3.59k|        let next = pc.pointee.pointee
 1626|  3.59k|        pc.pointee = pc.pointee.advanced(by: 1)
 1627|  3.59k|        return next
 1628|  3.59k|    }
wasmkit_execute_f32Sqrt:
 1630|    770|    mutating func execute_f32Sqrt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1631|    770|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1632|    770|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].sqrt
 1633|    770|        let next = pc.pointee.pointee
 1634|    770|        pc.pointee = pc.pointee.advanced(by: 1)
 1635|    770|        return next
 1636|    770|    }
wasmkit_execute_f64Sqrt:
 1638|  3.14k|    mutating func execute_f64Sqrt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1639|  3.14k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1640|  3.14k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].sqrt
 1641|  3.14k|        let next = pc.pointee.pointee
 1642|  3.14k|        pc.pointee = pc.pointee.advanced(by: 1)
 1643|  3.14k|        return next
 1644|  3.14k|    }
wasmkit_execute_f64PromoteF32:
 1646|  2.64k|    mutating func execute_f64PromoteF32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1647|  2.64k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1648|  2.64k|        sp.pointee[f64: immediate.result] = sp.pointee[f32: immediate.input].promoteF32
 1649|  2.64k|        let next = pc.pointee.pointee
 1650|  2.64k|        pc.pointee = pc.pointee.advanced(by: 1)
 1651|  2.64k|        return next
 1652|  2.64k|    }
wasmkit_execute_select:
 1662|  2.23k|    mutating func execute_select(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1663|  2.23k|        let immediate = Instruction.SelectOperand.load(from: &pc.pointee)
 1664|  2.23k|        self.select(sp: sp.pointee, immediate: immediate)
 1665|  2.23k|        let next = pc.pointee.pointee
 1666|  2.23k|        pc.pointee = pc.pointee.advanced(by: 1)
 1667|  2.23k|        return next
 1668|  2.23k|    }
$s7WasmKit11InstructionO7handlerSuvg:
 1777|   126k|    var handler: UInt {
 1778|   126k|        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
 1779|   126k|            let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
 1780|   126k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1781|   126k|                $0[Int(self.opcodeID)]
 1782|   126k|            }
 1783|   126k|        }
 1784|   126k|    }
$s7WasmKit11InstructionO7handlerSuvgSuSPySu_S195utGXEfU_:
 1778|   126k|        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
 1779|   126k|            let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
 1780|   126k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1781|   126k|                $0[Int(self.opcodeID)]
 1782|   126k|            }
 1783|   126k|        }
$s7WasmKit11InstructionO7handlerSuvgSuSPySu_S195utGXEfU_SuSPySuGXEfU_:
 1780|   126k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1781|   126k|                $0[Int(self.opcodeID)]
 1782|   126k|            }

$s7WasmKit4TrapV_9backtraceAcA0C6ReasonO_AA9BacktraceVSgtcfC:
   36|    344|    init(_ code: TrapReason, backtrace: Backtrace? = nil) {
   37|    344|        self.reason = code
   38|    344|        self.backtrace = backtrace
   39|    344|    }
$s7WasmKit4TrapV_9backtraceAcA0C6ReasonO7MessageV_AA9BacktraceVSgtcfC:
   41|      4|    init(_ message: TrapReason.Message, backtrace: Backtrace? = nil) {
   42|      4|        self.init(.message(message), backtrace: backtrace)
   43|      4|    }
$s7WasmKit4TrapV13withBacktraceyAcA0E0VF:
   54|    338|    func withBacktrace(_ backtrace: Backtrace) -> Trap {
   55|    338|        var trap = self
   56|    338|        trap.backtrace = backtrace
   57|    338|        return trap
   58|    338|    }
$s7WasmKit10TrapReasonO7MessageVyAESScfC:
   66|      4|        init(_ text: String) {
   67|      4|            self.text = text
   68|      4|        }
$s7WasmKit10TrapReasonO7MessageV28initialTableSizeExceedsLimit16numberOfElementsAESi_tFZ:
  121|      3|    static func initialTableSizeExceedsLimit(numberOfElements: Int) -> Self {
  122|      3|        Self("initial table size exceeds the resource limit: \(numberOfElements) elements")
  123|      3|    }
$s7WasmKit10TrapReasonO7MessageV29initialMemorySizeExceedsLimit04byteH0AESi_tFZ:
  124|      1|    static func initialMemorySizeExceedsLimit(byteSize: Int) -> Self {
  125|      1|        Self("initial memory size exceeds the resource limit: \(byteSize) bytes")
  126|      1|    }
$s7WasmKit11ImportErrorV7MessageVyAESScfC:
  148|      8|        init(_ text: String) {
  149|      8|            self.text = text
  150|      8|        }
$s7WasmKit11ImportErrorVyA2C7MessageVcfC:
  155|      8|    init(_ message: Message) {
  156|      8|        self.message = message
  157|      8|    }
$s7WasmKit11ImportErrorV7MessageV16incompatibleType_6entityAE0A6Parser0C0V_AA21InternalExternalValueOtFZ:
  164|      4|    static func incompatibleType(_ importEntry: Import, entity: InternalExternalValue) -> Self {
  165|      4|        let expected: String
  166|      4|        switch importEntry.descriptor {
  167|      4|        case .function:
  168|      0|            expected = "function"
  169|      4|        case .global:
  170|      1|            expected = "global"
  171|      4|        case .memory:
  172|      1|            expected = "memory"
  173|      4|        case .table:
  174|      2|            expected = "table"
  175|      4|        }
  176|      4|        let got: String
  177|      4|        switch entity {
  178|      4|        case .function:
  179|      0|            got = "function"
  180|      4|        case .global:
  181|      1|            got = "global"
  182|      4|        case .memory:
  183|      2|            got = "memory"
  184|      4|        case .table:
  185|      1|            got = "table"
  186|      4|        }
  187|      4|        return Self("incompatible import type for \(importEntry.module).\(importEntry.name), expected \(expected), got \(got)")
  188|      4|    }
$s7WasmKit11ImportErrorV7MessageV21incompatibleTableType_6actual8expectedAE0A6Parser0C0V_AI0gH0VAMtFZ:
  192|      2|    static func incompatibleTableType(_ importEntry: Import, actual: TableType, expected: TableType) -> Self {
  193|      2|        Self("incompatible import type: table type for \(importEntry.module).\(importEntry.name), expected \(expected), got \(actual)")
  194|      2|    }
$s7WasmKit11ImportErrorV7MessageV22incompatibleGlobalType_6actual8expectedAE0A6Parser0C0V_AI0gH0VAMtFZ:
  198|      2|    static func incompatibleGlobalType(_ importEntry: Import, actual: GlobalType, expected: GlobalType) -> Self {
  199|      2|        Self("incompatible import type: global type for \(importEntry.module).\(importEntry.name), expected \(expected), got \(actual)")
  200|      2|    }

$s7WasmKit9ExecutionV4trap33_46BE72AA5BC0E6798196575DFA250830LLSV5error_Spys6UInt64VG2sptSgvpfi:
   15|    381|    private var trap: (error: UnsafeRawPointer, sp: Sp)? = nil
$s7WasmKit9ExecutionV4with5store4bodyxAA8StoreRefV_xACz_Spys6UInt64VGtKXEtKlFZ:
   22|    381|    ) rethrows -> T {
   23|    381|        let limit = store.value.engine.configuration.stackSize / MemoryLayout<StackSlot>.stride
   24|    381|        let valueStack = UnsafeMutablePointer<StackSlot>.allocate(capacity: limit)
   25|    381|        defer {
   26|    381|            valueStack.deallocate()
   27|    381|        }
   28|    381|        var context = Execution(store: store, stackEnd: valueStack.advanced(by: limit))
   29|    381|        return try body(&context, valueStack)
   30|    381|    }
$s7WasmKit9ExecutionV15currentInstance2spAA12EntityHandleVyAA0eG0VGSpys6UInt64VG_tF:
   34|   410k|    func currentInstance(sp: Sp) -> InternalInstance {
   35|   410k|        sp.currentInstance.unsafelyUnwrapped
   36|   410k|    }
$s7WasmKit9ExecutionV13FrameIteratorV2spAESpys6UInt64VG_tcfC:
   48|    338|        init(sp: Sp) {
   49|    338|            self.sp = sp
   50|    338|        }
$s7WasmKit9ExecutionV13FrameIteratorV4nextAE7ElementVSgyF:
   52|   222k|        mutating func next() -> Element? {
   53|   222k|            guard let sp = self.sp, let pc = sp.returnPC else {
   54|    338|                // Reached the root frame, whose stack pointer is nil.
   55|    338|                return nil
   56|   222k|            }
   57|   222k|            self.sp = sp.previousSP
   58|   222k|            return Element(pc: pc, function: sp.currentFunction)
   59|   222k|        }
$s7WasmKit9ExecutionV16captureBacktrace2sp5storeAA0E0VSpys6UInt64VG_AA5StoreCtFZ:
   62|    338|    static func captureBacktrace(sp: Sp, store: Store) -> Backtrace {
   63|    338|        var frames = FrameIterator(sp: sp)
   64|    338|        var symbols: [Backtrace.Symbol?] = []
   65|   222k|        while let frame = frames.next() {
   66|   222k|            guard let function = frame.function else {
   67|    338|                symbols.append(nil)
   68|    338|                continue
   69|   222k|            }
   70|   222k|            let symbolName = store.nameRegistry.symbolicate(.wasm(function))
   71|   222k|            symbols.append(
   72|   222k|                Backtrace.Symbol(
   73|   222k|                    function: Function(handle: .wasm(function), store: store),
   74|   222k|                    name: symbolName
   75|   222k|                )
   76|   222k|            )
   77|   222k|        }
   78|    338|        return Backtrace(symbols: symbols)
   79|    338|    }
$s7WasmKit9ExecutionV9pushFrame4iseq8function26numberOfNonParameterLocals2sp8returnPC0M6AddendSpys6UInt64VGAA19InstructionSequenceV_AA12EntityHandleVyAA0a8FunctionT0VGSiA2Ms5Int16VtKF:
   89|   424k|    ) throws -> Sp {
   90|   424k|        let newSp = sp.advanced(by: Int(spAddend))
   91|   424k|        guard newSp.advanced(by: iseq.maxStackHeight) < stackEnd else {
   92|    234|            throw Trap(.callStackExhausted)
   93|   424k|        }
   94|   424k|        // Initialize the locals with zeros (all types of value have the same representation)
   95|   424k|        newSp.initialize(repeating: UntypedValue.default.storage, count: numberOfNonParameterLocals)
   96|   424k|        if let constants = iseq.constants.baseAddress {
   97|   424k|            let count = iseq.constants.count
   98|   424k|            newSp.advanced(by: numberOfNonParameterLocals).withMemoryRebound(to: UntypedValue.self, capacity: count) {
   99|   424k|                $0.initialize(from: constants, count: count)
  100|   424k|            }
  101|   424k|        }
  102|   424k|        newSp.previousSP = sp
  103|   424k|        newSp.returnPC = returnPC
  104|   424k|        newSp.currentFunction = function
  105|   424k|        return newSp
  106|   424k|    }
$s7WasmKit9ExecutionV9pushFrame4iseq8function26numberOfNonParameterLocals2sp8returnPC0M6AddendSpys6UInt64VGAA19InstructionSequenceV_AA12EntityHandleVyAA0a8FunctionT0VGSiA2Ms5Int16VtKFySpyAA12UntypedValueVGXEfU_:
   98|   424k|            newSp.advanced(by: numberOfNonParameterLocals).withMemoryRebound(to: UntypedValue.self, capacity: count) {
   99|   424k|                $0.initialize(from: constants, count: count)
  100|   424k|            }
$s7WasmKit9ExecutionV8popFrame2sp2pc2md2msySpys6UInt64VGz_AKzSvSgzSiztF:
  110|   202k|    mutating func popFrame(sp: inout Sp, pc: inout Pc, md: inout Md, ms: inout Ms) {
  111|   202k|        let oldSp = sp
  112|   202k|        sp = oldSp.previousSP.unsafelyUnwrapped
  113|   202k|        pc = oldSp.returnPC.unsafelyUnwrapped
  114|   202k|        let toInstance = oldSp.currentInstance.unsafelyUnwrapped
  115|   202k|        let fromInstance = sp.currentInstance
  116|   202k|        CurrentMemory.mayUpdateCurrentInstance(instance: toInstance, from: fromInstance, md: &md, ms: &ms)
  117|   202k|    }
$s7WasmKit8StoreRefV5valueAA0C0Cvg:
  125|   129k|    var value: Store {
  126|   129k|        _value.takeUnretainedValue()
  127|   129k|    }
$s7WasmKit8StoreRefVyAcA0C0ChcfC:
  129|  1.45k|    init(_ value: __shared Store) {
  130|  1.45k|        self._value = .passUnretained(value)
  131|  1.45k|    }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cs17FixedWidthIntegerRd__luig:
  158|  2.14M|        get {
  159|  2.14M|            return UntypedValue(storage: self[Int(index)])
  160|  2.14M|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cs17FixedWidthIntegerRd__luis:
  161|  1.07M|        nonmutating set {
  162|  1.07M|            self[Int(index)] = newValue.storage
  163|  1.07M|            return
  164|  1.07M|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cAA11ShiftedVRegRd__luig:
  168|   111k|        get {
  169|   111k|            return UntypedValue(storage: read(shifted: index))
  170|   111k|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cAA11ShiftedVRegRd__luis:
  171|   487k|        nonmutating set {
  172|   487k|            write(shifted: index, newValue)
  173|   487k|        }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LL7shiftedqd__qd_0__ts17FixedWidthIntegerRd__AA11ShiftedVRegRd_0_r0_lF:
  176|  1.53M|    private func read<T: FixedWidthInteger, R: ShiftedVReg>(shifted index: R) -> T {
  177|  1.53M|        return UnsafeRawPointer(self).advanced(by: Int(index.value)).withMemoryRebound(to: T.self, capacity: 1) {
  178|  1.53M|            $0.pointee
  179|  1.53M|        }
  180|  1.53M|    }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LL7shiftedqd__qd_0__ts17FixedWidthIntegerRd__AA11ShiftedVRegRd_0_r0_lFqd__SPyqd__GXEfU_:
  177|  1.53M|        return UnsafeRawPointer(self).advanced(by: Int(index.value)).withMemoryRebound(to: T.self, capacity: 1) {
  178|  1.53M|            $0.pointee
  179|  1.53M|        }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LLyqd__qd_0_s17FixedWidthIntegerRd__sAFRd_0_r0_lF:
  181|   991k|    private func read<T: FixedWidthInteger, R: FixedWidthInteger>(_ index: R) -> T {
  182|   991k|        return self.advanced(by: Int(index)).withMemoryRebound(to: T.self, capacity: 1) {
  183|   991k|            $0.pointee
  184|   991k|        }
  185|   991k|    }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LLyqd__qd_0_s17FixedWidthIntegerRd__sAFRd_0_r0_lFqd__Spyqd__GXEfU_:
  182|   991k|        return self.advanced(by: Int(index)).withMemoryRebound(to: T.self, capacity: 1) {
  183|   991k|            $0.pointee
  184|   991k|        }
$sSp7WasmKits6UInt64VRszlE5write33_46BE72AA5BC0E6798196575DFA250830LL7shifted_yqd___AA12UntypedValueVtAA11ShiftedVRegRd__lF:
  186|  2.39M|    private func write<R: ShiftedVReg>(shifted index: R, _ value: UntypedValue) {
  187|  2.39M|        UnsafeMutableRawPointer(self).advanced(by: Int(index.value)).storeBytes(of: value.storage, as: UInt64.self)
  188|  2.39M|    }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcAA11ShiftedVRegRd__luig:
  194|   230k|        get { return read(shifted: index) }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcAA11ShiftedVRegRd__luis:
  195|   544k|        nonmutating set { write(shifted: index, .i32(newValue)) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcAA11ShiftedVRegRd__luig:
  198|   509k|        get { return read(shifted: index) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcAA11ShiftedVRegRd__luis:
  199|   854k|        nonmutating set { write(shifted: index, .i64(newValue)) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcAA11ShiftedVRegRd__luig:
  202|  72.8k|        get { return Float32(bitPattern: read(shifted: index)) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcAA11ShiftedVRegRd__luis:
  203|   103k|        nonmutating set { write(shifted: index, .f32(newValue)) }
$sSp7WasmKits6UInt64VRszlE3f64Sdqd___tcAA11ShiftedVRegRd__luig:
  206|   608k|        get { return Float64(bitPattern: read(shifted: index)) }
$sSp7WasmKits6UInt64VRszlE3f64Sdqd___tcAA11ShiftedVRegRd__luis:
  207|   408k|        nonmutating set { write(shifted: index, .f64(newValue)) }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcs17FixedWidthIntegerRd__luig:
  211|   247k|        get { return read(index) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcs17FixedWidthIntegerRd__luig:
  215|   743k|        get { return read(index) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcs17FixedWidthIntegerRd__luig:
  219|      2|        get { return Float32(bitPattern: read(index)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvg:
  231|  1.03M|        get { return EntityHandle<WasmFunctionEntity>(bitPattern: UInt(self[-3].i64)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvs:
  232|   424k|        nonmutating set { self[-3] = UInt64(UInt(bitPattern: newValue?.bitPattern ?? 0)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvsSiyKXEfu_:
  232|    381|        nonmutating set { self[-3] = UInt64(UInt(bitPattern: newValue?.bitPattern ?? 0)) }
$sSp7WasmKits6UInt64VRszlE8returnPC33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvg:
  237|   424k|        get { return Pc(bitPattern: UInt(self[-2])) }
$sSp7WasmKits6UInt64VRszlE8returnPC33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvs:
  238|   424k|        nonmutating set { self[-2] = UInt64(UInt(bitPattern: newValue)) }
$sSp7WasmKits6UInt64VRszlE10previousSP33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvg:
  243|   424k|        get { return Sp(bitPattern: UInt(self[-1])) }
$sSp7WasmKits6UInt64VRszlE10previousSP33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvs:
  244|   424k|        nonmutating set { self[-1] = UInt64(UInt(bitPattern: newValue)) }
$sSp7WasmKits6UInt64VRszlE15currentInstance33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0eK0VGSgvg:
  247|   814k|    fileprivate var currentInstance: InternalInstance? {
  248|   814k|        currentFunction?.instance
  249|   814k|    }
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlF:
  254|  5.45M|    mutating func read<T>(_: T.Type = T.self) -> T {
  255|  5.45M|        assert(MemoryLayout<T>.stride == 8)
  256|  5.45M|        let value = self.withMemoryRebound(to: T.self, capacity: 1) { $0.pointee }
  257|  5.45M|        self += 1
  258|  5.45M|        return value
  259|  5.45M|    }
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlFSbyXEfu_:
  255|  5.45M|        assert(MemoryLayout<T>.stride == 8)
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlFqd__Spyqd__GXEfU_:
  256|  5.45M|        let value = self.withMemoryRebound(to: T.self, capacity: 1) { $0.pointee }
$sSp7WasmKits6UInt64VRszlE4nextSpyACG_ACtyF:
  261|   642k|    func next() -> (Pc, CodeSlot) {
  262|   642k|        return (self.advanced(by: 1), pointee)
  263|   642k|    }
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKF:
  282|    381|) throws -> [Value] {
  283|    381|    // NOTE: `runtime` variable must not outlive this function
  284|    381|    let store = StoreRef(store)
  285|    381|    return try Execution.with(store: store) { (stack, sp) in
  286|    381|        // Advance the stack pointer to be able to reference negative indices
  287|    381|        // for saving slots.
  288|    381|        let sp = sp.advanced(by: FrameHeaderLayout.numberOfSavingSlots)
  289|    381|        // Mark root stack pointer and current function as nil.
  290|    381|        sp.previousSP = nil
  291|    381|        sp.currentFunction = nil
  292|    381|        for (index, argument) in arguments.enumerated() {
  293|    381|            sp[VReg(index)] = UntypedValue(argument)
  294|    381|        }
  295|    381|
  296|    381|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  297|    381|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  298|    381|                threadingModel: store.value.engine.configuration.threadingModel
  299|    381|            )
  300|    381|            try stack.execute(
  301|    381|                sp: sp,
  302|    381|                pc: rootISeq.baseAddress!,
  303|    381|                handle: handle,
  304|    381|                type: type
  305|    381|            )
  306|    381|        }
  307|    381|        return type.results.enumerated().map { (i, type) in
  308|    381|            sp[VReg(i)].cast(to: type)
  309|    381|        }
  310|    381|    }
  311|    381|}
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKFAkA9ExecutionVz_Spys6UInt64VGtKXEfU_:
  285|    381|    return try Execution.with(store: store) { (stack, sp) in
  286|    381|        // Advance the stack pointer to be able to reference negative indices
  287|    381|        // for saving slots.
  288|    381|        let sp = sp.advanced(by: FrameHeaderLayout.numberOfSavingSlots)
  289|    381|        // Mark root stack pointer and current function as nil.
  290|    381|        sp.previousSP = nil
  291|    381|        sp.currentFunction = nil
  292|    381|        for (index, argument) in arguments.enumerated() {
  293|      0|            sp[VReg(index)] = UntypedValue(argument)
  294|    381|        }
  295|    381|
  296|    381|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  297|    381|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  298|    381|                threadingModel: store.value.engine.configuration.threadingModel
  299|    381|            )
  300|    381|            try stack.execute(
  301|    381|                sp: sp,
  302|    381|                pc: rootISeq.baseAddress!,
  303|    381|                handle: handle,
  304|    381|                type: type
  305|    381|            )
  306|    381|        }
  307|     14|        return type.results.enumerated().map { (i, type) in
  308|     14|            sp[VReg(i)].cast(to: type)
  309|     14|        }
  310|    381|    }
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKFAkA9ExecutionVz_Spys6UInt64VGtKXEfU_ySryAZGKXEfU_:
  296|    381|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  297|    381|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  298|    381|                threadingModel: store.value.engine.configuration.threadingModel
  299|    381|            )
  300|    381|            try stack.execute(
  301|    381|                sp: sp,
  302|    381|                pc: rootISeq.baseAddress!,
  303|    381|                handle: handle,
  304|    381|                type: type
  305|    381|            )
  306|     14|        }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign33_46BE72AA5BC0E6798196575DFA250830LL2md2ms6memoryySvSgz_SizAA12EntityHandleVyAA0eO0VGtFZ:
  318|    365|        private static func assign(md: inout Md, ms: inout Ms, memory: InternalMemory) {
  319|    365|            memory.withValue { assign(md: &md, ms: &ms, memory: &$0) }
  320|    365|        }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign33_46BE72AA5BC0E6798196575DFA250830LL2md2ms6memoryySvSgz_SizAA12EntityHandleVyAA0eO0VGtFZyAOzXEfU_:
  319|    365|            memory.withValue { assign(md: &md, ms: &ms, memory: &$0) }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign2md2ms6memoryySvSgz_SizAA0E6EntityVztFZ:
  324|   125k|        static func assign(md: inout Md, ms: inout Ms, memory: inout MemoryEntity) {
  325|   125k|            md = UnsafeMutableRawPointer(memory.data._baseAddressIfContiguous)
  326|   125k|            ms = memory.data.count
  327|   125k|        }
$s7WasmKit9ExecutionV13CurrentMemoryO9assignNil33_46BE72AA5BC0E6798196575DFA250830LL2md2msySvSgz_SiztFZ:
  331|      2|        private static func assignNil(md: inout Md, ms: inout Ms) {
  332|      2|            md = nil
  333|      2|            ms = 0
  334|      2|        }
$s7WasmKit9ExecutionV13CurrentMemoryO09mayUpdateD8Instance8instance4from2md2msyAA12EntityHandleVyAA0hM0VG_AOSgSvSgzSiztFZ:
  342|   202k|        ) {
  343|   202k|            if lastInstance != instance {
  344|    367|                mayUpdateCurrentInstance(instance: instance, md: &md, ms: &ms)
  345|    367|            }
  346|   202k|        }
$s7WasmKit9ExecutionV13CurrentMemoryO09mayUpdateD8Instance8instance2md2msyAA12EntityHandleVyAA0hL0VG_SvSgzSiztFZ:
  350|    367|        static func mayUpdateCurrentInstance(instance: InternalInstance, md: inout Md, ms: inout Ms) {
  351|    367|            guard let memory = instance.memories.first else {
  352|      2|                assignNil(md: &md, ms: &ms)
  353|      2|                return
  354|    365|            }
  355|    365|            CurrentMemory.assign(md: &md, ms: &ms, memory: memory)
  356|    365|        }
$s7WasmKit9ExecutionV7execute2sp2pc6handle4typeySpys6UInt64VG_AkA16InternalFunctionV0A5Types0K4TypeVtKF:
  368|    381|    ) throws {
  369|    381|        var sp: Sp = sp
  370|    381|        var md: Md = nil
  371|    381|        var ms: Ms = 0
  372|    381|        var pc = pc
  373|    381|        (pc, sp) = try invoke(
  374|    381|            function: handle,
  375|    381|            callerInstance: nil,
  376|    381|            spAddend: FrameHeaderLayout.size(of: type),
  377|    381|            sp: sp, pc: pc, md: &md, ms: &ms
  378|    381|        )
  379|    353|        do {
  380|    353|            switch self.store.value.engine.configuration.threadingModel {
  381|    353|            case .direct:
  382|    353|                try runDirectThreaded(sp: sp, pc: pc, md: md, ms: ms)
  383|    353|            case .token:
  384|      0|                try runTokenThreaded(sp: &sp, pc: &pc, md: &md, ms: &ms)
  385|    353|            }
  386|     14|        } catch is EndOfExecution {
  387|     14|            return
  388|     14|        }
  389|      0|    }
$s7WasmKit9ExecutionV17runDirectThreaded2sp2pc2md2msySpys6UInt64VG_AKSvSgSitKF:
  395|    353|    ) throws {
  396|    353|        var pc = pc
  397|    353|        let handler = pc.read(wasmkit_tc_exec.self)
  398|    353|        wasmkit_tc_start(handler, sp, pc, md, ms, &self)
  399|    353|        if let (rawError, trappingSp) = self.trap {
  400|    353|            let error = unsafeBitCast(rawError, to: Error.self)
  401|    353|            // Manually release the error object because the trap is caught in C and
  402|    353|            // held as a raw pointer.
  403|    353|            wasmkit_swift_errorRelease(rawError)
  404|    353|
  405|    353|            guard let trap = error as? Trap else {
  406|     15|                throw error
  407|    338|            }
  408|    338|            // Attach backtrace if the thrown error is a trap
  409|    338|            throw trap.withBacktrace(Self.captureBacktrace(sp: trappingSp, store: store.value))
  410|    353|        }
  411|      0|    }
wasmkit_execution_state_set_error:
  503|    353|    mutating func setError(_ rawError: UnsafeRawPointer, sp: Sp) {
  504|    353|        precondition(self.trap == nil)
  505|    353|        self.trap = (rawError, sp)
  506|    353|    }
$s7WasmKit9ExecutionV8setError_2spySV_Spys6UInt64VGtFSbyXEfu_:
  504|    353|        precondition(self.trap == nil)
$s7WasmKit9ExecutionV6invoke8function14callerInstance8spAddend0H02pc2md2msSpys6UInt64VG_ANtAA16InternalFunctionV_AA12EntityHandleVyAA0gP0VGSgs5Int16VA2NSvSgzSiztKF:
  515|    381|    ) throws -> (Pc, Sp) {
  516|    381|        if function.isWasm {
  517|    381|            let function = function.wasm
  518|    381|            let iseq = try function.ensureCompiled(store: store)
  519|    353|
  520|    353|            let newSp = try pushFrame(
  521|    353|                iseq: iseq,
  522|    353|                function: function,
  523|    353|                numberOfNonParameterLocals: function.numberOfNonParameterLocals,
  524|    353|                sp: sp,
  525|    353|                returnPC: pc,
  526|    353|                spAddend: spAddend
  527|    353|            )
  528|    353|            Execution.CurrentMemory.mayUpdateCurrentInstance(
  529|    353|                instance: function.instance,
  530|    353|                from: callerInstance, md: &md, ms: &ms
  531|    353|            )
  532|    353|            return (iseq.baseAddress, newSp)
  533|    381|        } else {
  534|      0|            let function = function.host
  535|      0|            let resolvedType = store.value.engine.resolveType(function.type)
  536|      0|            let layout = FrameHeaderLayout(type: resolvedType)
  537|      0|            let parameters = resolvedType.parameters.enumerated().map { (i, type) in
  538|      0|                sp[spAddend + layout.paramReg(i)].cast(to: type)
  539|      0|            }
  540|      0|            let instance = self.currentInstance(sp: sp)
  541|      0|            let caller = Caller(
  542|      0|                instanceHandle: instance,
  543|      0|                store: store.value
  544|      0|            )
  545|      0|            let results = try function.implementation(caller, Array(parameters))
  546|      0|            for (index, result) in results.enumerated() {
  547|      0|                sp[spAddend + layout.returnReg(index)] = UntypedValue(result)
  548|      0|            }
  549|      0|            return (pc, sp)
  550|      0|        }
  551|    381|    }

$s7WasmKit8FunctionV6handle5storeAcA08InternalC0V_AA5StoreCtcfC:
   40|   222k|    internal init(handle: InternalFunction, store: Store) {
   41|   222k|        self.handle = handle
   42|   222k|        self.store = store
   43|   222k|    }
$s7WasmKit8FunctionV5store4type4bodyAcA5StoreC_0A5Types0C4TypeVSayAI5ValueOGAA6CallerV_ANtKctcfC:
   70|     24|    ) {
   71|     24|        self.init(handle: store.allocator.allocate(type: type, implementation: body, engine: store.engine), store: store)
   72|     24|    }
$s7WasmKit16InternalFunctionV10bitPatternSivg:
  121|   656k|    var bitPattern: Int { _storage }
$s7WasmKit16InternalFunctionV10bitPatternACSi_tcfC:
  123|  1.29M|    init(bitPattern: Int) {
  124|  1.29M|        _storage = bitPattern
  125|  1.29M|    }
$s7WasmKit16InternalFunctionV02isA0Sbvg:
  127|   229k|    var isWasm: Bool {
  128|   229k|        _storage & 0b1 == 0
  129|   229k|    }
$s7WasmKit16InternalFunctionV4typeAA8InternedVy0A5Types0D4TypeVGvg:
  131|  2.55k|    var type: InternedFuncType {
  132|  2.55k|        if isWasm {
  133|  2.26k|            return wasm.type
  134|  2.26k|        } else {
  135|    297|            return host.type
  136|    297|        }
  137|  2.55k|    }
$s7WasmKit16InternalFunctionV4wasmyAcA12EntityHandleVyAA0adF0VGFZ:
  139|   448k|    static func wasm(_ handle: EntityHandle<WasmFunctionEntity>) -> InternalFunction {
  140|   448k|        assert(MemoryLayout<WasmFunctionEntity>.alignment >= 2)
  141|   448k|        return InternalFunction(bitPattern: handle.bitPattern | 0b0)
  142|   448k|    }
$s7WasmKit16InternalFunctionV4wasmyAcA12EntityHandleVyAA0adF0VGFZSbyXEfu_:
  140|   448k|        assert(MemoryLayout<WasmFunctionEntity>.alignment >= 2)
$s7WasmKit16InternalFunctionV4hostyAcA12EntityHandleVyAA04HostdF0VGFZ:
  144|     24|    static func host(_ handle: EntityHandle<HostFunctionEntity>) -> InternalFunction {
  145|     24|        assert(MemoryLayout<HostFunctionEntity>.alignment >= 2)
  146|     24|        return InternalFunction(bitPattern: handle.bitPattern | 0b1)
  147|     24|    }
$s7WasmKit16InternalFunctionV4hostyAcA12EntityHandleVyAA04HostdF0VGFZSbyXEfu_:
  145|     24|        assert(MemoryLayout<HostFunctionEntity>.alignment >= 2)
$s7WasmKit16InternalFunctionV4wasmAA12EntityHandleVyAA0adF0VGvg:
  149|   653k|    var wasm: EntityHandle<WasmFunctionEntity> {
  150|   653k|        EntityHandle(unsafe: UnsafeMutablePointer(bitPattern: bitPattern & ~0b0)!)
  151|   653k|    }
$s7WasmKit16InternalFunctionV4hostAA12EntityHandleVyAA04HostdF0VGvg:
  152|    297|    var host: EntityHandle<HostFunctionEntity> {
  153|    297|        EntityHandle(unsafe: UnsafeMutablePointer(bitPattern: bitPattern & ~0b1)!)
  154|    297|    }
$s7WasmKit16InternalFunctionV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  158|     11|    static func createOutOfBoundsError(index: Int, count: Int) -> any Error {
  159|     11|        ValidationError(.indexOutOfBounds("function", index, max: count))
  160|     11|    }
$s7WasmKit16InternalFunctionV6invoke_5storeSay0A5Types5ValueOGAI_AA5StoreCtKF:
  164|    381|    func invoke(_ arguments: [Value], store: Store) throws -> [Value] {
  165|    381|        if isWasm {
  166|    381|            let entity = wasm
  167|    381|            let resolvedType = store.engine.resolveType(entity.type)
  168|    381|            try check(functionType: resolvedType, parameters: arguments)
  169|    381|            return try executeWasm(
  170|    381|                store: store,
  171|    381|                function: self,
  172|    381|                type: resolvedType,
  173|    381|                arguments: arguments,
  174|    381|                callerInstance: entity.instance
  175|    381|            )
  176|    381|        } else {
  177|      0|            let entity = host
  178|      0|            let resolvedType = store.engine.resolveType(entity.type)
  179|      0|            try check(functionType: resolvedType, parameters: arguments)
  180|      0|            let caller = Caller(instanceHandle: nil, store: store)
  181|      0|            let results = try entity.implementation(caller, arguments)
  182|      0|            try check(functionType: resolvedType, results: results)
  183|      0|            return results
  184|      0|        }
  185|    381|    }
$s7WasmKit16InternalFunctionV5check33_9089726AEE4A690993C4A5B9E70A219ELL13expectedTypes6valuesSbSay0aN09ValueTypeOG_SayAH0P0OGtF:
  187|    381|    private func check(expectedTypes: [ValueType], values: [Value]) -> Bool {
  188|    381|        guard expectedTypes.count == values.count else { return false }
  189|    381|        for (expected, value) in zip(expectedTypes, values) {
  190|      0|            switch (expected, value) {
  191|      0|            case (.i32, .i32), (.i64, .i64), (.f32, .f32), (.f64, .f64),
  192|      0|                (.ref(.funcRef), .ref(.function)), (.ref(.externRef), .ref(.extern)):
  193|      0|                break
  194|      0|            default: return false
  195|      0|            }
  196|    381|        }
  197|    381|        return true
  198|    381|    }
$s7WasmKit16InternalFunctionV5check33_9089726AEE4A690993C4A5B9E70A219ELL12functionType10parametersy0A5Types0dN0V_SayAH5ValueOGtKF:
  200|    381|    private func check(functionType: FunctionType, parameters: [Value]) throws {
  201|    381|        guard check(expectedTypes: functionType.parameters, values: parameters) else {
  202|      0|            throw Trap(.parameterTypesMismatch(expected: functionType.parameters, got: parameters))
  203|    381|        }
  204|    381|    }
$s7WasmKit16InternalFunctionV14assumeCompiledAA19InstructionSequenceV_Si6localsAA12EntityHandleVyAA0adJ0VG8functiontyF:
  216|   424k|    ) {
  217|   424k|        let entity = self.wasm
  218|   424k|        guard case let .compiled(iseq) = entity.code else {
  219|      0|            preconditionFailure()
  220|   424k|        }
  221|   424k|        return (iseq, entity.numberOfNonParameterLocals, entity)
  222|   424k|    }
$s7WasmKit0A14FunctionEntityV5index4type4code8instanceACs6UInt32V_AA8InternedVy0A5Types0C4TypeVGAA0D6HandleVy0A6Parser4CodeVGAQyAA08InstanceD0VGtcfC:
  232|  4.22k|    init(index: FunctionIndex, type: InternedFuncType, code: InternalUncompiledCode, instance: InternalInstance) {
  233|  4.22k|        self.type = type
  234|  4.22k|        self.instance = instance
  235|  4.22k|        self.code = .uncompiled(code)
  236|  4.22k|        self.numberOfNonParameterLocals = code.locals.count
  237|  4.22k|        self.index = index
  238|  4.22k|    }
$s7WasmKit0A14FunctionEntityV7compile5store4codeAA19InstructionSequenceVAA8StoreRefV_AA0D6HandleVy0A6Parser4CodeVGtKF:
  250|  1.92k|    mutating func compile(store: StoreRef, code: InternalUncompiledCode) throws -> InstructionSequence {
  251|  1.92k|        let store = store.value
  252|  1.92k|        let engine = store.engine
  253|  1.92k|        let type = self.type
  254|  1.92k|        var translator = try InstructionTranslator(
  255|  1.92k|            allocator: store.allocator.iseqAllocator,
  256|  1.92k|            engineConfiguration: engine.configuration,
  257|  1.92k|            funcTypeInterner: engine.funcTypeInterner,
  258|  1.92k|            module: instance,
  259|  1.92k|            type: engine.resolveType(type),
  260|  1.92k|            locals: code.locals,
  261|  1.92k|            functionIndex: index,
  262|  1.92k|            codeSize: code.expression.count,
  263|  1.92k|            intercepting: engine.interceptor != nil
  264|  1.92k|        )
  265|  1.91k|        let iseq = try code.withValue { code in
  266|  1.91k|            try translator.translate(code: code, instance: instance)
  267|  1.91k|        }
  268|    882|        self.code = .compiled(iseq)
  269|    882|        return iseq
  270|  1.92k|    }
$s7WasmKit0A14FunctionEntityV7compile5store4codeAA19InstructionSequenceVAA8StoreRefV_AA0D6HandleVy0A6Parser4CodeVGtKFAhOzKXEfU_:
  265|  1.91k|        let iseq = try code.withValue { code in
  266|  1.91k|            try translator.translate(code: code, instance: instance)
  267|    882|        }
$s7WasmKit12EntityHandleVA2A0a8FunctionC0VRszlE14ensureCompiled5storeAA19InstructionSequenceVAA8StoreRefV_tKF:
  276|  2.20k|    func ensureCompiled(store: StoreRef) throws -> InstructionSequence {
  277|  2.20k|        switch self.code {
  278|  2.20k|        case .uncompiled(let code):
  279|  1.92k|            return try self.withValue {
  280|  1.92k|                let iseq = try $0.compile(store: store, code: code)
  281|  1.92k|                $0.code = .compiled(iseq)
  282|  1.92k|                return iseq
  283|  1.92k|            }
  284|  2.20k|        case .compiled(let iseq): return iseq
  285|  2.20k|        }
  286|  2.20k|    }
$s7WasmKit12EntityHandleVA2A0a8FunctionC0VRszlE14ensureCompiled5storeAA19InstructionSequenceVAA8StoreRefV_tKFAiEzKXEfU_:
  279|  1.92k|            return try self.withValue {
  280|  1.92k|                let iseq = try $0.compile(store: store, code: code)
  281|    882|                $0.code = .compiled(iseq)
  282|    882|                return iseq
  283|  1.92k|            }
$s7WasmKit19InstructionSequenceV12instructions14maxStackHeight9constantsACSrys6UInt64VG_SiSRyAA12UntypedValueVGtcfC:
  302|    882|    init(instructions: UnsafeMutableBufferPointer<CodeSlot>, maxStackHeight: Int, constants: UnsafeBufferPointer<UntypedValue>) {
  303|    882|        self.instructions = instructions
  304|    882|        self.maxStackHeight = maxStackHeight
  305|    882|        self.constants = constants
  306|    882|    }
$s7WasmKit19InstructionSequenceV11baseAddressSpys6UInt64VGvg:
  308|   424k|    var baseAddress: UnsafeMutablePointer<CodeSlot> {
  309|   424k|        self.instructions.baseAddress!
  310|   424k|    }
$s9WasmTypes9ReferenceO0A3KitE8function4fromAcD16InternalFunctionV_tFZ:
  319|      7|    static func function(from value: InternalFunction) -> Reference {
  320|      7|        // TODO: Consider having internal reference representation instead
  321|      7|        //       of public one in WasmTypes
  322|      7|        return .function(value.bitPattern)
  323|      7|    }

$s7WasmKit12EntityHandleV6unsafeACyxGSpyxG_tcfC:
   45|   671k|    init(unsafe pointer: UnsafeMutablePointer<T>) {
   46|   671k|        self.pointer = pointer
   47|   671k|    }
$s7WasmKit12EntityHandleV10bitPatternACyxGSgSu_tcfC:
   49|  1.14M|    init?(bitPattern: UInt) {
   50|  1.14M|        guard let pointer = UnsafeMutablePointer<T>(bitPattern: bitPattern) else { return nil }
   51|  1.14M|        self.pointer = pointer
   52|  1.14M|    }
$s7WasmKit12EntityHandleV13dynamicMemberqd__s7KeyPathCyxqd__G_tcluig:
   54|  2.99M|    subscript<R>(dynamicMember keyPath: KeyPath<T, R>) -> R {
   55|  2.99M|        pointer.pointee[keyPath: keyPath]
   56|  2.99M|    }
$s7WasmKit12EntityHandleV9withValueyqd__qd__xzKXEKlF:
   59|   241k|    func withValue<R>(_ body: (inout T) throws -> R) rethrows -> R {
   60|   241k|        return try body(&pointer.pointee)
   61|   241k|    }
$s7WasmKit12EntityHandleV10bitPatternSivg:
   63|   888k|    var bitPattern: Int {
   64|   888k|        return Int(bitPattern: pointer)
   65|   888k|    }
$s7WasmKit12EntityHandleVA2A011ValidatableC0RzlE22createOutOfBoundsError5index5counts0J0_pSi_SitFZ:
   69|    107|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
   70|    107|        T.createOutOfBoundsError(index: index, count: count)
   71|    107|    }
$s7WasmKit14InstanceEntityV5emptyACvgZ:
   87|     58|    static var empty: InstanceEntity {
   88|     58|        InstanceEntity(
   89|     58|            types: [],
   90|     58|            functions: ImmutableArray(),
   91|     58|            tables: ImmutableArray(),
   92|     58|            memories: ImmutableArray(),
   93|     58|            globals: ImmutableArray(),
   94|     58|            elementSegments: ImmutableArray(),
   95|     58|            dataSegments: ImmutableArray(),
   96|     58|            exports: [:],
   97|     58|            functionRefs: [],
   98|     58|            features: [],
   99|     58|            dataCount: nil
  100|     58|        )
  101|     58|    }
$s7WasmKit14InstanceEntityV19compileAllFunctions5storeyAA5StoreC_tKF:
  103|  1.07k|    internal func compileAllFunctions(store: Store) throws {
  104|  1.07k|        let store = StoreRef(store)
  105|  1.26k|        for function in functions {
  106|  1.26k|            guard function.isWasm else { continue }
  107|  1.23k|            try function.wasm.ensureCompiled(store: store)
  108|    230|        }
  109|     65|    }
$s7WasmKit8InstanceV6handle5storeAcA12EntityHandleVyAA0cF0VG_AA5StoreCtcfC:
  182|     65|    init(handle: InternalInstance, store: Store) {
  183|     65|        self.handle = handle
  184|     65|        self.store = store
  185|     65|    }
$s7WasmKit11TableEntityV6limits0A6Parser6LimitsVvg:
  269|    636|    var limits: Limits { tableType.limits }
$s7WasmKit11TableEntityV7maxSize10isMemory64s6UInt64VSb_tFZ:
  271|    310|    static func maxSize(isMemory64: Bool) -> UInt64 {
  272|    310|        return UInt64(UInt32.max)
  273|    310|    }
$s7WasmKit11TableEntityV_15resourceLimiterAC0A6Parser0C4TypeV_AA08ResourceF0_ptKcfC:
  275|    316|    init(_ tableType: TableType, resourceLimiter: any ResourceLimiter) throws {
  276|    316|        let emptyElement: Reference
  277|    316|        switch tableType.elementType {
  278|    316|        case .funcRef:
  279|    312|            emptyElement = .function(nil)
  280|    316|        case .externRef:
  281|      4|            emptyElement = .extern(nil)
  282|    316|        }
  283|    316|
  284|    316|        let numberOfElements = Int(tableType.limits.min)
  285|    316|        guard try resourceLimiter.limitTableGrowth(to: numberOfElements) else {
  286|      3|            throw Trap(.initialTableSizeExceedsLimit(numberOfElements: numberOfElements))
  287|    313|        }
  288|    313|        elements = Array(repeating: emptyElement, count: numberOfElements)
  289|    313|        self.tableType = tableType
  290|    313|    }
$s7WasmKit11TableEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  371|     28|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  372|     28|        ValidationError(.indexOutOfBounds("table", index, max: count))
  373|     28|    }
$s7WasmKit5TableV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  409|     34|    init(handle: InternalTable, allocator: StoreAllocator) {
  410|     34|        self.handle = handle
  411|     34|        self.allocator = allocator
  412|     34|    }
$s7WasmKit5TableV5store4typeAcA5StoreC_0A6Parser0C4TypeVtKcfC:
  433|     35|    public init(store: Store, type: TableType) throws {
  434|     35|        self.init(
  435|     35|            handle: try store.allocator.allocate(tableType: type, resourceLimiter: store.resourceLimiter),
  436|     34|            allocator: store.allocator
  437|     34|        )
  438|     34|    }
$s7WasmKit12MemoryEntityV12maxPageCount10isMemory64s6UInt64VSb_tFZ:
  455|  1.62k|    static func maxPageCount(isMemory64: Bool) -> UInt64 {
  456|  1.62k|        isMemory64 ? UInt64.max : UInt64(1 << 32) / UInt64(pageSize)
  457|  1.62k|    }
$s7WasmKit12MemoryEntityV_15resourceLimiterAC0A6Parser6LimitsV_AA08ResourceF0_ptKcfC:
  463|    760|    init(_ memoryType: MemoryType, resourceLimiter: any ResourceLimiter) throws {
  464|    760|        let byteSize = Int(memoryType.min) * Self.pageSize
  465|    760|        guard try resourceLimiter.limitMemoryGrowth(to: byteSize) else {
  466|      1|            throw Trap(.initialMemorySizeExceedsLimit(byteSize: byteSize))
  467|    759|        }
  468|    759|        data = Array(repeating: 0, count: byteSize)
  469|    759|        let defaultMaxPageCount = Self.maxPageCount(isMemory64: memoryType.isMemory64)
  470|    759|        maxPageCount = memoryType.max ?? defaultMaxPageCount
  471|    759|        limit = memoryType
  472|    759|    }
$s7WasmKit12MemoryEntityV_15resourceLimiterAC0A6Parser6LimitsV_AA08ResourceF0_ptKcfcs6UInt64VyKXEfu_:
  470|    418|        maxPageCount = memoryType.max ?? defaultMaxPageCount
$s7WasmKit12MemoryEntityV4grow2by15resourceLimiter0A5Types5ValueOSi_AA08ResourceH0_ptKF:
  476|   125k|    mutating func grow(by pageCount: Int, resourceLimiter: any ResourceLimiter) throws -> Value {
  477|   125k|        let newPageCount = data.count / Self.pageSize + pageCount
  478|   125k|
  479|   125k|        guard newPageCount <= maxPageCount else {
  480|  8.66k|            return limit.isMemory64 ? .i64((-1 as Int64).unsigned) : .i32((-1 as Int32).unsigned)
  481|   116k|        }
  482|   116k|        guard try resourceLimiter.limitMemoryGrowth(to: newPageCount * Self.pageSize) else {
  483|  1.74k|            return limit.isMemory64 ? .i64((-1 as Int64).unsigned) : .i32((-1 as Int32).unsigned)
  484|   115k|        }
  485|   115k|
  486|   115k|        let result = Int32(data.count / MemoryEntity.pageSize).unsigned
  487|   115k|        data.append(contentsOf: Array(repeating: 0, count: Int(pageCount) * MemoryEntity.pageSize))
  488|   115k|
  489|   115k|        return limit.isMemory64 ? .i64(UInt64(result)) : .i32(result)
  490|   125k|    }
$s7WasmKit12MemoryEntityV5write6offset5bytesySi_s10ArraySliceVys5UInt8VGtKF:
  531|      7|    mutating func write(offset: Int, bytes: ArraySlice<UInt8>) throws {
  532|      7|        let endOffset = offset + bytes.count
  533|      7|        guard endOffset <= data.count else {
  534|      2|            throw Trap(.memoryOutOfBounds)
  535|      5|        }
  536|      5|        data[offset..<endOffset] = bytes
  537|      5|    }
$s7WasmKit12MemoryEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  541|     47|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  542|     47|        ValidationError(.indexOutOfBounds("memory", index, max: count))
  543|     47|    }
$s7WasmKit6MemoryV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  555|    108|    init(handle: InternalMemory, allocator: StoreAllocator) {
  556|    108|        self.handle = handle
  557|    108|        self.allocator = allocator
  558|    108|    }
$s7WasmKit6MemoryV5store4typeAcA5StoreC_0A6Parser6LimitsVtKcfC:
  582|    110|    public init(store: Store, type: MemoryType) throws {
  583|    110|        // Validate the memory type because the type is not validated at instantiation time.
  584|    110|        try ModuleValidator.checkMemoryType(type, features: store.engine.configuration.features)
  585|    109|
  586|    109|        self.init(
  587|    109|            handle: try store.allocator.allocate(memoryType: type, resourceLimiter: store.resourceLimiter),
  588|    108|            allocator: store.allocator
  589|    108|        )
  590|    108|    }
$s7WasmKit12GlobalEntityV5value0A5Types5ValueOvg:
  622|     36|        get { rawValue.cast(to: globalType.valueType) }
$s7WasmKit12GlobalEntityV10globalType12initialValueAC0A6Parser0cF0V_0A5Types0H0OtKcfC:
  627|  6.30k|    init(globalType: GlobalType, initialValue: Value) throws {
  628|  6.30k|        try initialValue.checkType(globalType.valueType)
  629|  6.30k|        rawValue = UntypedValue(initialValue)
  630|  6.30k|        self.globalType = globalType
  631|  6.30k|    }
$s7WasmKit12GlobalEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  635|     31|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  636|     31|        ValidationError(.indexOutOfBounds("global", index, max: count))
  637|     31|    }
$s7WasmKit6GlobalV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  667|     41|    init(handle: InternalGlobal, allocator: StoreAllocator) {
  668|     41|        self.handle = handle
  669|     41|        self.allocator = allocator
  670|     41|    }
$s7WasmKit6GlobalV5store4type5valueAcA5StoreC_0A6Parser0C4TypeV0A5Types5ValueOtKcfC:
  703|     44|    public init(store: Store, type: GlobalType, value: Value) throws {
  704|     44|        let handle = try store.allocator.allocate(globalType: type, initialValue: value)
  705|     41|        self.init(handle: handle, allocator: store.allocator)
  706|     41|    }
$s7WasmKit20ElementSegmentEntityV22createOutOfBoundsError5index5counts0J0_pSi_SitFZ:
  721|      3|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  722|      3|        ValidationError(.indexOutOfBounds("element", index, max: count))
  723|      3|    }
$s7WasmKit13ExternalValueO11internalizeAA08InternalcD0O_AA14StoreAllocatorCtyF:
  762|    166|    func internalize() -> (InternalExternalValue, StoreAllocator) {
  763|    166|        switch self {
  764|    166|        case .function(let function):
  765|     23|            return (.function(function.handle), function.store.allocator)
  766|    166|        case .table(let table):
  767|     23|            return (.table(table.handle), table.allocator)
  768|    166|        case .memory(let memory):
  769|     95|            return (.memory(memory.handle), memory.allocator)
  770|    166|        case .global(let global):
  771|     25|            return (.global(global.handle), global.allocator)
  772|    166|        }
  773|    166|    }

$s7WasmKit9ExecutionV11unreachable2sp2pcSpys6UInt64VG_AHtAI_AItKF:
    4|     61|    func unreachable(sp: Sp, pc: Pc) throws -> (Pc, CodeSlot) {
    5|     61|        throw Trap(.unreachable)
    6|     61|    }
$s7WasmKit9ExecutionV3nop2spySpys6UInt64VG_tF:
    7|   154k|    mutating func nop(sp: Sp) {
    8|   154k|    }
$s7WasmKit9ExecutionV2br2sp2pc9immediateSpys6UInt64VG_AItAJ_AJs5Int32VtF:
   10|  4.41k|    mutating func br(sp: Sp, pc: Pc, immediate: Instruction.BrOperand) -> (Pc, CodeSlot) {
   11|  4.41k|        return pc.advanced(by: Int(immediate)).next()
   12|  4.41k|    }
$s7WasmKit9ExecutionV4brIf2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   13|      1|    mutating func brIf(sp: Sp, pc: Pc, immediate: Instruction.BrIfOperand) -> (Pc, CodeSlot) {
   14|      1|        // NOTE: Marked as `_fastPath` to teach the compiler not to use conditional
   15|      1|        // instructions (e.g. csel) to utilize the branch prediction. Typically
   16|      1|        // if-conversion is applied to optimize branches into conditional instructions
   17|      1|        // but it's not always the best choice for performance when the branch is
   18|      1|        // highly predictable:
   19|      1|        //
   20|      1|        // > Use branches when the condition is highly predictable. The cost of
   21|      1|        // > mispredicts will be low, and the code will be executed with optimal
   22|      1|        // > latency.
   23|      1|        // >
   24|      1|        // > Apple Silicon CPU Optimization Guide: 3.0 (Page 105)
   25|      1|        //
   26|      1|        // We prefer branch instructions over conditional instructions to provide
   27|      1|        // the best performance when guest code is highly predictable.
   28|      1|        guard _fastPath(sp[i32: immediate.condition] != 0) else {
   29|      1|            return pc.next()
   30|      1|        }
   31|      0|        return pc.advanced(by: Int(immediate.offset)).next()
   32|      1|    }
$s7WasmKit9ExecutionV7brIfNot2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   33|      2|    mutating func brIfNot(sp: Sp, pc: Pc, immediate: Instruction.BrIfOperand) -> (Pc, CodeSlot) {
   34|      2|        // NOTE: See `brIf` for the rationale.
   35|      2|        guard _fastPath(sp[i32: immediate.condition] == 0) else {
   36|      1|            return pc.next()
   37|      1|        }
   38|      1|        return pc.advanced(by: Int(immediate.offset)).next()
   39|      2|    }
$s7WasmKit9ExecutionV7brTable2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   40|  11.8k|    mutating func brTable(sp: Sp, pc: Pc, immediate: Instruction.BrTableOperand) -> (Pc, CodeSlot) {
   41|  11.8k|        let index = sp[i32: immediate.index]
   42|  11.8k|        let normalizedOffset = min(Int(index), Int(immediate.count - 1))
   43|  11.8k|        let entry = immediate.baseAddress[normalizedOffset]
   44|  11.8k|        return pc.advanced(by: Int(entry.offset)).next()
   45|  11.8k|    }
$s7WasmKit9ExecutionV7_return2sp2pc2md2msSpys6UInt64VG_AJtAKz_AKSvSgzSiztF:
   48|   202k|    mutating func _return(sp: inout Sp, pc: Pc, md: inout Md, ms: inout Ms) -> (Pc, CodeSlot) {
   49|   202k|        var pc = pc
   50|   202k|        popFrame(sp: &sp, pc: &pc, md: &md, ms: &ms)
   51|   202k|        return pc.next()
   52|   202k|    }
$s7WasmKit9ExecutionV05endOfC02sp2pcSpys6UInt64VG_AHtAIz_AItKF:
   54|     14|    mutating func endOfExecution(sp: inout Sp, pc: Pc) throws -> (Pc, CodeSlot) {
   55|     14|        throw EndOfExecution()
   56|     14|    }
$s7WasmKit9ExecutionV13_internalCall33_6B1266CB0931A942C36904C610F10643LL2sp2pc6callee0dE7OperandySpys6UInt64VGz_ALzAA16InternalFunctionVAA11InstructionO0eO0VtKF:
   77|   424k|    ) throws {
   78|   424k|        // The callee is known to be a function defined within the same module, so we can
   79|   424k|        // skip updating the current instance.
   80|   424k|        let (iseq, locals, instance) = internalCallOperand.callee.assumeCompiled()
   81|   424k|        sp = try pushFrame(
   82|   424k|            iseq: iseq,
   83|   424k|            function: instance,
   84|   424k|            numberOfNonParameterLocals: locals,
   85|   424k|            sp: sp, returnPC: pc,
   86|   424k|            spAddend: internalCallOperand.spAddend
   87|   424k|        )
   88|   423k|        pc = iseq.baseAddress
   89|   423k|    }
$s7WasmKit9ExecutionV12internalCall2sp2pc9immediateSpys6UInt64VG_AItAJz_AjA11InstructionO0E7OperandVtKF:
   92|   423k|    mutating func internalCall(sp: inout Sp, pc: Pc, immediate: Instruction.CallOperand) throws -> (Pc, CodeSlot) {
   93|   423k|        var pc = pc
   94|   423k|        let callee = immediate.callee
   95|   423k|        try _internalCall(sp: &sp, pc: &pc, callee: callee, internalCallOperand: immediate)
   96|   423k|        return pc.next()
   97|   423k|    }
$s7WasmKit9ExecutionV13compilingCall2sp2pc9immediateSpys6UInt64VG_AItAJz_AjA11InstructionO0E7OperandVtKF:
  100|    582|    mutating func compilingCall(sp: inout Sp, pc: Pc, immediate: Instruction.CallOperand) throws -> (Pc, CodeSlot) {
  101|    582|        var pc = pc
  102|    582|        // NOTE: `CompilingCallOperand` consumes 2 slots, discriminator is at -3
  103|    582|        let headSlotPc = pc.advanced(by: -3)
  104|    582|        let callee = immediate.callee
  105|    582|        try callee.wasm.ensureCompiled(store: store)
  106|    581|        let replaced = Instruction.internalCall(immediate)
  107|    581|        headSlotPc.pointee = replaced.headSlot(threadingModel: store.value.engine.configuration.threadingModel)
  108|    581|        try _internalCall(sp: &sp, pc: &pc, callee: callee, internalCallOperand: immediate)
  109|    581|        return pc.next()
  110|    582|    }

$s7WasmKit11InstructionO16CopyStackOperandV4load4fromAESpys6UInt64VGz_tFZ:
  417|  99.7k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  418|  99.7k|            let (source, dest) = pc.read((LVReg, LVReg).self)
  419|  99.7k|            return Self(source: source, dest: dest)
  420|  99.7k|        }
$s7WasmKit11InstructionO16CopyStackOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  421|  4.32k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  422|  4.32k|            emitSlot { unsafeBitCast(($0.source, $0.dest) as (LVReg, LVReg), to: CodeSlot.self) }
  423|  4.32k|        }
$s7WasmKit11InstructionO16CopyStackOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  422|  4.32k|            emitSlot { unsafeBitCast(($0.source, $0.dest) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4load4fromAESpys6UInt64VGz_tFZ:
  429|   110k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  430|   110k|            let (reg) = pc.read((LLVReg).self)
  431|   110k|            let (rawGlobal) = pc.read((UInt64).self)
  432|   110k|            return Self(reg: reg, rawGlobal: rawGlobal)
  433|   110k|        }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  434|  15.5k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  435|  15.5k|            emitSlot { unsafeBitCast(($0.reg) as (LLVReg), to: CodeSlot.self) }
  436|  15.5k|            emitSlot { $0.rawGlobal }
  437|  15.5k|        }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  435|  15.5k|            emitSlot { unsafeBitCast(($0.reg) as (LLVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  436|  15.5k|            emitSlot { $0.rawGlobal }
$s7WasmKit11InstructionO11CallOperandV4load4fromAESpys6UInt64VGz_tFZ:
  443|   424k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  444|   424k|            let (rawCallee) = pc.read((UInt64).self)
  445|   424k|            let (spAddend, _, _, _, _, _, _) = pc.read((VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8).self)
  446|   424k|            return Self(rawCallee: rawCallee, spAddend: spAddend)
  447|   424k|        }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  448|  2.51k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  449|  2.51k|            emitSlot { $0.rawCallee }
  450|  2.51k|            emitSlot { unsafeBitCast(($0.spAddend, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  451|  2.51k|        }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  449|  2.51k|            emitSlot { $0.rawCallee }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  450|  2.51k|            emitSlot { unsafeBitCast(($0.spAddend, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  464|    122|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  465|    122|            emitSlot { unsafeBitCast(($0.tableIndex, $0.rawType) as (UInt32, UInt32), to: CodeSlot.self) }
  466|    122|            emitSlot { unsafeBitCast(($0.index, $0.spAddend, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  467|    122|        }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  465|    122|            emitSlot { unsafeBitCast(($0.tableIndex, $0.rawType) as (UInt32, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  466|    122|            emitSlot { unsafeBitCast(($0.index, $0.spAddend, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO11BrIfOperandV4load4fromAESpys6UInt64VGz_tFZ:
  473|      3|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  474|      3|            let (condition, offset) = pc.read((LVReg, Int32).self)
  475|      3|            return Self(condition: condition, offset: offset)
  476|      3|        }
$s7WasmKit11InstructionO11BrIfOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  477|  2.43k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  478|  2.43k|            emitSlot { unsafeBitCast(($0.condition, $0.offset) as (LVReg, Int32), to: CodeSlot.self) }
  479|  2.43k|        }
$s7WasmKit11InstructionO11BrIfOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  478|    975|            emitSlot { unsafeBitCast(($0.condition, $0.offset) as (LVReg, Int32), to: CodeSlot.self) }
$s7WasmKit11InstructionO14BrTableOperandV4load4fromAESpys6UInt64VGz_tFZ:
  486|  11.8k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  487|  11.8k|            let (rawBaseAddress) = pc.read((UInt64).self)
  488|  11.8k|            let (count, index, _, _, _, _) = pc.read((UInt16, VReg, UInt8, UInt8, UInt8, UInt8).self)
  489|  11.8k|            return Self(rawBaseAddress: rawBaseAddress, count: count, index: index)
  490|  11.8k|        }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  491|    804|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  492|    804|            emitSlot { $0.rawBaseAddress }
  493|    804|            emitSlot { unsafeBitCast(($0.count, $0.index, 0, 0, 0, 0) as (UInt16, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  494|    804|        }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  492|    804|            emitSlot { $0.rawBaseAddress }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  493|    804|            emitSlot { unsafeBitCast(($0.count, $0.index, 0, 0, 0, 0) as (UInt16, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO11LoadOperandV4load4fromAESpys6UInt64VGz_tFZ:
  501|   952k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  502|   952k|            let (offset) = pc.read((UInt64).self)
  503|   952k|            let (pointer, result, _, _, _, _) = pc.read((VReg, VReg, UInt8, UInt8, UInt8, UInt8).self)
  504|   952k|            return Self(offset: offset, pointer: pointer, result: result)
  505|   952k|        }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  506|  10.0k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  507|  10.0k|            emitSlot { $0.offset }
  508|  10.0k|            emitSlot { unsafeBitCast(($0.pointer, $0.result, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  509|  10.0k|        }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  507|  10.0k|            emitSlot { $0.offset }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  508|  10.0k|            emitSlot { unsafeBitCast(($0.pointer, $0.result, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO12StoreOperandV4load4fromAESpys6UInt64VGz_tFZ:
  516|  12.3k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  517|  12.3k|            let (offset) = pc.read((UInt64).self)
  518|  12.3k|            let (pointer, value, _, _, _, _) = pc.read((VReg, VReg, UInt8, UInt8, UInt8, UInt8).self)
  519|  12.3k|            return Self(offset: offset, pointer: pointer, value: value)
  520|  12.3k|        }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  521|    212|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  522|    212|            emitSlot { $0.offset }
  523|    212|            emitSlot { unsafeBitCast(($0.pointer, $0.value, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  524|    212|        }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  522|    212|            emitSlot { $0.offset }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  523|    212|            emitSlot { unsafeBitCast(($0.pointer, $0.value, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemorySizeOperandV4load4fromAESpys6UInt64VGz_tFZ:
  530|   284k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  531|   284k|            let (memoryIndex, result) = pc.read((UInt32, LVReg).self)
  532|   284k|            return Self(memoryIndex: memoryIndex, result: result)
  533|   284k|        }
$s7WasmKit11InstructionO17MemorySizeOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  534|  6.71k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  535|  6.71k|            emitSlot { unsafeBitCast(($0.memoryIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  536|  6.71k|        }
$s7WasmKit11InstructionO17MemorySizeOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  535|  6.71k|            emitSlot { unsafeBitCast(($0.memoryIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryGrowOperandV4load4fromAESpys6UInt64VGz_tFZ:
  543|   125k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  544|   125k|            let (result, delta, memory) = pc.read((VReg, VReg, UInt32).self)
  545|   125k|            return Self(result: result, delta: delta, memory: memory)
  546|   125k|        }
$s7WasmKit11InstructionO17MemoryGrowOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  547|  1.43k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  548|  1.43k|            emitSlot { unsafeBitCast(($0.result, $0.delta, $0.memory) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  549|  1.43k|        }
$s7WasmKit11InstructionO17MemoryGrowOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  548|  1.43k|            emitSlot { unsafeBitCast(($0.result, $0.delta, $0.memory) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  587|     10|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  588|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.sourceOffset, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
  589|     10|        }
$s7WasmKit11InstructionO17MemoryCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  588|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.sourceOffset, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryFillOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  600|      6|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  601|      6|            emitSlot { unsafeBitCast(($0.destOffset, $0.value, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
  602|      6|        }
$s7WasmKit11InstructionO17MemoryFillOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  601|      6|            emitSlot { unsafeBitCast(($0.destOffset, $0.value, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const32OperandV4load4fromAESpys6UInt64VGz_tFZ:
  608|  4.83k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  609|  4.83k|            let (value, result) = pc.read((UInt32, LVReg).self)
  610|  4.83k|            return Self(value: value, result: result)
  611|  4.83k|        }
$s7WasmKit11InstructionO14Const32OperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  612|  1.48k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  613|  1.48k|            emitSlot { unsafeBitCast(($0.value, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  614|  1.48k|        }
$s7WasmKit11InstructionO14Const32OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  613|  1.48k|            emitSlot { unsafeBitCast(($0.value, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  625|    630|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  626|    630|            emitSlot { unsafeBitCast(($0.value) as (UntypedValue), to: CodeSlot.self) }
  627|    630|            emitSlot { unsafeBitCast(($0.result) as (LLVReg), to: CodeSlot.self) }
  628|    630|        }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  626|    630|            emitSlot { unsafeBitCast(($0.value) as (UntypedValue), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  627|    630|            emitSlot { unsafeBitCast(($0.result) as (LLVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO13BinaryOperandV4load4fromAESpys6UInt64VGz_tFZ:
  635|   488k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  636|   488k|            let (result, lhs, rhs) = pc.read((LVReg, VReg, VReg).self)
  637|   488k|            return Self(result: result, lhs: lhs, rhs: rhs)
  638|   488k|        }
$s7WasmKit11InstructionO13BinaryOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  639|  13.8k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  640|  13.8k|            emitSlot { unsafeBitCast(($0.result, $0.lhs, $0.rhs) as (LVReg, VReg, VReg), to: CodeSlot.self) }
  641|  13.8k|        }
$s7WasmKit11InstructionO13BinaryOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  640|  13.8k|            emitSlot { unsafeBitCast(($0.result, $0.lhs, $0.rhs) as (LVReg, VReg, VReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO12UnaryOperandV4load4fromAESpys6UInt64VGz_tFZ:
  647|  1.42M|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  648|  1.42M|            let (result, input) = pc.read((LVReg, LVReg).self)
  649|  1.42M|            return Self(result: result, input: input)
  650|  1.42M|        }
$s7WasmKit11InstructionO12UnaryOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  651|  43.6k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  652|  43.6k|            emitSlot { unsafeBitCast(($0.result, $0.input) as (LVReg, LVReg), to: CodeSlot.self) }
  653|  43.6k|        }
$s7WasmKit11InstructionO12UnaryOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  652|  43.6k|            emitSlot { unsafeBitCast(($0.result, $0.input) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO13SelectOperandV4load4fromAESpys6UInt64VGz_tFZ:
  661|  2.23k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  662|  2.23k|            let (result, condition, onTrue, onFalse) = pc.read((VReg, VReg, VReg, VReg).self)
  663|  2.23k|            return Self(result: result, condition: condition, onTrue: onTrue, onFalse: onFalse)
  664|  2.23k|        }
$s7WasmKit11InstructionO13SelectOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  665|    154|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  666|    154|            emitSlot { unsafeBitCast(($0.result, $0.condition, $0.onTrue, $0.onFalse) as (VReg, VReg, VReg, VReg), to: CodeSlot.self) }
  667|    154|        }
$s7WasmKit11InstructionO13SelectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  666|    154|            emitSlot { unsafeBitCast(($0.result, $0.condition, $0.onTrue, $0.onFalse) as (VReg, VReg, VReg, VReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14RefNullOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  677|     57|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  678|     57|            emitSlot { unsafeBitCast(($0.result, $0.rawType, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  679|     57|        }
$s7WasmKit11InstructionO14RefNullOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  678|     57|            emitSlot { unsafeBitCast(($0.result, $0.rawType, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO16RefIsNullOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  689|     11|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  690|     11|            emitSlot { unsafeBitCast(($0.value, $0.result) as (LVReg, LVReg), to: CodeSlot.self) }
  691|     11|        }
$s7WasmKit11InstructionO16RefIsNullOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  690|     11|            emitSlot { unsafeBitCast(($0.value, $0.result) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14RefFuncOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  701|      3|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  702|      3|            emitSlot { unsafeBitCast(($0.index, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  703|      3|        }
$s7WasmKit11InstructionO14RefFuncOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  702|      3|            emitSlot { unsafeBitCast(($0.index, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO15TableGetOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  714|     24|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  715|     24|            emitSlot { unsafeBitCast(($0.index, $0.result, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  716|     24|        }
$s7WasmKit11InstructionO15TableGetOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  715|     24|            emitSlot { unsafeBitCast(($0.index, $0.result, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO15TableSetOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  727|     10|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  728|     10|            emitSlot { unsafeBitCast(($0.index, $0.value, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  729|     10|        }
$s7WasmKit11InstructionO15TableSetOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  728|     10|            emitSlot { unsafeBitCast(($0.index, $0.value, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO16TableSizeOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  739|     19|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  740|     19|            emitSlot { unsafeBitCast(($0.tableIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  741|     19|        }
$s7WasmKit11InstructionO16TableSizeOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  740|     19|            emitSlot { unsafeBitCast(($0.tableIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO16TableCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  787|     10|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  788|     10|            emitSlot { unsafeBitCast(($0.sourceIndex, $0.destIndex) as (UInt32, UInt32), to: CodeSlot.self) }
  789|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.sourceOffset, $0.size, 0, 0) as (VReg, VReg, VReg, UInt8, UInt8), to: CodeSlot.self) }
  790|     10|        }
$s7WasmKit11InstructionO16TableCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  788|     10|            emitSlot { unsafeBitCast(($0.sourceIndex, $0.destIndex) as (UInt32, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO16TableCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  789|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.sourceOffset, $0.size, 0, 0) as (VReg, VReg, VReg, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO12rawImmediateAA0cE0_pSgvg:
  823|   125k|    var rawImmediate: (any InstructionImmediate)? {
  824|   125k|        switch self {
  825|   125k|        case .copyStack(let immediate): return immediate
  826|   125k|        case .globalGet(let immediate): return immediate
  827|   125k|        case .globalSet(let immediate): return immediate
  828|   125k|        case .call(let immediate): return immediate
  829|   125k|        case .compilingCall(let immediate): return immediate
  830|   125k|        case .internalCall(let immediate): return immediate
  831|   125k|        case .callIndirect(let immediate): return immediate
  832|   125k|        case .br(let immediate): return immediate
  833|   125k|        case .brIf(let immediate): return immediate
  834|   125k|        case .brIfNot(let immediate): return immediate
  835|   125k|        case .brTable(let immediate): return immediate
  836|   125k|        case .i32Load(let immediate): return immediate
  837|   125k|        case .i64Load(let immediate): return immediate
  838|   125k|        case .f32Load(let immediate): return immediate
  839|   125k|        case .f64Load(let immediate): return immediate
  840|   125k|        case .i32Load8S(let immediate): return immediate
  841|   125k|        case .i32Load8U(let immediate): return immediate
  842|   125k|        case .i32Load16S(let immediate): return immediate
  843|   125k|        case .i32Load16U(let immediate): return immediate
  844|   125k|        case .i64Load8S(let immediate): return immediate
  845|   125k|        case .i64Load8U(let immediate): return immediate
  846|   125k|        case .i64Load16S(let immediate): return immediate
  847|   125k|        case .i64Load16U(let immediate): return immediate
  848|   125k|        case .i64Load32S(let immediate): return immediate
  849|   125k|        case .i64Load32U(let immediate): return immediate
  850|   125k|        case .i32Store(let immediate): return immediate
  851|   125k|        case .i64Store(let immediate): return immediate
  852|   125k|        case .f32Store(let immediate): return immediate
  853|   125k|        case .f64Store(let immediate): return immediate
  854|   125k|        case .i32Store8(let immediate): return immediate
  855|   125k|        case .i32Store16(let immediate): return immediate
  856|   125k|        case .i64Store8(let immediate): return immediate
  857|   125k|        case .i64Store16(let immediate): return immediate
  858|   125k|        case .i64Store32(let immediate): return immediate
  859|   125k|        case .memorySize(let immediate): return immediate
  860|   125k|        case .memoryGrow(let immediate): return immediate
  861|   125k|        case .memoryInit(let immediate): return immediate
  862|   125k|        case .memoryDataDrop(let immediate): return immediate
  863|   125k|        case .memoryCopy(let immediate): return immediate
  864|   125k|        case .memoryFill(let immediate): return immediate
  865|   125k|        case .const32(let immediate): return immediate
  866|   125k|        case .const64(let immediate): return immediate
  867|   125k|        case .i32Add(let immediate): return immediate
  868|   125k|        case .i64Add(let immediate): return immediate
  869|   125k|        case .i32Sub(let immediate): return immediate
  870|   125k|        case .i64Sub(let immediate): return immediate
  871|   125k|        case .i32Mul(let immediate): return immediate
  872|   125k|        case .i64Mul(let immediate): return immediate
  873|   125k|        case .i32And(let immediate): return immediate
  874|   125k|        case .i64And(let immediate): return immediate
  875|   125k|        case .i32Or(let immediate): return immediate
  876|   125k|        case .i64Or(let immediate): return immediate
  877|   125k|        case .i32Xor(let immediate): return immediate
  878|   125k|        case .i64Xor(let immediate): return immediate
  879|   125k|        case .i32Shl(let immediate): return immediate
  880|   125k|        case .i64Shl(let immediate): return immediate
  881|   125k|        case .i32ShrS(let immediate): return immediate
  882|   125k|        case .i64ShrS(let immediate): return immediate
  883|   125k|        case .i32ShrU(let immediate): return immediate
  884|   125k|        case .i64ShrU(let immediate): return immediate
  885|   125k|        case .i32Rotl(let immediate): return immediate
  886|   125k|        case .i64Rotl(let immediate): return immediate
  887|   125k|        case .i32Rotr(let immediate): return immediate
  888|   125k|        case .i64Rotr(let immediate): return immediate
  889|   125k|        case .i32DivS(let immediate): return immediate
  890|   125k|        case .i64DivS(let immediate): return immediate
  891|   125k|        case .i32DivU(let immediate): return immediate
  892|   125k|        case .i64DivU(let immediate): return immediate
  893|   125k|        case .i32RemS(let immediate): return immediate
  894|   125k|        case .i64RemS(let immediate): return immediate
  895|   125k|        case .i32RemU(let immediate): return immediate
  896|   125k|        case .i64RemU(let immediate): return immediate
  897|   125k|        case .i32Eq(let immediate): return immediate
  898|   125k|        case .i64Eq(let immediate): return immediate
  899|   125k|        case .i32Ne(let immediate): return immediate
  900|   125k|        case .i64Ne(let immediate): return immediate
  901|   125k|        case .i32LtS(let immediate): return immediate
  902|   125k|        case .i64LtS(let immediate): return immediate
  903|   125k|        case .i32LtU(let immediate): return immediate
  904|   125k|        case .i64LtU(let immediate): return immediate
  905|   125k|        case .i32GtS(let immediate): return immediate
  906|   125k|        case .i64GtS(let immediate): return immediate
  907|   125k|        case .i32GtU(let immediate): return immediate
  908|   125k|        case .i64GtU(let immediate): return immediate
  909|   125k|        case .i32LeS(let immediate): return immediate
  910|   125k|        case .i64LeS(let immediate): return immediate
  911|   125k|        case .i32LeU(let immediate): return immediate
  912|   125k|        case .i64LeU(let immediate): return immediate
  913|   125k|        case .i32GeS(let immediate): return immediate
  914|   125k|        case .i64GeS(let immediate): return immediate
  915|   125k|        case .i32GeU(let immediate): return immediate
  916|   125k|        case .i64GeU(let immediate): return immediate
  917|   125k|        case .i32Clz(let immediate): return immediate
  918|   125k|        case .i64Clz(let immediate): return immediate
  919|   125k|        case .i32Ctz(let immediate): return immediate
  920|   125k|        case .i64Ctz(let immediate): return immediate
  921|   125k|        case .i32Popcnt(let immediate): return immediate
  922|   125k|        case .i64Popcnt(let immediate): return immediate
  923|   125k|        case .i32Eqz(let immediate): return immediate
  924|   125k|        case .i64Eqz(let immediate): return immediate
  925|   125k|        case .i32WrapI64(let immediate): return immediate
  926|   125k|        case .i64ExtendI32S(let immediate): return immediate
  927|   125k|        case .i64ExtendI32U(let immediate): return immediate
  928|   125k|        case .i32Extend8S(let immediate): return immediate
  929|   125k|        case .i64Extend8S(let immediate): return immediate
  930|   125k|        case .i32Extend16S(let immediate): return immediate
  931|   125k|        case .i64Extend16S(let immediate): return immediate
  932|   125k|        case .i64Extend32S(let immediate): return immediate
  933|   125k|        case .i32TruncF32S(let immediate): return immediate
  934|   125k|        case .i32TruncF32U(let immediate): return immediate
  935|   125k|        case .i32TruncSatF32S(let immediate): return immediate
  936|   125k|        case .i32TruncSatF32U(let immediate): return immediate
  937|   125k|        case .i32TruncF64S(let immediate): return immediate
  938|   125k|        case .i32TruncF64U(let immediate): return immediate
  939|   125k|        case .i32TruncSatF64S(let immediate): return immediate
  940|   125k|        case .i32TruncSatF64U(let immediate): return immediate
  941|   125k|        case .i64TruncF32S(let immediate): return immediate
  942|   125k|        case .i64TruncF32U(let immediate): return immediate
  943|   125k|        case .i64TruncSatF32S(let immediate): return immediate
  944|   125k|        case .i64TruncSatF32U(let immediate): return immediate
  945|   125k|        case .i64TruncF64S(let immediate): return immediate
  946|   125k|        case .i64TruncF64U(let immediate): return immediate
  947|   125k|        case .i64TruncSatF64S(let immediate): return immediate
  948|   125k|        case .i64TruncSatF64U(let immediate): return immediate
  949|   125k|        case .f32ConvertI32S(let immediate): return immediate
  950|   125k|        case .f32ConvertI32U(let immediate): return immediate
  951|   125k|        case .f32ConvertI64S(let immediate): return immediate
  952|   125k|        case .f32ConvertI64U(let immediate): return immediate
  953|   125k|        case .f64ConvertI32S(let immediate): return immediate
  954|   125k|        case .f64ConvertI32U(let immediate): return immediate
  955|   125k|        case .f64ConvertI64S(let immediate): return immediate
  956|   125k|        case .f64ConvertI64U(let immediate): return immediate
  957|   125k|        case .f32ReinterpretI32(let immediate): return immediate
  958|   125k|        case .f64ReinterpretI64(let immediate): return immediate
  959|   125k|        case .i32ReinterpretF32(let immediate): return immediate
  960|   125k|        case .i64ReinterpretF64(let immediate): return immediate
  961|   125k|        case .f32Add(let immediate): return immediate
  962|   125k|        case .f64Add(let immediate): return immediate
  963|   125k|        case .f32Sub(let immediate): return immediate
  964|   125k|        case .f64Sub(let immediate): return immediate
  965|   125k|        case .f32Mul(let immediate): return immediate
  966|   125k|        case .f64Mul(let immediate): return immediate
  967|   125k|        case .f32Div(let immediate): return immediate
  968|   125k|        case .f64Div(let immediate): return immediate
  969|   125k|        case .f32Min(let immediate): return immediate
  970|   125k|        case .f64Min(let immediate): return immediate
  971|   125k|        case .f32Max(let immediate): return immediate
  972|   125k|        case .f64Max(let immediate): return immediate
  973|   125k|        case .f32CopySign(let immediate): return immediate
  974|   125k|        case .f64CopySign(let immediate): return immediate
  975|   125k|        case .f32Eq(let immediate): return immediate
  976|   125k|        case .f64Eq(let immediate): return immediate
  977|   125k|        case .f32Ne(let immediate): return immediate
  978|   125k|        case .f64Ne(let immediate): return immediate
  979|   125k|        case .f32Lt(let immediate): return immediate
  980|   125k|        case .f64Lt(let immediate): return immediate
  981|   125k|        case .f32Gt(let immediate): return immediate
  982|   125k|        case .f64Gt(let immediate): return immediate
  983|   125k|        case .f32Le(let immediate): return immediate
  984|   125k|        case .f64Le(let immediate): return immediate
  985|   125k|        case .f32Ge(let immediate): return immediate
  986|   125k|        case .f64Ge(let immediate): return immediate
  987|   125k|        case .f32Abs(let immediate): return immediate
  988|   125k|        case .f64Abs(let immediate): return immediate
  989|   125k|        case .f32Neg(let immediate): return immediate
  990|   125k|        case .f64Neg(let immediate): return immediate
  991|   125k|        case .f32Ceil(let immediate): return immediate
  992|   125k|        case .f64Ceil(let immediate): return immediate
  993|   125k|        case .f32Floor(let immediate): return immediate
  994|   125k|        case .f64Floor(let immediate): return immediate
  995|   125k|        case .f32Trunc(let immediate): return immediate
  996|   125k|        case .f64Trunc(let immediate): return immediate
  997|   125k|        case .f32Nearest(let immediate): return immediate
  998|   125k|        case .f64Nearest(let immediate): return immediate
  999|   125k|        case .f32Sqrt(let immediate): return immediate
 1000|   125k|        case .f64Sqrt(let immediate): return immediate
 1001|   125k|        case .f64PromoteF32(let immediate): return immediate
 1002|   125k|        case .f32DemoteF64(let immediate): return immediate
 1003|   125k|        case .select(let immediate): return immediate
 1004|   125k|        case .refNull(let immediate): return immediate
 1005|   125k|        case .refIsNull(let immediate): return immediate
 1006|   125k|        case .refFunc(let immediate): return immediate
 1007|   125k|        case .tableGet(let immediate): return immediate
 1008|   125k|        case .tableSet(let immediate): return immediate
 1009|   125k|        case .tableSize(let immediate): return immediate
 1010|   125k|        case .tableGrow(let immediate): return immediate
 1011|   125k|        case .tableFill(let immediate): return immediate
 1012|   125k|        case .tableCopy(let immediate): return immediate
 1013|   125k|        case .tableInit(let immediate): return immediate
 1014|   125k|        case .tableElementDrop(let immediate): return immediate
 1015|   125k|        case .onEnter(let immediate): return immediate
 1016|   125k|        case .onExit(let immediate): return immediate
 1017|   125k|        default: return nil
 1018|   125k|        }
 1019|   125k|    }
$s7WasmKit11InstructionO8opcodeIDs6UInt64Vvg:
 1025|   126k|    var opcodeID: OpcodeID {
 1026|   126k|        switch self {
 1027|   126k|        case .copyStack: return 0
 1028|   126k|        case .globalGet: return 1
 1029|   126k|        case .globalSet: return 2
 1030|   126k|        case .call: return 3
 1031|   126k|        case .compilingCall: return 4
 1032|   126k|        case .internalCall: return 5
 1033|   126k|        case .callIndirect: return 6
 1034|   126k|        case .unreachable: return 7
 1035|   126k|        case .nop: return 8
 1036|   126k|        case .br: return 9
 1037|   126k|        case .brIf: return 10
 1038|   126k|        case .brIfNot: return 11
 1039|   126k|        case .brTable: return 12
 1040|   126k|        case ._return: return 13
 1041|   126k|        case .endOfExecution: return 14
 1042|   126k|        case .i32Load: return 15
 1043|   126k|        case .i64Load: return 16
 1044|   126k|        case .f32Load: return 17
 1045|   126k|        case .f64Load: return 18
 1046|   126k|        case .i32Load8S: return 19
 1047|   126k|        case .i32Load8U: return 20
 1048|   126k|        case .i32Load16S: return 21
 1049|   126k|        case .i32Load16U: return 22
 1050|   126k|        case .i64Load8S: return 23
 1051|   126k|        case .i64Load8U: return 24
 1052|   126k|        case .i64Load16S: return 25
 1053|   126k|        case .i64Load16U: return 26
 1054|   126k|        case .i64Load32S: return 27
 1055|   126k|        case .i64Load32U: return 28
 1056|   126k|        case .i32Store: return 29
 1057|   126k|        case .i64Store: return 30
 1058|   126k|        case .f32Store: return 31
 1059|   126k|        case .f64Store: return 32
 1060|   126k|        case .i32Store8: return 33
 1061|   126k|        case .i32Store16: return 34
 1062|   126k|        case .i64Store8: return 35
 1063|   126k|        case .i64Store16: return 36
 1064|   126k|        case .i64Store32: return 37
 1065|   126k|        case .memorySize: return 38
 1066|   126k|        case .memoryGrow: return 39
 1067|   126k|        case .memoryInit: return 40
 1068|   126k|        case .memoryDataDrop: return 41
 1069|   126k|        case .memoryCopy: return 42
 1070|   126k|        case .memoryFill: return 43
 1071|   126k|        case .const32: return 44
 1072|   126k|        case .const64: return 45
 1073|   126k|        case .i32Add: return 46
 1074|   126k|        case .i64Add: return 47
 1075|   126k|        case .i32Sub: return 48
 1076|   126k|        case .i64Sub: return 49
 1077|   126k|        case .i32Mul: return 50
 1078|   126k|        case .i64Mul: return 51
 1079|   126k|        case .i32And: return 52
 1080|   126k|        case .i64And: return 53
 1081|   126k|        case .i32Or: return 54
 1082|   126k|        case .i64Or: return 55
 1083|   126k|        case .i32Xor: return 56
 1084|   126k|        case .i64Xor: return 57
 1085|   126k|        case .i32Shl: return 58
 1086|   126k|        case .i64Shl: return 59
 1087|   126k|        case .i32ShrS: return 60
 1088|   126k|        case .i64ShrS: return 61
 1089|   126k|        case .i32ShrU: return 62
 1090|   126k|        case .i64ShrU: return 63
 1091|   126k|        case .i32Rotl: return 64
 1092|   126k|        case .i64Rotl: return 65
 1093|   126k|        case .i32Rotr: return 66
 1094|   126k|        case .i64Rotr: return 67
 1095|   126k|        case .i32DivS: return 68
 1096|   126k|        case .i64DivS: return 69
 1097|   126k|        case .i32DivU: return 70
 1098|   126k|        case .i64DivU: return 71
 1099|   126k|        case .i32RemS: return 72
 1100|   126k|        case .i64RemS: return 73
 1101|   126k|        case .i32RemU: return 74
 1102|   126k|        case .i64RemU: return 75
 1103|   126k|        case .i32Eq: return 76
 1104|   126k|        case .i64Eq: return 77
 1105|   126k|        case .i32Ne: return 78
 1106|   126k|        case .i64Ne: return 79
 1107|   126k|        case .i32LtS: return 80
 1108|   126k|        case .i64LtS: return 81
 1109|   126k|        case .i32LtU: return 82
 1110|   126k|        case .i64LtU: return 83
 1111|   126k|        case .i32GtS: return 84
 1112|   126k|        case .i64GtS: return 85
 1113|   126k|        case .i32GtU: return 86
 1114|   126k|        case .i64GtU: return 87
 1115|   126k|        case .i32LeS: return 88
 1116|   126k|        case .i64LeS: return 89
 1117|   126k|        case .i32LeU: return 90
 1118|   126k|        case .i64LeU: return 91
 1119|   126k|        case .i32GeS: return 92
 1120|   126k|        case .i64GeS: return 93
 1121|   126k|        case .i32GeU: return 94
 1122|   126k|        case .i64GeU: return 95
 1123|   126k|        case .i32Clz: return 96
 1124|   126k|        case .i64Clz: return 97
 1125|   126k|        case .i32Ctz: return 98
 1126|   126k|        case .i64Ctz: return 99
 1127|   126k|        case .i32Popcnt: return 100
 1128|   126k|        case .i64Popcnt: return 101
 1129|   126k|        case .i32Eqz: return 102
 1130|   126k|        case .i64Eqz: return 103
 1131|   126k|        case .i32WrapI64: return 104
 1132|   126k|        case .i64ExtendI32S: return 105
 1133|   126k|        case .i64ExtendI32U: return 106
 1134|   126k|        case .i32Extend8S: return 107
 1135|   126k|        case .i64Extend8S: return 108
 1136|   126k|        case .i32Extend16S: return 109
 1137|   126k|        case .i64Extend16S: return 110
 1138|   126k|        case .i64Extend32S: return 111
 1139|   126k|        case .i32TruncF32S: return 112
 1140|   126k|        case .i32TruncF32U: return 113
 1141|   126k|        case .i32TruncSatF32S: return 114
 1142|   126k|        case .i32TruncSatF32U: return 115
 1143|   126k|        case .i32TruncF64S: return 116
 1144|   126k|        case .i32TruncF64U: return 117
 1145|   126k|        case .i32TruncSatF64S: return 118
 1146|   126k|        case .i32TruncSatF64U: return 119
 1147|   126k|        case .i64TruncF32S: return 120
 1148|   126k|        case .i64TruncF32U: return 121
 1149|   126k|        case .i64TruncSatF32S: return 122
 1150|   126k|        case .i64TruncSatF32U: return 123
 1151|   126k|        case .i64TruncF64S: return 124
 1152|   126k|        case .i64TruncF64U: return 125
 1153|   126k|        case .i64TruncSatF64S: return 126
 1154|   126k|        case .i64TruncSatF64U: return 127
 1155|   126k|        case .f32ConvertI32S: return 128
 1156|   126k|        case .f32ConvertI32U: return 129
 1157|   126k|        case .f32ConvertI64S: return 130
 1158|   126k|        case .f32ConvertI64U: return 131
 1159|   126k|        case .f64ConvertI32S: return 132
 1160|   126k|        case .f64ConvertI32U: return 133
 1161|   126k|        case .f64ConvertI64S: return 134
 1162|   126k|        case .f64ConvertI64U: return 135
 1163|   126k|        case .f32ReinterpretI32: return 136
 1164|   126k|        case .f64ReinterpretI64: return 137
 1165|   126k|        case .i32ReinterpretF32: return 138
 1166|   126k|        case .i64ReinterpretF64: return 139
 1167|   126k|        case .f32Add: return 140
 1168|   126k|        case .f64Add: return 141
 1169|   126k|        case .f32Sub: return 142
 1170|   126k|        case .f64Sub: return 143
 1171|   126k|        case .f32Mul: return 144
 1172|   126k|        case .f64Mul: return 145
 1173|   126k|        case .f32Div: return 146
 1174|   126k|        case .f64Div: return 147
 1175|   126k|        case .f32Min: return 148
 1176|   126k|        case .f64Min: return 149
 1177|   126k|        case .f32Max: return 150
 1178|   126k|        case .f64Max: return 151
 1179|   126k|        case .f32CopySign: return 152
 1180|   126k|        case .f64CopySign: return 153
 1181|   126k|        case .f32Eq: return 154
 1182|   126k|        case .f64Eq: return 155
 1183|   126k|        case .f32Ne: return 156
 1184|   126k|        case .f64Ne: return 157
 1185|   126k|        case .f32Lt: return 158
 1186|   126k|        case .f64Lt: return 159
 1187|   126k|        case .f32Gt: return 160
 1188|   126k|        case .f64Gt: return 161
 1189|   126k|        case .f32Le: return 162
 1190|   126k|        case .f64Le: return 163
 1191|   126k|        case .f32Ge: return 164
 1192|   126k|        case .f64Ge: return 165
 1193|   126k|        case .f32Abs: return 166
 1194|   126k|        case .f64Abs: return 167
 1195|   126k|        case .f32Neg: return 168
 1196|   126k|        case .f64Neg: return 169
 1197|   126k|        case .f32Ceil: return 170
 1198|   126k|        case .f64Ceil: return 171
 1199|   126k|        case .f32Floor: return 172
 1200|   126k|        case .f64Floor: return 173
 1201|   126k|        case .f32Trunc: return 174
 1202|   126k|        case .f64Trunc: return 175
 1203|   126k|        case .f32Nearest: return 176
 1204|   126k|        case .f64Nearest: return 177
 1205|   126k|        case .f32Sqrt: return 178
 1206|   126k|        case .f64Sqrt: return 179
 1207|   126k|        case .f64PromoteF32: return 180
 1208|   126k|        case .f32DemoteF64: return 181
 1209|   126k|        case .select: return 182
 1210|   126k|        case .refNull: return 183
 1211|   126k|        case .refIsNull: return 184
 1212|   126k|        case .refFunc: return 185
 1213|   126k|        case .tableGet: return 186
 1214|   126k|        case .tableSet: return 187
 1215|   126k|        case .tableSize: return 188
 1216|   126k|        case .tableGrow: return 189
 1217|   126k|        case .tableFill: return 190
 1218|   126k|        case .tableCopy: return 191
 1219|   126k|        case .tableInit: return 192
 1220|   126k|        case .tableElementDrop: return 193
 1221|   126k|        case .onEnter: return 194
 1222|   126k|        case .onExit: return 195
 1223|   126k|        }
 1224|   126k|    }

$s7WasmKit5LVRegVyACs5Int16VcfC:
   20|   118k|    init(_ value: VReg) {
   21|   118k|        // Pre-shift to avoid runtime shift operation by using
   22|   118k|        // unused high bits.
   23|   118k|        self.value = Int32(value) * Int32(MemoryLayout<StackSlot>.size)
   24|   118k|    }
$s7WasmKit6LLVRegVyACs5Int16VcfC:
   40|  16.1k|    init(_ value: VReg) {
   41|  16.1k|        // Pre-shift to avoid runtime shift operation by using
   42|  16.1k|        // unused high bits.
   43|  16.1k|        self.value = Int64(value) * Int64(MemoryLayout<StackSlot>.size)
   44|  16.1k|    }
$s7WasmKit20InstructionImmediatePAAE4emit2toyys6UInt64Vc_tF:
   79|   106k|    func emit(to emitSlot: @escaping (CodeSlot) -> Void) {
   80|   106k|        Self.emit { buildCodeSlot in
   81|   106k|            emitSlot(buildCodeSlot(self))
   82|   106k|        }
   83|   106k|    }
$s7WasmKit20InstructionImmediatePAAE4emit2toyys6UInt64Vc_tFyAGxXEcfU_:
   80|   136k|        Self.emit { buildCodeSlot in
   81|   136k|            emitSlot(buildCodeSlot(self))
   82|   136k|        }
$ss5Int32V7WasmKitE4load4fromABSpys6UInt64VGz_tFZ:
   96|  4.41k|    static func load(from pc: inout Pc) -> Self {
   97|  4.41k|        Int32(bitPattern: UInt32(pc.read(UInt64.self)))
   98|  4.41k|    }
$ss5Int32V7WasmKitE4emit2toyys6UInt64VABXEc_tFZ:
   99|  8.74k|    static func emit(to emitSlot: @escaping ((Self) -> CodeSlot) -> Void) {
  100|  8.74k|        emitSlot { CodeSlot(UInt32(bitPattern: $0)) }
  101|  8.74k|    }
$ss5Int32V7WasmKitE4emit2toyys6UInt64VABXEc_tFZAgBXEfU_:
  100|  3.66k|        emitSlot { CodeSlot(UInt32(bitPattern: $0)) }
$s7WasmKit11InstructionO14RefNullOperandV6result4typeAEs5Int16V_0A5Types13ReferenceTypeOtcfC:
  107|     57|    init(result: VReg, type: ReferenceType) {
  108|     57|        self.init(result: result, rawType: type.rawValue)
  109|     57|    }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV3reg6globalAeA6LLVRegV_AA12EntityHandleVyAA0dK0VGtcfC:
  117|  15.5k|    init(reg: LLVReg, global: InternalGlobal) {
  118|  15.5k|        self.init(reg: reg, rawGlobal: UInt64(UInt(bitPattern: global.bitPattern)))
  119|  15.5k|    }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV6globalAA12EntityHandleVyAA0dI0VGvg:
  120|   110k|    var global: InternalGlobal {
  121|   110k|        InternalGlobal(bitPattern: UInt(rawGlobal)).unsafelyUnwrapped
  122|   110k|    }
$s7WasmKit11InstructionO14BrTableOperandV11baseAddress5count5indexAESPyAE5EntryVG_s6UInt16Vs5Int16VtcfC:
  130|    804|    init(baseAddress: UnsafePointer<Entry>, count: UInt16, index: VReg) {
  131|    804|        self.init(rawBaseAddress: UInt64(UInt(bitPattern: baseAddress)), count: count, index: index)
  132|    804|    }
$s7WasmKit11InstructionO14BrTableOperandV11baseAddressSPyAE5EntryVGvg:
  134|  11.8k|    var baseAddress: UnsafePointer<Entry> {
  135|  11.8k|        UnsafePointer(bitPattern: UInt(rawBaseAddress)).unsafelyUnwrapped
  136|  11.8k|    }
$s7WasmKit11InstructionO11CallOperandV6callee8spAddendAeA16InternalFunctionV_s5Int16VtcfC:
  140|  2.51k|    init(callee: InternalFunction, spAddend: VReg) {
  141|  2.51k|        self.init(rawCallee: UInt64(UInt(bitPattern: callee.bitPattern)), spAddend: spAddend)
  142|  2.51k|    }
$s7WasmKit11InstructionO11CallOperandV6calleeAA16InternalFunctionVvg:
  144|   848k|    var callee: InternalFunction {
  145|   848k|        InternalFunction(bitPattern: Int(bitPattern: UInt(rawCallee)))
  146|   848k|    }
$s7WasmKit11InstructionO19CallIndirectOperandV10tableIndex4type5index8spAddendAEs6UInt32V_AA8InternedVy0A5Types12FunctionTypeVGs5Int16VAStcfC:
  151|    122|    init(tableIndex: UInt32, type: InternedFuncType, index: VReg, spAddend: VReg) {
  152|    122|        self.init(tableIndex: tableIndex, rawType: type.id, index: index, spAddend: spAddend)
  153|    122|    }
$s7WasmKit11InstructionO8headSlot14threadingModels6UInt64VAA19EngineConfigurationV09ThreadingG0O_tF:
  200|   126k|    func headSlot(threadingModel: EngineConfiguration.ThreadingModel) -> CodeSlot {
  201|   126k|        switch threadingModel {
  202|   126k|        case .direct:
  203|   126k|            return CodeSlot(handler)
  204|   126k|        case .token:
  205|      0|            return opcodeID
  206|   126k|        }
  207|   126k|    }

$s7WasmKit9ExecutionV28throwOutOfBoundsMemoryAccesss5NeverOyKF:
    4|     32|    @inline(never) func throwOutOfBoundsMemoryAccess() throws -> Never {
    5|     32|        throw Trap(.memoryOutOfBounds)
    6|     32|    }
$s7WasmKit9ExecutionV10memoryLoad2sp2md2ms11loadOperand0I2As11castToValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxmAA07UntypedN0VxXEtKs17FixedWidthIntegerRzlF:
    9|   952k|    ) throws {
   10|   952k|        let length = UInt64(T.bitWidth) / 8
   11|   952k|        let i = sp[loadOperand.pointer].asAddressOffset()
   12|   952k|        let (endAddress, isEndOverflow) = i.addingReportingOverflow(length &+ loadOperand.offset)
   13|   952k|        if _fastPath(!isEndOverflow && endAddress <= ms) {
   14|   952k|            let address = loadOperand.offset + i
   15|   952k|            let loaded = md.unsafelyUnwrapped.loadUnaligned(fromByteOffset: Int(address), as: T.self)
   16|   952k|            sp[loadOperand.result] = castToValue(loaded)
   17|   952k|        } else {
   18|     29|            try throwOutOfBoundsMemoryAccess()
   19|   952k|        }
   20|   952k|    }
$s7WasmKit9ExecutionV10memoryLoad2sp2md2ms11loadOperand0I2As11castToValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxmAA07UntypedN0VxXEtKs17FixedWidthIntegerRzlFSbyKXEfu_:
   13|   952k|        if _fastPath(!isEndOverflow && endAddress <= ms) {
$s7WasmKit9ExecutionV11memoryStore2sp2md2ms12storeOperand13castFromValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxAA07UntypedM0VXEtKs17FixedWidthIntegerRzlF:
   23|  12.3k|    mutating func memoryStore<T: FixedWidthInteger>(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand, castFromValue: (UntypedValue) -> T) throws {
   24|  12.3k|        let value = sp[storeOperand.value]
   25|  12.3k|        let length = UInt64(T.bitWidth) / 8
   26|  12.3k|        let i = sp[storeOperand.pointer].asAddressOffset()
   27|  12.3k|        let address = storeOperand.offset + i
   28|  12.3k|        let (endAddress, isEndOverflow) = i.addingReportingOverflow(length &+ storeOperand.offset)
   29|  12.3k|        if _fastPath(!isEndOverflow && endAddress <= ms) {
   30|  12.3k|            let toStore = castFromValue(value)
   31|  12.3k|            md.unsafelyUnwrapped.advanced(by: Int(address))
   32|  12.3k|                .bindMemory(to: T.self, capacity: 1).pointee = toStore.littleEndian
   33|  12.3k|        } else {
   34|      3|            try throwOutOfBoundsMemoryAccess()
   35|  12.3k|        }
   36|  12.3k|    }
$s7WasmKit9ExecutionV11memoryStore2sp2md2ms12storeOperand13castFromValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxAA07UntypedM0VXEtKs17FixedWidthIntegerRzlFSbyKXEfu_:
   29|  12.3k|        if _fastPath(!isEndOverflow && endAddress <= ms) {
$s7WasmKit9ExecutionV10memorySize2sp9immediateySpys6UInt64VG_AA11InstructionO06MemoryE7OperandVtF:
   38|   284k|    mutating func memorySize(sp: Sp, immediate: Instruction.MemorySizeOperand) {
   39|   284k|        let memory = currentInstance(sp: sp).memories[Int(immediate.memoryIndex)]
   40|   284k|
   41|   284k|        let pageCount = memory.data.count / MemoryEntity.pageSize
   42|   284k|        let value: Value = memory.limit.isMemory64 ? .i64(UInt64(pageCount)) : .i32(UInt32(pageCount))
   43|   284k|        sp[immediate.result] = UntypedValue(value)
   44|   284k|    }
$s7WasmKit9ExecutionV10memoryGrow2sp2md2ms9immediateySpys6UInt64VG_SvSgzSizAA11InstructionO06MemoryE7OperandVtKF:
   46|   125k|    mutating func memoryGrow(sp: Sp, md: inout Md, ms: inout Ms, immediate: Instruction.MemoryGrowOperand) throws {
   47|   125k|        let memory = currentInstance(sp: sp).memories[Int(immediate.memory)]
   48|   125k|        try memory.withValue { memory in
   49|   125k|            let isMemory64 = memory.limit.isMemory64
   50|   125k|
   51|   125k|            let value = sp[immediate.delta]
   52|   125k|            let pageCount: UInt64 = isMemory64 ? value.i64 : UInt64(value.i32)
   53|   125k|            let oldPageCount = try memory.grow(by: Int(pageCount), resourceLimiter: store.value.resourceLimiter)
   54|   125k|            CurrentMemory.assign(md: &md, ms: &ms, memory: &memory)
   55|   125k|            sp[immediate.result] = UntypedValue(oldPageCount)
   56|   125k|        }
   57|   125k|    }
$s7WasmKit9ExecutionV10memoryGrow2sp2md2ms9immediateySpys6UInt64VG_SvSgzSizAA11InstructionO06MemoryE7OperandVtKFyAA0L6EntityVzKXEfU_:
   48|   125k|        try memory.withValue { memory in
   49|   125k|            let isMemory64 = memory.limit.isMemory64
   50|   125k|
   51|   125k|            let value = sp[immediate.delta]
   52|   125k|            let pageCount: UInt64 = isMemory64 ? value.i64 : UInt64(value.i32)
   53|   125k|            let oldPageCount = try memory.grow(by: Int(pageCount), resourceLimiter: store.value.resourceLimiter)
   54|   125k|            CurrentMemory.assign(md: &md, ms: &ms, memory: &memory)
   55|   125k|            sp[immediate.result] = UntypedValue(oldPageCount)
   56|   125k|        }

$s7WasmKit9ExecutionV9globalGet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtF:
    4|  98.4k|    mutating func globalGet(sp: Sp, immediate: Instruction.GlobalAndVRegOperand) {
    5|  98.4k|        immediate.global.withValue {
    6|  98.4k|            sp[immediate.reg] = $0.rawValue
    7|  98.4k|        }
    8|  98.4k|    }
$s7WasmKit9ExecutionV9globalGet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtFyAA0J6EntityVzXEfU_:
    5|  98.4k|        immediate.global.withValue {
    6|  98.4k|            sp[immediate.reg] = $0.rawValue
    7|  98.4k|        }
$s7WasmKit9ExecutionV9globalSet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtF:
    9|  12.1k|    mutating func globalSet(sp: Sp, immediate: Instruction.GlobalAndVRegOperand) {
   10|  12.1k|        let value = sp[immediate.reg]
   11|  12.1k|        immediate.global.withValue { $0.rawValue = value }
   12|  12.1k|    }
$s7WasmKit9ExecutionV9globalSet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtFyAA0J6EntityVzXEfU_:
   11|  12.1k|        immediate.global.withValue { $0.rawValue = value }
$s7WasmKit9ExecutionV9copyStack2sp9immediateySpys6UInt64VG_AA11InstructionO04CopyE7OperandVtF:
   14|  99.7k|    mutating func copyStack(sp: Sp, immediate: Instruction.CopyStackOperand) {
   15|  99.7k|        sp[immediate.dest] = sp[immediate.source]
   16|  99.7k|    }
$s7WasmKit9ExecutionV7const322sp9immediateySpys6UInt64VG_AA11InstructionO14Const32OperandVtF:
   53|  4.83k|    mutating func const32(sp: Sp, immediate: Instruction.Const32Operand) {
   54|  4.83k|        sp[immediate.result] = UntypedValue(storage32: immediate.value)
   55|  4.83k|    }
$s7WasmKit9ExecutionV6select2sp9immediateySpys6UInt64VG_AA11InstructionO13SelectOperandVtF:
   65|  2.23k|    mutating func select(sp: Sp, immediate: Instruction.SelectOperand) {
   66|  2.23k|        let flag = sp[i32: immediate.condition]
   67|  2.23k|        let selected = flag != 0 ? immediate.onTrue : immediate.onFalse
   68|  2.23k|        let value = sp[selected]
   69|  2.23k|        sp[immediate.result] = value
   70|  2.23k|    }

$s7WasmKit12NameRegistryV13functionNames33_41338D6D703C89393C72591DE351AF00LLSDyAA16InternalFunctionVSSGvpfi:
    7|  1.56k|    private var functionNames: [InternalFunction: String] = [:]
$s7WasmKit12NameRegistryV13materializers33_41338D6D703C89393C72591DE351AF00LLSayyACzKcGvpfi:
    8|  1.56k|    private var materializers: [(inout NameRegistry) throws -> Void] = []
$s7WasmKit12NameRegistryVACycfC:
   10|  1.56k|    init() {}
$s7WasmKit12NameRegistryV19materializeIfNeeded33_41338D6D703C89393C72591DE351AF00LLyyKF:
   39|   222k|    private mutating func materializeIfNeeded() throws {
   40|   222k|        guard !materializers.isEmpty else { return }
   41|      0|        for materialize in materializers {
   42|      0|            try materialize(&self)
   43|      0|        }
   44|      0|        materializers = []
   45|      0|    }
$s7WasmKit12NameRegistryV6lookupySSSgAA16InternalFunctionVKF:
   47|   222k|    mutating func lookup(_ addr: InternalFunction) throws -> String? {
   48|   222k|        try materializeIfNeeded()
   49|   222k|        return functionNames[addr]
   50|   222k|    }
$s7WasmKit12NameRegistryV11symbolicateySSAA16InternalFunctionVF:
   52|   222k|    mutating func symbolicate(_ function: InternalFunction) -> String {
   53|   222k|        if let name = try? lookup(function) {
   54|      0|            return name
   55|   222k|        }
   56|   222k|        // Fallback
   57|   222k|        if function.isWasm {
   58|   222k|            return "wasm function[\(function.wasm.index)]"
   59|   222k|        } else {
   60|      0|            return "unknown host function"
   61|      0|        }
   62|   222k|    }

$s7WasmKit5StoreC12nameRegistryAA04NameE0Vvpfi:
    7|  1.56k|    var nameRegistry = NameRegistry()
$s7WasmKit5StoreC15resourceLimiterAA08ResourceE0_pvpfi:
    9|  1.56k|    public var resourceLimiter: ResourceLimiter = DefaultResourceLimiter()
$s7WasmKit5StoreC6engineAcA6EngineC_tcfc:
   22|  1.56k|    public init(engine: Engine) {
   23|  1.56k|        self.engine = engine
   24|  1.56k|        self.allocator = StoreAllocator(funcTypeInterner: engine.funcTypeInterner)
   25|  1.56k|    }

$s7WasmKit13BumpAllocatorC5pages33_8EACE635DD16791045BB0F1DDDCAD7E4LLSaySryxGGvpfi:
    5|  14.0k|    private var pages: [UnsafeMutableBufferPointer<T>] = []
$s7WasmKit13BumpAllocatorC13currentOffset33_8EACE635DD16791045BB0F1DDDCAD7E4LLSivpfi:
    7|  14.0k|    private var currentOffset: Int = 0
$s7WasmKit13BumpAllocatorC15initialCapacityACyxGSi_tcfc:
   11|  14.0k|    init(initialCapacity: Int) {
   12|  14.0k|        currentPageSize = initialCapacity
   13|  14.0k|        currentPage = .allocate(capacity: currentPageSize)
   14|  14.0k|    }
$s7WasmKit13BumpAllocatorCfd:
   16|  14.0k|    deinit {
   17|  14.0k|        for page in pages {
   18|     23|            page.deinitialize().deallocate()
   19|  14.0k|        }
   20|  17.4k|        for i in 0..<currentOffset {
   21|  17.4k|            currentPage.deinitializeElement(at: i)
   22|  17.4k|        }
   23|  14.0k|        currentPage.deallocate()
   24|  14.0k|    }
$s7WasmKit13BumpAllocatorC12startNewPage33_8EACE635DD16791045BB0F1DDDCAD7E4LLyyF:
   27|     23|    private func startNewPage() {
   28|     23|        pages.append(currentPage)
   29|     23|        // TODO: Should we grow the page size?
   30|     23|        let page = UnsafeMutableBufferPointer<T>.allocate(capacity: currentPageSize)
   31|     23|        currentPage = page
   32|     23|        currentOffset = 0
   33|     23|    }
$s7WasmKit13BumpAllocatorC8allocate12initializingSpyxGx_tF:
   39|  15.9k|    func allocate(initializing value: T) -> UnsafeMutablePointer<T> {
   40|  15.9k|        let pointer = allocate()
   41|  15.9k|        pointer.initialize(to: value)
   42|  15.9k|        return pointer
   43|  15.9k|    }
$s7WasmKit13BumpAllocatorC8allocateSpyxGyF:
   51|  17.4k|    func allocate() -> UnsafeMutablePointer<T> {
   52|  17.4k|        if currentOffset == currentPageSize {
   53|     23|            startNewPage()
   54|     23|        }
   55|  17.4k|        let pointer = currentPage.baseAddress!.advanced(by: currentOffset)
   56|  17.4k|        currentOffset += 1
   57|  17.4k|        return pointer
   58|  17.4k|    }
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC12arrayBuffersSaySvGvpfi:
   68|  1.56k|    private var arrayBuffers: [UnsafeMutableRawPointer] = []
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC8allocate5countSryxGSi_tlF:
   73|  9.06k|    func allocate<T>(count: Int) -> UnsafeMutableBufferPointer<T> {
   74|  9.06k|        // We only support trivial types for now. Otherwise, we have to track the element type
   75|  9.06k|        // until the deallocation of this allocator.
   76|  9.06k|        assert(_isPOD(T.self), "ImmutableArrayAllocator only supports trivial element types.")
   77|  9.06k|        let buffer = UnsafeMutableBufferPointer<T>.allocate(capacity: count)
   78|  9.06k|        // If count is zero, don't manage such empty buffer.
   79|  9.06k|        if let baseAddress = buffer.baseAddress {
   80|  9.06k|            arrayBuffers.append(baseAddress)
   81|  9.06k|        }
   82|  9.06k|        return buffer
   83|  9.06k|    }
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC8allocate5countSryxGSi_tlFSbyXEfu_:
   76|  9.06k|        assert(_isPOD(T.self), "ImmutableArrayAllocator only supports trivial element types.")
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLCfd:
   85|  1.56k|    deinit {
   86|  9.06k|        for buffer in arrayBuffers {
   87|  9.06k|            buffer.deallocate()
   88|  9.06k|        }
   89|  1.56k|    }
$s7WasmKit14ImmutableArrayV9allocator5count10initializeACyxGAA0cD9Allocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC_SiySryxGKXEtKcAILlfC:
  102|  9.06k|    fileprivate init(allocator: ImmutableArrayAllocator, count: Int, initialize: (UnsafeMutableBufferPointer<T>) throws -> Void) rethrows {
  103|  9.06k|        let mutable: UnsafeMutableBufferPointer<T> = allocator.allocate(count: count)
  104|  9.06k|        try initialize(mutable)
  105|  9.01k|        buffer = UnsafeBufferPointer(mutable)
  106|  9.01k|    }
$s7WasmKit14ImmutableArrayVACyxGycfC:
  109|    348|    init() {
  110|    348|        buffer = UnsafeBufferPointer(start: nil, count: 0)
  111|    348|    }
$s7WasmKit14ImmutableArrayVyxSicig:
  114|   428k|    subscript(index: Int) -> T {
  115|   428k|        buffer[index]
  116|   428k|    }
$s7WasmKit14ImmutableArrayV10validatingxSi_tcAA17ValidatableEntityRzluig:
  124|  42.4k|        get throws {
  125|  42.4k|            return try self[validating: index, T.createOutOfBoundsError]
  126|  42.4k|        }
$s7WasmKit14ImmutableArrayV10validatingxSi_tcAA17ValidatableEntityRzluigs5Error_pSi_Sitcfu_:
  125|    118|            return try self[validating: index, T.createOutOfBoundsError]
$s7WasmKit14ImmutableArrayV10validating_xSi_s5Error_pSi_SitXEtcig:
  132|  42.4k|        get throws {
  133|  42.4k|            guard index >= 0 && index < buffer.count else {
  134|    118|                throw createError(index, buffer.count)
  135|  42.3k|            }
  136|  42.3k|            return buffer[index]
  137|  42.4k|        }
$s7WasmKit14ImmutableArrayV10validating_xSi_s5Error_pSi_SitXEtcigSbyKXEfu_:
  133|  42.4k|            guard index >= 0 && index < buffer.count else {
$s7WasmKit14ImmutableArrayV5firstxSgvg:
  141|    367|    var first: T? { buffer.first }
$s7WasmKit14ImmutableArrayV12makeIteratorSR0F0Vyx_GyF:
  151|  2.54k|    func makeIterator() -> Iterator {
  152|  2.54k|        buffer.makeIterator()
  153|  2.54k|    }
$s7WasmKit8InternerCACyxGycfc:
  174|  1.56k|    init() {
  175|  1.56k|        itemByIntern = []
  176|  1.56k|        internByItem = [:]
  177|  1.56k|    }
$s7WasmKit8InternerC6internyAA8InternedVyxGxF:
  181|  4.39k|    func intern(_ item: Item) -> Interned<Item> {
  182|  4.39k|        if let interned = internByItem[item] {
  183|  2.45k|            return interned
  184|  2.45k|        }
  185|  1.93k|        let id = itemByIntern.count
  186|  1.93k|        itemByIntern.append(item)
  187|  1.93k|        let newInterned = Interned<Item>(id: Item.Offset(id))
  188|  1.93k|        internByItem[item] = newInterned
  189|  1.93k|        return newInterned
  190|  4.39k|    }
$s7WasmKit8InternerC7resolveyxAA8InternedVyxGF:
  193|  4.83k|    func resolve(_ interned: Interned<Item>) -> Item {
  194|  4.83k|        return itemByIntern[Int(interned.id)]
  195|  4.83k|    }
$s7WasmKit14StoreAllocatorC16funcTypeInternerAcA0G0Cy0A5Types08FunctionF0VG_tcfc:
  224|  1.56k|    init(funcTypeInterner: Interner<FunctionType>) {
  225|  1.56k|        instances = BumpAllocator(initialCapacity: 2)
  226|  1.56k|        functions = BumpAllocator(initialCapacity: 64)
  227|  1.56k|        hostFunctions = BumpAllocator(initialCapacity: 32)
  228|  1.56k|        codes = BumpAllocator(initialCapacity: 64)
  229|  1.56k|        tables = BumpAllocator(initialCapacity: 2)
  230|  1.56k|        memories = BumpAllocator(initialCapacity: 2)
  231|  1.56k|        globals = BumpAllocator(initialCapacity: 256)
  232|  1.56k|        elements = BumpAllocator(initialCapacity: 2)
  233|  1.56k|        datas = BumpAllocator(initialCapacity: 64)
  234|  1.56k|        arrayAllocator = ImmutableArrayAllocator()
  235|  1.56k|        iseqAllocator = ISeqAllocator()
  236|  1.56k|        self.funcTypeInterner = funcTypeInterner
  237|  1.56k|    }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF:
  255|  1.53k|    ) throws -> InternalInstance {
  256|  1.53k|        // Step 1 of module allocation algorithm, according to Wasm 2.0 spec.
  257|  1.53k|
  258|  1.53k|        let types = module.types
  259|  1.53k|        var importedFunctions: [InternalFunction] = []
  260|  1.53k|        var importedTables: [InternalTable] = []
  261|  1.53k|        var importedMemories: [InternalMemory] = []
  262|  1.53k|        var importedGlobals: [InternalGlobal] = []
  263|  1.53k|
  264|  1.53k|        // External values imported in this module should be included in corresponding index spaces before definitions
  265|  1.53k|        // local to to the module are added.
  266|  1.53k|        for importEntry in module.imports {
  267|    166|            guard let (external, allocator) = imports.lookup(module: importEntry.module, name: importEntry.name) else {
  268|      0|                throw ImportError(.missing(moduleName: importEntry.module, externalName: importEntry.name))
  269|    166|            }
  270|    166|            guard allocator === self else {
  271|      0|                throw ImportError(.importedEntityFromDifferentStore(importEntry))
  272|    166|            }
  273|    166|
  274|    166|            switch (importEntry.descriptor, external) {
  275|    166|            case let (.function(typeIndex), .function(externalFunc)):
  276|     23|                let type = externalFunc.type
  277|     23|                guard typeIndex < module.types.count else {
  278|      0|                    throw ValidationError(.indexOutOfBounds("type", typeIndex, max: module.types.count))
  279|     23|                }
  280|     23|                let expected = module.types[Int(typeIndex)]
  281|     23|                guard engine.internType(expected) == type else {
  282|      0|                    let actual = engine.resolveType(type)
  283|      0|                    throw ImportError(.incompatibleFunctionType(importEntry, actual: actual, expected: expected))
  284|     23|                }
  285|     23|                importedFunctions.append(externalFunc)
  286|    166|
  287|    166|            case let (.table(tableType), .table(table)):
  288|     22|                if let max = table.limits.max, max < tableType.limits.min {
  289|      2|                    throw ImportError(.incompatibleTableType(importEntry, actual: tableType, expected: table.tableType))
  290|     20|                }
  291|     20|                importedTables.append(table)
  292|    166|
  293|    166|            case let (.memory(memoryType), .memory(memory)):
  294|     93|                if let max = memory.limit.max, max < memoryType.min {
  295|      0|                    throw ImportError(.incompatibleMemoryType(importEntry, actual: memoryType, expected: memory.limit))
  296|     93|                }
  297|     93|                importedMemories.append(memory)
  298|    166|
  299|    166|            case let (.global(globalType), .global(global)):
  300|     24|                guard globalType == global.globalType else {
  301|      2|                    throw ImportError(.incompatibleGlobalType(importEntry, actual: global.globalType, expected: globalType))
  302|     22|                }
  303|     22|                importedGlobals.append(global)
  304|    166|
  305|    166|            default:
  306|      4|                throw ImportError(.incompatibleType(importEntry, entity: external))
  307|    166|            }
  308|  1.52k|        }
  309|  1.52k|
  310|  1.52k|        func allocateEntities<EntityHandle, Internals: Collection>(
  311|  1.52k|            imports: [EntityHandle],
  312|  1.52k|            internals: Internals, allocateHandle: (Internals.Element, Int) throws -> EntityHandle
  313|  1.52k|        ) rethrows -> ImmutableArray<EntityHandle> {
  314|  1.52k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  1.52k|                for (index, importedEntity) in imports.enumerated() {
  316|  1.52k|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  1.52k|                }
  318|  1.52k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  1.52k|                    let index = imports.count + internalIndex
  320|  1.52k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  1.52k|                    buffer.initializeElement(at: index, to: allocated)
  322|  1.52k|                }
  323|  1.52k|            }
  324|  1.52k|        }
  325|  1.52k|
  326|  1.52k|        // Uninitialized instance
  327|  1.52k|        let instancePointer = instances.allocate()
  328|  1.52k|        var instanceInitialized = false
  329|  1.52k|        defer {
  330|  1.52k|            // If the instance is not initialized due to an exception, initialize it with an empty instance
  331|  1.52k|            // to allow bump deallocation by the bump allocator.
  332|  1.52k|            // This is not optimal as it leaves an empty instance without deallocating the space but
  333|  1.52k|            // good at code simplicity.
  334|  1.52k|            if !instanceInitialized {
  335|  1.52k|                instancePointer.initialize(to: .empty)
  336|  1.52k|            }
  337|  1.52k|        }
  338|  1.52k|        let instanceHandle = InternalInstance(unsafe: instancePointer)
  339|  1.52k|
  340|  1.52k|        // Step 2.
  341|  1.52k|        let functions = allocateEntities(
  342|  1.52k|            imports: importedFunctions,
  343|  1.52k|            internals: module.functions,
  344|  1.52k|            allocateHandle: { f, index in
  345|  1.52k|                allocate(function: f, index: FunctionIndex(index), instance: instanceHandle, engine: engine)
  346|  1.52k|            }
  347|  1.52k|        )
  348|  1.52k|
  349|  1.52k|        // Step 3.
  350|  1.52k|        let tables = try allocateEntities(
  351|  1.52k|            imports: importedTables,
  352|  1.52k|            internals: module.internalTables,
  353|  1.52k|            allocateHandle: { t, _ in try allocate(tableType: t, resourceLimiter: resourceLimiter) }
  354|  1.52k|        )
  355|  1.52k|
  356|  1.52k|        // Step 4.
  357|  1.52k|        let memories = try allocateEntities(
  358|  1.52k|            imports: importedMemories,
  359|  1.52k|            internals: module.internalMemories,
  360|  1.52k|            allocateHandle: { m, _ in try allocate(memoryType: m, resourceLimiter: resourceLimiter) }
  361|  1.52k|        )
  362|  1.52k|
  363|  1.52k|        var functionRefs: Set<InternalFunction> = []
  364|  1.52k|        // Step 5.
  365|  1.52k|        let constEvalContext = ConstEvaluationContext(
  366|  1.52k|            functions: functions,
  367|  1.52k|            globals: importedGlobals.map(\.value),
  368|  1.52k|            onFunctionReferenced: { function in
  369|  1.52k|                functionRefs.insert(function)
  370|  1.52k|            }
  371|  1.52k|        )
  372|  1.52k|
  373|  1.52k|        let globals = try allocateEntities(
  374|  1.52k|            imports: importedGlobals,
  375|  1.52k|            internals: module.globals,
  376|  1.52k|            allocateHandle: { global, _ in
  377|  1.52k|                let initialValue = try global.initializer.evaluate(
  378|  1.52k|                    context: constEvalContext, expectedType: global.type.valueType
  379|  1.52k|                )
  380|  1.52k|                return try allocate(globalType: global.type, initialValue: initialValue)
  381|  1.52k|            }
  382|  1.52k|        )
  383|  1.49k|
  384|  1.49k|        // Step 6.
  385|  1.49k|        let elements = try ImmutableArray<InternalElementSegment>(allocator: arrayAllocator, count: module.elements.count) { buffer in
  386|  1.49k|            for (index, element) in module.elements.enumerated() {
  387|  1.49k|                // TODO: Avoid evaluating element expr twice in `Module.instantiate` and here.
  388|  1.49k|                var references = try element.evaluateInits(context: constEvalContext)
  389|  1.49k|                switch element.mode {
  390|  1.49k|                case .active, .declarative:
  391|  1.49k|                    // active & declarative segments are unavailable at runtime
  392|  1.49k|                    references = []
  393|  1.49k|                case .passive: break
  394|  1.49k|                }
  395|  1.49k|                let handle = allocate(elementType: element.type, references: references)
  396|  1.49k|                buffer.initializeElement(at: index, to: handle)
  397|  1.49k|            }
  398|  1.49k|        }
  399|  1.47k|
  400|  1.47k|        // Step 13.
  401|  1.47k|        let dataSegments = ImmutableArray<InternalDataSegment>(allocator: arrayAllocator, count: module.data.count) { buffer in
  402|  1.47k|            for (index, datum) in module.data.enumerated() {
  403|  1.47k|                let segment: InternalDataSegment
  404|  1.47k|                switch datum {
  405|  1.47k|                case let .passive(bytes):
  406|  1.47k|                    segment = allocate(bytes: bytes)
  407|  1.47k|                case .active:
  408|  1.47k|                    // Active segments are copied into memories while instantiation
  409|  1.47k|                    // They are semantically dropped after instantiation, so we don't
  410|  1.47k|                    // need them at runtime
  411|  1.47k|                    segment = allocate(bytes: [])
  412|  1.47k|                }
  413|  1.47k|                buffer.initializeElement(at: index, to: segment)
  414|  1.47k|            }
  415|  1.47k|        }
  416|  1.47k|
  417|  1.47k|        func createExportValue(_ export: WasmParser.Export) throws -> InternalExternalValue {
  418|  1.47k|            switch export.descriptor {
  419|  1.47k|            case let .function(index):
  420|  1.47k|                let handle = try functions[validating: Int(index)]
  421|  1.47k|                return .function(handle)
  422|  1.47k|            case let .table(index):
  423|  1.47k|                let handle = try tables[validating: Int(index)]
  424|  1.47k|                return .table(handle)
  425|  1.47k|            case let .memory(index):
  426|  1.47k|                let handle = try memories[validating: Int(index)]
  427|  1.47k|                return .memory(handle)
  428|  1.47k|            case let .global(index):
  429|  1.47k|                let handle = try globals[validating: Int(index)]
  430|  1.47k|                return .global(handle)
  431|  1.47k|            }
  432|  1.47k|        }
  433|  1.47k|
  434|  1.47k|        let exports: [String: InternalExternalValue] = try module.exports.reduce(into: [:]) { result, export in
  435|  1.47k|            guard result[export.name] == nil else {
  436|  1.47k|                throw ValidationError(.duplicateExportName(name: export.name))
  437|  1.47k|            }
  438|  1.47k|            result[export.name] = try createExportValue(export)
  439|  1.47k|        }
  440|  1.46k|
  441|  1.46k|        // Steps 20-21.
  442|  1.46k|        let instanceEntity = InstanceEntity(
  443|  1.46k|            types: types,
  444|  1.46k|            functions: functions,
  445|  1.46k|            tables: tables,
  446|  1.46k|            memories: memories,
  447|  1.46k|            globals: globals,
  448|  1.46k|            elementSegments: elements,
  449|  1.46k|            dataSegments: dataSegments,
  450|  1.46k|            exports: exports,
  451|  1.46k|            functionRefs: functionRefs,
  452|  1.46k|            features: module.features,
  453|  1.46k|            dataCount: module.dataCount
  454|  1.46k|        )
  455|  1.46k|        instancePointer.initialize(to: instanceEntity)
  456|  1.46k|        instanceInitialized = true
  457|  1.46k|        return instanceHandle
  458|  1.53k|    }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0E8EntitiesL_AH9internals0eL0AA14ImmutableArrayVyxGSayxG_q_x7ElementQy__SitKXEtKSlR_r0_lF:
  313|  6.09k|        ) rethrows -> ImmutableArray<EntityHandle> {
  314|  6.09k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  6.09k|                for (index, importedEntity) in imports.enumerated() {
  316|  6.09k|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  6.09k|                }
  318|  6.09k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  6.09k|                    let index = imports.count + internalIndex
  320|  6.09k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  6.09k|                    buffer.initializeElement(at: index, to: allocated)
  322|  6.09k|                }
  323|  6.09k|            }
  324|  6.09k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0E8EntitiesL_AH9internals0eL0AA14ImmutableArrayVyxGSayxG_q_x7ElementQy__SitKXEtKSlR_r0_lFySryxGKXEfU_:
  314|  6.09k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  6.09k|                for (index, importedEntity) in imports.enumerated() {
  316|    151|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  6.09k|                }
  318|  11.4k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  11.4k|                    let index = imports.count + internalIndex
  320|  11.4k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  11.4k|                    buffer.initializeElement(at: index, to: allocated)
  322|  11.4k|                }
  323|  6.06k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAA16InternalFunctionVAA05GuestS0V_SitXEfU_:
  344|  4.22k|            allocateHandle: { f, index in
  345|  4.22k|                allocate(function: f, index: FunctionIndex(index), instance: instanceHandle, engine: engine)
  346|  4.22k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA05TableK0VG0A6Parser0R4TypeV_SitKXEfU0_:
  353|    281|            allocateHandle: { t, _ in try allocate(tableType: t, resourceLimiter: resourceLimiter) }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA06MemoryK0VG0A6Parser6LimitsV_SitKXEfU1_:
  360|    651|            allocateHandle: { m, _ in try allocate(memoryType: m, resourceLimiter: resourceLimiter) }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0A5Types5ValueOAJyAA06GlobalK0VGcfu_:
  367|     18|            globals: importedGlobals.map(\.value),
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFyAA16InternalFunctionVcfU2_:
  368|      7|            onFunctionReferenced: { function in
  369|      7|                functionRefs.insert(function)
  370|      7|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA06GlobalK0VG0A6Parser0R0V_SitKXEfU3_:
  376|  6.29k|            allocateHandle: { global, _ in
  377|  6.29k|                let initialValue = try global.initializer.evaluate(
  378|  6.29k|                    context: constEvalContext, expectedType: global.type.valueType
  379|  6.29k|                )
  380|  6.25k|                return try allocate(globalType: global.type, initialValue: initialValue)
  381|  6.29k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySryAJyAA014ElementSegmentK0VGGKXEfU4_:
  385|  1.49k|        let elements = try ImmutableArray<InternalElementSegment>(allocator: arrayAllocator, count: module.elements.count) { buffer in
  386|  1.49k|            for (index, element) in module.elements.enumerated() {
  387|     93|                // TODO: Avoid evaluating element expr twice in `Module.instantiate` and here.
  388|     93|                var references = try element.evaluateInits(context: constEvalContext)
  389|     78|                switch element.mode {
  390|     78|                case .active, .declarative:
  391|     62|                    // active & declarative segments are unavailable at runtime
  392|     62|                    references = []
  393|     78|                case .passive: break
  394|     78|                }
  395|     78|                let handle = allocate(elementType: element.type, references: references)
  396|     78|                buffer.initializeElement(at: index, to: handle)
  397|  1.47k|            }
  398|  1.47k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySryAJyAA011DataSegmentK0VGGXEfU5_:
  401|  1.47k|        let dataSegments = ImmutableArray<InternalDataSegment>(allocator: arrayAllocator, count: module.data.count) { buffer in
  402|  1.47k|            for (index, datum) in module.data.enumerated() {
  403|     44|                let segment: InternalDataSegment
  404|     44|                switch datum {
  405|     44|                case let .passive(bytes):
  406|      9|                    segment = allocate(bytes: bytes)
  407|     44|                case .active:
  408|     35|                    // Active segments are copied into memories while instantiation
  409|     35|                    // They are semantically dropped after instantiation, so we don't
  410|     35|                    // need them at runtime
  411|     35|                    segment = allocate(bytes: [])
  412|     44|                }
  413|     44|                buffer.initializeElement(at: index, to: segment)
  414|  1.47k|            }
  415|  1.47k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF17createExportValueL_yAA016InternalExternalT0O0A6Parser0S0VKF:
  417|  1.10k|        func createExportValue(_ export: WasmParser.Export) throws -> InternalExternalValue {
  418|  1.10k|            switch export.descriptor {
  419|  1.10k|            case let .function(index):
  420|    113|                let handle = try functions[validating: Int(index)]
  421|    111|                return .function(handle)
  422|  1.10k|            case let .table(index):
  423|     28|                let handle = try tables[validating: Int(index)]
  424|     27|                return .table(handle)
  425|  1.10k|            case let .memory(index):
  426|    101|                let handle = try memories[validating: Int(index)]
  427|    100|                return .memory(handle)
  428|  1.10k|            case let .global(index):
  429|    865|                let handle = try globals[validating: Int(index)]
  430|    863|                return .global(handle)
  431|  1.10k|            }
  432|  1.10k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySDySSAA21InternalExternalValueOGz_0A6Parser6ExportVtKXEfU6_:
  434|  1.10k|        let exports: [String: InternalExternalValue] = try module.exports.reduce(into: [:]) { result, export in
  435|  1.10k|            guard result[export.name] == nil else {
  436|      2|                throw ValidationError(.duplicateExportName(name: export.name))
  437|  1.10k|            }
  438|  1.10k|            result[export.name] = try createExportValue(export)
  439|  1.10k|        }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL8function5index8instance6engineAA16InternalFunctionVAA05GuestQ0V_s6UInt32VAA12EntityHandleVyAA08InstanceT0VGAA6EngineCtF:
  467|  4.22k|    ) -> InternalFunction {
  468|  4.22k|        let code = InternalUncompiledCode(unsafe: codes.allocate(initializing: function.code))
  469|  4.22k|        let pointer = functions.allocate(
  470|  4.22k|            initializing: WasmFunctionEntity(
  471|  4.22k|                index: index, type: engine.internType(function.type),
  472|  4.22k|                code: code,
  473|  4.22k|                instance: instance
  474|  4.22k|            )
  475|  4.22k|        )
  476|  4.22k|        return InternalFunction.wasm(EntityHandle(unsafe: pointer))
  477|  4.22k|    }
$s7WasmKit14StoreAllocatorC8allocate4type14implementation6engineAA16InternalFunctionV0A5Types0J4TypeV_SayAJ5ValueOGAA6CallerV_AOtKcAA6EngineCtF:
  483|     24|    ) -> InternalFunction {
  484|     24|        let pointer = hostFunctions.allocate(
  485|     24|            initializing: HostFunctionEntity(
  486|     24|                type: engine.internType(type), implementation: implementation
  487|     24|            )
  488|     24|        )
  489|     24|        return InternalFunction.host(EntityHandle(unsafe: pointer))
  490|     24|    }
$s7WasmKit14StoreAllocatorC8allocate9tableType15resourceLimiterAA12EntityHandleVyAA05TableJ0VG0A6Parser0lG0V_AA08ResourceI0_ptKF:
  494|    316|    func allocate(tableType: TableType, resourceLimiter: any ResourceLimiter) throws -> InternalTable {
  495|    316|        let pointer = try tables.allocate(initializing: TableEntity(tableType, resourceLimiter: resourceLimiter))
  496|    313|        return InternalTable(unsafe: pointer)
  497|    316|    }
$s7WasmKit14StoreAllocatorC8allocate10memoryType15resourceLimiterAA12EntityHandleVyAA06MemoryJ0VG0A6Parser6LimitsV_AA08ResourceI0_ptKF:
  501|    760|    func allocate(memoryType: MemoryType, resourceLimiter: any ResourceLimiter) throws -> InternalMemory {
  502|    760|        let pointer = try memories.allocate(initializing: MemoryEntity(memoryType, resourceLimiter: resourceLimiter))
  503|    759|        return InternalMemory(unsafe: pointer)
  504|    760|    }
$s7WasmKit14StoreAllocatorC8allocate10globalType12initialValueAA12EntityHandleVyAA06GlobalJ0VG0A6Parser0lG0V_0A5Types0I0OtKF:
  508|  6.30k|    func allocate(globalType: GlobalType, initialValue: Value) throws -> InternalGlobal {
  509|  6.30k|        let pointer = try globals.allocate(initializing: GlobalEntity(globalType: globalType, initialValue: initialValue))
  510|  6.30k|        return InternalGlobal(unsafe: pointer)
  511|  6.30k|    }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL11elementType10referencesAA12EntityHandleVyAA014ElementSegmentO0VG0A5Types09ReferenceM0O_SayAM0T0OGtF:
  515|     78|    private func allocate(elementType: ReferenceType, references: [Reference]) -> InternalElementSegment {
  516|     78|        let pointer = elements.allocate(initializing: ElementSegmentEntity(type: elementType, references: references))
  517|     78|        return InternalElementSegment(unsafe: pointer)
  518|     78|    }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL5bytesAA12EntityHandleVyAA011DataSegmentM0VGs10ArraySliceVys5UInt8VG_tF:
  522|     44|    private func allocate(bytes: ArraySlice<UInt8>) -> InternalDataSegment {
  523|     44|        let pointer = datas.allocate(initializing: DataSegmentEntity(data: bytes))
  524|     44|        return EntityHandle(unsafe: pointer)
  525|     44|    }

$s7WasmKit12UntypedValueV7defaultACvgZ:
   13|   424k|    static var `default`: UntypedValue {
   14|   424k|        UntypedValue(storage: 0)
   15|   424k|    }
$s7WasmKit12UntypedValueV17isNullMaskPattern33_659430D1A12A457F633FD7DBB171E78ALLs6UInt64VvgZ:
   18|      2|    private static var isNullMaskPattern: UInt64 { (0x1 << 63) }
$s7WasmKit12UntypedValueV6signedACs5Int32V_tcfC:
   21|   256k|    init(signed value: Int32) {
   22|   256k|        self = .i32(UInt32(bitPattern: value))
   23|   256k|    }
$s7WasmKit12UntypedValueV6signedACs5Int64V_tcfC:
   26|   441k|    init(signed value: Int64) {
   27|   441k|        self = .i64(UInt64(bitPattern: value))
   28|   441k|    }
$s7WasmKit12UntypedValueV3i32yACs6UInt32VFZ:
   32|  1.23M|    static func i32(_ value: UInt32) -> UntypedValue {
   33|  1.23M|        return UntypedValue(storage: UInt64(value))
   34|  1.23M|    }
$s7WasmKit12UntypedValueV3i64yACs6UInt64VFZ:
   35|  1.33M|    static func i64(_ value: UInt64) -> UntypedValue {
   36|  1.33M|        return UntypedValue(storage: value)
   37|  1.33M|    }
$s7WasmKit12UntypedValueV6rawF32yACs6UInt32VFZ:
   38|   114k|    static func rawF32(_ value: UInt32) -> UntypedValue {
   39|   114k|        return UntypedValue(storage: UInt64(value))
   40|   114k|    }
$s7WasmKit12UntypedValueV6rawF64yACs6UInt64VFZ:
   41|   617k|    static func rawF64(_ value: UInt64) -> UntypedValue {
   42|   617k|        return UntypedValue(storage: value)
   43|   617k|    }
$s7WasmKit12UntypedValueV3f32yACSfFZ:
   44|   103k|    static func f32(_ value: Float32) -> UntypedValue {
   45|   103k|        return rawF32(value.bitPattern)
   46|   103k|    }
$s7WasmKit12UntypedValueV3f64yACSdFZ:
   47|   408k|    static func f64(_ value: Float64) -> UntypedValue {
   48|   408k|        return rawF64(value.bitPattern)
   49|   408k|    }
$s7WasmKit12UntypedValueV9storage32ACs6UInt32V_tcfC:
   53|  4.83k|    init(storage32: UInt32) {
   54|  4.83k|        self.storage = UInt64(storage32)
   55|  4.83k|    }
$s7WasmKit12UntypedValueV7storageACs6UInt64V_tcfC:
   58|  5.97M|    init(storage: UInt64) {
   59|  5.97M|        self.storage = storage
   60|  5.97M|    }
$s7WasmKit12UntypedValueVyAC0A5Types0D0OcfC:
   63|   438k|    init(_ value: Value) {
   64|   438k|        func encodeOptionalInt(_ value: Int?) -> UInt64 {
   65|   438k|            guard let value = value else { return Self.isNullMaskPattern }
   66|   438k|            let unsigned = UInt64(bitPattern: Int64(value))
   67|   438k|            // Check if the value does not exceed the 63-bits limit.
   68|   438k|            precondition(unsigned & Self.isNullMaskPattern == 0)
   69|   438k|            return unsigned
   70|   438k|        }
   71|   438k|        switch value {
   72|   438k|        case .i32(let value): self = .i32(value)
   73|   438k|        case .i64(let value): self = .i64(value)
   74|   438k|        case .f32(let value): self = .rawF32(value)
   75|   438k|        case .f64(let value): self = .rawF64(value)
   76|   438k|        case .ref(.function(let value)), .ref(.extern(let value)):
   77|      2|            storage = encodeOptionalInt(value)
   78|   438k|        }
   79|   438k|    }
$s7WasmKit12UntypedValueVyAC0A5Types0D0Ocfc17encodeOptionalIntL_ys6UInt64VSiSgF:
   64|      2|        func encodeOptionalInt(_ value: Int?) -> UInt64 {
   65|      2|            guard let value = value else { return Self.isNullMaskPattern }
   66|      2|            let unsigned = UInt64(bitPattern: Int64(value))
   67|      2|            // Check if the value does not exceed the 63-bits limit.
   68|      2|            precondition(unsigned & Self.isNullMaskPattern == 0)
   69|      2|            return unsigned
   70|      2|        }
$s7WasmKit12UntypedValueVyAC0A5Types0D0Ocfc17encodeOptionalIntL_ys6UInt64VSiSgFSbyXEfu_:
   68|      2|            precondition(unsigned & Self.isNullMaskPattern == 0)
$s7WasmKit12UntypedValueV3i32s6UInt32Vvg:
   83|   137k|    var i32: UInt32 {
   84|   137k|        return UInt32(truncatingIfNeeded: storage & 0x0000_0000_ffff_ffff)
   85|   137k|    }
$s7WasmKit12UntypedValueV3i64s6UInt64Vvg:
   87|  2.00M|    var i64: UInt64 {
   88|  2.00M|        return storage
   89|  2.00M|    }
$s7WasmKit12UntypedValueV6rawF32s6UInt32Vvg:
   91|      1|    var rawF32: UInt32 {
   92|      1|        return i32
   93|      1|    }
$s7WasmKit12UntypedValueV15asAddressOffsets6UInt64VyF:
  126|   964k|    func asAddressOffset() -> UInt64 {
  127|   964k|        // NOTE: It's ok to load address offset as i64 because
  128|   964k|        //       it's always evaluated as unsigned and the higher
  129|   964k|        //       32-bits of i32 are always zero.
  130|   964k|        return i64
  131|   964k|    }
$s7WasmKit12UntypedValueV4cast2to0A5Types0D0OAF0D4TypeO_tF:
  139|     36|    func cast(to type: ValueType) -> Value {
  140|     36|        switch type {
  141|     36|        case .i32: return .i32(i32)
  142|     36|        case .i64: return .i64(i64)
  143|     36|        case .f32: return .f32(rawF32)
  144|     36|        case .f64: return .f64(rawF64)
  145|     36|        case .ref(let referenceType):
  146|      0|            return .ref(asReference(referenceType))
  147|     36|        }
  148|     36|    }

$s9WasmTypes5ValueO0A3KitE18maybeAddressOffsetys6UInt64VSgSbF:
   10|      7|    func maybeAddressOffset(_ isMemory64: Bool) -> UInt64? {
   11|      7|        switch (isMemory64, self) {
   12|      7|        case (true, .i64(let value)): return value
   13|      7|        case (false, .i32(let value)): return UInt64(value)
   14|      7|        default: return nil
   15|      7|        }
   16|      7|    }
$s7WasmKit18RawUnsignedIntegerPAAE6signed6SignedQzvg:
   63|   158k|    var signed: Signed {
   64|   158k|        .init(bitPattern: self)
   65|   158k|    }
$s7WasmKit16RawSignedIntegerPAAE8unsigned8UnsignedQzvg:
   69|   363k|    var unsigned: Unsigned {
   70|   363k|        .init(bitPattern: self)
   71|   363k|    }
$s9WasmTypes9ValueTypeO0A3KitE07addressD010isMemory64ACSb_tFZ:
   94|    656|    static func addressType(isMemory64: Bool) -> ValueType {
   95|    656|        return isMemory64 ? .i64 : .i32
   96|    656|    }
$ss17FixedWidthIntegerP7WasmKitE3addyxxF:
  102|  11.0k|    func add(_ other: Self) -> Self { self &+ other }
$ss17FixedWidthIntegerP7WasmKitE3subyxxF:
  103|   158k|    func sub(_ other: Self) -> Self { self &- other }
$ss17FixedWidthIntegerP7WasmKitE3mulyxxF:
  104|  7.15k|    func mul(_ other: Self) -> Self { self &* other }
$ss17FixedWidthIntegerP7WasmKitE2eqys6UInt32VxF:
  105|  3.80k|    func eq(_ other: Self) -> UInt32 { self == other ? 1 : 0 }
$ss17FixedWidthIntegerP7WasmKitE2neys6UInt32VxF:
  106|  5.00k|    func ne(_ other: Self) -> UInt32 { self == other ? 0 : 1 }
$ss17FixedWidthIntegerP7WasmKitE3andyxxF:
  107|  10.3k|    func and(_ other: Self) -> Self { self & other }
$ss17FixedWidthIntegerP7WasmKitE2oryxxF:
  108|   124k|    func or(_ other: Self) -> Self { self | other }
$ss17FixedWidthIntegerP7WasmKitE3xoryxxF:
  109|  5.73k|    func xor(_ other: Self) -> Self { self ^ other }
$ss17FixedWidthIntegerP7WasmKitE3clzxvg:
  111|   195k|    var clz: Self { Self(leadingZeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE3ctzxvg:
  112|  16.4k|    var ctz: Self { Self(trailingZeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE6popcntxvg:
  113|  22.7k|    var popcnt: Self { Self(nonzeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE3eqzs6UInt32Vvg:
  114|  6.10k|    var eqz: UInt32 { self == 0 ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3ltSys6UInt32VxF:
  118|  10.6k|    func ltS(_ other: Self) -> UInt32 { self.signed < other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3ltUys6UInt32VxF:
  119|  16.6k|    func ltU(_ other: Self) -> UInt32 { self < other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3gtSys6UInt32VxF:
  120|  5.81k|    func gtS(_ other: Self) -> UInt32 { self.signed > other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3gtUys6UInt32VxF:
  121|  7.70k|    func gtU(_ other: Self) -> UInt32 { self > other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3leSys6UInt32VxF:
  122|      2|    func leS(_ other: Self) -> UInt32 { self.signed <= other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3leUys6UInt32VxF:
  123|  9.89k|    func leU(_ other: Self) -> UInt32 { self <= other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3geSys6UInt32VxF:
  124|  7.17k|    func geS(_ other: Self) -> UInt32 { self.signed >= other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3geUys6UInt32VxF:
  125|  7.08k|    func geU(_ other: Self) -> UInt32 { self >= other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3shlyxxF:
  127|  11.7k|    func shl(_ other: Self) -> Self {
  128|  11.7k|        let shift = other % Self(Self.bitWidth)
  129|  11.7k|        return self << shift
  130|  11.7k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4shrSyxxF:
  131|  24.9k|    func shrS(_ other: Self) -> Self {
  132|  24.9k|        let shift = other % Self(Self.bitWidth)
  133|  24.9k|        return (self.signed >> shift).unsigned
  134|  24.9k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4shrUyxxF:
  135|  7.75k|    func shrU(_ other: Self) -> Self {
  136|  7.75k|        let shift = other % Self(Self.bitWidth)
  137|  7.75k|        return self >> shift
  138|  7.75k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4rotlyxxF:
  139|  5.73k|    func rotl(_ other: Self) -> Self {
  140|  5.73k|        let shift = other % Self(Self.bitWidth)
  141|  5.73k|        return self << shift | self >> (Self(Self.bitWidth) - shift)
  142|  5.73k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4rotryxxF:
  143|  3.35k|    func rotr(_ other: Self) -> Self {
  144|  3.35k|        let shift = other % Self(Self.bitWidth)
  145|  3.35k|        return self >> shift | self << (Self(Self.bitWidth) - shift)
  146|  3.35k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4divSyxxKF:
  148|  6.70k|    func divS(_ other: Self) throws -> Self {
  149|  6.70k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  150|  6.70k|        let (signed, overflow) = signed.dividedReportingOverflow(by: other.signed)
  151|  6.70k|        guard !overflow else { throw Trap(.integerOverflow) }
  152|  6.70k|        return signed.unsigned
  153|  6.70k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4divUyxxKF:
  154|  8.62k|    func divU(_ other: Self) throws -> Self {
  155|  8.62k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  156|  8.61k|        let (unsigned, overflow) = dividedReportingOverflow(by: other)
  157|  8.61k|        guard !overflow else { throw Trap(.integerOverflow) }
  158|  8.61k|        return unsigned
  159|  8.62k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4remSyxxKF:
  160|  9.18k|    func remS(_ other: Self) throws -> Self {
  161|  9.18k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  162|  9.18k|        let (signed, overflow) = signed.remainderReportingOverflow(dividingBy: other.signed)
  163|  9.18k|        guard !overflow else { return 0 }
  164|  9.18k|        return signed.unsigned
  165|  9.18k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4remUyxxKF:
  166|  18.7k|    func remU(_ other: Self) throws -> Self {
  167|  18.7k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  168|  18.7k|        let (unsigned, overflow) = remainderReportingOverflow(dividingBy: other)
  169|  18.7k|        guard !overflow else { throw Trap(.integerOverflow) }
  170|  18.7k|        return unsigned
  171|  18.7k|    }
$ss6UInt32V7WasmKitE10extendI32Ss6UInt64Vvg:
  175|  4.13k|    var extendI32S: UInt64 {
  176|  4.13k|        return UInt64(bitPattern: Int64(signed))
  177|  4.13k|    }
$ss6UInt32V7WasmKitE10extendI32Us6UInt64Vvg:
  178|  5.42k|    var extendI32U: UInt64 {
  179|  5.42k|        return UInt64(self)
  180|  5.42k|    }
$ss6UInt32V7WasmKitE13convertToF32SSfvg:
  181|      1|    var convertToF32S: Float32 { Float32(signed) }
$ss6UInt32V7WasmKitE13convertToF32USfvg:
  182|  5.42k|    var convertToF32U: Float32 { Float32(self) }
$ss6UInt32V7WasmKitE13convertToF64USdvg:
  184|  3.91k|    var convertToF64U: Float64 { Float64(self) }
$ss6UInt32V7WasmKitE16reinterpretToF32Sfvg:
  185|  2.64k|    var reinterpretToF32: Float32 { Float32(bitPattern: self) }
$s7WasmKit18RawUnsignedIntegerPAAE8extend8Sxvg:
  189|   171k|    var extend8S: Self {
  190|   171k|        return Self(bitPattern: Self.Signed(Int8(truncatingIfNeeded: self)))
  191|   171k|    }
$s7WasmKit18RawUnsignedIntegerPAAE9extend16Sxvg:
  192|  19.2k|    var extend16S: Self {
  193|  19.2k|        return Self(bitPattern: Self.Signed(Int16(truncatingIfNeeded: self)))
  194|  19.2k|    }
$ss6UInt64V7WasmKitE9extend32SABvg:
  198|  12.7k|    var extend32S: UInt64 {
  199|  12.7k|        return UInt64(bitPattern: Int64(Int32(truncatingIfNeeded: self)))
  200|  12.7k|    }
$ss6UInt64V7WasmKitE13convertToF32SSfvg:
  201|  44.4k|    var convertToF32S: Float32 { Float32(signed) }
$ss6UInt64V7WasmKitE13convertToF32USfvg:
  202|  26.6k|    var convertToF32U: Float32 { Float32(self) }
$ss6UInt64V7WasmKitE13convertToF64SSdvg:
  203|  5.72k|    var convertToF64S: Float64 { Float64(signed) }
$ss6UInt64V7WasmKitE13convertToF64USdvg:
  204|  7.18k|    var convertToF64U: Float64 { Float64(self) }
$ss6UInt64V7WasmKitE16reinterpretToF64Sdvg:
  205|   187k|    var reinterpretToF64: Float64 { Float64(bitPattern: self) }
$ss6UInt64V7WasmKitE4wraps6UInt32Vvg:
  209|  2.59k|    var wrap: UInt32 {
  210|  2.59k|        return UInt32(truncatingIfNeeded: self)
  211|  2.59k|    }
$sSF7WasmKitE2geys6UInt32VxF:
  249|      1|    func ge(_ other: Self) -> UInt32 { self >= other ? 1 : 0 }
$sSF7WasmKitE3absxvg:
  251|  7.96k|    var abs: Self { Swift.abs(self) }
$sSF7WasmKitE3negxvg:
  252|  8.62k|    var neg: Self { -self }
$sSF7WasmKitE4ceilxvg:
  253|  5.67k|    var ceil: Self { self.rounded(.up) }
$sSF7WasmKitE5floorxvg:
  254|   112k|    var floor: Self { self.rounded(.down) }
$sSF7WasmKitE5truncxvg:
  255|  82.6k|    var trunc: Self { self.rounded(.towardZero) }
$sSF7WasmKitE7nearestxvg:
  256|  3.59k|    var nearest: Self { self.rounded(.toNearestOrEven) }
$sSF7WasmKitE4sqrtxvg:
  257|  3.91k|    var sqrt: Self { self.squareRoot() }
$sSF7WasmKitE7truncTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lF:
  265|   245k|    ) throws -> T {
  266|   245k|        guard !self.isNaN else { throw Trap(.invalidConversionToInteger) }
  267|   245k|        if self <= min || self >= max {
  268|      3|            throw Trap(.integerOverflow)
  269|   245k|        }
  270|   245k|        return rounding(self)
  271|   245k|    }
$sSF7WasmKitE7truncTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lFSbyKXEfu_:
  267|   245k|        if self <= min || self >= max {
$sSF7WasmKitE10truncSatTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lF:
  276|   208k|    ) throws -> T {
  277|   208k|        guard !self.isNaN else { return .zero }
  278|   208k|        if self <= min {
  279|      0|            return .min
  280|   208k|        } else if self >= max {
  281|      0|            return .max
  282|   208k|        }
  283|   208k|        return rounding(self)
  284|   208k|    }
$sSf7WasmKitE11truncToI32Ss6UInt32Vvg:
  289|  6.75k|        get throws {
  290|  6.75k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
  291|  6.75k|        }
$sSf7WasmKitE11truncToI32Ss6UInt32Vvgs5Int32VSfXEfU_:
  290|  6.75k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
$sSf7WasmKitE11truncToI64Ss6UInt64Vvg:
  294|  3.87k|        get throws {
  295|  3.87k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
  296|  3.87k|        }
$sSf7WasmKitE11truncToI64Ss6UInt64Vvgs5Int64VSfXEfU_:
  295|  3.87k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
$sSf7WasmKitE11truncToI32Us6UInt32Vvg:
  299|  6.21k|        get throws {
  300|  6.21k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  301|  6.21k|        }
$sSf7WasmKitE11truncToI32Us6UInt32VvgADSfXEfU_:
  300|  6.21k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSf7WasmKitE11truncToI64Us6UInt64Vvg:
  304|  27.4k|        get throws {
  305|  27.4k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  306|  27.4k|        }
$sSf7WasmKitE11truncToI64Us6UInt64VvgADSfXEfU_:
  305|  27.3k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSf7WasmKitE14truncSatToI32Ss6UInt32Vvg:
  309|      1|        get throws {
  310|      1|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
  311|      1|        }
$sSf7WasmKitE14truncSatToI32Ss6UInt32Vvgs5Int32VSfXEfU_:
  310|      1|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
$sSf7WasmKitE14truncSatToI32Us6UInt32Vvg:
  319|  1.87k|        get throws {
  320|  1.87k|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  321|  1.87k|        }
$sSf7WasmKitE14truncSatToI32Us6UInt32VvgADSfXEfU_:
  320|  1.87k|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSf7WasmKitE10promoteF32Sdvg:
  328|  2.64k|    var promoteF32: Float64 { Float64(self) }
$sSf7WasmKitE16reinterpretToI32s6UInt32Vvg:
  329|      3|    var reinterpretToI32: UInt32 { bitPattern }
$sSd7WasmKitE11truncToI32Ss6UInt32Vvg:
  333|  11.3k|        get throws {
  334|  11.3k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
  335|  11.3k|        }
$sSd7WasmKitE11truncToI32Ss6UInt32Vvgs5Int32VSdXEfU_:
  334|  11.3k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
$sSd7WasmKitE11truncToI32Us6UInt32Vvg:
  343|   189k|        get throws {
  344|   189k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  345|   189k|        }
$sSd7WasmKitE11truncToI32Us6UInt32VvgADSdXEfU_:
  344|   189k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSd7WasmKitE14truncSatToI32Ss6UInt32Vvg:
  353|      1|        get throws {
  354|      1|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
  355|      1|        }
$sSd7WasmKitE14truncSatToI32Ss6UInt32Vvgs5Int32VSdXEfU_:
  354|      1|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
$sSd7WasmKitE14truncSatToI64Ss6UInt64Vvg:
  358|   175k|        get throws {
  359|   175k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
  360|   175k|        }
$sSd7WasmKitE14truncSatToI64Ss6UInt64Vvgs5Int64VSdXEfU_:
  359|   175k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
$sSd7WasmKitE14truncSatToI64Us6UInt64Vvg:
  368|  31.9k|        get throws {
  369|  31.9k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  370|  31.9k|        }
$sSd7WasmKitE14truncSatToI64Us6UInt64VvgADSdXEfU_:
  369|  31.9k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)

$s7WasmKit7ImportsV11definitions33_6D96F85BFFF5D538ECAADDF4180F550ALLSDySSSDySSAA13ExternalValueOGGvpfi:
   26|  1.56k|    private var definitions: [String: [String: ExternalValue]] = [:]
$s7WasmKit7ImportsVACycfC:
   29|  1.56k|    public init() {
   30|  1.56k|    }
$s7WasmKit7ImportsV6define6module4name_ySS_SSxtAA24ExternalValueConvertibleRzlF:
   33|    207|    public mutating func define<Extern: ExternalValueConvertible>(module: String, name: String, _ value: Extern) {
   34|    207|        definitions[module, default: [:]][name] = value.externalValue
   35|    207|    }
$s7WasmKit7ImportsV6define6module4name_ySS_SSxtAA24ExternalValueConvertibleRzlFSDySSAA0gH0OGyXEfu_:
   34|    169|        definitions[module, default: [:]][name] = value.externalValue
$s7WasmKit7ImportsV6lookup6module4nameAA21InternalExternalValueO_AA14StoreAllocatorCtSgSS_SStF:
   50|    166|    func lookup(module: String, name: String) -> (InternalExternalValue, StoreAllocator)? {
   51|    166|        definitions[module]?[name]?.internalize()
   52|    166|    }
$s7WasmKit13ExternalValueO08externalD0ACvg:
   61|    207|    public var externalValue: ExternalValue { self }
$s7WasmKit6MemoryV13externalValueAA08ExternalE0Ovg:
   65|    108|    public var externalValue: ExternalValue { .memory(self) }
$s7WasmKit5TableV13externalValueAA08ExternalE0Ovg:
   69|     34|    public var externalValue: ExternalValue { .table(self) }
$s7WasmKit6GlobalV13externalValueAA08ExternalE0Ovg:
   73|     41|    public var externalValue: ExternalValue { .global(self) }
$s7WasmKit8FunctionV13externalValueAA08ExternalE0Ovg:
   77|     24|    public var externalValue: ExternalValue { .function(self) }

$s7WasmKit13ModuleImportsV5build4from19functionTypeIndices11globalTypes06memoryK005tableK0ACSay0A6Parser6ImportVG_Says6UInt32VGzSayAJ06GlobalH0VGzSayAJ6LimitsVGzSayAJ05TableH0VGztFZ:
   15|  1.56k|    ) -> ModuleImports {
   16|  1.56k|        var numberOfFunctions: Int = 0
   17|  1.56k|        var numberOfGlobals: Int = 0
   18|  1.56k|        var numberOfMemories: Int = 0
   19|  1.56k|        var numberOfTables: Int = 0
   20|  1.56k|        for item in imports {
   21|    234|            switch item.descriptor {
   22|    234|            case .function(let typeIndex):
   23|     36|                numberOfFunctions += 1
   24|     36|                functionTypeIndices.append(typeIndex)
   25|    234|            case .table(let tableType):
   26|     35|                numberOfTables += 1
   27|     35|                tableTypes.append(tableType)
   28|    234|            case .memory(let memoryType):
   29|    112|                numberOfMemories += 1
   30|    112|                memoryTypes.append(memoryType)
   31|    234|            case .global(let globalType):
   32|     51|                numberOfGlobals += 1
   33|     51|                globalTypes.append(globalType)
   34|    234|            }
   35|  1.56k|        }
   36|  1.56k|        return ModuleImports(
   37|  1.56k|            numberOfFunctions: numberOfFunctions,
   38|  1.56k|            numberOfGlobals: numberOfGlobals,
   39|  1.56k|            numberOfMemories: numberOfMemories,
   40|  1.56k|            numberOfTables: numberOfTables
   41|  1.56k|        )
   42|  1.56k|    }
$s7WasmKit6ModuleV5types9functions8elements4data5start7imports7exports7globals8memories6tables14customSections8features0G5CountACSay0A5Types12FunctionTypeVG_SayAA05GuestS0VGSay0A6Parser14ElementSegmentVGSayAX04DataX0OGs6UInt32VSgSayAX6ImportVGSayAX6ExportVGSayAX6GlobalVGSayAX6LimitsVGSayAX05TableT0VGSayAX13CustomSectionVGAX0A10FeatureSetVA5_tcfC:
   81|  1.56k|    ) {
   82|  1.56k|        self.functions = functions
   83|  1.56k|        self.elements = elements
   84|  1.56k|        self.data = data
   85|  1.56k|        self.start = start
   86|  1.56k|        self.imports = imports
   87|  1.56k|        self.exports = exports
   88|  1.56k|        self.globals = globals
   89|  1.56k|        self.customSections = customSections
   90|  1.56k|        self.features = features
   91|  1.56k|        self.dataCount = dataCount
   92|  1.56k|
   93|  1.56k|        var importedFunctionTypes: [TypeIndex] = []
   94|  1.56k|        var globalTypes: [GlobalType] = []
   95|  1.56k|        var memoryTypes: [MemoryType] = []
   96|  1.56k|        var tableTypes: [TableType] = []
   97|  1.56k|
   98|  1.56k|        self.moduleImports = ModuleImports.build(
   99|  1.56k|            from: imports,
  100|  1.56k|            functionTypeIndices: &importedFunctionTypes,
  101|  1.56k|            globalTypes: &globalTypes,
  102|  1.56k|            memoryTypes: &memoryTypes,
  103|  1.56k|            tableTypes: &tableTypes
  104|  1.56k|        )
  105|  1.56k|        self.types = types
  106|  1.56k|        self.importedFunctionTypes = importedFunctionTypes
  107|  1.56k|        self.memoryTypes = memoryTypes + memories
  108|  1.56k|        self.tableTypes = tableTypes + tables
  109|  1.56k|    }
$s7WasmKit6ModuleV11resolveType_11typeSection0A5Types08FunctionE0Vs6UInt32V_SayAHGtKFZ:
  111|  4.27k|    static func resolveType(_ index: TypeIndex, typeSection: [FunctionType]) throws -> FunctionType {
  112|  4.27k|        guard Int(index) < typeSection.count else {
  113|      2|            throw TranslationError("Type index \(index) is out of range")
  114|  4.27k|        }
  115|  4.27k|        return typeSection[Int(index)]
  116|  4.27k|    }
$s7WasmKit6ModuleV19resolveFunctionTypey0A5Types0eF0Vs6UInt32VKF:
  118|    386|    internal func resolveFunctionType(_ index: FunctionIndex) throws -> FunctionType {
  119|    386|        guard Int(index) < functions.count + self.moduleImports.numberOfFunctions else {
  120|      3|            throw TranslationError("Function index \(index) is out of range")
  121|    383|        }
  122|    383|        if Int(index) < self.moduleImports.numberOfFunctions {
  123|      0|            return try Self.resolveType(
  124|      0|                importedFunctionTypes[Int(index)],
  125|      0|                typeSection: types
  126|      0|            )
  127|    383|        }
  128|    383|        return functions[Int(index) - self.moduleImports.numberOfFunctions].type
  129|    386|    }
$s7WasmKit6ModuleV11instantiate5store7importsAA8InstanceVAA5StoreC_AA7ImportsVtKF:
  137|  1.55k|    public func instantiate(store: Store, imports: Imports = [:]) throws -> Instance {
  138|  1.55k|        Instance(handle: try self.instantiateHandle(store: store, imports: imports), store: store)
  139|     65|    }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKF:
  143|  1.55k|    private func instantiateHandle(store: Store, imports: Imports) throws -> InternalInstance {
  144|  1.55k|        try ModuleValidator(module: self).validate()
  145|  1.53k|
  146|  1.53k|        // Steps 5-8.
  147|  1.53k|
  148|  1.53k|        // Step 9.
  149|  1.53k|        // Process `elem.init` evaluation during allocation
  150|  1.53k|
  151|  1.53k|        // Step 11.
  152|  1.53k|        let instance = try store.allocator.allocate(
  153|  1.53k|            module: self, engine: store.engine,
  154|  1.53k|            resourceLimiter: store.resourceLimiter,
  155|  1.53k|            imports: imports
  156|  1.53k|        )
  157|  1.46k|
  158|  1.46k|        if let nameSection = customSections.first(where: { $0.name == "name" }) {
  159|      0|            // FIXME?: Just ignore parsing error of name section for now.
  160|      0|            // Should emit warning instead of just discarding it?
  161|      0|            try? store.nameRegistry.register(instance: instance, nameSection: nameSection)
  162|      0|        }
  163|  1.46k|
  164|  1.46k|        let constEvalContext = ConstEvaluationContext(instance: instance, moduleImports: moduleImports)
  165|  1.46k|        // Step 12-13.
  166|  1.46k|
  167|  1.46k|        // Steps 14-15.
  168|  1.46k|        for element in elements {
  169|     47|            guard case let .active(tableIndex, offset) = element.mode else { continue }
  170|     15|            let table = try instance.tables[validating: Int(tableIndex)]
  171|      0|            let offsetValue = try offset.evaluate(
  172|      0|                context: constEvalContext,
  173|      0|                expectedType: .addressType(isMemory64: table.limits.isMemory64)
  174|      0|            )
  175|      0|            try table.withValue { table in
  176|      0|                guard let offset = offsetValue.maybeAddressOffset(table.limits.isMemory64) else {
  177|      0|                    throw ValidationError(
  178|      0|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: table.limits.isMemory64), got: offsetValue)
  179|      0|                    )
  180|      0|                }
  181|      0|                guard table.tableType.elementType == element.type else {
  182|      0|                    throw ValidationError(
  183|      0|                        .elementSegmentTypeMismatch(
  184|      0|                            elementType: element.type,
  185|      0|                            tableElementType: table.tableType.elementType
  186|      0|                        )
  187|      0|                    )
  188|      0|                }
  189|      0|                let references = try element.evaluateInits(context: constEvalContext)
  190|      0|                try table.initialize(
  191|      0|                    references, from: 0, to: Int(offset), count: references.count
  192|      0|                )
  193|      0|            }
  194|  1.45k|        }
  195|  1.45k|
  196|  1.45k|        // Step 16.
  197|  1.45k|        for case let .active(data) in data {
  198|     23|            let memory = try instance.memories[validating: Int(data.index)]
  199|     15|            let offsetValue = try data.offset.evaluate(
  200|     15|                context: constEvalContext,
  201|     15|                expectedType: .addressType(isMemory64: memory.limit.isMemory64)
  202|     15|            )
  203|     14|            try memory.withValue { memory in
  204|     14|                guard let offset = offsetValue.maybeAddressOffset(memory.limit.isMemory64) else {
  205|     14|                    throw ValidationError(
  206|     14|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: memory.limit.isMemory64), got: offsetValue)
  207|     14|                    )
  208|     14|                }
  209|     14|                try memory.write(offset: Int(offset), bytes: data.initializer)
  210|     14|            }
  211|  1.44k|        }
  212|  1.44k|
  213|  1.44k|        // Step 17.
  214|  1.44k|        if let startIndex = start {
  215|    381|            let startFunction = try instance.functions[validating: Int(startIndex)]
  216|    381|            _ = try startFunction.invoke([], store: store)
  217|  1.07k|        }
  218|  1.07k|
  219|  1.07k|        // Compile all functions eagerly if the engine is in eager compilation mode
  220|  1.07k|        if store.engine.configuration.compilationMode == .eager {
  221|  1.07k|            try instance.withValue {
  222|  1.07k|                try $0.compileAllFunctions(store: store)
  223|  1.07k|            }
  224|     65|        }
  225|     65|
  226|     65|        return instance
  227|  1.55k|    }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFSb0A6Parser13CustomSectionVXEfU_:
  158|    468|        if let nameSection = customSections.first(where: { $0.name == "name" }) {
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFyAA06MemoryR0VzKXEfU1_:
  203|      7|            try memory.withValue { memory in
  204|      7|                guard let offset = offsetValue.maybeAddressOffset(memory.limit.isMemory64) else {
  205|      0|                    throw ValidationError(
  206|      0|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: memory.limit.isMemory64), got: offsetValue)
  207|      0|                    )
  208|      7|                }
  209|      7|                try memory.write(offset: Int(offset), bytes: data.initializer)
  210|      5|            }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFyAKzKXEfU2_:
  221|  1.07k|            try instance.withValue {
  222|  1.07k|                try $0.compileAllFunctions(store: store)
  223|     65|            }
$s7WasmKit6ModuleV16internalMemoriess10ArraySliceVy0A6Parser6LimitsVGvg:
  235|  1.52k|    var internalMemories: ArraySlice<MemoryType> {
  236|  1.52k|        return memoryTypes[moduleImports.numberOfMemories...]
  237|  1.52k|    }
$s7WasmKit6ModuleV14internalTabless10ArraySliceVy0A6Parser9TableTypeVGvg:
  238|  1.52k|    var internalTables: ArraySlice<TableType> {
  239|  1.52k|        return tableTypes[moduleImports.numberOfTables...]
  240|  1.52k|    }

$s7WasmKit05parseA05bytes8featuresAA6ModuleVSays5UInt8VG_0A6Parser0A10FeatureSetVtKF:
   28|  3.77k|public func parseWasm(bytes: [UInt8], features: WasmFeatureSet = .default) throws -> Module {
   29|  3.77k|    let stream = StaticByteStream(bytes: bytes)
   30|  3.77k|    let module = try parseModule(stream: stream, features: features)
   31|  1.56k|    return module
   32|  3.77k|}
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlF:
   36|  3.77k|func parseModule<Stream: ByteStream>(stream: Stream, features: WasmFeatureSet = .default) throws -> Module {
   37|  3.77k|    var types: [FunctionType] = []
   38|  3.77k|    var typeIndices: [TypeIndex] = []
   39|  3.77k|    var codes: [Code] = []
   40|  3.77k|    var tables: [TableType] = []
   41|  3.77k|    var memories: [MemoryType] = []
   42|  3.77k|    var globals: [WasmParser.Global] = []
   43|  3.77k|    var elements: [ElementSegment] = []
   44|  3.77k|    var data: [DataSegment] = []
   45|  3.77k|    var start: FunctionIndex?
   46|  3.77k|    var imports: [Import] = []
   47|  3.77k|    var exports: [Export] = []
   48|  3.77k|    var customSections: [CustomSection] = []
   49|  3.77k|    var dataCount: UInt32?
   50|  3.77k|
   51|  3.77k|    var parser = WasmParser.Parser<Stream>(
   52|  3.77k|        stream: stream, features: features
   53|  3.77k|    )
   54|  3.77k|
   55|  13.0k|    while let payload = try parser.parseNext() {
   56|  13.0k|        switch payload {
   57|  13.0k|        case .header: break
   58|  13.0k|        case .customSection(let customSection):
   59|    793|            customSections.append(customSection)
   60|  13.0k|        case .typeSection(let typeSection):
   61|  1.54k|            types = typeSection
   62|  13.0k|        case .importSection(let importSection):
   63|    908|            imports = importSection
   64|  13.0k|        case .functionSection(let types):
   65|  1.47k|            typeIndices = types
   66|  13.0k|        case .tableSection(let tableSection):
   67|    337|            tables = tableSection.map(\.type)
   68|  13.0k|        case .memorySection(let memorySection):
   69|    708|            memories = memorySection.map(\.type)
   70|  13.0k|        case .globalSection(let globalSection):
   71|  1.21k|            globals = globalSection
   72|  13.0k|        case .exportSection(let exportSection):
   73|    377|            exports = exportSection
   74|  13.0k|        case .startSection(let functionIndex):
   75|    390|            start = functionIndex
   76|  13.0k|        case .elementSection(let elementSection):
   77|     35|            elements = elementSection
   78|  13.0k|        case .codeSection(let codeSection):
   79|  1.44k|            codes = codeSection
   80|  13.0k|        case .dataSection(let dataSection):
   81|     21|            data = dataSection
   82|  13.0k|        case .dataCount(let count):
   83|      7|            dataCount = count
   84|  13.0k|        }
   85|  13.0k|    }
   86|  1.57k|
   87|  1.57k|    guard typeIndices.count == codes.count else {
   88|      2|        throw ValidationError(
   89|      2|            .inconsistentFunctionAndCodeLength(
   90|      2|                functionCount: typeIndices.count,
   91|      2|                codeCount: codes.count
   92|      2|            ))
   93|  1.56k|    }
   94|  1.56k|
   95|  1.56k|    if let dataCount = dataCount, dataCount != UInt32(data.count) {
   96|      3|        throw ValidationError(
   97|      3|            .inconsistentDataCountAndDataSectionLength(
   98|      3|                dataCount: dataCount,
   99|      3|                dataSection: data.count
  100|      3|            ))
  101|  1.56k|    }
  102|  1.56k|
  103|  1.56k|    let functions = try codes.enumerated().map { index, code in
  104|  1.56k|        // SAFETY: The number of typeIndices is guaranteed to be the same as the number of codes
  105|  1.56k|        let funcTypeIndex = typeIndices[index]
  106|  1.56k|        let funcType = try Module.resolveType(funcTypeIndex, typeSection: types)
  107|  1.56k|        return GuestFunction(
  108|  1.56k|            type: funcType,
  109|  1.56k|            code: code
  110|  1.56k|        )
  111|  1.56k|    }
  112|  1.56k|
  113|  1.56k|    return Module(
  114|  1.56k|        types: types,
  115|  1.56k|        functions: functions,
  116|  1.56k|        elements: elements,
  117|  1.56k|        data: data,
  118|  1.56k|        start: start,
  119|  1.56k|        imports: imports,
  120|  1.56k|        exports: exports,
  121|  1.56k|        globals: globals,
  122|  1.56k|        memories: memories,
  123|  1.56k|        tables: tables,
  124|  1.56k|        customSections: customSections,
  125|  1.56k|        features: features,
  126|  1.56k|        dataCount: dataCount
  127|  1.56k|    )
  128|  3.77k|}
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAG9TableTypeVAG0L0Vcfu_:
   67|    336|            tables = tableSection.map(\.type)
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAG6LimitsVAG6MemoryVcfu0_:
   69|    768|            memories = memorySection.map(\.type)
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAA13GuestFunctionVSi_AG4CodeVtKXEfU_:
  103|  4.27k|    let functions = try codes.enumerated().map { index, code in
  104|  4.27k|        // SAFETY: The number of typeIndices is guaranteed to be the same as the number of codes
  105|  4.27k|        let funcTypeIndex = typeIndices[index]
  106|  4.27k|        let funcType = try Module.resolveType(funcTypeIndex, typeSection: types)
  107|  4.27k|        return GuestFunction(
  108|  4.27k|            type: funcType,
  109|  4.27k|            code: code
  110|  4.27k|        )
  111|  4.27k|    }

$s7WasmKit13ISeqAllocatorC7buffers021_3C1F9FC595E9AC192A47I10B121D811E8LLSaySwGvpfi:
    6|  1.56k|    private var buffers: [UnsafeMutableRawBufferPointer] = []
$s7WasmKit13ISeqAllocatorC15allocateBrTable8capacitySryAA11InstructionO0fG7OperandV5EntryVGSi_tF:
    8|    804|    func allocateBrTable(capacity: Int) -> UnsafeMutableBufferPointer<Instruction.BrTableOperand.Entry> {
    9|    804|        assert(_isPOD(Instruction.BrTableOperand.Entry.self), "Instruction.BrTableOperand.Entry must be POD")
   10|    804|        let buffer = UnsafeMutableBufferPointer<Instruction.BrTableOperand.Entry>.allocate(capacity: capacity)
   11|    804|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   12|    804|        return buffer
   13|    804|    }
$s7WasmKit13ISeqAllocatorC15allocateBrTable8capacitySryAA11InstructionO0fG7OperandV5EntryVGSi_tFSbyXEfu_:
    9|    804|        assert(_isPOD(Instruction.BrTableOperand.Entry.self), "Instruction.BrTableOperand.Entry must be POD")
$s7WasmKit13ISeqAllocatorC17allocateConstantsySRyAA12UntypedValueVGSayAFGF:
   15|    882|    func allocateConstants(_ slots: [UntypedValue]) -> UnsafeBufferPointer<UntypedValue> {
   16|    882|        let buffer = UnsafeMutableBufferPointer<UntypedValue>.allocate(capacity: slots.count)
   17|    882|        _ = buffer.initialize(fromContentsOf: slots)
   18|    882|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   19|    882|        return UnsafeBufferPointer(buffer)
   20|    882|    }
$s7WasmKit13ISeqAllocatorC20allocateInstructions8capacitySrys6UInt64VGSi_tF:
   22|    882|    func allocateInstructions(capacity: Int) -> UnsafeMutableBufferPointer<UInt64> {
   23|    882|        assert(_isPOD(Instruction.self), "Instruction must be POD")
   24|    882|        let buffer = UnsafeMutableBufferPointer<UInt64>.allocate(capacity: capacity)
   25|    882|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   26|    882|        return buffer
   27|    882|    }
$s7WasmKit13ISeqAllocatorC20allocateInstructions8capacitySrys6UInt64VGSi_tFSbyXEfu_:
   23|    882|        assert(_isPOD(Instruction.self), "Instruction must be POD")
$s7WasmKit13ISeqAllocatorCfd:
   29|  1.56k|    deinit {
   30|  2.56k|        for buffer in buffers {
   31|  2.56k|            buffer.deallocate()
   32|  2.56k|        }
   33|  1.56k|    }
$s7WasmKit17TranslatorContextPAAE11addressType11memoryIndex0A5Types05ValueF0Os6UInt32V_tKF:
   53|    152|    func addressType(memoryIndex: MemoryIndex) throws -> ValueType {
   54|    152|        return ValueType.addressType(isMemory64: try isMemory64(memoryIndex: memoryIndex))
   55|    152|    }
$s7WasmKit17TranslatorContextPAAE11addressType10tableIndex0A5Types05ValueF0Os6UInt32V_tKF:
   56|    502|    func addressType(tableIndex: TableIndex) throws -> ValueType {
   57|    502|        return ValueType.addressType(isMemory64: try isMemory64(tableIndex: tableIndex))
   58|    502|    }
$s7WasmKit17TranslatorContextPAAE22validateElementSegmentyys6UInt32VKF:
   59|      1|    func validateElementSegment(_ index: ElementIndex) throws {
   60|      1|        _ = try elementType(index)
   61|      0|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE11resolveTypey0A5Types08FunctionG0Vs6UInt32VKF:
   65|    220|    func resolveType(_ index: TypeIndex) throws -> FunctionType {
   66|    220|        guard Int(index) < self.types.count else {
   67|      1|            throw ValidationError(.indexOutOfBounds("type", index, max: UInt32(self.types.count)))
   68|    219|        }
   69|    219|        return self.types[Int(index)]
   70|    220|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE16resolveBlockTypey0A5Types08FunctionH0V0A6Parser0gH0OKF:
   71|  7.12k|    func resolveBlockType(_ blockType: BlockType) throws -> FunctionType {
   72|  7.12k|        try FunctionType(blockType: blockType, typeSection: self.types)
   73|  7.08k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE12functionType_8interner0A5Types08FunctionG0Vs6UInt32V_AA8InternerCyAJGtKF:
   74|  2.53k|    func functionType(_ index: FunctionIndex, interner: Interner<FunctionType>) throws -> FunctionType {
   75|  2.53k|        return try interner.resolve(self.functions[validating: Int(index)].type)
   76|  2.53k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10globalTypey0A5Types05ValueG0Os6UInt32VKF:
   77|  15.6k|    func globalType(_ index: GlobalIndex) throws -> ValueType {
   78|  15.6k|        return try self.globals[validating: Int(index)].globalType.valueType
   79|  15.6k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10isMemory6411memoryIndexSbs6UInt32V_tKF:
   80|  21.7k|    func isMemory64(memoryIndex index: MemoryIndex) throws -> Bool {
   81|  21.7k|        return try self.memories[validating: Int(index)].limit.isMemory64
   82|  21.7k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10isMemory6410tableIndexSbs6UInt32V_tKF:
   83|    618|    func isMemory64(tableIndex index: TableIndex) throws -> Bool {
   84|    618|        return try self.tables[validating: Int(index)].limits.isMemory64
   85|    618|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9tableTypey0A6Parser05TableG0Vs6UInt32VKF:
   86|    386|    func tableType(_ index: TableIndex) throws -> TableType {
   87|    386|        return try self.tables[validating: Int(index)].tableType
   88|    386|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE11elementTypey0A5Types09ReferenceG0Os6UInt32VKF:
   89|      3|    func elementType(_ index: ElementIndex) throws -> ReferenceType {
   90|      3|        try self.elementSegments[validating: Int(index)].type
   91|      0|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE13resolveCalleeyAA16InternalFunctionVSgs6UInt32VF:
   93|  2.51k|    func resolveCallee(_ index: FunctionIndex) -> InternalFunction? {
   94|  2.51k|        return self.functions[Int(index)]
   95|  2.51k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE13resolveGlobalyACyAA0gC0VGSgs6UInt32VF:
   96|  15.5k|    func resolveGlobal(_ index: GlobalIndex) -> InternalGlobal? {
   97|  15.5k|        return self.globals[Int(index)]
   98|  15.5k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE06isSameE0ySbACyAEGF:
   99|  2.24k|    func isSameInstance(_ instance: InternalInstance) -> Bool {
  100|  2.24k|        return instance == self
  101|  2.24k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE21validateFunctionIndexyys6UInt32VKF:
  102|      5|    func validateFunctionIndex(_ index: FunctionIndex) throws {
  103|      5|        let function = try self.functions[validating: Int(index)]
  104|      4|        guard self.functionRefs.contains(function) else {
  105|      1|            throw ValidationError(.functionIndexNotDeclared(index: index))
  106|      3|        }
  107|      3|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9dataCounts6UInt32VSgvg:
  108|      2|    var dataCount: UInt32? {
  109|      2|        self.withValue { $0.dataCount }
  110|      2|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9dataCounts6UInt32VSgvgAiEzXEfU_:
  109|      2|        self.withValue { $0.dataCount }
$s7WasmKit17FrameHeaderLayoutV4typeAC0A5Types12FunctionTypeV_tcfC:
  183|  1.92k|    init(type: FunctionType) {
  184|  1.92k|        self.type = type
  185|  1.92k|        self.size = Self.size(of: type)
  186|  1.92k|    }
$s7WasmKit17FrameHeaderLayoutV8paramRegys5Int16VSiF:
  188|  3.01k|    func paramReg(_ index: Int) -> VReg {
  189|  3.01k|        VReg(index) - size
  190|  3.01k|    }
$s7WasmKit17FrameHeaderLayoutV9returnRegys5Int16VSiF:
  192|    378|    func returnReg(_ index: Int) -> VReg {
  193|    378|        return VReg(index) - size
  194|    378|    }
$s7WasmKit17FrameHeaderLayoutV4size2ofs5Int16V0A5Types12FunctionTypeV_tFZ:
  196|  5.01k|    internal static func size(of: FunctionType) -> VReg {
  197|  5.01k|        size(parameters: of.parameters.count, results: of.results.count)
  198|  5.01k|    }
$s7WasmKit17FrameHeaderLayoutV4size10parameters7resultss5Int16VSi_SitFZ:
  199|  5.01k|    internal static func size(parameters: Int, results: Int) -> VReg {
  200|  5.01k|        VReg(max(parameters, results)) + VReg(numberOfSavingSlots)
  201|  5.01k|    }
$s7WasmKit17FrameHeaderLayoutV19numberOfSavingSlotsSivgZ:
  203|  5.39k|    internal static var numberOfSavingSlots: Int { 3 }
$s7WasmKit11StackLayoutV12stackRegBases5Int16Vvg:
  211|  1.91k|    var stackRegBase: VReg {
  212|  1.91k|        return VReg(numberOfLocals + constantSlotSize)
  213|  1.91k|    }
$s7WasmKit11StackLayoutV4type14numberOfLocals8codeSizeAC0A5Types12FunctionTypeV_S2itKcfC:
  215|  1.92k|    init(type: FunctionType, numberOfLocals: Int, codeSize: Int) throws {
  216|  1.92k|        self.frameHeader = FrameHeaderLayout(type: type)
  217|  1.92k|        self.numberOfLocals = numberOfLocals
  218|  1.92k|        // The number of constant slots is determined by the code size
  219|  1.92k|        // This is a heuristic value to balance the fast access to constants
  220|  1.92k|        // and the size of stack frame. Cap the slot size to avoid size explosion.
  221|  1.92k|        self.constantSlotSize = min(max(codeSize / 20, 4), 128)
  222|  1.92k|        let (maxSlots, overflow) = self.constantSlotSize.addingReportingOverflow(numberOfLocals)
  223|  1.92k|        guard !overflow, maxSlots < VReg.max else {
  224|      1|            throw TranslationError("The number of constant slots overflows")
  225|  1.91k|        }
  226|  1.91k|    }
$s7WasmKit11StackLayoutV8localRegys5Int16Vs6UInt32VF:
  228|  11.7k|    func localReg(_ index: LocalIndex) -> VReg {
  229|  11.7k|        if isParameter(index) {
  230|  3.01k|            return frameHeader.paramReg(Int(index))
  231|  8.72k|        } else {
  232|  8.72k|            return VReg(index) - VReg(frameHeader.type.parameters.count)
  233|  8.72k|        }
  234|  11.7k|    }
$s7WasmKit11StackLayoutV11isParameterySbs6UInt32VF:
  236|  11.7k|    func isParameter(_ index: LocalIndex) -> Bool {
  237|  11.7k|        index < frameHeader.type.parameters.count
  238|  11.7k|    }
$s7WasmKit11StackLayoutV8constRegys5Int16VSiF:
  240|  15.0k|    func constReg(_ index: Int) -> VReg {
  241|  15.0k|        return VReg(numberOfLocals + index)
  242|  15.0k|    }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV4KindO5blockAIyx___GvgZ:
  300|  2.84k|                static var block: Kind { .block(root: false) }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9reachableSbvpfi:
  308|  8.99k|            var reachable: Bool = true
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9copyTypesSay0aI09ValueTypeOGvg:
  310|  32.6k|            var copyTypes: [ValueType] {
  311|  32.6k|                switch self.kind {
  312|  32.6k|                case .block, .if:
  313|  23.4k|                    return blockType.results
  314|  32.6k|                case .loop:
  315|  9.16k|                    return blockType.parameters
  316|  32.6k|                }
  317|  32.6k|            }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9copyCounts6UInt16Vvg:
  318|  21.0k|            var copyCount: UInt16 {
  319|  21.0k|                return UInt16(copyTypes.count)
  320|  21.0k|            }
$s7WasmKit21InstructionTranslatorV12ControlStackV6frames021_3C1F9FC595E9AC192A47K10B121D811E8LLSayAE0E5FrameVyx__GGvpfi:
  323|  1.92k|        private var frames: [ControlFrame] = []
$s7WasmKit21InstructionTranslatorV12ControlStackV14numberOfFramesSivg:
  325|    914|        var numberOfFrames: Int { frames.count }
$s7WasmKit21InstructionTranslatorV12ControlStackV9pushFrameyyAE0eH0Vyx__GF:
  327|  9.34k|        mutating func pushFrame(_ frame: ControlFrame) {
  328|  9.34k|            self.frames.append(frame)
  329|  9.34k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV8popFrameAE0eH0Vyx__GSgyF:
  331|  3.36k|        mutating func popFrame() -> ControlFrame? {
  332|  3.36k|            self.frames.popLast()
  333|  3.36k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV15markUnreachableyyKF:
  335|  19.9k|        mutating func markUnreachable() throws {
  336|  19.9k|            try setReachability(false)
  337|  19.9k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV17resetReachabilityyyKF:
  338|    350|        mutating func resetReachability() throws {
  339|    350|            try setReachability(true)
  340|    350|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV15setReachability021_3C1F9FC595E9AC192A47L10B121D811E8LLyySbKF:
  342|  20.3k|        private mutating func setReachability(_ value: Bool) throws {
  343|  20.3k|            guard !self.frames.isEmpty else {
  344|      0|                throw ValidationError(.controlStackEmpty)
  345|  20.3k|            }
  346|  20.3k|            self.frames[self.frames.count - 1].reachable = value
  347|  20.3k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV12currentFrameAE0eH0Vyx__GyKF:
  349|   172k|        func currentFrame() throws -> ControlFrame {
  350|   172k|            guard let frame = self.frames.last else {
  351|      0|                throw ValidationError(.controlStackEmpty)
  352|   172k|            }
  353|   172k|            return frame
  354|   172k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV12branchTarget13relativeDepthAE0E5FrameVyx__Gs6UInt32V_tKF:
  356|  12.1k|        func branchTarget(relativeDepth: UInt32) throws -> ControlFrame {
  357|  12.1k|            let index = frames.count - 1 - Int(relativeDepth)
  358|  12.1k|            guard frames.indices.contains(index) else {
  359|     16|                throw ValidationError(.relativeDepthOutOfRange(relativeDepth: relativeDepth))
  360|  12.1k|            }
  361|  12.1k|            return frames[index]
  362|  12.1k|        }
$s7WasmKit21InstructionTranslatorV16MetaValueOnStackO4typeAC0eF0Oyx_Gvg:
  375|   114k|        var type: MetaValue {
  376|   114k|            switch self {
  377|   114k|            case .local(let type, _): return .some(type)
  378|   114k|            case .stack(let type): return type
  379|   114k|            case .const(let type, _): return .some(type)
  380|   114k|            }
  381|   114k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV6values021_3C1F9FC595E9AC192A47K10B121D811E8LLSayAC04Metae2OnF0Oyx_GGvpfi:
  391|  1.91k|        private var values: [MetaValueOnStack] = []
$s7WasmKit21InstructionTranslatorV10ValueStackV9maxHeightSivpfi:
  393|  1.91k|        private(set) var maxHeight: Int = 0
$s7WasmKit21InstructionTranslatorV10ValueStackV6heightSivg:
  394|   555k|        var height: Int { values.count }
$s7WasmKit21InstructionTranslatorV10ValueStackV11stackLayoutAEyx_GAA0fH0V_tcfC:
  398|  1.91k|        init(stackLayout: StackLayout) {
  399|  1.91k|            self.stackRegBase = stackLayout.stackRegBase
  400|  1.91k|            self.stackLayout = stackLayout
  401|  1.91k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16V0A5Types0E4TypeOF:
  403|   110k|        mutating func push(_ value: ValueType) -> VReg {
  404|   110k|            push(.some(value))
  405|   110k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16VAC04MetaE0Oyx_GF:
  406|   111k|        mutating func push(_ value: MetaValue) -> VReg {
  407|   111k|            // Record the maximum height of the stack we have seen
  408|   111k|            maxHeight = max(maxHeight, height)
  409|   111k|            let usedRegister = self.values.count
  410|   111k|            self.values.append(.stack(value))
  411|   111k|            assert(height < UInt16.max)
  412|   111k|            return stackRegBase + VReg(usedRegister)
  413|   111k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16VAC04MetaE0Oyx_GFSbyXEfu_:
  411|   111k|            assert(height < UInt16.max)
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushLocal_6localsys6UInt32V_AC6LocalsVyx_GztKF:
  414|  6.34k|        mutating func pushLocal(_ localIndex: LocalIndex, locals: inout Locals) throws {
  415|  6.34k|            let type = try locals.type(of: localIndex)
  416|  6.34k|            self.values.append(.local(type, localIndex))
  417|  6.34k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushConst_4typeySi_0A5Types0E4TypeOtF:
  418|  18.8k|        mutating func pushConst(_ index: Int, type: ValueType) {
  419|  18.8k|            assert(index < stackLayout.constantSlotSize)
  420|  18.8k|            self.values.append(.const(type, index))
  421|  18.8k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushConst_4typeySi_0A5Types0E4TypeOtFSbyXEfu_:
  419|  18.8k|            assert(index < stackLayout.constantSlotSize)
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveLocalsOnF0ySays5Int16VGs6UInt32VF:
  422|  6.02k|        mutating func preserveLocalsOnStack(_ localIndex: LocalIndex) -> [VReg] {
  423|  6.02k|            var copyTo: [VReg] = []
  424|  18.7k|            for i in 0..<values.count {
  425|  18.7k|                guard case .local(let type, localIndex) = self.values[i] else { continue }
  426|    205|                self.values[i] = .stack(.some(type))
  427|    205|                copyTo.append(stackRegBase + VReg(i))
  428|  6.02k|            }
  429|  6.02k|            return copyTo
  430|  6.02k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveLocalsOnF05depthSays6UInt32V6source_s5Int16V2totGSi_tF:
  432|  19.0k|        mutating func preserveLocalsOnStack(depth: Int) -> [(source: LocalIndex, to: VReg)] {
  433|  19.0k|            var copies: [(source: LocalIndex, to: VReg)] = []
  434|  26.4k|            for offset in 0..<min(depth, self.values.count) {
  435|  26.4k|                let valueIndex = self.values.count - 1 - offset
  436|  26.4k|                let value = self.values[valueIndex]
  437|  26.4k|                guard case .local(let type, let localIndex) = value else { continue }
  438|    499|                self.values[valueIndex] = .stack(.some(type))
  439|    499|                copies.append((localIndex, self.stackRegBase + VReg(valueIndex)))
  440|  19.0k|            }
  441|  19.0k|            return copies
  442|  19.0k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveConstsOnF05depthSays5Int16V6source_AI2totGSi_tF:
  444|  15.1k|        mutating func preserveConstsOnStack(depth: Int) -> [(source: VReg, to: VReg)] {
  445|  15.1k|            var copies: [(source: VReg, to: VReg)] = []
  446|  15.1k|            for offset in 0..<min(depth, self.values.count) {
  447|  4.57k|                let valueIndex = self.values.count - 1 - offset
  448|  4.57k|                let value = self.values[valueIndex]
  449|  4.57k|                guard case .const(let type, let index) = value else { continue }
  450|  1.29k|                self.values[valueIndex] = .stack(.some(type))
  451|  1.29k|                copies.append((stackLayout.constReg(index), self.stackRegBase + VReg(valueIndex)))
  452|  15.1k|            }
  453|  15.1k|            return copies
  454|  15.1k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV8peekType5depthAC04MetaE0Oyx_GSi_tF:
  460|    397|        func peekType(depth: Int) -> MetaValue {
  461|    397|            return self.values[height - 1 - depth].type
  462|    397|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV04makeE6Source021_3C1F9FC595E9AC192A47L10B121D811E8LLyAC0eH0Oyx_GAC04Metae2OnF0Oyx_GF:
  464|   113k|        private func makeValueSource(_ value: MetaValueOnStack) -> ValueSource {
  465|   113k|            let source: ValueSource
  466|   113k|            switch value {
  467|   113k|            case .local(_, let localIndex):
  468|  5.01k|                source = .local(localIndex)
  469|   113k|            case .stack:
  470|  94.3k|                source = .vreg(stackRegBase + VReg(height))
  471|   113k|            case .const(let type, let index):
  472|  14.5k|                source = .const(index, type)
  473|   113k|            }
  474|   113k|            return source
  475|   113k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV3popAC04MetaE0Oyx_G_AC0E6SourceOyx_GtyKF:
  477|   113k|        mutating func pop() throws -> (MetaValue, ValueSource) {
  478|   113k|            guard let value = self.values.popLast() else {
  479|      2|                throw TranslationError("Expected a value on stack but it's empty")
  480|   113k|            }
  481|   113k|            let source = makeValueSource(value)
  482|   113k|            return (value.type, source)
  483|   113k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV3popyAC0E6SourceOyx_G0A5Types0E4TypeOKF:
  484|   113k|        mutating func pop(_ expected: ValueType) throws -> ValueSource {
  485|   113k|            let (value, register) = try pop()
  486|   113k|            switch value {
  487|   113k|            case .some(let actual):
  488|   112k|                guard actual == expected else {
  489|    412|                    throw TranslationError("Expected \(expected) on the stack top but got \(actual)")
  490|    412|                }
  491|   113k|            case .unknown: break  // OK
  492|   113k|            }
  493|   113k|            return register
  494|   113k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV6popRefAC0E6SourceOyx_GyKF:
  495|     18|        mutating func popRef() throws -> ValueSource {
  496|     18|            let (value, register) = try pop()
  497|     16|            switch value {
  498|     16|            case .some(let actual):
  499|      6|                guard case .ref = actual else {
  500|      5|                    throw TranslationError("Expected reference value on the stack top but got \(actual)")
  501|      5|                }
  502|     16|            case .unknown: break  // OK
  503|     16|            }
  504|     11|            return register
  505|     18|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV8truncate6heightySi_tKF:
  506|  19.9k|        mutating func truncate(height: Int) throws {
  507|  19.9k|            guard height <= self.height else {
  508|      0|                throw TranslationError("Truncating to \(height) but the stack height is \(self.height)")
  509|  19.9k|            }
  510|  37.5k|            while height != self.height {
  511|  17.5k|                guard self.values.popLast() != nil else {
  512|      0|                    throw TranslationError("Internal consistency error: Stack height is \(self.height) but failed to pop")
  513|  17.5k|                }
  514|  19.9k|            }
  515|  19.9k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV9LabelUserV11descriptionSSvg:
  544|     20|            var description: String {
  545|     20|                "LabelUser:\(sourceLine)"
  546|     20|            }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6labelsSayAF10LabelEntryOyx__GGvpfi:
  559|  1.92k|        private var labels: [LabelEntry] = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV14unpinnedLabelsShySiGvpfi:
  560|  1.92k|        private var unpinnedLabels: Set<LabelRef> = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12instructionsSays6UInt64VGvpfi:
  561|  1.92k|        private var instructions: [UInt64] = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV11insertingPCAA18MetaProgramCounterAELLVvg:
  563|   142k|        fileprivate var insertingPC: MetaProgramCounter {
  564|   142k|            MetaProgramCounter(offsetFromHead: instructions.count)
  565|   142k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV19engineConfigurationAFyx_GAA06EngineQ0V_tcfC:
  568|  1.92k|        init(engineConfiguration: EngineConfiguration) {
  569|  1.92k|            self.engineConfiguration = engineConfiguration
  570|  1.92k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV20assertDanglingLabelsyyKF:
  572|    888|        func assertDanglingLabels() throws {
  573|    888|            for ref in unpinnedLabels {
  574|     62|                let label = labels[ref]
  575|     62|                switch label {
  576|     62|                case .unpinned(let users):
  577|     62|                    guard !users.isEmpty else { continue }
  578|      6|                    throw TranslationError("Internal consistency error: Label (#\(ref)) is used but not pinned at finalization-time: \(users)")
  579|     62|                case .pinned: break  // unreachable in theory
  580|     62|                }
  581|    882|            }
  582|    882|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV5traceyySSyXKF:
  584|   400k|        func trace(_ message: @autoclosure () -> String) {
  585|       |            #if WASMKIT_TRANSLATOR_TRACE
  586|       |                print(message())
  587|       |            #endif
  588|   400k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6assign2at_ySi_AA0C0OtF:
  590|  5.20k|        private mutating func assign(at index: Int, _ instruction: Instruction) {
  591|  5.20k|            trace("assign: \(instruction)")
  592|  5.20k|            let headSlot = instruction.headSlot(threadingModel: engineConfiguration.threadingModel)
  593|  5.20k|            trace("        [\(index)] = 0x\(String(headSlot, radix: 16))")
  594|  5.20k|            self.instructions[index] = headSlot
  595|  5.20k|            if let immediate = instruction.rawImmediate {
  596|  5.20k|                var slots: [CodeSlot] = []
  597|  5.20k|                immediate.emit(to: { slots.append($0) })
  598|  5.22k|                for (i, slot) in slots.enumerated() {
  599|  5.22k|                    let slotIndex = index + 1 + i
  600|  5.22k|                    trace("        [\(slotIndex)] = 0x\(String(slot, radix: 16))")
  601|  5.22k|                    self.instructions[slotIndex] = slot
  602|  5.22k|                }
  603|  5.20k|            }
  604|  5.20k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6assign2at_ySi_AA0C0OtFys6UInt64VcfU_:
  597|  5.22k|                immediate.emit(to: { slots.append($0) })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV17resetLastEmissionyyF:
  606|   135k|        mutating func resetLastEmission() {
  607|   135k|            lastEmission = nil
  608|   135k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV010relinkLastC6ResultySbs5Int16VF:
  610|    792|        mutating func relinkLastInstructionResult(_ newResult: VReg) -> Bool {
  611|    792|            guard let lastEmission = self.lastEmission,
  612|    792|                let resultRelink = lastEmission.resultRelink
  613|    792|            else { return false }
  614|    564|            let newInstruction = resultRelink(newResult)
  615|    564|            assign(at: lastEmission.position.offsetFromHead, newInstruction)
  616|    564|            resetLastEmission()
  617|    564|            return true
  618|    792|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8emitSlotyys6UInt64VF:
  620|   264k|        private mutating func emitSlot(_ codeSlot: CodeSlot) {
  621|   264k|            trace("emitSlot[\(instructions.count)]: 0x\(String(codeSlot, radix: 16))")
  622|   264k|            self.instructions.append(codeSlot)
  623|   264k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8finalizeSays6UInt64VGyF:
  631|    882|        func finalize() -> [UInt64] {
  632|    882|            return instructions
  633|    882|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV4emit_12resultRelinkyAA0C0O_AJs5Int16VcSgtF:
  635|   120k|        mutating func emit(_ instruction: Instruction, resultRelink: ResultRelink? = nil) {
  636|   120k|            self.lastEmission = LastEmission(position: insertingPC, resultRelink: resultRelink)
  637|   120k|            trace("emitInstruction: \(instruction)")
  638|   120k|            emitSlot(instruction.headSlot(threadingModel: engineConfiguration.threadingModel))
  639|   120k|            if let immediate = instruction.rawImmediate {
  640|   101k|                var slots: [CodeSlot] = []
  641|   101k|                immediate.emit(to: { slots.append($0) })
  642|   130k|                for slot in slots { emitSlot(slot) }
  643|   101k|            }
  644|   120k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV4emit_12resultRelinkyAA0C0O_AJs5Int16VcSgtFys6UInt64VcfU_:
  641|   130k|                immediate.emit(to: { slots.append($0) })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8putLabelSiyF:
  646|  3.11k|        mutating func putLabel() -> LabelRef {
  647|  3.11k|            let ref = labels.count
  648|  3.11k|            self.labels.append(.pinned(insertingPC))
  649|  3.11k|            return ref
  650|  3.11k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV10allocLabelSiyF:
  652|  7.22k|        mutating func allocLabel() -> LabelRef {
  653|  7.22k|            let ref = labels.count
  654|  7.22k|            self.labels.append(.unpinned(users: []))
  655|  7.22k|            self.unpinnedLabels.insert(ref)
  656|  7.22k|            return ref
  657|  7.22k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12resolveLabelyAA18MetaProgramCounterAELLVSgSiF:
  659|    318|        fileprivate func resolveLabel(_ ref: LabelRef) -> MetaProgramCounter? {
  660|    318|            let entry = self.labels[ref]
  661|    318|            switch entry {
  662|    318|            case .pinned(let pc): return pc
  663|    318|            case .unpinned: return nil
  664|    318|            }
  665|    318|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8pinLabel_2pcySi_AA18MetaProgramCounterAELLVtKF:
  667|  2.87k|        fileprivate mutating func pinLabel(_ ref: LabelRef, pc: MetaProgramCounter) throws {
  668|  2.87k|            switch self.labels[ref] {
  669|  2.87k|            case .pinned(let oldPC):
  670|      8|                throw TranslationError("Internal consistency error: Label \(ref) is already pinned at \(oldPC), but tried to pin at \(pc) again")
  671|  2.87k|            case .unpinned(let users):
  672|  2.86k|                self.labels[ref] = .pinned(pc)
  673|  2.86k|                self.unpinnedLabels.remove(ref)
  674|  3.68k|                for user in users {
  675|  3.68k|                    switch user.action {
  676|  3.68k|                    case let .emitInstruction(insertAt, source, make):
  677|  2.85k|                        assign(at: insertAt.offsetFromHead, make(self, source, pc))
  678|  3.68k|                    case let .fillBrTableEntry(brTable, index, make):
  679|    826|                        brTable[index] = make(self, pc)
  680|  3.68k|                    }
  681|  3.68k|                }
  682|  2.87k|            }
  683|  2.86k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12pinLabelHereyySiKF:
  685|  2.87k|        mutating func pinLabelHere(_ ref: LabelRef) throws {
  686|  2.87k|            try pinLabel(ref, pc: insertingPC)
  687|  2.86k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lF:
  704|  6.53k|        ) {
  705|  6.53k|            let insertAt = insertingPC
  706|  6.53k|
  707|  6.53k|            // Emit dummy instruction to be replaced later
  708|  6.53k|            emitSlot(0)  // dummy opcode
  709|  6.53k|            var immediateSlots = 0
  710|  6.53k|            Immediate.emit(to: { _ in immediateSlots += 1 })
  711|  6.53k|            for _ in 0..<immediateSlots { emitSlot(0) }
  712|  6.53k|
  713|  6.53k|            // Schedule actual emission
  714|  6.53k|            emitWithLabel(
  715|  6.53k|                ref, insertAt: insertAt, line: line,
  716|  6.53k|                make: {
  717|  6.53k|                    makeInstruction(make($0, $1, $2))
  718|  6.53k|                })
  719|  6.53k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lFys6UInt64Vqd__XEcfU_:
  710|  6.53k|            Immediate.emit(to: { _ in immediateSlots += 1 })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lFAkL_A2NtcfU0_:
  716|  4.64k|                make: {
  717|  4.64k|                    makeInstruction(make($0, $1, $2))
  718|  4.64k|                })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel_8insertAt4line4makeySi_AA18MetaProgramCounterAELLVSuAA0C0OAFyx_G_A2LtctF:
  729|  6.53k|        ) {
  730|  6.53k|            switch self.labels[ref] {
  731|  6.53k|            case .pinned(let pc):
  732|  1.78k|                assign(at: insertAt.offsetFromHead, make(self, insertingPC, pc))
  733|  6.53k|            case .unpinned(var users):
  734|  4.75k|                users.append(LabelUser(action: .emitInstruction(insertAt: insertAt, source: insertingPC, make), sourceLine: line))
  735|  4.75k|                self.labels[ref] = .unpinned(users: users)
  736|  6.53k|            }
  737|  6.53k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV16fillBrTableEntry_5table5index4line4makeySi_SryAA0C0O0qR7OperandV0S0VGSiSuAqFyx_G_AA18MetaProgramCounterAELLVtctF:
  750|  1.68k|        ) {
  751|  1.68k|            switch self.labels[ref] {
  752|  1.68k|            case .pinned(let pc):
  753|    476|                table[index] = make(self, pc)
  754|  1.68k|            case .unpinned(var users):
  755|  1.21k|                users.append(LabelUser(action: .fillBrTableEntry(buildingTable: table, index: index, make: make), sourceLine: line))
  756|  1.21k|                self.labels[ref] = .unpinned(users: users)
  757|  1.68k|            }
  758|  1.68k|        }
$s7WasmKit21InstructionTranslatorV6LocalsV4type2of0A5Types9ValueTypeOs6UInt32V_tKF:
  766|  12.3k|        func type(of localIndex: UInt32) throws -> ValueType {
  767|  12.3k|            guard Int(localIndex) < types.count else {
  768|      9|                throw TranslationError("Local index \(localIndex) is out of range")
  769|  12.3k|            }
  770|  12.3k|            return self.types[Int(localIndex)]
  771|  12.3k|        }
$s7WasmKit21InstructionTranslatorV10ConstSlotsV11stackLayoutAEyx_GAA05StackH0V_tcfC:
  779|  1.91k|        init(stackLayout: StackLayout) {
  780|  1.91k|            self.values = []
  781|  1.91k|            self.indexByValue = [:]
  782|  1.91k|            self.stackLayout = stackLayout
  783|  1.91k|        }
$s7WasmKit21InstructionTranslatorV10ConstSlotsV8allocateySiSg0A5Types5ValueOF:
  785|  20.2k|        mutating func allocate(_ value: Value) -> Int? {
  786|  20.2k|            let untyped = UntypedValue(value)
  787|  20.2k|            if let allocated = indexByValue[untyped] {
  788|  6.31k|                // NOTE: Share the same const slot for exactly the same bit pattern
  789|  6.31k|                // values even having different types
  790|  6.31k|                return allocated
  791|  13.9k|            }
  792|  13.9k|            guard values.count < stackLayout.constantSlotSize else { return nil }
  793|  12.4k|            let constSlotIndex = values.count
  794|  12.4k|            values.append(untyped)
  795|  12.4k|            indexByValue[untyped] = constSlotIndex
  796|  12.4k|            return constSlotIndex
  797|  20.2k|        }
$s7WasmKit21InstructionTranslatorV9allocator19engineConfiguration16funcTypeInterner6module4type6locals13functionIndex8codeSize12interceptingACyxGAA13ISeqAllocatorC_AA06EngineG0VAA0J0Cy0A5Types08FunctionI0VGxAVSayAT05ValueI0OGs6UInt32VSiSbtKcfC:
  826|  1.92k|    ) throws {
  827|  1.92k|        self.allocator = allocator
  828|  1.92k|        self.funcTypeInterner = funcTypeInterner
  829|  1.92k|        self.type = type
  830|  1.92k|        self.module = module
  831|  1.92k|        self.iseqBuilder = ISeqBuilder(engineConfiguration: engineConfiguration)
  832|  1.92k|        self.controlStack = ControlStack()
  833|  1.92k|        self.stackLayout = try StackLayout(
  834|  1.92k|            type: type,
  835|  1.92k|            numberOfLocals: locals.count,
  836|  1.92k|            codeSize: codeSize
  837|  1.92k|        )
  838|  1.91k|        self.valueStack = ValueStack(stackLayout: stackLayout)
  839|  1.91k|        self.locals = Locals(types: type.parameters + locals)
  840|  1.91k|        self.functionIndex = functionIndex
  841|  1.91k|        self.intercepting = intercepting
  842|  1.91k|        self.constantSlots = ConstSlots(stackLayout: stackLayout)
  843|  1.91k|        self.validator = InstructionValidator(context: module)
  844|  1.91k|
  845|  1.91k|        do {
  846|  1.91k|            let endLabel = self.iseqBuilder.allocLabel()
  847|  1.91k|            let rootFrame = ControlStack.ControlFrame(
  848|  1.91k|                blockType: type,
  849|  1.91k|                stackHeight: 0,
  850|  1.91k|                continuation: endLabel,
  851|  1.91k|                kind: .block(root: true)
  852|  1.91k|            )
  853|  1.91k|            self.controlStack.pushFrame(rootFrame)
  854|  1.91k|        }
  855|  1.91k|    }
$s7WasmKit21InstructionTranslatorV9returnReg021_3C1F9FC595E9AC192A47J10B121D811E8LLys5Int16VSiF:
  857|    378|    private func returnReg(_ index: Int) -> VReg {
  858|    378|        return stackLayout.frameHeader.returnReg(index)
  859|    378|    }
$s7WasmKit21InstructionTranslatorV8localReg021_3C1F9FC595E9AC192A47J10B121D811E8LLys5Int16Vs6UInt32VF:
  860|  6.74k|    private func localReg(_ index: LocalIndex) -> VReg {
  861|  6.74k|        return stackLayout.localReg(index)
  862|  6.74k|    }
$s7WasmKit21InstructionTranslatorV4emit021_3C1F9FC595E9AC192A47I10B121D811E8LL_12resultRelinkyAA0C0O_AHs5Int16VcSgtF:
  864|   115k|    private mutating func emit(_ instruction: Instruction, resultRelink: ISeqBuilder.ResultRelink? = nil) {
  865|   115k|        iseqBuilder.emit(instruction, resultRelink: resultRelink)
  866|   115k|    }
$s7WasmKit21InstructionTranslatorV13emitCopyStack021_3C1F9FC595E9AC192A47K10B121D811E8LL4from2toSbs5Int16V_AItF:
  869|  4.54k|    private mutating func emitCopyStack(from source: VReg, to dest: VReg) -> Bool {
  870|  4.54k|        guard source != dest else { return false }
  871|  4.32k|        emit(.copyStack(Instruction.CopyStackOperand(source: LVReg(source), dest: LVReg(dest))))
  872|  4.32k|        return true
  873|  4.54k|    }
$s7WasmKit21InstructionTranslatorV15preserveOnStack021_3C1F9FC595E9AC192A47K10B121D811E8LL5depthySi_tF:
  875|  15.1k|    private mutating func preserveOnStack(depth: Int) {
  876|  15.1k|        preserveLocalsOnStack(depth: depth)
  877|  15.1k|        for (source, dest) in valueStack.preserveConstsOnStack(depth: depth) {
  878|  1.29k|            emitCopyStack(from: source, to: dest)
  879|  15.1k|        }
  880|  15.1k|    }
$s7WasmKit21InstructionTranslatorV21preserveLocalsOnStack021_3C1F9FC595E9AC192A47L10B121D811E8LLyys6UInt32VF:
  882|  6.02k|    private mutating func preserveLocalsOnStack(_ localIndex: LocalIndex) {
  883|  6.02k|        for copyTo in valueStack.preserveLocalsOnStack(localIndex) {
  884|    205|            emitCopyStack(from: localReg(localIndex), to: copyTo)
  885|  6.02k|        }
  886|  6.02k|    }
$s7WasmKit21InstructionTranslatorV21preserveLocalsOnStack021_3C1F9FC595E9AC192A47L10B121D811E8LL5depthySi_tF:
  893|  19.0k|    private mutating func preserveLocalsOnStack(depth: Int) {
  894|  19.0k|        for (sourceLocal, destReg) in valueStack.preserveLocalsOnStack(depth: depth) {
  895|    499|            emitCopyStack(from: localReg(sourceLocal), to: destReg)
  896|  19.0k|        }
  897|  19.0k|    }
$s7WasmKit21InstructionTranslatorV14checkBeforePop021_3C1F9FC595E9AC192A47K10B121D811E8LL8typeHint5depth12controlFrameSb0A5Types9ValueTypeOSg_SiAC12ControlStackV0yU0Vyx__GtKF:
  903|   139k|    private func checkBeforePop(typeHint: ValueType?, depth: Int = 0, controlFrame: ControlStack.ControlFrame) throws -> Bool {
  904|   139k|        if _slowPath(valueStack.height - depth <= controlFrame.stackHeight) {
  905|  25.5k|            if controlFrame.reachable {
  906|     65|                let message: String
  907|     65|                if let typeHint {
  908|     60|                    message = "Expected a \(typeHint) value on stack but it's empty"
  909|     60|                } else {
  910|      5|                    message = "Expected a value on stack but it's empty"
  911|      5|                }
  912|     65|                throw TranslationError(message)
  913|  25.4k|            }
  914|  25.4k|            // Too many pop on unreachable path is ignored
  915|  25.4k|            return false
  916|   114k|        }
  917|   114k|        return true
  918|   139k|    }
$s7WasmKit21InstructionTranslatorV14checkBeforePop021_3C1F9FC595E9AC192A47K10B121D811E8LL8typeHint5depthSb0A5Types9ValueTypeOSg_SitKF:
  919|   137k|    private func checkBeforePop(typeHint: ValueType?, depth: Int = 0) throws -> Bool {
  920|   137k|        let controlFrame = try controlStack.currentFrame()
  921|   137k|        return try self.checkBeforePop(typeHint: typeHint, depth: depth, controlFrame: controlFrame)
  922|   137k|    }
$s7WasmKit21InstructionTranslatorV12ensureOnVReg021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VAC11ValueSourceOyx_GF:
  923|   109k|    private mutating func ensureOnVReg(_ source: ValueSource) -> VReg {
  924|   109k|        // TODO: Copy to stack if source is on preg
  925|   109k|        // let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
  926|   109k|        switch source {
  927|   109k|        case .vreg(let register):
  928|  90.3k|            return register
  929|   109k|        case .local(let index):
  930|  4.99k|            return stackLayout.localReg(index)
  931|   109k|        case .const(let index, _):
  932|  13.6k|            return stackLayout.constReg(index)
  933|   109k|        }
  934|   109k|    }
$s7WasmKit21InstructionTranslatorV13ensureOnStack021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VAC11ValueSourceOyx_GF:
  935|    398|    private mutating func ensureOnStack(_ source: ValueSource) -> VReg {
  936|    398|        let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
  937|    398|        switch source {
  938|    398|        case .vreg(let vReg):
  939|    237|            return vReg
  940|    398|        case .local(let localIndex):
  941|     12|            emitCopyStack(from: localReg(localIndex), to: copyTo)
  942|     12|            return copyTo
  943|    398|        case .const(let index, _):
  944|    149|            emitCopyStack(from: stackLayout.constReg(index), to: copyTo)
  945|    149|            return copyTo
  946|    398|        }
  947|    398|    }
$s7WasmKit21InstructionTranslatorV10popOperand021_3C1F9FC595E9AC192A47J10B121D811E8LLyAC11ValueSourceOyx_GSg0A5Types0P4TypeOKF:
  948|   129k|    private mutating func popOperand(_ type: ValueType) throws -> ValueSource? {
  949|   129k|        guard try checkBeforePop(typeHint: type) else {
  950|  23.5k|            return nil
  951|   105k|        }
  952|   105k|        iseqBuilder.resetLastEmission()
  953|   105k|        return try valueStack.pop(type)
  954|   129k|    }
$s7WasmKit21InstructionTranslatorV17popOnStackOperand021_3C1F9FC595E9AC192A47L10B121D811E8LLys5Int16VSg0A5Types9ValueTypeOKF:
  956|    441|    private mutating func popOnStackOperand(_ type: ValueType) throws -> VReg? {
  957|    441|        guard let op = try popOperand(type) else { return nil }
  958|    398|        return ensureOnStack(op)
  959|    441|    }
$s7WasmKit21InstructionTranslatorV14popVRegOperand021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VSg0A5Types9ValueTypeOKF:
  961|   124k|    private mutating func popVRegOperand(_ type: ValueType) throws -> VReg? {
  962|   124k|        guard let op = try popOperand(type) else { return nil }
  963|   103k|        return ensureOnVReg(op)
  964|   124k|    }
$s7WasmKit21InstructionTranslatorV13popAnyOperand021_3C1F9FC595E9AC192A47K10B121D811E8LLAC9MetaValueOyx_G_AC0R6SourceOyx_GSgtyKF:
  966|  1.77k|    private mutating func popAnyOperand() throws -> (MetaValue, ValueSource?) {
  967|  1.77k|        guard try checkBeforePop(typeHint: nil) else {
  968|  1.38k|            return (.unknown, nil)
  969|  1.38k|        }
  970|    384|        iseqBuilder.resetLastEmission()
  971|    384|        return try valueStack.pop()
  972|  1.77k|    }
$s7WasmKit21InstructionTranslatorV13popPushValues021_3C1F9FC595E9AC192A47K10B121D811E8LLySiSay0A5Types9ValueTypeOGKF:
  975|  3.06k|    private mutating func popPushValues(_ valueTypes: [ValueType]) throws -> Int {
  976|  3.06k|        var values: [ValueSource?] = []
  977|  3.06k|        for type in valueTypes.reversed() {
  978|  1.89k|            values.append(try popOperand(type))
  979|  3.06k|        }
  980|  3.06k|        let stackHeight = self.valueStack.height
  981|  3.06k|        for (type, value) in zip(valueTypes, values.reversed()) {
  982|  1.88k|            switch value {
  983|  1.88k|            case .local(let localIndex):
  984|      0|                // Re-push local variables to the stack
  985|      0|                _ = try valueStack.pushLocal(localIndex, locals: &locals)
  986|  1.88k|            case .vreg, nil:
  987|  1.86k|                _ = valueStack.push(type)
  988|  1.88k|            case .const(let index, let type):
  989|     26|                valueStack.pushConst(index, type: type)
  990|  1.88k|            }
  991|  3.06k|        }
  992|  3.06k|        return stackHeight
  993|  3.06k|    }
$s7WasmKit21InstructionTranslatorV13checkStackTop021_3C1F9FC595E9AC192A47K10B121D811E8LLyySay0A5Types9ValueTypeOGKF:
  995|  2.17k|    private func checkStackTop(_ valueTypes: [ValueType]) throws {
  996|  2.17k|        for (stackDepth, type) in valueTypes.reversed().enumerated() {
  997|    582|            guard try checkBeforePop(typeHint: type, depth: stackDepth) else { return }
  998|    397|            let actual = valueStack.peekType(depth: stackDepth)
  999|    397|            switch actual {
 1000|    397|            case .some(let actualType):
 1001|    387|                guard actualType == type else {
 1002|      4|                    throw ValidationError(.expectedTypeOnStack(expected: type, actual: actualType))
 1003|      4|                }
 1004|    397|            case .unknown: break
 1005|    397|            }
 1006|  1.98k|        }
 1007|  1.98k|    }
$s7WasmKit21InstructionTranslatorV15visitReturnLike021_3C1F9FC595E9AC192A47K10B121D811E8LLyyKF:
 1009|  3.46k|    private mutating func visitReturnLike() throws {
 1010|  3.46k|        var copies: [(source: VReg, dest: VReg)] = []
 1011|  3.46k|        for (index, resultType) in self.type.results.enumerated().reversed() {
 1012|  1.46k|            guard let operand = try popOperand(resultType) else { continue }
 1013|    203|            var source = ensureOnVReg(operand)
 1014|    203|            if case .local(let localIndex) = operand, stackLayout.isParameter(localIndex) {
 1015|     10|                // Parameter space is shared with return values, so we need to copy it to the stack
 1016|     10|                // before copying to the return slot to avoid overwriting the parameter value.
 1017|     10|                let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
 1018|     10|                emitCopyStack(from: localReg(localIndex), to: copyTo)
 1019|     10|                source = copyTo
 1020|     10|            }
 1021|    203|            let dest = returnReg(index)
 1022|    203|            copies.append((source, dest))
 1023|  3.45k|        }
 1024|  3.45k|        for (source, dest) in copies {
 1025|    203|            emitCopyStack(from: source, to: dest)
 1026|  3.45k|        }
 1027|  3.45k|    }
$s7WasmKit21InstructionTranslatorV12copyOnBranch021_3C1F9FC595E9AC192A47K10B121D811E8LL11targetFrameSbAC12ControlStackV0sR0Vyx__G_tKF:
 1030|  6.42k|    private mutating func copyOnBranch(targetFrame frame: ControlStack.ControlFrame) throws -> Bool {
 1031|  6.42k|        preserveOnStack(depth: min(Int(frame.copyCount), valueStack.height - frame.stackHeight))
 1032|  6.42k|        let copyCount = VReg(frame.copyCount)
 1033|  6.42k|        let sourceBase = valueStack.stackRegBase + VReg(valueStack.height)
 1034|  6.42k|        let destBase = valueStack.stackRegBase + VReg(frame.stackHeight)
 1035|  6.42k|        var emittedCopy = false
 1036|  6.42k|        for i in (0..<copyCount).reversed() {
 1037|  1.31k|            let source = sourceBase - 1 - VReg(i)
 1038|  1.31k|            let dest: VReg
 1039|  1.31k|            if case .block(root: true) = frame.kind {
 1040|    175|                dest = returnReg(Int(copyCount - 1 - i))
 1041|  1.13k|            } else {
 1042|  1.13k|                dest = destBase + copyCount - 1 - VReg(i)
 1043|  1.13k|            }
 1044|  1.31k|            let copied = emitCopyStack(from: source, to: dest)
 1045|  1.31k|            emittedCopy = emittedCopy || copied
 1046|  6.42k|        }
 1047|  6.42k|        return emittedCopy
 1048|  6.42k|    }
$s7WasmKit21InstructionTranslatorV12copyOnBranch021_3C1F9FC595E9AC192A47K10B121D811E8LL11targetFrameSbAC12ControlStackV0sR0Vyx__G_tKFSbyKXEfu_:
 1045|  1.26k|            emittedCopy = emittedCopy || copied
$s7WasmKit21InstructionTranslatorV15translateReturn021_3C1F9FC595E9AC192A47J10B121D811E8LLyyKF:
 1049|  3.46k|    private mutating func translateReturn() throws {
 1050|  3.46k|        if intercepting {
 1051|      0|            // Emit `onExit` instruction before every `return` instruction
 1052|      0|            emit(.onExit(functionIndex))
 1053|      0|        }
 1054|  3.46k|        try visitReturnLike()
 1055|  3.45k|        iseqBuilder.emit(._return)
 1056|  3.45k|    }
$s7WasmKit21InstructionTranslatorV15markUnreachable021_3C1F9FC595E9AC192A47J10B121D811E8LLyyKF:
 1057|  19.9k|    private mutating func markUnreachable() throws {
 1058|  19.9k|        try controlStack.markUnreachable()
 1059|  19.9k|        let currentFrame = try controlStack.currentFrame()
 1060|  19.9k|        try valueStack.truncate(height: currentFrame.stackHeight)
 1061|  19.9k|    }
$s7WasmKit21InstructionTranslatorV8finalize021_3C1F9FC595E9AC192A47I10B121D811E8LLAA0C8SequenceVyKF:
 1063|    901|    private mutating func finalize() throws -> InstructionSequence {
 1064|    901|        if controlStack.numberOfFrames > 1 {
 1065|     13|            throw ValidationError(.expectedMoreEndInstructions(count: controlStack.numberOfFrames - 1))
 1066|    888|        }
 1067|    888|        // Check dangling labels
 1068|    888|        try iseqBuilder.assertDanglingLabels()
 1069|    882|
 1070|    882|        iseqBuilder.emit(._return)
 1071|    882|        let instructions = iseqBuilder.finalize()
 1072|    882|        // TODO: Figure out a way to avoid the copy here while keeping the execution performance.
 1073|    882|        let buffer = allocator.allocateInstructions(capacity: instructions.count)
 1074|   175k|        for (idx, instruction) in instructions.enumerated() {
 1075|   175k|            buffer[idx] = instruction
 1076|   175k|        }
 1077|    882|        let constants = allocator.allocateConstants(self.constantSlots.values)
 1078|    882|        return InstructionSequence(
 1079|    882|            instructions: buffer,
 1080|    882|            maxStackHeight: Int(valueStack.stackRegBase) + valueStack.maxHeight,
 1081|    882|            constants: constants
 1082|    882|        )
 1083|    901|    }
$s7WasmKit21InstructionTranslatorV9translate4code8instanceAA0C8SequenceV0A6Parser4CodeV_AA12EntityHandleVyAA08InstanceK0VGtKF:
 1091|  1.91k|    ) throws -> InstructionSequence {
 1092|  1.91k|        if intercepting {
 1093|      0|            // Emit `onEnter` instruction at the beginning of the function
 1094|      0|            emit(.onEnter(functionIndex))
 1095|      0|        }
 1096|  1.91k|        var parser = ExpressionParser(code: code)
 1097|  1.91k|        var offset = parser.offset
 1098|  1.91k|        do {
 1099|   177k|            while try parser.visit(visitor: &self) {
 1100|   175k|                offset = parser.offset
 1101|   175k|            }
 1102|    901|        } catch var error as ValidationError {
 1103|    302|            error.offset = offset
 1104|    302|            throw error
 1105|    901|        }
 1106|    901|        return try finalize()
 1107|  1.91k|    }
$s7WasmKit21InstructionTranslatorV16visitUnreachableyyKF:
 1111|  12.6k|    mutating func visitUnreachable() throws -> Output {
 1112|  12.6k|        emit(.unreachable)
 1113|  12.6k|        try markUnreachable()
 1114|  12.6k|    }
$s7WasmKit21InstructionTranslatorV8visitNopyyF:
 1115|  2.30k|    mutating func visitNop() -> Output { emit(.nop) }
$s7WasmKit21InstructionTranslatorV10visitBlock9blockTypey0A6Parser0fH0O_tKF:
 1117|  2.86k|    mutating func visitBlock(blockType: WasmParser.BlockType) throws -> Output {
 1118|  2.86k|        let blockType = try module.resolveBlockType(blockType)
 1119|  2.84k|        let endLabel = iseqBuilder.allocLabel()
 1120|  2.84k|        self.preserveLocalsOnStack(depth: self.valueStack.height)
 1121|  2.84k|        let stackHeight = try popPushValues(blockType.parameters)
 1122|  2.84k|        controlStack.pushFrame(ControlStack.ControlFrame(blockType: blockType, stackHeight: stackHeight, continuation: endLabel, kind: .block))
 1123|  2.84k|    }
$s7WasmKit21InstructionTranslatorV9visitLoop9blockTypey0A6Parser05BlockH0O_tKF:
 1125|  3.12k|    mutating func visitLoop(blockType: WasmParser.BlockType) throws -> Output {
 1126|  3.12k|        let blockType = try module.resolveBlockType(blockType)
 1127|  3.11k|        preserveOnStack(depth: blockType.parameters.count)
 1128|  3.11k|        iseqBuilder.resetLastEmission()
 1129|  3.11k|        for param in blockType.parameters.reversed() {
 1130|    165|            _ = try popOperand(param)
 1131|  3.11k|        }
 1132|  3.11k|        let headLabel = iseqBuilder.putLabel()
 1133|  3.11k|        let stackHeight = self.valueStack.height
 1134|  3.11k|        for param in blockType.parameters {
 1135|    161|            _ = valueStack.push(param)
 1136|  3.11k|        }
 1137|  3.11k|        controlStack.pushFrame(ControlStack.ControlFrame(blockType: blockType, stackHeight: stackHeight, continuation: headLabel, kind: .loop))
 1138|  3.11k|    }
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKF:
 1140|  1.13k|    mutating func visitIf(blockType: WasmParser.BlockType) throws -> Output {
 1141|  1.13k|        // Pop condition value
 1142|  1.13k|        let condition = try popVRegOperand(.i32)
 1143|  1.13k|        let blockType = try module.resolveBlockType(blockType)
 1144|  1.12k|        self.preserveLocalsOnStack(depth: self.valueStack.height)
 1145|  1.12k|        preserveOnStack(depth: blockType.parameters.count)
 1146|  1.12k|        let endLabel = iseqBuilder.allocLabel()
 1147|  1.12k|        let elseLabel = iseqBuilder.allocLabel()
 1148|  1.12k|        for param in blockType.parameters.reversed() {
 1149|    547|            _ = try popOperand(param)
 1150|  1.12k|        }
 1151|  1.12k|        let stackHeight = self.valueStack.height
 1152|  1.12k|        for param in blockType.parameters {
 1153|    546|            _ = valueStack.push(param)
 1154|  1.12k|        }
 1155|  1.12k|        controlStack.pushFrame(
 1156|  1.12k|            ControlStack.ControlFrame(
 1157|  1.12k|                blockType: blockType, stackHeight: stackHeight, continuation: endLabel,
 1158|  1.12k|                kind: .if(elseLabel: elseLabel, endLabel: endLabel, isElse: false)
 1159|  1.12k|            )
 1160|  1.12k|        )
 1161|  1.12k|        guard let condition = condition else { return }
 1162|    679|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
 1163|    679|            let targetPC: MetaProgramCounter
 1164|    679|            if let elsePC = iseqBuilder.resolveLabel(elseLabel) {
 1165|    679|                targetPC = elsePC
 1166|    679|            } else {
 1167|    679|                targetPC = endPC
 1168|    679|            }
 1169|    679|            let elseOrEnd = UInt32(targetPC.offsetFromHead - selfPC.offsetFromHead)
 1170|    679|            return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(elseOrEnd))
 1171|    679|        }
 1172|    679|    }
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0OAJ02BrF7OperandVcAJmcfu_:
 1162|    679|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0OAJ02BrF7OperandVcAJmcfu_AjLcfu0_:
 1162|    318|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0O02BrF7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47R10B121D811E8LLVyx_G_AA18MetaProgramCounterANLLVARtcfU_:
 1162|    318|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
 1163|    318|            let targetPC: MetaProgramCounter
 1164|    318|            if let elsePC = iseqBuilder.resolveLabel(elseLabel) {
 1165|    263|                targetPC = elsePC
 1166|    263|            } else {
 1167|     55|                targetPC = endPC
 1168|     55|            }
 1169|    318|            let elseOrEnd = UInt32(targetPC.offsetFromHead - selfPC.offsetFromHead)
 1170|    318|            return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(elseOrEnd))
 1171|    318|        }
$s7WasmKit21InstructionTranslatorV9visitElseyyKF:
 1174|    386|    mutating func visitElse() throws -> Output {
 1175|    386|        var frame = try controlStack.currentFrame()
 1176|    386|        guard case let .if(elseLabel, endLabel, _) = frame.kind else {
 1177|     36|            throw ValidationError(.expectedIfControlFrame)
 1178|    350|        }
 1179|    350|        preserveOnStack(depth: valueStack.height - frame.stackHeight)
 1180|    350|        try controlStack.resetReachability()
 1181|    350|        iseqBuilder.resetLastEmission()
 1182|    350|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
 1183|    350|            let offset = endPC.offsetFromHead - selfPC.offsetFromHead
 1184|    350|            return Int32(offset)
 1185|    350|        }
 1186|    372|        for result in frame.blockType.results.reversed() {
 1187|    372|            guard try checkBeforePop(typeHint: result, controlFrame: frame) else { continue }
 1188|    252|            _ = try valueStack.pop(result)
 1189|    346|        }
 1190|    346|        guard valueStack.height == frame.stackHeight else {
 1191|      2|            throw ValidationError(.valuesRemainingAtEndOfBlock)
 1192|    344|        }
 1193|    344|        _ = controlStack.popFrame()
 1194|    344|        frame.kind = .if(elseLabel: elseLabel, endLabel: endLabel, isElse: true)
 1195|    344|        frame.reachable = true
 1196|    344|        controlStack.pushFrame(frame)
 1197|    344|
 1198|    344|        // Re-push parameters
 1199|    344|        for parameter in frame.blockType.parameters {
 1200|     90|            _ = valueStack.push(parameter)
 1201|    344|        }
 1202|    344|        try iseqBuilder.pinLabelHere(elseLabel)
 1203|    343|    }
$s7WasmKit21InstructionTranslatorV9visitElseyyKFAA0C0Os5Int32VcAFmcfu_:
 1182|    350|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV9visitElseyyKFAA0C0Os5Int32VcAFmcfu_AfHcfu0_:
 1182|    287|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV9visitElseyyKFs5Int32VAC11ISeqBuilder021_3C1F9FC595E9AC192A47M10B121D811E8LLVyx_G_AA18MetaProgramCounterAHLLVALtcfU_:
 1182|    287|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
 1183|    287|            let offset = endPC.offsetFromHead - selfPC.offsetFromHead
 1184|    287|            return Int32(offset)
 1185|    287|        }
$s7WasmKit21InstructionTranslatorV8visitEndyyKF:
 1205|  4.03k|    mutating func visitEnd() throws -> Output {
 1206|  4.03k|        let toBePopped = try controlStack.currentFrame()
 1207|  4.03k|        iseqBuilder.resetLastEmission()
 1208|  4.03k|        if case .block(root: true) = toBePopped.kind {
 1209|    923|            try translateReturn()
 1210|    918|            guard valueStack.height == toBePopped.stackHeight else {
 1211|     10|                throw ValidationError(.valuesRemainingAtEndOfBlock)
 1212|    908|            }
 1213|    908|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1214|    901|            return
 1215|  3.11k|        }
 1216|  3.11k|
 1217|  3.11k|        if case .if(_, _, isElse: false) = toBePopped.kind {
 1218|     87|            let blockType = toBePopped.blockType
 1219|     87|            guard blockType.parameters == blockType.results else {
 1220|     23|                throw ValidationError(.parameterResultTypeMismatch(blockType: blockType))
 1221|     64|            }
 1222|  3.08k|        }
 1223|  3.08k|
 1224|  3.08k|        preserveOnStack(depth: Int(valueStack.height - toBePopped.stackHeight))
 1225|  3.08k|        switch toBePopped.kind {
 1226|  3.08k|        case .block:
 1227|  1.06k|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1228|  3.08k|        case .loop: break
 1229|  3.08k|        case .if:
 1230|    351|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1231|  3.08k|        }
 1232|  3.08k|        for result in toBePopped.blockType.results.reversed() {
 1233|  1.75k|            guard try checkBeforePop(typeHint: result, controlFrame: toBePopped) else { continue }
 1234|  1.57k|            _ = try valueStack.pop(result)
 1235|  3.06k|        }
 1236|  3.06k|        guard valueStack.height == toBePopped.stackHeight else {
 1237|     42|            throw ValidationError(.valuesRemainingAtEndOfBlock)
 1238|  3.02k|        }
 1239|  3.02k|        for result in toBePopped.blockType.results {
 1240|  1.72k|            _ = valueStack.push(result)
 1241|  3.02k|        }
 1242|  3.02k|        _ = controlStack.popFrame()
 1243|  3.02k|    }
$s7WasmKit21InstructionTranslatorV15computePopCount021_3C1F9FC595E9AC192A47K10B121D811E8LL11destination12currentFrame0R6Heights6UInt32VAC12ControlStackV0vS0Vyx__G_AOSitKFZ:
 1249|  4.25k|    ) throws -> UInt32 {
 1250|  4.25k|        let popCount: UInt32
 1251|  4.25k|        if _fastPath(currentFrame.reachable) {
 1252|  2.30k|            let count = currentHeight - Int(destination.copyCount) - destination.stackHeight
 1253|  2.30k|            guard count >= 0 else {
 1254|      4|                throw ValidationError(.stackHeightUnderflow(available: currentHeight, required: destination.stackHeight + Int(destination.copyCount)))
 1255|  2.30k|            }
 1256|  2.30k|            popCount = UInt32(count)
 1257|  2.30k|        } else {
 1258|  1.94k|            // Slow path: This path is taken when "br" is placed after "unreachable"
 1259|  1.94k|            // It's ok to put the fake popCount because it will not be executed at runtime.
 1260|  1.94k|            popCount = 0
 1261|  4.24k|        }
 1262|  4.24k|        return popCount
 1263|  4.25k|    }
$s7WasmKit21InstructionTranslatorV10emitBranch021_3C1F9FC595E9AC192A47J10B121D811E8LL_13relativeDepth4makeyAA0C0Oqd__c_s6UInt32Vqd__s5Int32V_A2KtctKAA0C9ImmediateRd__lF:
 1269|  4.25k|    ) throws {
 1270|  4.25k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1271|  4.25k|        let copyCount = frame.copyCount
 1272|  4.25k|        let popCount = try Self.computePopCount(
 1273|  4.25k|            destination: frame,
 1274|  4.25k|            currentFrame: try controlStack.currentFrame(),
 1275|  4.25k|            currentHeight: valueStack.height
 1276|  4.25k|        )
 1277|  4.24k|        iseqBuilder.emitWithLabel(makeInstruction, frame.continuation) { _, selfPC, continuation in
 1278|  4.24k|            let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1279|  4.24k|            return make(Int32(relativeOffset), UInt32(copyCount), popCount)
 1280|  4.24k|        }
 1281|  4.24k|    }
$s7WasmKit21InstructionTranslatorV10emitBranch021_3C1F9FC595E9AC192A47J10B121D811E8LL_13relativeDepth4makeyAA0C0Oqd__c_s6UInt32Vqd__s5Int32V_A2KtctKAA0C9ImmediateRd__lFqd__AC11ISeqBuilderAELLVyx_G_AA18MetaProgramCounterAELLVAStcfU_:
 1277|  3.21k|        iseqBuilder.emitWithLabel(makeInstruction, frame.continuation) { _, selfPC, continuation in
 1278|  3.21k|            let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1279|  3.21k|            return make(Int32(relativeOffset), UInt32(copyCount), popCount)
 1280|  3.21k|        }
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKF:
 1282|  4.04k|    mutating func visitBr(relativeDepth: UInt32) throws -> Output {
 1283|  4.04k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1284|  4.04k|
 1285|  4.04k|        // Copy from the stack top to the bottom to avoid overwrites
 1286|  4.04k|        //              [BLOCK1]
 1287|  4.04k|        //              [      ]
 1288|  4.04k|        //              [      ]
 1289|  4.04k|        //              [BLOCK2] () -> (i32, i64)
 1290|  4.04k|        // copy [1] +-->[  i32 ]
 1291|  4.04k|        //          +---[  i32 ]<--+ copy [2]
 1292|  4.04k|        //              [  i64 ]---+
 1293|  4.04k|        try copyOnBranch(targetFrame: frame)
 1294|  4.04k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1295|  4.04k|            return offset
 1296|  4.04k|        }
 1297|  4.03k|        for type in frame.copyTypes.reversed() {
 1298|    504|            _ = try popOperand(type)
 1299|  4.02k|        }
 1300|  4.02k|        try markUnreachable()
 1301|  4.02k|    }
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu_:
 1294|  4.04k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu_AiKcfu0_:
 1294|  3.11k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFs5Int32VAI_A2GtcfU_:
 1294|  3.11k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1295|  3.11k|            return offset
 1296|  3.11k|        }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKF:
 1303|    830|    mutating func visitBrIf(relativeDepth: UInt32) throws -> Output {
 1304|    830|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1305|    826|        let condition = try popVRegOperand(.i32)
 1306|    825|
 1307|    825|        if frame.copyCount == 0 {
 1308|    603|            guard let condition else { return }
 1309|    568|            // Optimization where we don't need copying values when the branch taken
 1310|    568|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
 1311|    568|                let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1312|    568|                return Instruction.BrIfOperand(
 1313|    568|                    condition: LVReg(condition), offset: Int32(relativeOffset)
 1314|    568|                )
 1315|    568|            }
 1316|    568|            return
 1317|    603|        }
 1318|    222|        preserveOnStack(depth: valueStack.height - frame.stackHeight)
 1319|    222|
 1320|    222|        if let condition {
 1321|    211|            // If branch taken, fallthrough to landing pad, copy stack values
 1322|    211|            // then branch to the actual place
 1323|    211|            // If branch not taken, branch to the next of the landing pad
 1324|    211|            //
 1325|    211|            // (block (result i32)
 1326|    211|            //   (i32.const 42)
 1327|    211|            //   (i32.const 24)
 1328|    211|            //   (local.get 0)
 1329|    211|            //   (br_if 0) ------+
 1330|    211|            //   (local.get 1)   |
 1331|    211|            // )         <-------+
 1332|    211|            //
 1333|    211|            // [0x00] (i32.const 42 reg:0)
 1334|    211|            // [0x01] (i32.const 24 reg:1)
 1335|    211|            // [0x02] (local.get 0 result=reg:2)
 1336|    211|            // [0x03] (br_if_z offset=+0x3 cond=reg:2) --+
 1337|    211|            // [0x04] (stack.copy reg:1 -> reg:0)        |
 1338|    211|            // [0x05] (br offset=+0x2) --------+         |
 1339|    211|            // [0x06] (local.get 1 reg:2) <----|---------+
 1340|    211|            // [0x07] ...              <-------+
 1341|    211|            let onBranchNotTaken = iseqBuilder.allocLabel()
 1342|    211|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
 1343|    211|                let relativeOffset = continuation.offsetFromHead - conditionCheckAt.offsetFromHead
 1344|    211|                return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(relativeOffset))
 1345|    211|            }
 1346|    211|            try copyOnBranch(targetFrame: frame)
 1347|    211|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1348|    211|                return offset
 1349|    211|            }
 1350|    209|            try iseqBuilder.pinLabelHere(onBranchNotTaken)
 1351|    220|        }
 1352|    220|        try popPushValues(frame.copyTypes)
 1353|    218|    }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu_:
 1310|    568|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu_AiKcfu0_:
 1310|    448|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0O0fG7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAMLLVAQtcfU_:
 1310|    448|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
 1311|    448|                let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1312|    448|                return Instruction.BrIfOperand(
 1313|    448|                    condition: LVReg(condition), offset: Int32(relativeOffset)
 1314|    448|                )
 1315|    448|            }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu1_:
 1342|    211|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu1_AiKcfu2_:
 1342|    209|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0O0fG7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAMLLVAQtcfU0_:
 1342|    209|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
 1343|    209|                let relativeOffset = continuation.offsetFromHead - conditionCheckAt.offsetFromHead
 1344|    209|                return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(relativeOffset))
 1345|    209|            }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu3_:
 1347|    211|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu3_AiKcfu4_:
 1347|     96|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFs5Int32VAI_A2GtcfU1_:
 1347|     96|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1348|     96|                return offset
 1349|     96|            }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKF:
 1355|    938|    mutating func visitBrTable(targets: WasmParser.BrTable) throws -> Output {
 1356|    938|        guard let index = try popVRegOperand(.i32) else { return }
 1357|    807|
 1358|    807|        let defaultFrame = try controlStack.branchTarget(relativeDepth: targets.defaultIndex)
 1359|    804|
 1360|    804|        // If this instruction is unreachable, copyCount might be greater than the actual stack height
 1361|    804|        try preserveOnStack(
 1362|    804|            depth: min(
 1363|    804|                Int(defaultFrame.copyCount),
 1364|    804|                valueStack.height - controlStack.currentFrame().stackHeight
 1365|    804|            )
 1366|    804|        )
 1367|    804|        let allLabelIndices = targets.labelIndices + [targets.defaultIndex]
 1368|    804|        let tableBuffer = allocator.allocateBrTable(capacity: allLabelIndices.count)
 1369|    804|        let operand = Instruction.BrTableOperand(
 1370|    804|            baseAddress: tableBuffer.baseAddress!,
 1371|    804|            count: UInt16(tableBuffer.count), index: index
 1372|    804|        )
 1373|    804|        iseqBuilder.emit(.brTable(operand))
 1374|    804|        let brTableAt = iseqBuilder.insertingPC
 1375|    804|
 1376|    804|        //
 1377|    804|        // (block $l1 (result i32)
 1378|    804|        //   (i32.const 63)
 1379|    804|        //   (block $l2 (result i32)
 1380|    804|        //     (i32.const 42)
 1381|    804|        //     (i32.const 24)
 1382|    804|        //     (local.get 0)
 1383|    804|        //     (br_table $l1 $l2) ---+
 1384|    804|        //                           |
 1385|    804|        //   )               <-------+
 1386|    804|        //   (i32.const 36)          |
 1387|    804|        // )              <----------+
 1388|    804|        //
 1389|    804|        //
 1390|    804|        //           [0x00] (i32.const 63 reg:0)
 1391|    804|        //           [0x01] (i32.const 42 reg:1)
 1392|    804|        //           [0x02] (i32.const 24 reg:2)
 1393|    804|        //           [0x03] (local.get 0 result=reg:3)
 1394|    804|        //           [0x04] (br_table index=reg:3 offsets=[
 1395|    804|        //                    +0x01       -----------------+
 1396|    804|        //                    +0x03       -----------------|----+
 1397|    804|        //                  ])                             |    |
 1398|    804|        //           [0x05] (stack.copy reg:2 -> reg:0) <--+    |
 1399|    804|        //  +------- [0x06] (br offset=+0x03)                   |
 1400|    804|        //  |        [0x07] (stack.copy reg:2 -> reg:1)  <------+
 1401|    804|        //  |  +---- [0x08] (br offset=+0x03)
 1402|    804|        //  +--|---> [0x09] (i32.const 36 reg:2)
 1403|    804|        //     |     [0x0a] (stack.copy reg:2 -> reg:0)
 1404|    804|        //     +---> [0x0b] ...
 1405|  2.18k|        for (entryIndex, labelIndex) in allLabelIndices.enumerated() {
 1406|  2.18k|            let frame = try controlStack.branchTarget(relativeDepth: labelIndex)
 1407|  2.18k|
 1408|  2.18k|            // Check copyTypes consistency
 1409|  2.18k|            guard frame.copyTypes.count == defaultFrame.copyTypes.count else {
 1410|      8|                throw ValidationError(.expectedSameCopyTypes(frameCopyTypes: frame.copyTypes, defaultFrameCopyTypes: defaultFrame.copyTypes))
 1411|  2.17k|            }
 1412|  2.17k|            try checkStackTop(frame.copyTypes)
 1413|  2.16k|
 1414|  2.16k|            do {
 1415|  2.16k|                let relativeOffset = iseqBuilder.insertingPC.offsetFromHead - brTableAt.offsetFromHead
 1416|  2.16k|                tableBuffer[entryIndex] = Instruction.BrTableOperand.Entry(
 1417|  2.16k|                    offset: Int32(relativeOffset)
 1418|  2.16k|                )
 1419|  2.16k|            }
 1420|  2.16k|            let emittedCopy = try copyOnBranch(targetFrame: frame)
 1421|  2.16k|            if emittedCopy {
 1422|    481|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
 1423|    481|                    let relativeOffset = continuation.offsetFromHead - brAt.offsetFromHead
 1424|    481|                    return Int32(relativeOffset)
 1425|    481|                }
 1426|  1.68k|            } else {
 1427|  1.68k|                // Optimization: If no value is copied, we can directly jump to the target
 1428|  1.68k|                iseqBuilder.fillBrTableEntry(frame.continuation, table: tableBuffer, index: entryIndex) { _, continuation in
 1429|  1.68k|                    return Instruction.BrTableOperand.Entry(offset: Int32(continuation.offsetFromHead - brTableAt.offsetFromHead))
 1430|  1.68k|                }
 1431|  1.68k|            }
 1432|  2.16k|        }
 1433|    787|        // Pop branch copy values for type checking
 1434|    787|        for type in defaultFrame.copyTypes.reversed() {
 1435|    217|            _ = try popOperand(type)
 1436|    787|        }
 1437|    787|        try markUnreachable()
 1438|    787|    }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0Os5Int32VcAJmcfu_:
 1422|    481|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0Os5Int32VcAJmcfu_AjLcfu0_:
 1422|    169|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFs5Int32VAC11ISeqBuilder021_3C1F9FC595E9AC192A47P10B121D811E8LLVyx_G_AA18MetaProgramCounterALLLVAPtcfU_:
 1422|    169|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
 1423|    169|                    let relativeOffset = continuation.offsetFromHead - brAt.offsetFromHead
 1424|    169|                    return Int32(relativeOffset)
 1425|    169|                }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0O0fG7OperandV5EntryVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAPLLVtcfU0_:
 1428|  1.30k|                iseqBuilder.fillBrTableEntry(frame.continuation, table: tableBuffer, index: entryIndex) { _, continuation in
 1429|  1.30k|                    return Instruction.BrTableOperand.Entry(offset: Int32(continuation.offsetFromHead - brTableAt.offsetFromHead))
 1430|  1.30k|                }
$s7WasmKit21InstructionTranslatorV11visitReturnyyKF:
 1440|  2.54k|    mutating func visitReturn() throws -> Output {
 1441|  2.54k|        try translateReturn()
 1442|  2.53k|        try markUnreachable()
 1443|  2.53k|    }
$s7WasmKit21InstructionTranslatorV13visitCallLike021_3C1F9FC595E9AC192A47K10B121D811E8LL10calleeTypes5Int16VSg0A5Types08FunctionR0V_tKF:
 1445|  2.75k|    private mutating func visitCallLike(calleeType: FunctionType) throws -> VReg? {
 1446|  2.75k|        for parameter in calleeType.parameters.reversed() {
 1447|    441|            guard (try popOnStackOperand(parameter)) != nil else { return nil }
 1448|  2.71k|        }
 1449|  2.71k|
 1450|  2.71k|        let spAddend =
 1451|  2.71k|            valueStack.stackRegBase + VReg(valueStack.height)
 1452|  2.71k|            + FrameHeaderLayout.size(of: calleeType)
 1453|  2.71k|
 1454|  2.71k|        for result in calleeType.results {
 1455|  1.80k|            _ = valueStack.push(result)
 1456|  2.71k|        }
 1457|  2.71k|        return VReg(spAddend)
 1458|  2.75k|    }
$s7WasmKit21InstructionTranslatorV9visitCall13functionIndexys6UInt32V_tKF:
 1459|  2.53k|    mutating func visitCall(functionIndex: UInt32) throws -> Output {
 1460|  2.53k|        let calleeType = try self.module.functionType(functionIndex, interner: funcTypeInterner)
 1461|  2.53k|        guard let spAddend = try visitCallLike(calleeType: calleeType) else { return }
 1462|  2.51k|        guard let callee = self.module.resolveCallee(functionIndex) else {
 1463|      0|            // Skip actual code emission if validation-only mode
 1464|      0|            return
 1465|  2.51k|        }
 1466|  2.51k|        if callee.isWasm {
 1467|  2.24k|            if module.isSameInstance(callee.wasm.instance) {
 1468|  2.24k|                emit(.compilingCall(Instruction.CallOperand(callee: callee, spAddend: spAddend)))
 1469|  2.24k|                return
 1470|  2.24k|            }
 1471|    274|        }
 1472|    274|        emit(.call(Instruction.CallOperand(callee: callee, spAddend: spAddend)))
 1473|    274|    }
$s7WasmKit21InstructionTranslatorV17visitCallIndirect9typeIndex05tableI0ys6UInt32V_AHtKF:
 1475|    222|    mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws -> Output {
 1476|    222|        let addressType = try module.addressType(tableIndex: tableIndex)
 1477|    221|        let address = try popVRegOperand(addressType)  // function address
 1478|    220|        let calleeType = try self.module.resolveType(typeIndex)
 1479|    219|        guard let spAddend = try visitCallLike(calleeType: calleeType) else { return }
 1480|    195|        guard let address = address else { return }
 1481|    122|        let internType = funcTypeInterner.intern(calleeType)
 1482|    122|        let operand = Instruction.CallIndirectOperand(
 1483|    122|            tableIndex: tableIndex,
 1484|    122|            type: internType,
 1485|    122|            index: address,
 1486|    122|            spAddend: spAddend
 1487|    122|        )
 1488|    122|        emit(.callIndirect(operand))
 1489|    122|    }
$s7WasmKit21InstructionTranslatorV9visitDropyyKF:
 1491|     83|    mutating func visitDrop() throws -> Output {
 1492|     83|        _ = try popAnyOperand()
 1493|     82|        iseqBuilder.resetLastEmission()
 1494|     82|    }
$s7WasmKit21InstructionTranslatorV11visitSelectyyKF:
 1495|    675|    mutating func visitSelect() throws -> Output {
 1496|    675|        let condition = try popVRegOperand(.i32)
 1497|    673|        let (value1Type, value1) = try popAnyOperand()
 1498|    672|        let (value2Type, value2) = try popAnyOperand()
 1499|    671|        switch (value1Type, value2Type) {
 1500|    671|        case (.some(.ref(_)), _), (_, .some(.ref(_))):
 1501|      2|            throw ValidationError(.cannotSelectOnReferenceTypes)
 1502|    671|        case let (.some(type1), .some(type2)):
 1503|    133|            guard type1 == type2 else {
 1504|      4|                throw ValidationError(.typeMismatchOnSelect(expected: type1, actual: type2))
 1505|      4|            }
 1506|    671|        case (.unknown, _), (_, .unknown):
 1507|    536|            break
 1508|    671|        }
 1509|    665|        let result = valueStack.push(value1Type)
 1510|    665|        if let condition = condition, let value1 = value1, let value2 = value2 {
 1511|    141|            let operand = Instruction.SelectOperand(
 1512|    141|                result: result,
 1513|    141|                condition: condition,
 1514|    141|                onTrue: ensureOnVReg(value2),
 1515|    141|                onFalse: ensureOnVReg(value1)
 1516|    141|            )
 1517|    141|            emit(.select(operand))
 1518|    141|        }
 1519|    665|    }
$s7WasmKit21InstructionTranslatorV16visitTypedSelect4typey0A5Types9ValueTypeO_tKF:
 1520|    175|    mutating func visitTypedSelect(type: WasmTypes.ValueType) throws -> Output {
 1521|    175|        let condition = try popVRegOperand(.i32)
 1522|    173|        let (value1Type, value1) = try popAnyOperand()
 1523|    172|        let (_, value2) = try popAnyOperand()
 1524|    171|        // TODO: Perform actual validation
 1525|    171|        // guard value1 == ValueType(type) else {
 1526|    171|        //     throw TranslationError("Type mismatch on `select`. Expected \(value1) and \(type) to be same")
 1527|    171|        // }
 1528|    171|        // guard value2 == ValueType(type) else {
 1529|    171|        //     throw TranslationError("Type mismatch on `select`. Expected \(value2) and \(type) to be same")
 1530|    171|        // }
 1531|    171|        let result = valueStack.push(value1Type)
 1532|    171|        if let condition = condition, let value1 = value1, let value2 = value2 {
 1533|     13|            let operand = Instruction.SelectOperand(
 1534|     13|                result: result,
 1535|     13|                condition: condition,
 1536|     13|                onTrue: ensureOnVReg(value2),
 1537|     13|                onFalse: ensureOnVReg(value1)
 1538|     13|            )
 1539|     13|            emit(.select(operand))
 1540|     13|        }
 1541|    171|    }
$s7WasmKit21InstructionTranslatorV13visitLocalGet10localIndexys6UInt32V_tKF:
 1542|  1.99k|    mutating func visitLocalGet(localIndex: UInt32) throws -> Output {
 1543|  1.99k|        iseqBuilder.resetLastEmission()
 1544|  1.99k|        try valueStack.pushLocal(localIndex, locals: &locals)
 1545|  1.98k|    }
$s7WasmKit21InstructionTranslatorV18visitLocalSetOrTee10localIndex02isI0ys6UInt32V_SbtKF:
 1546|  6.02k|    mutating func visitLocalSetOrTee(localIndex: UInt32, isTee: Bool) throws {
 1547|  6.02k|        preserveLocalsOnStack(localIndex)
 1548|  6.02k|        let type = try locals.type(of: localIndex)
 1549|  6.01k|        let result = localReg(localIndex)
 1550|  6.01k|
 1551|  6.01k|        guard try checkBeforePop(typeHint: type) else { return }
 1552|  5.93k|        let op = try valueStack.pop(type)
 1553|  5.93k|
 1554|  5.93k|        if case .const(let slotIndex, _) = op {
 1555|    634|            // Optimize (local.set $x (i32.const $c)) to reg:$x = 42 rather than through const slot
 1556|    634|            let value = constantSlots.values[slotIndex]
 1557|    634|            let is32Bit = type == .i32 || type == .f32
 1558|    634|            if is32Bit {
 1559|    583|                emit(.const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg(result))))
 1560|    583|            } else {
 1561|     51|                emit(.const64(Instruction.Const64Operand(value: value, result: LLVReg(result))))
 1562|     51|            }
 1563|    634|            return
 1564|  5.29k|        }
 1565|  5.29k|
 1566|  5.29k|        let value = ensureOnVReg(op)
 1567|  5.29k|        guard try controlStack.currentFrame().reachable else { return }
 1568|  1.43k|        if !isTee, iseqBuilder.relinkLastInstructionResult(result) {
 1569|    564|            // Good news, copyStack is optimized out :)
 1570|    564|            return
 1571|    867|        }
 1572|    867|        emitCopyStack(from: value, to: result)
 1573|    867|    }
$s7WasmKit21InstructionTranslatorV18visitLocalSetOrTee10localIndex02isI0ys6UInt32V_SbtKFSbyKXEfu_:
 1557|    344|            let is32Bit = type == .i32 || type == .f32
$s7WasmKit21InstructionTranslatorV13visitLocalSet10localIndexys6UInt32V_tKF:
 1574|  1.66k|    mutating func visitLocalSet(localIndex: UInt32) throws -> Output {
 1575|  1.66k|        try visitLocalSetOrTee(localIndex: localIndex, isTee: false)
 1576|  1.66k|    }
$s7WasmKit21InstructionTranslatorV13visitLocalTee10localIndexys6UInt32V_tKF:
 1577|  4.35k|    mutating func visitLocalTee(localIndex: UInt32) throws -> Output {
 1578|  4.35k|        try visitLocalSetOrTee(localIndex: localIndex, isTee: true)
 1579|  4.35k|        _ = try valueStack.pushLocal(localIndex, locals: &locals)
 1580|  4.35k|    }
$s7WasmKit21InstructionTranslatorV14visitGlobalGet11globalIndexys6UInt32V_tKF:
 1581|  9.27k|    mutating func visitGlobalGet(globalIndex: UInt32) throws -> Output {
 1582|  9.27k|        let type = try module.globalType(globalIndex)
 1583|  9.25k|        let result = valueStack.push(type)
 1584|  9.25k|        guard let global = module.resolveGlobal(globalIndex) else {
 1585|      0|            // Skip actual code emission if validation-only mode
 1586|      0|            return
 1587|  9.25k|        }
 1588|  9.25k|        emit(.globalGet(Instruction.GlobalAndVRegOperand(reg: LLVReg(result), global: global)))
 1589|  9.25k|    }
$s7WasmKit21InstructionTranslatorV14visitGlobalSet11globalIndexys6UInt32V_tKF:
 1590|  6.35k|    mutating func visitGlobalSet(globalIndex: UInt32) throws -> Output {
 1591|  6.35k|        let type = try module.globalType(globalIndex)
 1592|  6.34k|        guard let value = try popVRegOperand(type) else { return }
 1593|  6.31k|        guard let global = module.resolveGlobal(globalIndex) else {
 1594|      0|            // Skip actual code emission if validation-only mode
 1595|      0|            return
 1596|  6.31k|        }
 1597|  6.31k|        try validator.validateGlobalSet(global.globalType)
 1598|  6.31k|        emit(.globalSet(Instruction.GlobalAndVRegOperand(reg: LLVReg(value), global: global)))
 1599|  6.31k|    }
$s7WasmKit21InstructionTranslatorV8pushEmit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0Os5Int16VctF:
 1604|  8.25k|    ) {
 1605|  8.25k|        let register = valueStack.push(type)
 1606|  8.25k|        emit(
 1607|  8.25k|            instruction(register),
 1608|  8.25k|            resultRelink: { newResult in
 1609|  8.25k|                instruction(newResult)
 1610|  8.25k|            })
 1611|  8.25k|    }
$s7WasmKit21InstructionTranslatorV8pushEmit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0Os5Int16VctFAjLcfU_:
 1608|     22|            resultRelink: { newResult in
 1609|     22|                instruction(newResult)
 1610|     22|            })
$s7WasmKit21InstructionTranslatorV11popPushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0Os5Int16V_AlC0R5StackVyx_GtctKF:
 1616|  61.6k|    ) throws {
 1617|  61.6k|        let value = try popVRegOperand(pop)
 1618|  61.5k|        let result = valueStack.push(push)
 1619|  61.5k|        if let value = value {
 1620|  54.6k|            emit(
 1621|  54.6k|                instruction(value, result, valueStack),
 1622|  54.6k|                resultRelink: { [valueStack] newResult in
 1623|  54.6k|                    instruction(value, newResult, valueStack)
 1624|  54.6k|                })
 1625|  54.6k|        }
 1626|  61.5k|    }
$s7WasmKit21InstructionTranslatorV11popPushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0Os5Int16V_AlC0R5StackVyx_GtctKFAjLcfU_:
 1622|    513|                resultRelink: { [valueStack] newResult in
 1623|    513|                    instruction(value, newResult, valueStack)
 1624|    513|                })
$s7WasmKit21InstructionTranslatorV8pop3Emit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_A2Ht_AA0C0Os5Int16V_A2Lt_AC0Q5StackVyx_GztXEtKF:
 1634|    221|    ) throws {
 1635|    221|        guard let pop1 = try popVRegOperand(pops.0),
 1636|    216|            let pop2 = try popVRegOperand(pops.1),
 1637|    215|            let pop3 = try popVRegOperand(pops.2)
 1638|    214|        else { return }
 1639|     26|        emit(instruction((pop1, pop2, pop3), &valueStack))
 1640|     26|    }
$s7WasmKit21InstructionTranslatorV8pop2Emit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AHt_AA0C0Os5Int16V_ALt_AC0Q5StackVyx_GztXEtKF:
 1648|    109|    ) throws {
 1649|    109|        guard let pop1 = try popVRegOperand(pops.0),
 1650|    104|            let pop2 = try popVRegOperand(pops.1)
 1651|    103|        else { return }
 1652|     10|        emit(instruction((pop1, pop2), &valueStack))
 1653|     10|    }
$s7WasmKit21InstructionTranslatorV12pop2PushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AHt_AhA0C0Os5Int16V_ALt_ALtctKF:
 1662|     34|    ) throws {
 1663|     34|        guard let pop1 = try popVRegOperand(pops.0),
 1664|     33|            let pop2 = try popVRegOperand(pops.1)
 1665|     32|        else { return }
 1666|      0|        let result = valueStack.push(push)
 1667|      0|        emit(
 1668|      0|            instruction((pop1, pop2), result),
 1669|      0|            resultRelink: { result in
 1670|      0|                instruction((pop1, pop2), result)
 1671|      0|            })
 1672|      0|    }
$s7WasmKit21InstructionTranslatorV9visitLoad021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVctKF:
 1679|  12.9k|    ) throws {
 1680|  12.9k|        let isMemory64 = try module.isMemory64(memoryIndex: 0)
 1681|  12.9k|        try validator.validateMemArg(memarg, naturalAlignment: naturalAlignment)
 1682|  12.8k|        try popPushEmit(.address(isMemory64: isMemory64), type) { value, result, stack in
 1683|  12.8k|            let loadOperand = Instruction.LoadOperand(
 1684|  12.8k|                offset: memarg.offset,
 1685|  12.8k|                pointer: value,
 1686|  12.8k|                result: result
 1687|  12.8k|            )
 1688|  12.8k|            return instruction(loadOperand)
 1689|  12.8k|        }
 1690|  12.8k|    }
$s7WasmKit21InstructionTranslatorV9visitLoad021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVctKFAMs5Int16V_AqC0T5StackVyx_GtcfU_:
 1682|  10.0k|        try popPushEmit(.address(isMemory64: isMemory64), type) { value, result, stack in
 1683|  10.0k|            let loadOperand = Instruction.LoadOperand(
 1684|  10.0k|                offset: memarg.offset,
 1685|  10.0k|                pointer: value,
 1686|  10.0k|                result: result
 1687|  10.0k|            )
 1688|  10.0k|            return instruction(loadOperand)
 1689|  10.0k|        }
$s7WasmKit21InstructionTranslatorV10visitStore021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVXEtKF:
 1696|    404|    ) throws {
 1697|    404|        let isMemory64 = try module.isMemory64(memoryIndex: 0)
 1698|    395|        try validator.validateMemArg(memarg, naturalAlignment: naturalAlignment)
 1699|    383|        let value = try popVRegOperand(type)
 1700|    379|        let pointer = try popVRegOperand(.address(isMemory64: isMemory64))
 1701|    378|        if let value = value, let pointer = pointer {
 1702|    212|            let storeOperand = Instruction.StoreOperand(
 1703|    212|                offset: memarg.offset,
 1704|    212|                pointer: pointer,
 1705|    212|                value: value
 1706|    212|            )
 1707|    212|            emit(instruction(storeOperand))
 1708|    212|        }
 1709|    378|    }
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKF:
 1711|  12.9k|    mutating func visitLoad(_ load: WasmParser.Instruction.Load, memarg: MemArg) throws {
 1712|  12.9k|        let instruction: (Instruction.LoadOperand) -> Instruction
 1713|  12.9k|        switch load {
 1714|  12.9k|        case .i32Load: instruction = Instruction.i32Load
 1715|  12.9k|        case .i64Load: instruction = Instruction.i64Load
 1716|  12.9k|        case .f32Load: instruction = Instruction.f32Load
 1717|  12.9k|        case .f64Load: instruction = Instruction.f64Load
 1718|  12.9k|        case .i32Load8S: instruction = Instruction.i32Load8S
 1719|  12.9k|        case .i32Load8U: instruction = Instruction.i32Load8U
 1720|  12.9k|        case .i32Load16S: instruction = Instruction.i32Load16S
 1721|  12.9k|        case .i32Load16U: instruction = Instruction.i32Load16U
 1722|  12.9k|        case .i64Load8S: instruction = Instruction.i64Load8S
 1723|  12.9k|        case .i64Load8U: instruction = Instruction.i64Load8U
 1724|  12.9k|        case .i64Load16S: instruction = Instruction.i64Load16S
 1725|  12.9k|        case .i64Load16U: instruction = Instruction.i64Load16U
 1726|  12.9k|        case .i64Load32S: instruction = Instruction.i64Load32S
 1727|  12.9k|        case .i64Load32U: instruction = Instruction.i64Load32U
 1728|  12.9k|        }
 1729|  12.9k|        try visitLoad(memarg, load.type, load.naturalAlignment, instruction)
 1730|  12.8k|    }
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_:
 1714|    245|        case .i32Load: instruction = Instruction.i32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_AmOcfu0_:
 1714|    231|        case .i32Load: instruction = Instruction.i32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_:
 1715|    117|        case .i64Load: instruction = Instruction.i64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_AmOcfu2_:
 1715|    116|        case .i64Load: instruction = Instruction.i64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_:
 1716|  1.63k|        case .f32Load: instruction = Instruction.f32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_AmOcfu4_:
 1716|    121|        case .f32Load: instruction = Instruction.f32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_:
 1717|  3.59k|        case .f64Load: instruction = Instruction.f64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_AmOcfu6_:
 1717|  2.41k|        case .f64Load: instruction = Instruction.f64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_:
 1718|    602|        case .i32Load8S: instruction = Instruction.i32Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_AmOcfu8_:
 1718|    600|        case .i32Load8S: instruction = Instruction.i32Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_:
 1719|     28|        case .i32Load8U: instruction = Instruction.i32Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_AmOcfu10_:
 1719|     21|        case .i32Load8U: instruction = Instruction.i32Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_:
 1720|    737|        case .i32Load16S: instruction = Instruction.i32Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_AmOcfu12_:
 1720|    721|        case .i32Load16S: instruction = Instruction.i32Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_:
 1721|    375|        case .i32Load16U: instruction = Instruction.i32Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_AmOcfu14_:
 1721|    366|        case .i32Load16U: instruction = Instruction.i32Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_:
 1722|    192|        case .i64Load8S: instruction = Instruction.i64Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_AmOcfu16_:
 1722|    188|        case .i64Load8S: instruction = Instruction.i64Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu17_:
 1723|    192|        case .i64Load8U: instruction = Instruction.i64Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu17_AmOcfu18_:
 1723|    184|        case .i64Load8U: instruction = Instruction.i64Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu19_:
 1724|    241|        case .i64Load16S: instruction = Instruction.i64Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu19_AmOcfu20_:
 1724|    235|        case .i64Load16S: instruction = Instruction.i64Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu21_:
 1725|     85|        case .i64Load16U: instruction = Instruction.i64Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu21_AmOcfu22_:
 1725|     82|        case .i64Load16U: instruction = Instruction.i64Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu23_:
 1726|  4.72k|        case .i64Load32S: instruction = Instruction.i64Load32S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu23_AmOcfu24_:
 1726|  4.68k|        case .i64Load32S: instruction = Instruction.i64Load32S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu25_:
 1727|    165|        case .i64Load32U: instruction = Instruction.i64Load32U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu25_AmOcfu26_:
 1727|     98|        case .i64Load32U: instruction = Instruction.i64Load32U
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKF:
 1732|    404|    mutating func visitStore(_ store: WasmParser.Instruction.Store, memarg: MemArg) throws {
 1733|    404|        let instruction: (Instruction.StoreOperand) -> Instruction
 1734|    404|        switch store {
 1735|    404|        case .i32Store: instruction = Instruction.i32Store
 1736|    404|        case .i64Store: instruction = Instruction.i64Store
 1737|    404|        case .f32Store: instruction = Instruction.f32Store
 1738|    404|        case .f64Store: instruction = Instruction.f64Store
 1739|    404|        case .i32Store8: instruction = Instruction.i32Store8
 1740|    404|        case .i32Store16: instruction = Instruction.i32Store16
 1741|    404|        case .i64Store8: instruction = Instruction.i64Store8
 1742|    404|        case .i64Store16: instruction = Instruction.i64Store16
 1743|    404|        case .i64Store32: instruction = Instruction.i64Store32
 1744|    404|        }
 1745|    404|        try visitStore(memarg, store.type, store.naturalAlignment, instruction)
 1746|    378|    }
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_:
 1735|     74|        case .i32Store: instruction = Instruction.i32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_AmOcfu0_:
 1735|     20|        case .i32Store: instruction = Instruction.i32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_:
 1736|     13|        case .i64Store: instruction = Instruction.i64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_AmOcfu2_:
 1736|      9|        case .i64Store: instruction = Instruction.i64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_:
 1737|    106|        case .f32Store: instruction = Instruction.f32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_AmOcfu4_:
 1737|     93|        case .f32Store: instruction = Instruction.f32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_:
 1738|     13|        case .f64Store: instruction = Instruction.f64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_AmOcfu6_:
 1738|      1|        case .f64Store: instruction = Instruction.f64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_:
 1739|     56|        case .i32Store8: instruction = Instruction.i32Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_AmOcfu8_:
 1739|     51|        case .i32Store8: instruction = Instruction.i32Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_:
 1740|     59|        case .i32Store16: instruction = Instruction.i32Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_AmOcfu10_:
 1740|     18|        case .i32Store16: instruction = Instruction.i32Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_:
 1741|     15|        case .i64Store8: instruction = Instruction.i64Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_AmOcfu12_:
 1741|      7|        case .i64Store8: instruction = Instruction.i64Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_:
 1742|     55|        case .i64Store16: instruction = Instruction.i64Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_AmOcfu14_:
 1742|     10|        case .i64Store16: instruction = Instruction.i64Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_:
 1743|     13|        case .i64Store32: instruction = Instruction.i64Store32
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_AmOcfu16_:
 1743|      3|        case .i64Store32: instruction = Instruction.i64Store32
$s7WasmKit21InstructionTranslatorV15visitMemorySize6memoryys6UInt32V_tKF:
 1747|  6.71k|    mutating func visitMemorySize(memory: UInt32) throws -> Output {
 1748|  6.71k|        let sizeType: ValueType = try module.isMemory64(memoryIndex: memory) ? .i64 : .i32
 1749|  6.71k|        pushEmit(sizeType, { .memorySize(Instruction.MemorySizeOperand(memoryIndex: memory, result: LVReg($0))) })
 1750|  6.71k|    }
$s7WasmKit21InstructionTranslatorV15visitMemorySize6memoryys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 1749|  6.71k|        pushEmit(sizeType, { .memorySize(Instruction.MemorySizeOperand(memoryIndex: memory, result: LVReg($0))) })
$s7WasmKit21InstructionTranslatorV15visitMemoryGrow6memoryys6UInt32V_tKF:
 1751|  1.52k|    mutating func visitMemoryGrow(memory: UInt32) throws -> Output {
 1752|  1.52k|        let isMemory64 = try module.isMemory64(memoryIndex: memory)
 1753|  1.52k|        let sizeType = ValueType.address(isMemory64: isMemory64)
 1754|  1.52k|        // Just pop/push the same type (i64 or i32) value
 1755|  1.52k|        try popPushEmit(sizeType, sizeType) { value, result, stack in
 1756|  1.52k|            .memoryGrow(
 1757|  1.52k|                Instruction.MemoryGrowOperand(
 1758|  1.52k|                    result: result, delta: value, memory: memory
 1759|  1.52k|                ))
 1760|  1.52k|        }
 1761|  1.52k|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryGrow6memoryys6UInt32V_tKFAA0C0Os5Int16V_AkC10ValueStackVyx_GtcfU_:
 1755|  1.43k|        try popPushEmit(sizeType, sizeType) { value, result, stack in
 1756|  1.43k|            .memoryGrow(
 1757|  1.43k|                Instruction.MemoryGrowOperand(
 1758|  1.43k|                    result: result, delta: value, memory: memory
 1759|  1.43k|                ))
 1760|  1.43k|        }
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtF:
 1763|  20.2k|    private mutating func visitConst(_ type: ValueType, _ value: Value) {
 1764|  20.2k|        if let constSlotIndex = constantSlots.allocate(value) {
 1765|  18.8k|            valueStack.pushConst(constSlotIndex, type: type)
 1766|  18.8k|            iseqBuilder.resetLastEmission()
 1767|  18.8k|            return
 1768|  18.8k|        }
 1769|  1.46k|        let value = UntypedValue(value)
 1770|  1.46k|        let is32Bit = type == .i32 || type == .f32
 1771|  1.46k|        if is32Bit {
 1772|    896|            pushEmit(
 1773|    896|                type,
 1774|    896|                {
 1775|    896|                    .const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg($0)))
 1776|    896|                })
 1777|    896|        } else {
 1778|    566|            pushEmit(type, { .const64(Instruction.Const64Operand(value: value, result: LLVReg($0))) })
 1779|    566|        }
 1780|  1.46k|    }
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFSbyKXEfu_:
 1770|    943|        let is32Bit = type == .i32 || type == .f32
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFAA0C0Os5Int16VcfU_:
 1774|    905|                {
 1775|    905|                    .const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg($0)))
 1776|    905|                })
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFAA0C0Os5Int16VcfU0_:
 1778|    579|            pushEmit(type, { .const64(Instruction.Const64Operand(value: value, result: LLVReg($0))) })
$s7WasmKit21InstructionTranslatorV13visitI32Const5valueys5Int32V_tF:
 1781|  6.84k|    mutating func visitI32Const(value: Int32) -> Output { visitConst(.i32, .i32(UInt32(bitPattern: value))) }
$s7WasmKit21InstructionTranslatorV13visitI64Const5valueys5Int64V_tF:
 1782|  7.04k|    mutating func visitI64Const(value: Int64) -> Output { visitConst(.i64, .i64(UInt64(bitPattern: value))) }
$s7WasmKit21InstructionTranslatorV13visitF32Const5valuey0A6Parser7IEEE754O7Float32V_tF:
 1783|  4.03k|    mutating func visitF32Const(value: IEEE754.Float32) -> Output { visitConst(.f32, .f32(value.bitPattern)) }
$s7WasmKit21InstructionTranslatorV13visitF64Const5valuey0A6Parser7IEEE754O7Float64V_tF:
 1784|  2.34k|    mutating func visitF64Const(value: IEEE754.Float64) -> Output { visitConst(.f64, .f64(value.bitPattern)) }
$s7WasmKit21InstructionTranslatorV12visitRefNull4typey0A5Types13ReferenceTypeO_tF:
 1785|     57|    mutating func visitRefNull(type: WasmTypes.ReferenceType) -> Output {
 1786|     57|        pushEmit(.ref(type), { .refNull(Instruction.RefNullOperand(result: $0, type: type)) })
 1787|     57|    }
$s7WasmKit21InstructionTranslatorV12visitRefNull4typey0A5Types13ReferenceTypeO_tFAA0C0Os5Int16VcfU_:
 1786|     57|        pushEmit(.ref(type), { .refNull(Instruction.RefNullOperand(result: $0, type: type)) })
$s7WasmKit21InstructionTranslatorV14visitRefIsNullyyKF:
 1788|     18|    mutating func visitRefIsNull() throws -> Output {
 1789|     18|        let value = try valueStack.popRef()
 1790|     11|        let result = valueStack.push(.i32)
 1791|     11|        emit(.refIsNull(Instruction.RefIsNullOperand(value: LVReg(ensureOnVReg(value)), result: LVReg(result))))
 1792|     11|    }
$s7WasmKit21InstructionTranslatorV12visitRefFunc13functionIndexys6UInt32V_tKF:
 1793|      5|    mutating func visitRefFunc(functionIndex: UInt32) throws -> Output {
 1794|      5|        try validator.validateRefFunc(functionIndex: functionIndex)
 1795|      3|        pushEmit(.ref(.funcRef), { .refFunc(Instruction.RefFuncOperand(index: functionIndex, result: LVReg($0))) })
 1796|      3|    }
$s7WasmKit21InstructionTranslatorV12visitRefFunc13functionIndexys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 1795|      3|        pushEmit(.ref(.funcRef), { .refFunc(Instruction.RefFuncOperand(index: functionIndex, result: LVReg($0))) })
$s7WasmKit21InstructionTranslatorV10visitUnary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ0F7OperandVctKF:
 1798|  20.9k|    private mutating func visitUnary(_ operand: ValueType, _ instruction: @escaping (Instruction.UnaryOperand) -> Instruction) throws {
 1799|  20.9k|        try popPushEmit(operand, operand) { value, result, stack in
 1800|  20.9k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1801|  20.9k|        }
 1802|  20.8k|    }
$s7WasmKit21InstructionTranslatorV10visitUnary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ0F7OperandVctKFAJs5Int16V_AnC0Q5StackVyx_GtcfU_:
 1799|  18.6k|        try popPushEmit(operand, operand) { value, result, stack in
 1800|  18.6k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1801|  18.6k|        }
$s7WasmKit21InstructionTranslatorV11visitBinary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ0F7OperandVctKF:
 1807|  25.5k|    ) throws {
 1808|  25.5k|        let rhs = try popVRegOperand(operand)
 1809|  25.3k|        let lhs = try popVRegOperand(operand)
 1810|  25.2k|        let result = valueStack.push(result)
 1811|  25.2k|        guard let lhs = lhs, let rhs = rhs else { return }
 1812|  13.8k|        emit(
 1813|  13.8k|            instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs)),
 1814|  13.8k|            resultRelink: { result in
 1815|  13.8k|                return instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs))
 1816|  13.8k|            }
 1817|  13.8k|        )
 1818|  13.8k|    }
$s7WasmKit21InstructionTranslatorV11visitBinary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ0F7OperandVctKFAJs5Int16VcfU_:
 1814|     29|            resultRelink: { result in
 1815|     29|                return instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs))
 1816|     29|            }
$s7WasmKit21InstructionTranslatorV8visitCmp021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ13BinaryOperandVctKF:
 1819|  3.64k|    private mutating func visitCmp(_ operand: ValueType, _ instruction: @escaping (Instruction.BinaryOperand) -> Instruction) throws {
 1820|  3.64k|        try visitBinary(operand, .i32, instruction)
 1821|  3.54k|    }
$s7WasmKit21InstructionTranslatorV15visitConversion021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ12UnaryOperandVctKF:
 1822|  25.4k|    private mutating func visitConversion(_ from: ValueType, _ to: ValueType, _ instruction: @escaping (Instruction.UnaryOperand) -> Instruction) throws {
 1823|  25.4k|        try popPushEmit(from, to) { value, result, stack in
 1824|  25.4k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1825|  25.4k|        }
 1826|  25.3k|    }
$s7WasmKit21InstructionTranslatorV15visitConversion021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ12UnaryOperandVctKFAJs5Int16V_AnC0Q5StackVyx_GtcfU_:
 1823|  24.4k|        try popPushEmit(from, to) { value, result, stack in
 1824|  24.4k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1825|  24.4k|        }
$s7WasmKit21InstructionTranslatorV11visitI32EqzyyKF:
 1827|    466|    mutating func visitI32Eqz() throws -> Output {
 1828|    466|        try popPushEmit(.i32, .i32) { value, result, stack in
 1829|    466|            .i32Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1830|    466|        }
 1831|    465|    }
$s7WasmKit21InstructionTranslatorV11visitI32EqzyyKFAA0C0Os5Int16V_AhC10ValueStackVyx_GtcfU_:
 1828|    211|        try popPushEmit(.i32, .i32) { value, result, stack in
 1829|    211|            .i32Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1830|    211|        }
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKF:
 1832|  3.64k|    mutating func visitCmp(_ cmp: WasmParser.Instruction.Cmp) throws {
 1833|  3.64k|        let operand: ValueType
 1834|  3.64k|        let instruction: (Instruction.BinaryOperand) -> Instruction
 1835|  3.64k|        switch cmp {
 1836|  3.64k|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
 1837|  3.64k|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
 1838|  3.64k|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
 1839|  3.64k|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
 1840|  3.64k|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
 1841|  3.64k|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
 1842|  3.64k|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
 1843|  3.64k|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
 1844|  3.64k|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
 1845|  3.64k|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
 1846|  3.64k|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
 1847|  3.64k|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
 1848|  3.64k|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
 1849|  3.64k|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
 1850|  3.64k|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
 1851|  3.64k|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
 1852|  3.64k|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
 1853|  3.64k|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
 1854|  3.64k|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
 1855|  3.64k|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
 1856|  3.64k|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
 1857|  3.64k|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
 1858|  3.64k|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
 1859|  3.64k|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
 1860|  3.64k|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
 1861|  3.64k|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
 1862|  3.64k|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
 1863|  3.64k|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
 1864|  3.64k|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
 1865|  3.64k|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
 1866|  3.64k|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
 1867|  3.64k|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
 1868|  3.64k|        }
 1869|  3.64k|        try visitCmp(operand, instruction)
 1870|  3.54k|    }
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu_:
 1836|    149|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu_AjLcfu0_:
 1836|     62|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu1_:
 1837|    100|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu1_AjLcfu2_:
 1837|     44|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu3_:
 1838|    390|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu3_AjLcfu4_:
 1838|    289|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu5_:
 1839|    173|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu5_AjLcfu6_:
 1839|     59|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu7_:
 1840|    367|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu7_AjLcfu8_:
 1840|    156|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu9_:
 1841|    458|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu9_AjLcfu10_:
 1841|    189|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu11_:
 1842|    128|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu11_AjLcfu12_:
 1842|     81|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu13_:
 1843|    101|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu13_AjLcfu14_:
 1843|     41|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu15_:
 1844|    302|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu15_AjLcfu16_:
 1844|    206|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu17_:
 1845|    281|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu17_AjLcfu18_:
 1845|     63|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu19_:
 1846|     17|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu19_AjLcfu20_:
 1846|     11|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu21_:
 1847|     32|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu21_AjLcfu22_:
 1847|     25|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu23_:
 1848|     76|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu23_AjLcfu24_:
 1848|     82|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu25_:
 1849|     19|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu25_AjLcfu26_:
 1849|     13|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu27_:
 1850|     14|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu27_AjLcfu28_:
 1850|     13|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu29_:
 1851|     14|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu29_AjLcfu30_:
 1851|     11|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu31_:
 1852|     22|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu31_AjLcfu32_:
 1852|     19|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu33_:
 1853|     32|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu33_AjLcfu34_:
 1853|     29|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu35_:
 1854|     45|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu35_AjLcfu36_:
 1854|     22|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu37_:
 1855|     73|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu37_AjLcfu38_:
 1855|     71|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu39_:
 1856|     13|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu39_AjLcfu40_:
 1856|      3|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu41_:
 1857|     80|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu41_AjLcfu42_:
 1857|     69|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu43_:
 1858|     48|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu43_AjLcfu44_:
 1858|     10|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu45_:
 1859|     33|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu45_AjLcfu46_:
 1859|     20|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu47_:
 1860|    120|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu47_AjLcfu48_:
 1860|    103|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu49_:
 1861|     53|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu49_AjLcfu50_:
 1861|     21|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu51_:
 1862|    254|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu51_AjLcfu52_:
 1862|    132|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu53_:
 1863|    146|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu53_AjLcfu54_:
 1863|    145|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu55_:
 1864|     46|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu55_AjLcfu56_:
 1864|     43|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu57_:
 1865|     23|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu57_AjLcfu58_:
 1865|      6|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu59_:
 1866|     24|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu59_AjLcfu60_:
 1866|     11|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu61_:
 1867|     10|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu61_AjLcfu62_:
 1867|      7|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKF:
 1871|  21.8k|    public mutating func visitBinary(_ binary: WasmParser.Instruction.Binary) throws {
 1872|  21.8k|        let operand: ValueType
 1873|  21.8k|        let result: ValueType
 1874|  21.8k|        let instruction: (Instruction.BinaryOperand) -> Instruction
 1875|  21.8k|        switch binary {
 1876|  21.8k|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
 1877|  21.8k|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
 1878|  21.8k|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
 1879|  21.8k|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
 1880|  21.8k|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
 1881|  21.8k|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
 1882|  21.8k|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
 1883|  21.8k|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
 1884|  21.8k|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
 1885|  21.8k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
 1886|  21.8k|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
 1887|  21.8k|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
 1888|  21.8k|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
 1889|  21.8k|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
 1890|  21.8k|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
 1891|  21.8k|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
 1892|  21.8k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
 1893|  21.8k|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
 1894|  21.8k|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
 1895|  21.8k|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
 1896|  21.8k|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
 1897|  21.8k|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
 1898|  21.8k|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
 1899|  21.8k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
 1900|  21.8k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
 1901|  21.8k|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
 1902|  21.8k|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
 1903|  21.8k|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
 1904|  21.8k|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
 1905|  21.8k|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
 1906|  21.8k|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
 1907|  21.8k|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
 1908|  21.8k|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
 1909|  21.8k|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
 1910|  21.8k|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
 1911|  21.8k|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
 1912|  21.8k|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
 1913|  21.8k|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
 1914|  21.8k|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
 1915|  21.8k|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
 1916|  21.8k|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
 1917|  21.8k|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
 1918|  21.8k|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
 1919|  21.8k|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
 1920|  21.8k|        }
 1921|  21.8k|        try visitBinary(operand, result, instruction)
 1922|  21.7k|    }
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_:
 1876|    102|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_AjLcfu0_:
 1876|     46|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_:
 1877|    199|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_AjLcfu2_:
 1877|     82|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_:
 1878|    219|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_AjLcfu4_:
 1878|     60|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_:
 1879|    198|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_AjLcfu6_:
 1879|     62|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_:
 1880|  1.82k|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_AjLcfu8_:
 1880|    176|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_:
 1881|    237|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_AjLcfu10_:
 1881|    146|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_:
 1882|    615|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_AjLcfu12_:
 1882|    257|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_:
 1883|     88|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_AjLcfu14_:
 1883|     14|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_:
 1884|    147|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_AjLcfu16_:
 1884|     42|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_:
 1885|  3.45k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_AjLcfu18_:
 1885|  3.23k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_:
 1886|    279|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_AjLcfu20_:
 1886|     53|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_:
 1887|    414|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_AjLcfu22_:
 1887|    100|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_:
 1888|    480|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_AjLcfu24_:
 1888|    165|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_:
 1889|    209|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_AjLcfu26_:
 1889|     46|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_:
 1890|    336|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_AjLcfu28_:
 1890|    204|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_:
 1891|    275|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_AjLcfu30_:
 1891|     31|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_:
 1892|  3.36k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_AjLcfu32_:
 1892|  1.79k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_:
 1893|    107|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_AjLcfu34_:
 1893|     30|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_:
 1894|    375|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_AjLcfu36_:
 1894|     85|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_:
 1895|    164|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_AjLcfu38_:
 1895|     19|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_:
 1896|    215|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_AjLcfu40_:
 1896|    100|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_:
 1897|    168|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_AjLcfu42_:
 1897|     45|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_:
 1898|    156|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_AjLcfu44_:
 1898|     27|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_:
 1899|  2.34k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_AjLcfu46_:
 1899|  2.21k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_:
 1900|  2.95k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_AjLcfu48_:
 1900|  2.07k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu49_:
 1901|    299|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu49_AjLcfu50_:
 1901|     34|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu51_:
 1902|    135|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu51_AjLcfu52_:
 1902|     57|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu53_:
 1903|    106|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu53_AjLcfu54_:
 1903|     27|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu55_:
 1904|    281|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu55_AjLcfu56_:
 1904|    141|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu57_:
 1905|    119|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu57_AjLcfu58_:
 1905|     31|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu59_:
 1906|    171|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu59_AjLcfu60_:
 1906|     33|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu61_:
 1907|    224|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu61_AjLcfu62_:
 1907|     18|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu63_:
 1908|    141|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu63_AjLcfu64_:
 1908|     41|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu65_:
 1909|    146|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu65_AjLcfu66_:
 1909|     41|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu67_:
 1910|    136|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu67_AjLcfu68_:
 1910|     56|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu69_:
 1911|    167|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu69_AjLcfu70_:
 1911|     18|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu71_:
 1912|    170|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu71_AjLcfu72_:
 1912|     41|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu73_:
 1913|    150|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu73_AjLcfu74_:
 1913|      6|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu75_:
 1914|    129|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu75_AjLcfu76_:
 1914|     13|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu77_:
 1915|     85|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu77_AjLcfu78_:
 1915|     10|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu79_:
 1916|    203|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu79_AjLcfu80_:
 1916|    110|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu81_:
 1917|    108|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu81_AjLcfu82_:
 1917|     13|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu83_:
 1918|     89|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu83_AjLcfu84_:
 1918|      6|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu85_:
 1919|    108|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu85_AjLcfu86_:
 1919|     10|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
$s7WasmKit21InstructionTranslatorV11visitI64EqzyyKF:
 1923|    313|    mutating func visitI64Eqz() throws -> Output {
 1924|    313|        try popPushEmit(.i64, .i32) { value, result, stack in
 1925|    313|            .i64Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1926|    313|        }
 1927|    312|    }
$s7WasmKit21InstructionTranslatorV11visitI64EqzyyKFAA0C0Os5Int16V_AhC10ValueStackVyx_GtcfU_:
 1924|    263|        try popPushEmit(.i64, .i32) { value, result, stack in
 1925|    263|            .i64Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1926|    263|        }
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKF:
 1928|  20.9k|    mutating func visitUnary(_ unary: WasmParser.Instruction.Unary) throws {
 1929|  20.9k|        let operand: ValueType
 1930|  20.9k|        let instruction: (Instruction.UnaryOperand) -> Instruction
 1931|  20.9k|        switch unary {
 1932|  20.9k|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
 1933|  20.9k|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
 1934|  20.9k|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
 1935|  20.9k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
 1936|  20.9k|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
 1937|  20.9k|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
 1938|  20.9k|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
 1939|  20.9k|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
 1940|  20.9k|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
 1941|  20.9k|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
 1942|  20.9k|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
 1943|  20.9k|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
 1944|  20.9k|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
 1945|  20.9k|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
 1946|  20.9k|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
 1947|  20.9k|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
 1948|  20.9k|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
 1949|  20.9k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
 1950|  20.9k|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
 1951|  20.9k|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
 1952|  20.9k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
 1953|  20.9k|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
 1954|  20.9k|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
 1955|  20.9k|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
 1956|  20.9k|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
 1957|  20.9k|        }
 1958|  20.9k|        try visitUnary(operand, instruction)
 1959|  20.8k|    }
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_:
 1932|    395|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_AjLcfu0_:
 1932|    390|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_:
 1933|    378|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_AjLcfu2_:
 1933|    443|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_:
 1934|    329|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_AjLcfu4_:
 1934|    313|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_:
 1935|  3.03k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_AjLcfu6_:
 1935|  2.88k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_:
 1936|    775|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_AjLcfu8_:
 1936|    727|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_:
 1937|    584|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_AjLcfu10_:
 1937|    472|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_:
 1938|    634|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_AjLcfu12_:
 1938|    487|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_:
 1939|    190|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_AjLcfu14_:
 1939|    187|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_:
 1940|    250|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_AjLcfu16_:
 1940|    230|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_:
 1941|    535|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_AjLcfu18_:
 1941|    490|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_:
 1942|    619|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_AjLcfu20_:
 1942|    611|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_:
 1943|    362|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_AjLcfu22_:
 1943|    343|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_:
 1944|    460|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_AjLcfu24_:
 1944|    445|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_:
 1945|    782|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_AjLcfu26_:
 1945|    768|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_:
 1946|    668|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_AjLcfu28_:
 1946|    806|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_:
 1947|    157|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_AjLcfu30_:
 1947|    154|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_:
 1948|    470|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_AjLcfu32_:
 1948|    464|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_:
 1949|  2.67k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_AjLcfu34_:
 1949|  2.61k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_:
 1950|    511|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_AjLcfu36_:
 1950|    476|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_:
 1951|    469|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_AjLcfu38_:
 1951|    464|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_:
 1952|  4.24k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_AjLcfu40_:
 1952|  2.71k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_:
 1953|    887|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_AjLcfu42_:
 1953|    811|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_:
 1954|    770|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_AjLcfu44_:
 1954|    693|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_:
 1955|    411|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_AjLcfu46_:
 1955|    395|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_:
 1956|    313|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_AjLcfu48_:
 1956|    290|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKF:
 1960|  25.4k|    mutating func visitConversion(_ conversion: WasmParser.Instruction.Conversion) throws {
 1961|  25.4k|        let from: ValueType
 1962|  25.4k|        let to: ValueType
 1963|  25.4k|        let instruction: (Instruction.UnaryOperand) -> Instruction
 1964|  25.4k|        switch conversion {
 1965|  25.4k|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
 1966|  25.4k|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
 1967|  25.4k|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
 1968|  25.4k|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
 1969|  25.4k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
 1970|  25.4k|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
 1971|  25.4k|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
 1972|  25.4k|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
 1973|  25.4k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
 1974|  25.4k|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
 1975|  25.4k|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
 1976|  25.4k|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
 1977|  25.4k|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
 1978|  25.4k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
 1979|  25.4k|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
 1980|  25.4k|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
 1981|  25.4k|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
 1982|  25.4k|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
 1983|  25.4k|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
 1984|  25.4k|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
 1985|  25.4k|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
 1986|  25.4k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
 1987|  25.4k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
 1988|  25.4k|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
 1989|  25.4k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
 1990|  25.4k|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
 1991|  25.4k|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
 1992|  25.4k|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
 1993|  25.4k|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
 1994|  25.4k|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
 1995|  25.4k|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
 1996|  25.4k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
 1997|  25.4k|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
 1998|  25.4k|        }
 1999|  25.4k|        try visitConversion(from, to, instruction)
 2000|  25.3k|    }
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu_:
 1965|    617|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu_AjLcfu0_:
 1965|    609|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu1_:
 1966|     90|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu1_AjLcfu2_:
 1966|     87|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu3_:
 1967|    336|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu3_AjLcfu4_:
 1967|    327|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu5_:
 1968|    145|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu5_AjLcfu6_:
 1968|    138|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu7_:
 1969|  3.11k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu7_AjLcfu8_:
 1969|  3.18k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu9_:
 1970|    250|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu9_AjLcfu10_:
 1970|    248|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu11_:
 1971|    168|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu11_AjLcfu12_:
 1971|    164|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu13_:
 1972|    442|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu13_AjLcfu14_:
 1972|    441|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu15_:
 1973|  2.04k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu15_AjLcfu16_:
 1973|  2.04k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu17_:
 1974|    510|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu17_AjLcfu18_:
 1974|    382|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu19_:
 1975|     21|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu19_AjLcfu20_:
 1975|     11|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu21_:
 1976|    381|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu21_AjLcfu22_:
 1976|    380|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu23_:
 1977|     88|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu23_AjLcfu24_:
 1977|     84|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu25_:
 1978|  2.37k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu25_AjLcfu26_:
 1978|  2.37k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu27_:
 1979|    226|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu27_AjLcfu28_:
 1979|    148|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu29_:
 1980|    156|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu29_AjLcfu30_:
 1980|    135|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu31_:
 1981|    441|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu31_AjLcfu32_:
 1981|    439|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu33_:
 1982|     50|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu33_AjLcfu34_:
 1982|     35|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu35_:
 1983|    672|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu35_AjLcfu36_:
 1983|    654|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu37_:
 1984|    231|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu37_AjLcfu38_:
 1984|    141|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu39_:
 1985|    591|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu39_AjLcfu40_:
 1985|    754|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu41_:
 1986|  1.95k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu41_AjLcfu42_:
 1986|  1.44k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu43_:
 1987|  1.38k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu43_AjLcfu44_:
 1987|  1.20k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu45_:
 1988|    372|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu45_AjLcfu46_:
 1988|    365|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu47_:
 1989|  3.69k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu47_AjLcfu48_:
 1989|  3.64k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu49_:
 1990|     31|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu49_AjLcfu50_:
 1990|     28|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu51_:
 1991|    443|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu51_AjLcfu52_:
 1991|    437|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu53_:
 1992|     66|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu53_AjLcfu54_:
 1992|     63|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu55_:
 1993|    198|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu55_AjLcfu56_:
 1993|    197|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu57_:
 1994|    750|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu57_AjLcfu58_:
 1994|    712|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu59_:
 1995|    276|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu59_AjLcfu60_:
 1995|    268|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu61_:
 1996|  3.17k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu61_AjLcfu62_:
 1996|  3.17k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu63_:
 1997|    133|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu63_AjLcfu64_:
 1997|    132|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitMemoryInit9dataIndexys6UInt32V_tKF:
 2002|      1|    mutating func visitMemoryInit(dataIndex: UInt32) throws -> Output {
 2003|      1|        try self.validator.validateDataSegment(dataIndex)
 2004|      0|        let addressType = try module.addressType(memoryIndex: 0)
 2005|      0|        try pop3Emit((.i32, .i32, addressType)) { values, stack in
 2006|      0|            let (size, sourceOffset, destOffset) = values
 2007|      0|            return .memoryInit(
 2008|      0|                Instruction.MemoryInitOperand(
 2009|      0|                    segmentIndex: dataIndex,
 2010|      0|                    destOffset: destOffset,
 2011|      0|                    sourceOffset: sourceOffset,
 2012|      0|                    size: size
 2013|      0|                )
 2014|      0|            )
 2015|      0|        }
 2016|      0|    }
$s7WasmKit21InstructionTranslatorV13visitDataDrop9dataIndexys6UInt32V_tKF:
 2017|      1|    mutating func visitDataDrop(dataIndex: UInt32) throws -> Output {
 2018|      1|        try self.validator.validateDataSegment(dataIndex)
 2019|      0|        emit(.memoryDataDrop(Instruction.MemoryDataDropOperand(segmentIndex: dataIndex)))
 2020|      0|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryCopy6dstMem03srcI0ys6UInt32V_AHtKF:
 2021|     88|    mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws -> Output {
 2022|     88|        //     C.mems[0] = it limits
 2023|     88|        // -----------------------------
 2024|     88|        // C ⊦ memory.fill : [it i32 it] → []
 2025|     88|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2026|     88|        let addressType = try module.addressType(memoryIndex: 0)
 2027|     87|        try pop3Emit((addressType, addressType, addressType)) { values, stack in
 2028|     87|            let (size, sourceOffset, destOffset) = values
 2029|     87|            return .memoryCopy(
 2030|     87|                Instruction.MemoryCopyOperand(
 2031|     87|                    destOffset: destOffset,
 2032|     87|                    sourceOffset: sourceOffset,
 2033|     87|                    size: LVReg(size)
 2034|     87|                )
 2035|     87|            )
 2036|     87|        }
 2037|     86|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryCopy6dstMem03srcI0ys6UInt32V_AHtKFAA0C0Os5Int16V_A2Lt_AC10ValueStackVyx_GztXEfU_:
 2027|     10|        try pop3Emit((addressType, addressType, addressType)) { values, stack in
 2028|     10|            let (size, sourceOffset, destOffset) = values
 2029|     10|            return .memoryCopy(
 2030|     10|                Instruction.MemoryCopyOperand(
 2031|     10|                    destOffset: destOffset,
 2032|     10|                    sourceOffset: sourceOffset,
 2033|     10|                    size: LVReg(size)
 2034|     10|                )
 2035|     10|            )
 2036|     10|        }
$s7WasmKit21InstructionTranslatorV15visitMemoryFill6memoryys6UInt32V_tKF:
 2038|     64|    mutating func visitMemoryFill(memory: UInt32) throws -> Output {
 2039|     64|        //     C.mems[0] = it limits
 2040|     64|        // -----------------------------
 2041|     64|        // C ⊦ memory.fill : [it i32 it] → []
 2042|     64|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2043|     64|        let addressType = try module.addressType(memoryIndex: 0)
 2044|     63|        try pop3Emit((addressType, .i32, addressType)) { values, stack in
 2045|     63|            let (size, value, destOffset) = values
 2046|     63|            return .memoryFill(
 2047|     63|                Instruction.MemoryFillOperand(
 2048|     63|                    destOffset: destOffset,
 2049|     63|                    value: value,
 2050|     63|                    size: LVReg(size)
 2051|     63|                )
 2052|     63|            )
 2053|     63|        }
 2054|     60|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryFill6memoryys6UInt32V_tKFAA0C0Os5Int16V_A2Kt_AC10ValueStackVyx_GztXEfU_:
 2044|      6|        try pop3Emit((addressType, .i32, addressType)) { values, stack in
 2045|      6|            let (size, value, destOffset) = values
 2046|      6|            return .memoryFill(
 2047|      6|                Instruction.MemoryFillOperand(
 2048|      6|                    destOffset: destOffset,
 2049|      6|                    value: value,
 2050|      6|                    size: LVReg(size)
 2051|      6|                )
 2052|      6|            )
 2053|      6|        }
$s7WasmKit21InstructionTranslatorV14visitTableInit9elemIndex5tableys6UInt32V_AHtKF:
 2055|      3|    mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws -> Output {
 2056|      3|        try validator.validateTableInit(elemIndex: elemIndex, table: table)
 2057|      0|
 2058|      0|        try pop3Emit((.i32, .i32, module.addressType(tableIndex: table))) { values, stack in
 2059|      0|            let (size, sourceOffset, destOffset) = values
 2060|      0|            return .tableInit(
 2061|      0|                Instruction.TableInitOperand(
 2062|      0|                    tableIndex: table,
 2063|      0|                    segmentIndex: elemIndex,
 2064|      0|                    destOffset: destOffset,
 2065|      0|                    sourceOffset: sourceOffset,
 2066|      0|                    size: size
 2067|      0|                )
 2068|      0|            )
 2069|      0|        }
 2070|      0|    }
$s7WasmKit21InstructionTranslatorV13visitElemDrop9elemIndexys6UInt32V_tKF:
 2071|      1|    mutating func visitElemDrop(elemIndex: UInt32) throws -> Output {
 2072|      1|        try self.module.validateElementSegment(elemIndex)
 2073|      0|        emit(.tableElementDrop(Instruction.TableElementDropOperand(index: elemIndex)))
 2074|      0|    }
$s7WasmKit21InstructionTranslatorV14visitTableCopy03dstF003srcF0ys6UInt32V_AHtKF:
 2075|     61|    mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws -> Output {
 2076|     61|        //   C.tables[d] = iN limits t   C.tables[s] = iM limits t    K = min {N, M}
 2077|     61|        // -----------------------------------------------------------------------------
 2078|     61|        // C ⊦ table.copy d s : [iN iM iK] → []
 2079|     61|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2080|     61|        try validator.validateTableCopy(dest: dstTable, source: srcTable)
 2081|     58|        let destIsMemory64 = try module.isMemory64(tableIndex: dstTable)
 2082|     58|        let sourceIsMemory64 = try module.isMemory64(tableIndex: srcTable)
 2083|     58|        let lengthIsMemory64 = destIsMemory64 && sourceIsMemory64
 2084|     58|        try pop3Emit(
 2085|     58|            (
 2086|     58|                .address(isMemory64: lengthIsMemory64),
 2087|     58|                .address(isMemory64: sourceIsMemory64),
 2088|     58|                .address(isMemory64: destIsMemory64)
 2089|     58|            )
 2090|     58|        ) { values, stack in
 2091|     58|            let (size, sourceOffset, destOffset) = values
 2092|     58|            return .tableCopy(
 2093|     58|                Instruction.TableCopyOperand(
 2094|     58|                    sourceIndex: srcTable,
 2095|     58|                    destIndex: dstTable,
 2096|     58|                    destOffset: destOffset,
 2097|     58|                    sourceOffset: sourceOffset,
 2098|     58|                    size: size
 2099|     58|                )
 2100|     58|            )
 2101|     58|        }
 2102|     57|    }
$s7WasmKit21InstructionTranslatorV14visitTableCopy03dstF003srcF0ys6UInt32V_AHtKFAA0C0Os5Int16V_A2Lt_AC10ValueStackVyx_GztXEfU_:
 2090|     10|        ) { values, stack in
 2091|     10|            let (size, sourceOffset, destOffset) = values
 2092|     10|            return .tableCopy(
 2093|     10|                Instruction.TableCopyOperand(
 2094|     10|                    sourceIndex: srcTable,
 2095|     10|                    destIndex: dstTable,
 2096|     10|                    destOffset: destOffset,
 2097|     10|                    sourceOffset: sourceOffset,
 2098|     10|                    size: size
 2099|     10|                )
 2100|     10|            )
 2101|     10|        }
$s7WasmKit21InstructionTranslatorV14visitTableFill5tableys6UInt32V_tKF:
 2103|     14|    mutating func visitTableFill(table: UInt32) throws -> Output {
 2104|     14|        let address = try module.addressType(tableIndex: table)
 2105|     13|        let type = try module.tableType(table)
 2106|     13|        try pop3Emit((address, .ref(type.elementType), address)) { values, stack in
 2107|     13|            let (size, value, destOffset) = values
 2108|     13|            return .tableFill(
 2109|     13|                Instruction.TableFillOperand(
 2110|     13|                    tableIndex: table,
 2111|     13|                    destOffset: destOffset,
 2112|     13|                    value: value,
 2113|     13|                    size: size
 2114|     13|                )
 2115|     13|            )
 2116|     13|        }
 2117|     11|    }
$s7WasmKit21InstructionTranslatorV13visitTableGet5tableys6UInt32V_tKF:
 2118|    103|    mutating func visitTableGet(table: UInt32) throws -> Output {
 2119|    103|        let type = try module.tableType(table)
 2120|    102|        try popPushEmit(
 2121|    102|            module.addressType(tableIndex: table),
 2122|    102|            .ref(type.elementType)
 2123|    102|        ) { index, result, stack in
 2124|    102|            return .tableGet(
 2125|    102|                Instruction.TableGetOperand(
 2126|    102|                    index: index,
 2127|    102|                    result: result,
 2128|    102|                    tableIndex: table
 2129|    102|                )
 2130|    102|            )
 2131|    102|        }
 2132|    101|    }
$s7WasmKit21InstructionTranslatorV13visitTableGet5tableys6UInt32V_tKFAA0C0Os5Int16V_AkC10ValueStackVyx_GtcfU_:
 2123|     24|        ) { index, result, stack in
 2124|     24|            return .tableGet(
 2125|     24|                Instruction.TableGetOperand(
 2126|     24|                    index: index,
 2127|     24|                    result: result,
 2128|     24|                    tableIndex: table
 2129|     24|                )
 2130|     24|            )
 2131|     24|        }
$s7WasmKit21InstructionTranslatorV13visitTableSet5tableys6UInt32V_tKF:
 2133|    112|    mutating func visitTableSet(table: UInt32) throws -> Output {
 2134|    112|        let type = try module.tableType(table)
 2135|    109|        try pop2Emit((.ref(type.elementType), module.addressType(tableIndex: table))) { values, stack in
 2136|    109|            let (value, index) = values
 2137|    109|            return .tableSet(
 2138|    109|                Instruction.TableSetOperand(
 2139|    109|                    index: index,
 2140|    109|                    value: value,
 2141|    109|                    tableIndex: table
 2142|    109|                )
 2143|    109|            )
 2144|    109|        }
 2145|    103|    }
$s7WasmKit21InstructionTranslatorV13visitTableSet5tableys6UInt32V_tKFAA0C0Os5Int16V_AKt_AC10ValueStackVyx_GztXEfU_:
 2135|     10|        try pop2Emit((.ref(type.elementType), module.addressType(tableIndex: table))) { values, stack in
 2136|     10|            let (value, index) = values
 2137|     10|            return .tableSet(
 2138|     10|                Instruction.TableSetOperand(
 2139|     10|                    index: index,
 2140|     10|                    value: value,
 2141|     10|                    tableIndex: table
 2142|     10|                )
 2143|     10|            )
 2144|     10|        }
$s7WasmKit21InstructionTranslatorV14visitTableGrow5tableys6UInt32V_tKF:
 2146|     35|    mutating func visitTableGrow(table: UInt32) throws -> Output {
 2147|     35|        let address = try module.addressType(tableIndex: table)
 2148|     34|        let type = try module.tableType(table)
 2149|     34|        try pop2PushEmit((address, .ref(type.elementType)), address) { values, result in
 2150|     34|            let (delta, value) = values
 2151|     34|            return .tableGrow(
 2152|     34|                Instruction.TableGrowOperand(
 2153|     34|                    tableIndex: table,
 2154|     34|                    result: result,
 2155|     34|                    delta: delta,
 2156|     34|                    value: value
 2157|     34|                )
 2158|     34|            )
 2159|     34|        }
 2160|     32|    }
$s7WasmKit21InstructionTranslatorV14visitTableSize5tableys6UInt32V_tKF:
 2161|     20|    mutating func visitTableSize(table: UInt32) throws -> Output {
 2162|     20|        pushEmit(try module.addressType(tableIndex: table)) { result in
 2163|     19|            return .tableSize(Instruction.TableSizeOperand(tableIndex: table, result: LVReg(result)))
 2164|     19|        }
 2165|     19|    }
$s7WasmKit21InstructionTranslatorV14visitTableSize5tableys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 2162|     19|        pushEmit(try module.addressType(tableIndex: table)) { result in
 2163|     19|            return .tableSize(Instruction.TableSizeOperand(tableIndex: table, result: LVReg(result)))
 2164|     19|        }
$s7WasmKit16TranslationErrorVyACSScfC:
 2171|    513|    init(_ description: String) {
 2172|    513|        self.description = description
 2173|    513|    }
$s9WasmTypes12FunctionTypeV0A3KitE05blockD011typeSectionAC0A6Parser05BlockD0O_SayACGtKc021_3C1F9FC595E9AC192A47N10B121D811E8LlfC:
 2177|  7.12k|    fileprivate init(blockType: WasmParser.BlockType, typeSection: [FunctionType]) throws {
 2178|  7.12k|        switch blockType {
 2179|  7.12k|        case .type(let valueType):
 2180|  2.45k|            self.init(parameters: [], results: [valueType])
 2181|  7.12k|        case .empty:
 2182|  3.08k|            self.init(parameters: [], results: [])
 2183|  7.12k|        case let .funcType(typeIndex):
 2184|  1.58k|            let typeIndex = Int(typeIndex)
 2185|  1.58k|            guard typeIndex < typeSection.count else {
 2186|     38|                throw ValidationError(.indexOutOfBounds("type", typeIndex, max: typeSection.count))
 2187|  1.55k|            }
 2188|  1.55k|            let funcType = typeSection[typeIndex]
 2189|  1.55k|            self.init(
 2190|  1.55k|                parameters: funcType.parameters,
 2191|  1.55k|                results: funcType.results
 2192|  1.55k|            )
 2193|  7.12k|        }
 2194|  7.08k|    }
$s9WasmTypes9ValueTypeO0A3KitE7address021_3C1F9FC595E9AC192A47J10B121D811E8LL10isMemory64ACSb_tFZ:
 2198|  14.9k|    fileprivate static func address(isMemory64: Bool) -> ValueType {
 2199|  14.9k|        return isMemory64 ? .i64 : .i32
 2200|  14.9k|    }

$s7WasmKit15ValidationErrorV7MessageVyAESScfC:
    9|    419|        init(_ text: String) {
   10|    419|            self.text = text
   11|    419|        }
$s7WasmKit15ValidationErrorVyA2C7MessageVcfC:
   30|    419|    init(_ message: Message) {
   31|    419|        self.message = message
   32|    419|    }
$s7WasmKit15ValidationErrorV7MessageV22invalidMemArgAlignment6memarg07naturalI0AE0A6Parser0gH0V_SitFZ:
   36|     23|    static func invalidMemArgAlignment(memarg: MemArg, naturalAlignment: Int) -> Self {
   37|     23|        Self("alignment 2**\(memarg.align) is out of limit \(naturalAlignment)")
   38|     23|    }
$s7WasmKit15ValidationErrorV7MessageV17globalSetConstantAEvgZ:
   40|      1|    static var globalSetConstant: Self {
   41|      1|        Self("cannot set a constant global")
   42|      1|    }
$s7WasmKit15ValidationErrorV7MessageV28multipleMemoriesNotPermittedAEvgZ:
   44|      9|    static var multipleMemoriesNotPermitted: Self {
   45|      9|        Self("multiple memories are not permitted")
   46|      9|    }
$s7WasmKit15ValidationErrorV7MessageV30startFunctionInvalidParametersAEyFZ:
   48|      2|    static func startFunctionInvalidParameters() -> Self {
   49|      2|        Self("start function must have no parameters and no results")
   50|      2|    }
$s7WasmKit15ValidationErrorV7MessageV19sizeMinimumExceeded3maxAEs6UInt64V_tFZ:
   56|      1|    static func sizeMinimumExceeded(max: UInt64) -> Self {
   57|      1|        Self("size minimum must not be greater than \(max)")
   58|      1|    }
$s7WasmKit15ValidationErrorV7MessageV19sizeMaximumExceeded3maxAEs6UInt64V_tFZ:
   60|      2|    static func sizeMaximumExceeded(max: UInt64) -> Self {
   61|      2|        Self("size maximum must not be greater than \(max)")
   62|      2|    }
$s7WasmKit15ValidationErrorV7MessageV24dataCountSectionRequiredAEvgZ:
   72|      2|    static var dataCountSectionRequired: Self {
   73|      2|        Self("data count section is required but not found")
   74|      2|    }
$s7WasmKit15ValidationErrorV7MessageV16indexOutOfBounds__3maxAEs12StaticStringV_xq_tSjRzSjR_r0_lFZ:
   76|    159|    static func indexOutOfBounds<Index: Numeric, Max: Numeric>(_ entity: StaticString, _ index: Index, max: Max) -> Self {
   77|    159|        Self("\(entity) index out of bounds: \(index) (max: \(max))")
   78|    159|    }
$s7WasmKit15ValidationErrorV7MessageV16expectTypeButGot8expected3gotAESS_SStFZ:
   84|     22|    static func expectTypeButGot(expected: String, got: String) -> Self {
   85|     22|        Self("expect \(expected) but got \(got)")
   86|     22|    }
$s7WasmKit15ValidationErrorV7MessageV31sizeMinimumMustNotExceedMaximumAEvgZ:
   88|      2|    static var sizeMinimumMustNotExceedMaximum: Self {
   89|      2|        Self("size minimum must not be greater than maximum")
   90|      2|    }
$s7WasmKit15ValidationErrorV7MessageV24functionIndexNotDeclared5indexAEs6UInt32V_tFZ:
   92|      1|    static func functionIndexNotDeclared(index: FunctionIndex) -> Self {
   93|      1|        Self("function index \(index) is not declared but referenced as a function reference")
   94|      1|    }
$s7WasmKit15ValidationErrorV7MessageV19duplicateExportName4nameAESS_tFZ:
   96|      2|    static func duplicateExportName(name: String) -> Self {
   97|      2|        Self("duplicate export name: \(name)")
   98|      2|    }
$s7WasmKit15ValidationErrorV7MessageV23relativeDepthOutOfRange0fG0AEs6UInt32V_tFZ:
  111|     16|    static func relativeDepthOutOfRange(relativeDepth: UInt32) -> Self {
  112|     16|        Self("relative depth \(relativeDepth) is out of range")
  113|     16|    }
$s7WasmKit15ValidationErrorV7MessageV22expectedIfControlFrameAEvgZ:
  115|     36|    static var expectedIfControlFrame: Self {
  116|     36|        Self("expected `if` control frame on top of the stack for `else`")
  117|     36|    }
$s7WasmKit15ValidationErrorV7MessageV27valuesRemainingAtEndOfBlockAEvgZ:
  119|     54|    static var valuesRemainingAtEndOfBlock: Self {
  120|     54|        Self("values remaining on stack at end of block")
  121|     54|    }
$s7WasmKit15ValidationErrorV7MessageV27parameterResultTypeMismatch05blockH0AE0A5Types08FunctionH0V_tFZ:
  123|     23|    static func parameterResultTypeMismatch(blockType: FunctionType) -> Self {
  124|     23|        Self("expected the same parameter and result types for `if` block but got \(blockType)")
  125|     23|    }
$s7WasmKit15ValidationErrorV7MessageV20stackHeightUnderflow9available8requiredAESi_SitFZ:
  127|      4|    static func stackHeightUnderflow(available: Int, required: Int) -> Self {
  128|      4|        Self("stack height underflow: available \(available), required \(required)")
  129|      4|    }
$s7WasmKit15ValidationErrorV7MessageV19expectedTypeOnStack0F06actualAE0A5Types05ValueG0O_AKtFZ:
  131|      4|    static func expectedTypeOnStack(expected: ValueType, actual: ValueType) -> Self {
  132|      4|        Self("expected \(expected) on the stack top but got \(actual)")
  133|      4|    }
$s7WasmKit15ValidationErrorV7MessageV27expectedMoreEndInstructions5countAESi_tFZ:
  135|     13|    static func expectedMoreEndInstructions(count: Int) -> Self {
  136|     13|        Self("expect \(count) more `end` instructions")
  137|     13|    }
$s7WasmKit15ValidationErrorV7MessageV21expectedSameCopyTypes05framehI0012defaultFramehI0AESay0aI09ValueTypeOG_ALtFZ:
  142|      8|    ) -> Self {
  143|      8|        Self("expected the same copy types for all branches in `br_table` but got \(frameCopyTypes) and \(defaultFrameCopyTypes)")
  144|      8|    }
$s7WasmKit15ValidationErrorV7MessageV28cannotSelectOnReferenceTypesAEvgZ:
  146|      2|    static var cannotSelectOnReferenceTypes: Self {
  147|      2|        Self("cannot `select` on reference types")
  148|      2|    }
$s7WasmKit15ValidationErrorV7MessageV20typeMismatchOnSelect8expected6actualAE0A5Types9ValueTypeO_AKtFZ:
  150|      4|    static func typeMismatchOnSelect(expected: ValueType, actual: ValueType) -> Self {
  151|      4|        Self("type mismatch on `select`. Expected \(expected) and \(actual) to be same")
  152|      4|    }
$s7WasmKit15ValidationErrorV7MessageV28unexpectedElementInitializer10expressionAESS_tFZ:
  158|     11|    static func unexpectedElementInitializer(expression: String) -> Self {
  159|     11|        Self("unexpected element initializer expression: \(expression)")
  160|     11|    }
$s7WasmKit15ValidationErrorV7MessageV29expectedEndAtOffsetExpressionAEvgZ:
  166|      3|    static var expectedEndAtOffsetExpression: Self {
  167|      3|        Self("expect `end` at the end of offset expression")
  168|      3|    }
$s7WasmKit15ValidationErrorV7MessageV33illegalConstExpressionInstructionyAE0A6Parser0I0OFZ:
  170|     10|    static func illegalConstExpressionInstruction(_ constInst: WasmParser.Instruction) -> Self {
  171|     10|        Self("illegal const expression instruction: \(constInst)")
  172|     10|    }
$s7WasmKit15ValidationErrorV7MessageV33inconsistentFunctionAndCodeLength13functionCount04codeL0AESi_SitFZ:
  174|      2|    static func inconsistentFunctionAndCodeLength(functionCount: Int, codeCount: Int) -> Self {
  175|      2|        Self("Inconsistent function and code length: \(functionCount) vs \(codeCount)")
  176|      2|    }
$s7WasmKit15ValidationErrorV7MessageV024inconsistentDataCountAndG13SectionLength04dataH00lJ0AEs6UInt32V_SitFZ:
  178|      3|    static func inconsistentDataCountAndDataSectionLength(dataCount: UInt32, dataSection: Int) -> Self {
  179|      3|        Self("Inconsistent data count and data section length: \(dataCount) vs \(dataSection)")
  180|      3|    }
$s7WasmKit20InstructionValidatorV14validateMemArg_16naturalAlignmenty0A6Parser0fG0V_SitKF:
  187|  13.3k|    func validateMemArg(_ memarg: MemArg, naturalAlignment: Int) throws {
  188|  13.3k|        if memarg.align > naturalAlignment {
  189|     23|            throw ValidationError(.invalidMemArgAlignment(memarg: memarg, naturalAlignment: naturalAlignment))
  190|  13.2k|        }
  191|  13.2k|    }
$s7WasmKit20InstructionValidatorV17validateGlobalSetyy0A6Parser0F4TypeVKF:
  193|  6.31k|    func validateGlobalSet(_ type: GlobalType) throws {
  194|  6.31k|        switch type.mutability {
  195|  6.31k|        case .constant:
  196|      1|            throw ValidationError(.globalSetConstant)
  197|  6.31k|        case .variable:
  198|  6.31k|            break
  199|  6.31k|        }
  200|  6.31k|    }
$s7WasmKit20InstructionValidatorV17validateTableInit9elemIndex5tableys6UInt32V_AHtKF:
  202|      3|    func validateTableInit(elemIndex: UInt32, table: UInt32) throws {
  203|      3|        let tableType = try context.tableType(table)
  204|      2|        let elementType = try context.elementType(elemIndex)
  205|      0|        guard tableType.elementType == elementType else {
  206|      0|            throw ValidationError(.tableElementTypeMismatch(tableType: "\(tableType.elementType)", elementType: "\(elementType)"))
  207|      0|        }
  208|      0|    }
$s7WasmKit20InstructionValidatorV17validateTableCopy4dest6sourceys6UInt32V_AHtKF:
  210|     61|    func validateTableCopy(dest: UInt32, source: UInt32) throws {
  211|     61|        let tableType1 = try context.tableType(source)
  212|     60|        let tableType2 = try context.tableType(dest)
  213|     58|        guard tableType1.elementType == tableType2.elementType else {
  214|      0|            throw ValidationError(.tableElementTypeMismatch(tableType: "\(tableType1.elementType)", elementType: "\(tableType2.elementType)"))
  215|     58|        }
  216|     58|    }
$s7WasmKit20InstructionValidatorV15validateRefFunc13functionIndexys6UInt32V_tKF:
  218|      5|    func validateRefFunc(functionIndex: UInt32) throws {
  219|      5|        try context.validateFunctionIndex(functionIndex)
  220|      3|    }
$s7WasmKit20InstructionValidatorV19validateDataSegmentyys6UInt32VKF:
  222|      2|    func validateDataSegment(_ dataIndex: DataIndex) throws {
  223|      2|        guard let dataCount = context.dataCount else {
  224|      2|            throw ValidationError(.dataCountSectionRequired)
  225|      2|        }
  226|      0|        guard dataIndex < dataCount else {
  227|      0|            throw ValidationError(.indexOutOfBounds("data", dataIndex, max: dataCount))
  228|      0|        }
  229|      0|    }
$s7WasmKit15ModuleValidatorV6moduleAcA0C0V_tcfC:
  235|  1.55k|    init(module: Module) {
  236|  1.55k|        self.module = module
  237|  1.55k|    }
$s7WasmKit15ModuleValidatorV8validateyyKF:
  239|  1.55k|    func validate() throws {
  240|  1.55k|        if module.memoryTypes.count > 1 {
  241|      9|            throw ValidationError(.multipleMemoriesNotPermitted)
  242|  1.54k|        }
  243|  1.54k|        for memoryType in module.memoryTypes {
  244|    754|            try Self.checkMemoryType(memoryType, features: module.features)
  245|  1.53k|        }
  246|  1.53k|        for tableType in module.tableTypes {
  247|    311|            try Self.checkTableType(tableType, features: module.features)
  248|  1.53k|        }
  249|  1.53k|        try checkStartFunction()
  250|  1.53k|    }
$s7WasmKit15ModuleValidatorV18checkStartFunctionyyKF:
  252|  1.53k|    func checkStartFunction() throws {
  253|  1.53k|        if let startFunction = module.start {
  254|    386|            let type = try module.resolveFunctionType(startFunction)
  255|    383|            guard type.parameters.isEmpty, type.results.isEmpty else {
  256|      2|                throw ValidationError(.startFunctionInvalidParameters())
  257|    381|            }
  258|  1.53k|        }
  259|  1.53k|    }
$s7WasmKit15ModuleValidatorV15checkMemoryType_8featuresy0A6Parser6LimitsV_AF0A10FeatureSetVtKFZ:
  261|    864|    static func checkMemoryType(_ type: MemoryType, features: WasmFeatureSet) throws {
  262|    864|        try checkLimit(type)
  263|    863|
  264|    863|        if type.isMemory64 {
  265|      0|            guard features.contains(.memory64) else {
  266|      0|                throw ValidationError(.memory64FeatureRequired)
  267|      0|            }
  268|    863|        }
  269|    863|
  270|    863|        let hardMax = MemoryEntity.maxPageCount(isMemory64: type.isMemory64)
  271|    863|
  272|    863|        if type.min > hardMax {
  273|      1|            throw ValidationError(.sizeMinimumExceeded(max: hardMax))
  274|    862|        }
  275|    862|
  276|    862|        if let max = type.max, max > hardMax {
  277|      2|            throw ValidationError(.sizeMaximumExceeded(max: hardMax))
  278|    860|        }
  279|    860|
  280|    860|        if type.shared {
  281|      0|            guard features.contains(.threads) else {
  282|      0|                throw ValidationError(.referenceTypesFeatureRequiredForSharedMemories)
  283|      0|            }
  284|    860|        }
  285|    860|    }
$s7WasmKit15ModuleValidatorV14checkTableType_8featuresy0A6Parser0fG0V_AF0A10FeatureSetVtKFZ:
  287|    311|    static func checkTableType(_ type: TableType, features: WasmFeatureSet) throws {
  288|    311|        if type.elementType != .funcRef, !features.contains(.referenceTypes) {
  289|      0|            throw ValidationError(.referenceTypesFeatureRequiredForNonFuncrefTables)
  290|    311|        }
  291|    311|        try checkLimit(type.limits)
  292|    310|
  293|    310|        if type.limits.isMemory64 {
  294|      0|            guard features.contains(.memory64) else {
  295|      0|                throw ValidationError(.memory64FeatureRequired)
  296|      0|            }
  297|    310|        }
  298|    310|
  299|    310|        let hardMax = TableEntity.maxSize(isMemory64: type.limits.isMemory64)
  300|    310|
  301|    310|        if type.limits.min > hardMax {
  302|      0|            throw ValidationError(.sizeMinimumExceeded(max: hardMax))
  303|    310|        }
  304|    310|
  305|    310|        if let max = type.limits.max, max > hardMax {
  306|      0|            throw ValidationError(.sizeMaximumExceeded(max: hardMax))
  307|    310|        }
  308|    310|    }
$s7WasmKit15ModuleValidatorV10checkLimit33_9F66C7BE5EF9F2BC43AA30FD76E78754LLyy0A6Parser6LimitsVKFZ:
  310|  1.17k|    private static func checkLimit(_ limit: Limits) throws {
  311|  1.17k|        guard let max = limit.max else { return }
  312|    723|        if limit.min > max {
  313|      2|            throw ValidationError(.sizeMinimumMustNotExceedMaximum)
  314|    721|        }
  315|    721|    }
$s9WasmTypes9ReferenceO0A3KitE9checkTypeyyAA0cF0OKF:
  320|      5|    func checkType(_ type: WasmTypes.ReferenceType) throws {
  321|      5|        switch (self, type) {
  322|      5|        case (.function, .funcRef): return
  323|      5|        case (.extern, .externRef): return
  324|      5|        default:
  325|      1|            throw ValidationError(.expectTypeButGot(expected: "\(type)", got: "\(self)"))
  326|      5|        }
  327|      5|    }
$s9WasmTypes5ValueO0A3KitE9checkTypeyyAA0cF0OKF:
  332|  12.5k|    func checkType(_ type: WasmTypes.ValueType) throws {
  333|  12.5k|        switch (self, type) {
  334|  12.5k|        case (.i32, .i32): return
  335|  12.5k|        case (.i64, .i64): return
  336|  12.5k|        case (.f32, .f32): return
  337|  12.5k|        case (.f64, .f64): return
  338|  12.5k|        case (.ref(let ref), .ref(let refType)):
  339|      5|            try ref.checkType(refType)
  340|  12.5k|        default:
  341|     21|            throw ValidationError(.expectTypeButGot(expected: "\(type)", got: "\(self)"))
  342|  12.5k|        }
  343|      4|    }

$s10WasmParser22parseBinaryInstruction7visitor7decoderSbxz_q_ztKAA0E7VisitorRzAA0dE7DecoderR_r0_lF:
   87|   255k|func parseBinaryInstruction<V: InstructionVisitor, D: BinaryInstructionDecoder>(visitor: inout V, decoder: inout D) throws -> Bool {
   88|   255k|    let opcode0 = try decoder.claimNextByte()
   89|   253k|    switch opcode0 {
   90|   253k|    case 0x00:
   91|  16.9k|        try visitor.visitUnreachable()
   92|   253k|    case 0x01:
   93|  3.79k|        try visitor.visitNop()
   94|   253k|    case 0x02:
   95|  3.46k|        let (blockType) = try decoder.visitBlock()
   96|  3.46k|        try visitor.visitBlock(blockType: blockType)
   97|   253k|    case 0x03:
   98|  4.43k|        let (blockType) = try decoder.visitLoop()
   99|  4.42k|        try visitor.visitLoop(blockType: blockType)
  100|   253k|    case 0x04:
  101|  1.52k|        let (blockType) = try decoder.visitIf()
  102|  1.52k|        try visitor.visitIf(blockType: blockType)
  103|   253k|    case 0x05:
  104|    678|        try visitor.visitElse()
  105|   253k|    case 0x0B:
  106|  12.0k|        try visitor.visitEnd()
  107|  11.9k|        return true
  108|   253k|    case 0x0C:
  109|  4.64k|        let (relativeDepth) = try decoder.visitBr()
  110|  4.63k|        try visitor.visitBr(relativeDepth: relativeDepth)
  111|   253k|    case 0x0D:
  112|  1.23k|        let (relativeDepth) = try decoder.visitBrIf()
  113|  1.23k|        try visitor.visitBrIf(relativeDepth: relativeDepth)
  114|   253k|    case 0x0E:
  115|  1.23k|        let (targets) = try decoder.visitBrTable()
  116|  1.21k|        try visitor.visitBrTable(targets: targets)
  117|   253k|    case 0x0F:
  118|  2.96k|        try visitor.visitReturn()
  119|   253k|    case 0x10:
  120|  3.04k|        let (functionIndex) = try decoder.visitCall()
  121|  3.04k|        try visitor.visitCall(functionIndex: functionIndex)
  122|   253k|    case 0x11:
  123|    419|        let (typeIndex, tableIndex) = try decoder.visitCallIndirect()
  124|    417|        try visitor.visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
  125|   253k|    case 0x1A:
  126|    293|        try visitor.visitDrop()
  127|   253k|    case 0x1B:
  128|    870|        try visitor.visitSelect()
  129|   253k|    case 0x1C:
  130|    517|        let (type) = try decoder.visitTypedSelect()
  131|    501|        try visitor.visitTypedSelect(type: type)
  132|   253k|    case 0x20:
  133|  2.77k|        let (localIndex) = try decoder.visitLocalGet()
  134|  2.77k|        try visitor.visitLocalGet(localIndex: localIndex)
  135|   253k|    case 0x21:
  136|  1.98k|        let (localIndex) = try decoder.visitLocalSet()
  137|  1.98k|        try visitor.visitLocalSet(localIndex: localIndex)
  138|   253k|    case 0x22:
  139|  4.56k|        let (localIndex) = try decoder.visitLocalTee()
  140|  4.56k|        try visitor.visitLocalTee(localIndex: localIndex)
  141|   253k|    case 0x23:
  142|  9.74k|        let (globalIndex) = try decoder.visitGlobalGet()
  143|  9.74k|        try visitor.visitGlobalGet(globalIndex: globalIndex)
  144|   253k|    case 0x24:
  145|  6.59k|        let (globalIndex) = try decoder.visitGlobalSet()
  146|  6.59k|        try visitor.visitGlobalSet(globalIndex: globalIndex)
  147|   253k|    case 0x25:
  148|    316|        let (table) = try decoder.visitTableGet()
  149|    311|        try visitor.visitTableGet(table: table)
  150|   253k|    case 0x26:
  151|  1.24k|        let (table) = try decoder.visitTableSet()
  152|  1.23k|        try visitor.visitTableSet(table: table)
  153|   253k|    case 0x28:
  154|    497|        let (memarg) = try decoder.visitLoad(.i32Load)
  155|    495|        try visitor.visitLoad(.i32Load, memarg: memarg)
  156|   253k|    case 0x29:
  157|    334|        let (memarg) = try decoder.visitLoad(.i64Load)
  158|    329|        try visitor.visitLoad(.i64Load, memarg: memarg)
  159|   253k|    case 0x2A:
  160|  1.83k|        let (memarg) = try decoder.visitLoad(.f32Load)
  161|  1.83k|        try visitor.visitLoad(.f32Load, memarg: memarg)
  162|   253k|    case 0x2B:
  163|  3.87k|        let (memarg) = try decoder.visitLoad(.f64Load)
  164|  3.87k|        try visitor.visitLoad(.f64Load, memarg: memarg)
  165|   253k|    case 0x2C:
  166|    802|        let (memarg) = try decoder.visitLoad(.i32Load8S)
  167|    800|        try visitor.visitLoad(.i32Load8S, memarg: memarg)
  168|   253k|    case 0x2D:
  169|    228|        let (memarg) = try decoder.visitLoad(.i32Load8U)
  170|    227|        try visitor.visitLoad(.i32Load8U, memarg: memarg)
  171|   253k|    case 0x2E:
  172|    932|        let (memarg) = try decoder.visitLoad(.i32Load16S)
  173|    931|        try visitor.visitLoad(.i32Load16S, memarg: memarg)
  174|   253k|    case 0x2F:
  175|    605|        let (memarg) = try decoder.visitLoad(.i32Load16U)
  176|    601|        try visitor.visitLoad(.i32Load16U, memarg: memarg)
  177|   253k|    case 0x30:
  178|    430|        let (memarg) = try decoder.visitLoad(.i64Load8S)
  179|    427|        try visitor.visitLoad(.i64Load8S, memarg: memarg)
  180|   253k|    case 0x31:
  181|    407|        let (memarg) = try decoder.visitLoad(.i64Load8U)
  182|    405|        try visitor.visitLoad(.i64Load8U, memarg: memarg)
  183|   253k|    case 0x32:
  184|    498|        let (memarg) = try decoder.visitLoad(.i64Load16S)
  185|    497|        try visitor.visitLoad(.i64Load16S, memarg: memarg)
  186|   253k|    case 0x33:
  187|    288|        let (memarg) = try decoder.visitLoad(.i64Load16U)
  188|    287|        try visitor.visitLoad(.i64Load16U, memarg: memarg)
  189|   253k|    case 0x34:
  190|  5.02k|        let (memarg) = try decoder.visitLoad(.i64Load32S)
  191|  5.01k|        try visitor.visitLoad(.i64Load32S, memarg: memarg)
  192|   253k|    case 0x35:
  193|    443|        let (memarg) = try decoder.visitLoad(.i64Load32U)
  194|    442|        try visitor.visitLoad(.i64Load32U, memarg: memarg)
  195|   253k|    case 0x36:
  196|    321|        let (memarg) = try decoder.visitStore(.i32Store)
  197|    320|        try visitor.visitStore(.i32Store, memarg: memarg)
  198|   253k|    case 0x37:
  199|    311|        let (memarg) = try decoder.visitStore(.i64Store)
  200|    309|        try visitor.visitStore(.i64Store, memarg: memarg)
  201|   253k|    case 0x38:
  202|    308|        let (memarg) = try decoder.visitStore(.f32Store)
  203|    307|        try visitor.visitStore(.f32Store, memarg: memarg)
  204|   253k|    case 0x39:
  205|    214|        let (memarg) = try decoder.visitStore(.f64Store)
  206|    212|        try visitor.visitStore(.f64Store, memarg: memarg)
  207|   253k|    case 0x3A:
  208|    444|        let (memarg) = try decoder.visitStore(.i32Store8)
  209|    442|        try visitor.visitStore(.i32Store8, memarg: memarg)
  210|   253k|    case 0x3B:
  211|    258|        let (memarg) = try decoder.visitStore(.i32Store16)
  212|    255|        try visitor.visitStore(.i32Store16, memarg: memarg)
  213|   253k|    case 0x3C:
  214|    210|        let (memarg) = try decoder.visitStore(.i64Store8)
  215|    209|        try visitor.visitStore(.i64Store8, memarg: memarg)
  216|   253k|    case 0x3D:
  217|    268|        let (memarg) = try decoder.visitStore(.i64Store16)
  218|    267|        try visitor.visitStore(.i64Store16, memarg: memarg)
  219|   253k|    case 0x3E:
  220|    257|        let (memarg) = try decoder.visitStore(.i64Store32)
  221|    256|        try visitor.visitStore(.i64Store32, memarg: memarg)
  222|   253k|    case 0x3F:
  223|  6.79k|        let (memory) = try decoder.visitMemorySize()
  224|  6.78k|        try visitor.visitMemorySize(memory: memory)
  225|   253k|    case 0x40:
  226|  1.72k|        let (memory) = try decoder.visitMemoryGrow()
  227|  1.72k|        try visitor.visitMemoryGrow(memory: memory)
  228|   253k|    case 0x41:
  229|  11.6k|        let (value) = try decoder.visitI32Const()
  230|  11.6k|        try visitor.visitI32Const(value: value)
  231|   253k|    case 0x42:
  232|  10.0k|        let (value) = try decoder.visitI64Const()
  233|  10.0k|        try visitor.visitI64Const(value: value)
  234|   253k|    case 0x43:
  235|  5.14k|        let (value) = try decoder.visitF32Const()
  236|  5.13k|        try visitor.visitF32Const(value: value)
  237|   253k|    case 0x44:
  238|  3.05k|        let (value) = try decoder.visitF64Const()
  239|  3.04k|        try visitor.visitF64Const(value: value)
  240|   253k|    case 0x45:
  241|    684|        try visitor.visitI32Eqz()
  242|   253k|    case 0x46:
  243|    574|        try visitor.visitCmp(.i32Eq)
  244|   253k|    case 0x47:
  245|    302|        try visitor.visitCmp(.i32Ne)
  246|   253k|    case 0x48:
  247|    751|        try visitor.visitCmp(.i32LtS)
  248|   253k|    case 0x49:
  249|    369|        try visitor.visitCmp(.i32LtU)
  250|   253k|    case 0x4A:
  251|    566|        try visitor.visitCmp(.i32GtS)
  252|   253k|    case 0x4B:
  253|    652|        try visitor.visitCmp(.i32GtU)
  254|   253k|    case 0x4C:
  255|    324|        try visitor.visitCmp(.i32LeS)
  256|   253k|    case 0x4D:
  257|    300|        try visitor.visitCmp(.i32LeU)
  258|   253k|    case 0x4E:
  259|    496|        try visitor.visitCmp(.i32GeS)
  260|   253k|    case 0x4F:
  261|    488|        try visitor.visitCmp(.i32GeU)
  262|   253k|    case 0x50:
  263|    508|        try visitor.visitI64Eqz()
  264|   253k|    case 0x51:
  265|    217|        try visitor.visitCmp(.i64Eq)
  266|   253k|    case 0x52:
  267|    227|        try visitor.visitCmp(.i64Ne)
  268|   253k|    case 0x53:
  269|    270|        try visitor.visitCmp(.i64LtS)
  270|   253k|    case 0x54:
  271|    228|        try visitor.visitCmp(.i64LtU)
  272|   253k|    case 0x55:
  273|    210|        try visitor.visitCmp(.i64GtS)
  274|   253k|    case 0x56:
  275|    219|        try visitor.visitCmp(.i64GtU)
  276|   253k|    case 0x57:
  277|    268|        try visitor.visitCmp(.i64LeS)
  278|   253k|    case 0x58:
  279|    231|        try visitor.visitCmp(.i64LeU)
  280|   253k|    case 0x59:
  281|    829|        try visitor.visitCmp(.i64GeS)
  282|   253k|    case 0x5A:
  283|    267|        try visitor.visitCmp(.i64GeU)
  284|   253k|    case 0x5B:
  285|    270|        try visitor.visitCmp(.f32Eq)
  286|   253k|    case 0x5C:
  287|    274|        try visitor.visitCmp(.f32Ne)
  288|   253k|    case 0x5D:
  289|    320|        try visitor.visitCmp(.f32Lt)
  290|   253k|    case 0x5E:
  291|    231|        try visitor.visitCmp(.f32Gt)
  292|   253k|    case 0x5F:
  293|    315|        try visitor.visitCmp(.f32Le)
  294|   253k|    case 0x60:
  295|    319|        try visitor.visitCmp(.f32Ge)
  296|   253k|    case 0x61:
  297|    968|        try visitor.visitCmp(.f64Eq)
  298|   253k|    case 0x62:
  299|    346|        try visitor.visitCmp(.f64Ne)
  300|   253k|    case 0x63:
  301|    264|        try visitor.visitCmp(.f64Lt)
  302|   253k|    case 0x64:
  303|    290|        try visitor.visitCmp(.f64Gt)
  304|   253k|    case 0x65:
  305|    219|        try visitor.visitCmp(.f64Le)
  306|   253k|    case 0x66:
  307|    206|        try visitor.visitCmp(.f64Ge)
  308|   253k|    case 0x67:
  309|    696|        try visitor.visitUnary(.i32Clz)
  310|   253k|    case 0x68:
  311|    576|        try visitor.visitUnary(.i32Ctz)
  312|   253k|    case 0x69:
  313|    550|        try visitor.visitUnary(.i32Popcnt)
  314|   253k|    case 0x6A:
  315|    299|        try visitor.visitBinary(.i32Add)
  316|   253k|    case 0x6B:
  317|    394|        try visitor.visitBinary(.i32Sub)
  318|   253k|    case 0x6C:
  319|    413|        try visitor.visitBinary(.i32Mul)
  320|   253k|    case 0x6D:
  321|    438|        try visitor.visitBinary(.i32DivS)
  322|   253k|    case 0x6E:
  323|  2.02k|        try visitor.visitBinary(.i32DivU)
  324|   253k|    case 0x6F:
  325|    545|        try visitor.visitBinary(.i32RemS)
  326|   253k|    case 0x70:
  327|    839|        try visitor.visitBinary(.i32RemU)
  328|   253k|    case 0x71:
  329|    322|        try visitor.visitBinary(.i32And)
  330|   253k|    case 0x72:
  331|    341|        try visitor.visitBinary(.i32Or)
  332|   253k|    case 0x73:
  333|  3.72k|        try visitor.visitBinary(.i32Xor)
  334|   253k|    case 0x74:
  335|    473|        try visitor.visitBinary(.i32Shl)
  336|   253k|    case 0x75:
  337|    764|        try visitor.visitBinary(.i32ShrS)
  338|   253k|    case 0x76:
  339|    687|        try visitor.visitBinary(.i32ShrU)
  340|   253k|    case 0x77:
  341|    404|        try visitor.visitBinary(.i32Rotl)
  342|   253k|    case 0x78:
  343|    532|        try visitor.visitBinary(.i32Rotr)
  344|   253k|    case 0x79:
  345|  3.24k|        try visitor.visitUnary(.i64Clz)
  346|   253k|    case 0x7A:
  347|  1.05k|        try visitor.visitUnary(.i64Ctz)
  348|   253k|    case 0x7B:
  349|    900|        try visitor.visitUnary(.i64Popcnt)
  350|   253k|    case 0x7C:
  351|    513|        try visitor.visitBinary(.i64Add)
  352|   253k|    case 0x7D:
  353|  3.57k|        try visitor.visitBinary(.i64Sub)
  354|   253k|    case 0x7E:
  355|    366|        try visitor.visitBinary(.i64Mul)
  356|   253k|    case 0x7F:
  357|  1.01k|        try visitor.visitBinary(.i64DivS)
  358|   253k|    case 0x80:
  359|    581|        try visitor.visitBinary(.i64DivU)
  360|   253k|    case 0x81:
  361|    411|        try visitor.visitBinary(.i64RemS)
  362|   253k|    case 0x82:
  363|    365|        try visitor.visitBinary(.i64RemU)
  364|   253k|    case 0x83:
  365|    386|        try visitor.visitBinary(.i64And)
  366|   253k|    case 0x84:
  367|  2.54k|        try visitor.visitBinary(.i64Or)
  368|   253k|    case 0x85:
  369|  3.15k|        try visitor.visitBinary(.i64Xor)
  370|   253k|    case 0x86:
  371|    499|        try visitor.visitBinary(.i64Shl)
  372|   253k|    case 0x87:
  373|    329|        try visitor.visitBinary(.i64ShrS)
  374|   253k|    case 0x88:
  375|    309|        try visitor.visitBinary(.i64ShrU)
  376|   253k|    case 0x89:
  377|    476|        try visitor.visitBinary(.i64Rotl)
  378|   253k|    case 0x8A:
  379|    316|        try visitor.visitBinary(.i64Rotr)
  380|   253k|    case 0x8B:
  381|    912|        try visitor.visitUnary(.f32Abs)
  382|   253k|    case 0x8C:
  383|    477|        try visitor.visitUnary(.f32Neg)
  384|   253k|    case 0x8D:
  385|    450|        try visitor.visitUnary(.f32Ceil)
  386|   253k|    case 0x8E:
  387|    753|        try visitor.visitUnary(.f32Floor)
  388|   253k|    case 0x8F:
  389|    847|        try visitor.visitUnary(.f32Trunc)
  390|   253k|    case 0x90:
  391|    567|        try visitor.visitUnary(.f32Nearest)
  392|   253k|    case 0x91:
  393|    654|        try visitor.visitUnary(.f32Sqrt)
  394|   253k|    case 0x92:
  395|    365|        try visitor.visitBinary(.f32Add)
  396|   253k|    case 0x93:
  397|    633|        try visitor.visitBinary(.f32Sub)
  398|   253k|    case 0x94:
  399|    335|        try visitor.visitBinary(.f32Mul)
  400|   253k|    case 0x95:
  401|    366|        try visitor.visitBinary(.f32Div)
  402|   253k|    case 0x96:
  403|    350|        try visitor.visitBinary(.f32Min)
  404|   253k|    case 0x97:
  405|    363|        try visitor.visitBinary(.f32Max)
  406|   253k|    case 0x98:
  407|    390|        try visitor.visitBinary(.f32Copysign)
  408|   253k|    case 0x99:
  409|  1.05k|        try visitor.visitUnary(.f64Abs)
  410|   253k|    case 0x9A:
  411|    862|        try visitor.visitUnary(.f64Neg)
  412|   253k|    case 0x9B:
  413|  1.42k|        try visitor.visitUnary(.f64Ceil)
  414|   253k|    case 0x9C:
  415|    664|        try visitor.visitUnary(.f64Floor)
  416|   253k|    case 0x9D:
  417|  2.87k|        try visitor.visitUnary(.f64Trunc)
  418|   253k|    case 0x9E:
  419|    779|        try visitor.visitUnary(.f64Nearest)
  420|   253k|    case 0x9F:
  421|    668|        try visitor.visitUnary(.f64Sqrt)
  422|   253k|    case 0xA0:
  423|    593|        try visitor.visitBinary(.f64Add)
  424|   253k|    case 0xA1:
  425|    331|        try visitor.visitBinary(.f64Sub)
  426|   253k|    case 0xA2:
  427|    280|        try visitor.visitBinary(.f64Mul)
  428|   253k|    case 0xA3:
  429|    399|        try visitor.visitBinary(.f64Div)
  430|   253k|    case 0xA4:
  431|    302|        try visitor.visitBinary(.f64Min)
  432|   253k|    case 0xA5:
  433|    290|        try visitor.visitBinary(.f64Max)
  434|   253k|    case 0xA6:
  435|    328|        try visitor.visitBinary(.f64Copysign)
  436|   253k|    case 0xA7:
  437|    903|        try visitor.visitConversion(.i32WrapI64)
  438|   253k|    case 0xA8:
  439|    285|        try visitor.visitConversion(.i32TruncF32S)
  440|   253k|    case 0xA9:
  441|    590|        try visitor.visitConversion(.i32TruncF32U)
  442|   253k|    case 0xAA:
  443|    341|        try visitor.visitConversion(.i32TruncF64S)
  444|   253k|    case 0xAB:
  445|  3.40k|        try visitor.visitConversion(.i32TruncF64U)
  446|   253k|    case 0xAC:
  447|    552|        try visitor.visitConversion(.i64ExtendI32S)
  448|   253k|    case 0xAD:
  449|    714|        try visitor.visitConversion(.i64ExtendI32U)
  450|   253k|    case 0xAE:
  451|    640|        try visitor.visitConversion(.i64TruncF32S)
  452|   253k|    case 0xAF:
  453|  2.24k|        try visitor.visitConversion(.i64TruncF32U)
  454|   253k|    case 0xB0:
  455|    894|        try visitor.visitConversion(.i64TruncF64S)
  456|   253k|    case 0xB1:
  457|    222|        try visitor.visitConversion(.i64TruncF64U)
  458|   253k|    case 0xB2:
  459|    587|        try visitor.visitConversion(.f32ConvertI32S)
  460|   253k|    case 0xB3:
  461|    294|        try visitor.visitConversion(.f32ConvertI32U)
  462|   253k|    case 0xB4:
  463|  2.71k|        try visitor.visitConversion(.f32ConvertI64S)
  464|   253k|    case 0xB5:
  465|    424|        try visitor.visitConversion(.f32ConvertI64U)
  466|   253k|    case 0xB6:
  467|    354|        try visitor.visitConversion(.f32DemoteF64)
  468|   253k|    case 0xB7:
  469|    642|        try visitor.visitConversion(.f64ConvertI32S)
  470|   253k|    case 0xB8:
  471|    596|        try visitor.visitConversion(.f64ConvertI32U)
  472|   253k|    case 0xB9:
  473|    912|        try visitor.visitConversion(.f64ConvertI64S)
  474|   253k|    case 0xBA:
  475|    427|        try visitor.visitConversion(.f64ConvertI64U)
  476|   253k|    case 0xBB:
  477|    851|        try visitor.visitConversion(.f64PromoteF32)
  478|   253k|    case 0xBC:
  479|  2.16k|        try visitor.visitConversion(.i32ReinterpretF32)
  480|   253k|    case 0xBD:
  481|  1.60k|        try visitor.visitConversion(.i64ReinterpretF64)
  482|   253k|    case 0xBE:
  483|    704|        try visitor.visitConversion(.f32ReinterpretI32)
  484|   253k|    case 0xBF:
  485|  4.00k|        try visitor.visitConversion(.f64ReinterpretI64)
  486|   253k|    case 0xC0:
  487|  4.54k|        try visitor.visitUnary(.i32Extend8S)
  488|   253k|    case 0xC1:
  489|  1.13k|        try visitor.visitUnary(.i32Extend16S)
  490|   253k|    case 0xC2:
  491|  1.14k|        try visitor.visitUnary(.i64Extend8S)
  492|   253k|    case 0xC3:
  493|    690|        try visitor.visitUnary(.i64Extend16S)
  494|   253k|    case 0xC4:
  495|    524|        try visitor.visitUnary(.i64Extend32S)
  496|   253k|    case 0xD0:
  497|    134|        let (type) = try decoder.visitRefNull()
  498|    123|        try visitor.visitRefNull(type: type)
  499|   253k|    case 0xD1:
  500|    212|        try visitor.visitRefIsNull()
  501|   253k|    case 0xD2:
  502|    348|        let (functionIndex) = try decoder.visitRefFunc()
  503|    347|        try visitor.visitRefFunc(functionIndex: functionIndex)
  504|   253k|    case 0xFC:
  505|  9.97k|
  506|  9.97k|        let opcode1 = try decoder.claimNextByte()
  507|  9.96k|        switch opcode1 {
  508|  9.96k|        case 0x00:
  509|    359|            try visitor.visitConversion(.i32TruncSatF32S)
  510|  9.96k|        case 0x01:
  511|    512|            try visitor.visitConversion(.i32TruncSatF32U)
  512|  9.96k|        case 0x02:
  513|    543|            try visitor.visitConversion(.i32TruncSatF64S)
  514|  9.96k|        case 0x03:
  515|    470|            try visitor.visitConversion(.i32TruncSatF64U)
  516|  9.96k|        case 0x04:
  517|    816|            try visitor.visitConversion(.i64TruncSatF32S)
  518|  9.96k|        case 0x05:
  519|  1.15k|            try visitor.visitConversion(.i64TruncSatF32U)
  520|  9.96k|        case 0x06:
  521|  3.25k|            try visitor.visitConversion(.i64TruncSatF64S)
  522|  9.96k|        case 0x07:
  523|    199|            try visitor.visitConversion(.i64TruncSatF64U)
  524|  9.96k|        case 0x08:
  525|    120|            let (dataIndex) = try decoder.visitMemoryInit()
  526|    117|            try visitor.visitMemoryInit(dataIndex: dataIndex)
  527|  9.96k|        case 0x09:
  528|    198|            let (dataIndex) = try decoder.visitDataDrop()
  529|    197|            try visitor.visitDataDrop(dataIndex: dataIndex)
  530|  9.96k|        case 0x0A:
  531|    190|            let (dstMem, srcMem) = try decoder.visitMemoryCopy()
  532|    186|            try visitor.visitMemoryCopy(dstMem: dstMem, srcMem: srcMem)
  533|  9.96k|        case 0x0B:
  534|    164|            let (memory) = try decoder.visitMemoryFill()
  535|    162|            try visitor.visitMemoryFill(memory: memory)
  536|  9.96k|        case 0x0C:
  537|    376|            let (elemIndex, table) = try decoder.visitTableInit()
  538|    374|            try visitor.visitTableInit(elemIndex: elemIndex, table: table)
  539|  9.96k|        case 0x0D:
  540|    326|            let (elemIndex) = try decoder.visitElemDrop()
  541|    324|            try visitor.visitElemDrop(elemIndex: elemIndex)
  542|  9.96k|        case 0x0E:
  543|    150|            let (dstTable, srcTable) = try decoder.visitTableCopy()
  544|    142|            try visitor.visitTableCopy(dstTable: dstTable, srcTable: srcTable)
  545|  9.96k|        case 0x0F:
  546|    746|            let (table) = try decoder.visitTableGrow()
  547|    745|            try visitor.visitTableGrow(table: table)
  548|  9.96k|        case 0x10:
  549|    215|            let (table) = try decoder.visitTableSize()
  550|    214|            try visitor.visitTableSize(table: table)
  551|  9.96k|        case 0x11:
  552|    161|            let (table) = try decoder.visitTableFill()
  553|    160|            try visitor.visitTableFill(table: table)
  554|  9.96k|        default:
  555|     10|            try decoder.visitUnknown([opcode0, opcode1])
  556|  9.96k|        }
  557|   253k|    default:
  558|    147|        try decoder.visitUnknown([opcode0])
  559|   253k|    }
  560|   240k|    return false
  561|   255k|}

$s10WasmParser21AnyInstructionVisitorPAAE16visitUnreachableyyKF:
  236|  4.33k|    public mutating func visitUnreachable() throws { return try self.visit(.unreachable) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitNopyyKF:
  237|  1.49k|    public mutating func visitNop() throws { return try self.visit(.nop) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitBlock9blockTypeyAA0gI0O_tKF:
  238|    592|    public mutating func visitBlock(blockType: BlockType) throws { return try self.visit(.block(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitLoop9blockTypeyAA05BlockI0O_tKF:
  239|  1.30k|    public mutating func visitLoop(blockType: BlockType) throws { return try self.visit(.loop(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE7visitIf9blockTypeyAA05BlockI0O_tKF:
  240|    391|    public mutating func visitIf(blockType: BlockType) throws { return try self.visit(.if(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitElseyyKF:
  241|    292|    public mutating func visitElse() throws { return try self.visit(.else) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitEndyyKF:
  242|  8.06k|    public mutating func visitEnd() throws { return try self.visit(.end) }
$s10WasmParser21AnyInstructionVisitorPAAE7visitBr13relativeDepthys6UInt32V_tKF:
  243|    591|    public mutating func visitBr(relativeDepth: UInt32) throws { return try self.visit(.br(relativeDepth: relativeDepth)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitBrIf13relativeDepthys6UInt32V_tKF:
  244|    405|    public mutating func visitBrIf(relativeDepth: UInt32) throws { return try self.visit(.brIf(relativeDepth: relativeDepth)) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitBrTable7targetsyAA0gH0V_tKF:
  245|    277|    public mutating func visitBrTable(targets: BrTable) throws { return try self.visit(.brTable(targets: targets)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitReturnyyKF:
  246|    428|    public mutating func visitReturn() throws { return try self.visit(.return) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitCall13functionIndexys6UInt32V_tKF:
  247|    507|    public mutating func visitCall(functionIndex: UInt32) throws { return try self.visit(.call(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE17visitCallIndirect9typeIndex05tableJ0ys6UInt32V_AHtKF:
  248|    195|    public mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try self.visit(.callIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitDropyyKF:
  249|    210|    public mutating func visitDrop() throws { return try self.visit(.drop) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitSelectyyKF:
  250|    195|    public mutating func visitSelect() throws { return try self.visit(.select) }
$s10WasmParser21AnyInstructionVisitorPAAE16visitTypedSelect4typey0A5Types9ValueTypeO_tKF:
  251|    326|    public mutating func visitTypedSelect(type: ValueType) throws { return try self.visit(.typedSelect(type: type)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalGet10localIndexys6UInt32V_tKF:
  252|    785|    public mutating func visitLocalGet(localIndex: UInt32) throws { return try self.visit(.localGet(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalSet10localIndexys6UInt32V_tKF:
  253|    317|    public mutating func visitLocalSet(localIndex: UInt32) throws { return try self.visit(.localSet(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalTee10localIndexys6UInt32V_tKF:
  254|    211|    public mutating func visitLocalTee(localIndex: UInt32) throws { return try self.visit(.localTee(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitGlobalGet11globalIndexys6UInt32V_tKF:
  255|    471|    public mutating func visitGlobalGet(globalIndex: UInt32) throws { return try self.visit(.globalGet(globalIndex: globalIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitGlobalSet11globalIndexys6UInt32V_tKF:
  256|    244|    public mutating func visitGlobalSet(globalIndex: UInt32) throws { return try self.visit(.globalSet(globalIndex: globalIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitLoad_6memargyAA0D0O0G0O_AA6MemArgVtKF:
  257|  3.22k|    public mutating func visitLoad(_ load: Instruction.Load, memarg: MemArg) throws { return try self.visit(.load(load, memarg: memarg)) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitStore_6memargyAA0D0O0G0O_AA6MemArgVtKF:
  258|  2.17k|    public mutating func visitStore(_ store: Instruction.Store, memarg: MemArg) throws { return try self.visit(.store(store, memarg: memarg)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemorySize6memoryys6UInt32V_tKF:
  259|     68|    public mutating func visitMemorySize(memory: UInt32) throws { return try self.visit(.memorySize(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryGrow6memoryys6UInt32V_tKF:
  260|    194|    public mutating func visitMemoryGrow(memory: UInt32) throws { return try self.visit(.memoryGrow(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitI32Const5valueys5Int32V_tKF:
  261|  4.80k|    public mutating func visitI32Const(value: Int32) throws { return try self.visit(.i32Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitI64Const5valueys5Int64V_tKF:
  262|  2.98k|    public mutating func visitI64Const(value: Int64) throws { return try self.visit(.i64Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitF32Const5valueyAA7IEEE754O7Float32V_tKF:
  263|  1.09k|    public mutating func visitF32Const(value: IEEE754.Float32) throws { return try self.visit(.f32Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitF64Const5valueyAA7IEEE754O7Float64V_tKF:
  264|    698|    public mutating func visitF64Const(value: IEEE754.Float64) throws { return try self.visit(.f64Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitRefNull4typey0A5Types13ReferenceTypeO_tKF:
  265|     66|    public mutating func visitRefNull(type: ReferenceType) throws { return try self.visit(.refNull(type: type)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitRefIsNullyyKF:
  266|    194|    public mutating func visitRefIsNull() throws { return try self.visit(.refIsNull) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitRefFunc13functionIndexys6UInt32V_tKF:
  267|    342|    public mutating func visitRefFunc(functionIndex: UInt32) throws { return try self.visit(.refFunc(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitI32EqzyyKF:
  268|    218|    public mutating func visitI32Eqz() throws { return try self.visit(.i32Eqz) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitCmpyyAA0D0O0G0OKF:
  269|  8.16k|    public mutating func visitCmp(_ cmp: Instruction.Cmp) throws { return try self.visit(.cmp(cmp)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitI64EqzyyKF:
  270|    195|    public mutating func visitI64Eqz() throws { return try self.visit(.i64Eqz) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitUnaryyyAA0D0O0G0OKF:
  271|  7.13k|    public mutating func visitUnary(_ unary: Instruction.Unary) throws { return try self.visit(.unary(unary)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitBinaryyyAA0D0O0G0OKF:
  272|  10.4k|    public mutating func visitBinary(_ binary: Instruction.Binary) throws { return try self.visit(.binary(binary)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitConversionyyAA0D0O0G0OKF:
  273|  8.94k|    public mutating func visitConversion(_ conversion: Instruction.Conversion) throws { return try self.visit(.conversion(conversion)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryInit9dataIndexys6UInt32V_tKF:
  274|    116|    public mutating func visitMemoryInit(dataIndex: UInt32) throws { return try self.visit(.memoryInit(dataIndex: dataIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitDataDrop9dataIndexys6UInt32V_tKF:
  275|    196|    public mutating func visitDataDrop(dataIndex: UInt32) throws { return try self.visit(.dataDrop(dataIndex: dataIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryCopy6dstMem03srcJ0ys6UInt32V_AHtKF:
  276|     98|    public mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws { return try self.visit(.memoryCopy(dstMem: dstMem, srcMem: srcMem)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryFill6memoryys6UInt32V_tKF:
  277|     98|    public mutating func visitMemoryFill(memory: UInt32) throws { return try self.visit(.memoryFill(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableInit9elemIndex5tableys6UInt32V_AHtKF:
  278|    371|    public mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws { return try self.visit(.tableInit(elemIndex: elemIndex, table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitElemDrop9elemIndexys6UInt32V_tKF:
  279|    323|    public mutating func visitElemDrop(elemIndex: UInt32) throws { return try self.visit(.elemDrop(elemIndex: elemIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableCopy03dstG003srcG0ys6UInt32V_AHtKF:
  280|     81|    public mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws { return try self.visit(.tableCopy(dstTable: dstTable, srcTable: srcTable)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableFill5tableys6UInt32V_tKF:
  281|    146|    public mutating func visitTableFill(table: UInt32) throws { return try self.visit(.tableFill(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitTableGet5tableys6UInt32V_tKF:
  282|    208|    public mutating func visitTableGet(table: UInt32) throws { return try self.visit(.tableGet(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitTableSet5tableys6UInt32V_tKF:
  283|  1.12k|    public mutating func visitTableSet(table: UInt32) throws { return try self.visit(.tableSet(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableGrow5tableys6UInt32V_tKF:
  284|    710|    public mutating func visitTableGrow(table: UInt32) throws { return try self.visit(.tableGrow(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableSize5tableys6UInt32V_tKF:
  285|    194|    public mutating func visitTableSize(table: UInt32) throws { return try self.visit(.tableSize(table: table)) }

$s10WasmParser12decodeLEB1286streamxq__tKs17FixedWidthIntegerRzSURzAA10ByteStreamR_r0_lF:
   11|   150k|) throws -> IntType where IntType: FixedWidthInteger, IntType: UnsignedInteger, Stream: ByteStream {
   12|   150k|    let firstByte = try stream.consumeAny()
   13|   150k|    var result: IntType = IntType(firstByte & 0b0111_1111)
   14|   150k|    if _fastPath(firstByte & 0b1000_0000 == 0) {
   15|   133k|        return result
   16|   133k|    }
   17|  16.4k|
   18|  16.4k|    var shift: UInt = 7
   19|  16.4k|
   20|  41.7k|    while true {
   21|  41.7k|        let byte = try stream.consumeAny()
   22|  41.7k|        let slice = IntType(byte & 0b0111_1111)
   23|  41.7k|        let nextShift = shift + 7
   24|  41.7k|        if nextShift >= IntType.bitWidth, (byte >> (UInt(IntType.bitWidth) - shift)) != 0 {
   25|     10|            throw LEBError.integerRepresentationTooLong
   26|  41.7k|        }
   27|  41.7k|        result |= slice << shift
   28|  41.7k|        shift = nextShift
   29|  41.7k|
   30|  41.7k|        guard byte & 0b1000_0000 != 0 else { break }
   31|  25.2k|    }
   32|  16.4k|
   33|  16.4k|    return result
   34|   150k|}
$s10WasmParser12decodeLEB1286streamxq__tKAA16RawSignedIntegerRzAA10ByteStreamR_r0_lF:
   39|  21.6k|) throws -> IntType where IntType: FixedWidthInteger, IntType: RawSignedInteger, Stream: ByteStream {
   40|  21.6k|    let firstByte = try stream.consumeAny()
   41|  21.6k|    var result = IntType.Unsigned(firstByte & 0b0111_1111)
   42|  21.6k|    if _fastPath(firstByte & 0b1000_0000 == 0) {
   43|  8.73k|        // Interpret Int${Self.bitWidth-1} as Int${Self.bitWidth}
   44|  8.73k|        return (IntType(bitPattern: result) << (IntType.bitWidth - 7)) >> (IntType.bitWidth - 7)
   45|  12.9k|    }
   46|  12.9k|
   47|  12.9k|    var shift: IntType = 7
   48|  12.9k|
   49|  12.9k|    var byte: UInt8
   50|  67.1k|    repeat {
   51|  67.1k|        byte = try stream.consumeAny()
   52|  67.1k|
   53|  67.1k|        let slice = IntType.Unsigned(byte & 0b0111_1111)
   54|  67.1k|        result |= slice << shift
   55|  67.1k|
   56|  67.1k|        // When we don't have enough bit width
   57|  67.1k|        if shift > (IntType.bitWidth - 7) {
   58|  7.10k|            let remainingBitWidth = IntType.bitWidth - Int(shift)
   59|  7.10k|            let continuationBit = (byte & 0b1000_0000) != 0
   60|  7.10k|            // When a next byte is expected
   61|  7.10k|            if continuationBit {
   62|      2|                throw LEBError.integerRepresentationTooLong
   63|  7.09k|            }
   64|  7.09k|
   65|  7.09k|            let signAndDiscardingBits = Int8(bitPattern: byte << 1) >> remainingBitWidth
   66|  7.09k|            // When meaningful bits are discarded
   67|  7.09k|            if signAndDiscardingBits != 0 && signAndDiscardingBits != -1 {
   68|      5|                throw LEBError.overflow
   69|  7.09k|            }
   70|  7.09k|            return IntType(bitPattern: result)
   71|  59.9k|        }
   72|  59.9k|
   73|  59.9k|        shift += 7
   74|  60.0k|    } while byte & 0b1000_0000 != 0
   75|  5.84k|
   76|  5.84k|    // Sign flag is second high-order bit
   77|  5.84k|    if byte & 0b0100_0000 != 0 {
   78|  1.53k|        // Sign extend
   79|  1.53k|        result |= IntType.Unsigned(bitPattern: ~0) << shift
   80|  1.53k|    }
   81|  5.84k|
   82|  5.84k|    return IntType(bitPattern: result)
   83|  21.6k|}
$s10WasmParser12decodeLEB1286streamxq__tKAA16RawSignedIntegerRzAA10ByteStreamR_r0_lFSbyKXEfu_:
   67|  2.60k|            if signAndDiscardingBits != 0 && signAndDiscardingBits != -1 {

$s10WasmParser13ParsingLimitsV7defaultACvgZ:
    9|  5.69k|    static var `default`: ParsingLimits {
   10|  5.69k|        return ParsingLimits(maxFunctionLocals: 100000)
   11|  5.69k|    }

$s10WasmParser16StaticByteStreamC5bytesACSays5UInt8VG_tcfc:
    7|  3.77k|    public init(bytes: [UInt8]) {
    8|  3.77k|        self.bytes = ArraySlice(bytes)
    9|  3.77k|        currentIndex = bytes.startIndex
   10|  3.77k|    }
$s10WasmParser16StaticByteStreamC5bytesACs10ArraySliceVys5UInt8VG_tcfc:
   12|  1.91k|    public init(bytes: ArraySlice<UInt8>) {
   13|  1.91k|        self.bytes = bytes
   14|  1.91k|        currentIndex = bytes.startIndex
   15|  1.91k|    }
$s10WasmParser16StaticByteStreamC10consumeAnys5UInt8VyKF:
   18|   610k|    public func consumeAny() throws -> UInt8 {
   19|   610k|        guard bytes.indices.contains(currentIndex) else {
   20|  2.04k|            throw StreamError<Element>.unexpectedEnd(expected: nil)
   21|   607k|        }
   22|   607k|
   23|   607k|        let consumed = bytes[currentIndex]
   24|   607k|        currentIndex = bytes.index(after: currentIndex)
   25|   607k|        return consumed
   26|   610k|    }
$s10WasmParser16StaticByteStreamC7consumeys5UInt8VShyAFGKF:
   29|  2.36k|    public func consume(_ expected: Set<UInt8>) throws -> UInt8 {
   30|  2.36k|        guard bytes.indices.contains(currentIndex) else {
   31|      5|            throw StreamError<Element>.unexpectedEnd(expected: Set(expected))
   32|  2.35k|        }
   33|  2.35k|
   34|  2.35k|        let consumed = bytes[currentIndex]
   35|  2.35k|        guard expected.contains(consumed) else {
   36|      2|            throw StreamError<Element>.unexpected(consumed, index: currentIndex, expected: Set(expected))
   37|  2.35k|        }
   38|  2.35k|
   39|  2.35k|        currentIndex = bytes.index(after: currentIndex)
   40|  2.35k|        return consumed
   41|  2.36k|    }
$s10WasmParser16StaticByteStreamC7consume5counts10ArraySliceVys5UInt8VGSi_tKF:
   43|  21.4k|    public func consume(count: Int) throws -> ArraySlice<UInt8> {
   44|  21.4k|        guard count > 0 else { return [] }
   45|  20.5k|        let updatedIndex = currentIndex + count
   46|  20.5k|
   47|  20.5k|        guard bytes.indices.contains(updatedIndex - 1) else {
   48|     26|            throw StreamError<Element>.unexpectedEnd(expected: nil)
   49|  20.5k|        }
   50|  20.5k|
   51|  20.5k|        defer { currentIndex = updatedIndex }
   52|  20.5k|
   53|  20.5k|        return bytes[currentIndex..<updatedIndex]
   54|  21.4k|    }
$s10WasmParser16StaticByteStreamC4peeks5UInt8VSgyF:
   56|   198k|    public func peek() -> UInt8? {
   57|   198k|        guard bytes.indices.contains(currentIndex) else {
   58|  2.50k|            return nil
   59|   196k|        }
   60|   196k|        return bytes[currentIndex]
   61|   198k|    }

$s10WasmParser6StreamPAAE13hasReachedEndSbyKF:
   25|   189k|    func hasReachedEnd() throws -> Bool {
   26|   189k|        try peek() == nil
   27|   189k|    }

$s10WasmParser0B0V13orderTrackingAC05OrderD0Vyx_Gvpfi:
   17|  5.69k|    @usableFromInline var orderTracking = OrderTracking()
$s10WasmParser0B0V6offsetSivg:
   28|   179k|    public var offset: Int {
   29|   179k|        return stream.currentIndex
   30|   179k|    }
$s10WasmParser0B0V6stream8featuresACyxGx_AA0A10FeatureSetVtcfC:
   32|  5.69k|    public init(stream: Stream, features: WasmFeatureSet = .default) {
   33|  5.69k|        self.stream = stream
   34|  5.69k|        self.features = features
   35|  5.69k|        self.nextParseTarget = .header
   36|  5.69k|        self.limits = .default
   37|  5.69k|    }
$s10WasmParser0B0V9makeErroryAA0abD0VAF7MessageVF:
   40|    271|    internal func makeError(_ message: WasmParserError.Message) -> WasmParserError {
   41|    271|        return WasmParserError(message, offset: offset)
   42|    271|    }
$s10WasmParser010ExpressionB0V6offsetSivg:
  149|   177k|    public var offset: Int {
  150|   177k|        self.codeOffset + self.parser.offset - self.initialStreamOffset
  151|   177k|    }
$s10WasmParser010ExpressionB0V4codeAcA4CodeV_tcfC:
  153|  1.91k|    public init(code: Code) {
  154|  1.91k|        self.parser = Parser(
  155|  1.91k|            stream: StaticByteStream(bytes: code.expression),
  156|  1.91k|            features: code.features
  157|  1.91k|        )
  158|  1.91k|        self.codeOffset = code.offset
  159|  1.91k|        self.initialStreamOffset = self.parser.offset
  160|  1.91k|    }
$s10WasmParser010ExpressionB0V5visit7visitorSbxz_tKAA18InstructionVisitorRzlF:
  163|   177k|    public mutating func visit<V: InstructionVisitor>(visitor: inout V) throws -> Bool {
  164|   177k|        isLastEnd = try parser.parseInstruction(visitor: &visitor)
  165|   176k|        let shouldContinue = try !parser.stream.hasReachedEnd()
  166|   176k|        if !shouldContinue {
  167|    929|            guard isLastEnd == true else {
  168|     28|                throw WasmParserError(.endOpcodeExpected, offset: offset)
  169|    901|            }
  170|   176k|        }
  171|   176k|        return shouldContinue
  172|   177k|    }
$s10WasmParser0A10FeatureSetV8rawValueACSi_tcfC:
  183|  68.4k|    public init(rawValue: Int) {
  184|  68.4k|        self.rawValue = rawValue
  185|  68.4k|    }
$s10WasmParser0A10FeatureSetV8memory64ACvgZ:
  189|  82.2k|    public static var memory64: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 0) }
$s10WasmParser0A10FeatureSetV14referenceTypesACvgZ:
  192|  1.69k|    public static var referenceTypes: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 1) }
$s10WasmParser0A10FeatureSetV7threadsACvgZ:
  195|  7.25k|    public static var threads: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 2) }
$s10WasmParser0aB5ErrorV7MessageVyAESScfC:
  209|    250|        init(_ text: String) {
  210|    250|            self.text = text
  211|    250|        }
$s10WasmParser0aB5ErrorV_6offsetA2C7MessageV_SitcfC:
  218|    303|    init(_ message: Message, offset: Int) {
  219|    303|        self.message = message
  220|    303|        self.offset = offset
  221|    303|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidMagicNumberyAESays5UInt8VGFZ:
  232|      3|    static func invalidMagicNumber(_ bytes: [UInt8]) -> Self {
  233|      3|        Self("magic header not detected: expected \(WASM_MAGIC) but got \(bytes)")
  234|      3|    }
$s10WasmParser0aB5ErrorV7MessageV14unknownVersionyAESays5UInt8VGFZ:
  237|      1|    static func unknownVersion(_ bytes: [UInt8]) -> Self {
  238|      1|        Self("unknown binary version: \(bytes)")
  239|      1|    }
$s10WasmParser0aB5ErrorV7MessageV11invalidUTF8yAESays5UInt8VGFZ:
  241|      4|    static func invalidUTF8(_ bytes: [UInt8]) -> Self {
  242|      4|        Self("malformed UTF-8 encoding: \(bytes)")
  243|      4|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidSectionSizeyAEs6UInt32VFZ:
  246|      7|    static func invalidSectionSize(_ size: UInt32) -> Self {
  247|      7|        // TODO: Remove size parameter
  248|      7|        Self("unexpected end-of-file")
  249|      7|    }
$s10WasmParser0aB5ErrorV7MessageV18malformedSectionIDyAEs5UInt8VFZ:
  252|      4|    static func malformedSectionID(_ id: UInt8) -> Self {
  253|      4|        Self("malformed section id: \(id)")
  254|      4|    }
$s10WasmParser0aB5ErrorV7MessageV12zeroExpected6actualAEs5UInt8V_tFZ:
  256|     14|    @usableFromInline static func zeroExpected(actual: UInt8) -> Self {
  257|     14|        Self("Zero expected but got \(actual)")
  258|     14|    }
$s10WasmParser0aB5ErrorV7MessageV13tooManyLocals_5limitAEs6UInt64V_AItFZ:
  261|      1|    static func tooManyLocals(_ count: UInt64, limit: UInt64) -> Self {
  262|      1|        Self("Too many locals: \(count) vs \(limit)")
  263|      1|    }
$s10WasmParser0aB5ErrorV7MessageV15expectedRefType6actualAE0A5Types05ValueG0O_tFZ:
  265|      9|    @usableFromInline static func expectedRefType(actual: ValueType) -> Self {
  266|      9|        Self("Expected reference type but got \(actual)")
  267|      9|    }
$s10WasmParser0aB5ErrorV7MessageV21unexpectedElementKind8expected6actualAEs6UInt32V_AJtFZ:
  270|      2|    static func unexpectedElementKind(expected: UInt32, actual: UInt32) -> Self {
  271|      2|        Self("Unexpected element kind: expected \(expected) but got \(actual)")
  272|      2|    }
$s10WasmParser0aB5ErrorV7MessageV19sectionSizeMismatch8expected6actualAESi_SitFZ:
  284|     36|    static func sectionSizeMismatch(expected: Int, actual: Int) -> Self {
  285|     36|        Self("Section size mismatch: expected \(expected) but got \(actual)")
  286|     36|    }
$s10WasmParser0aB5ErrorV7MessageV13illegalOpcodeyAESays5UInt8VGFZ:
  288|    157|    @usableFromInline static func illegalOpcode(_ opcode: [UInt8]) -> Self {
  289|    157|        Self("Illegal opcode: \(opcode)")
  290|    157|    }
$s10WasmParser0aB5ErrorV7MessageV19malformedMutabilityyAEs5UInt8VFZ:
  293|      1|    static func malformedMutability(_ byte: UInt8) -> Self {
  294|      1|        Self("Malformed mutability: \(byte)")
  295|      1|    }
$s10WasmParser0aB5ErrorV7MessageV21malformedFunctionTypeyAEs5UInt8VFZ:
  298|      1|    static func malformedFunctionType(_ byte: UInt8) -> Self {
  299|      1|        Self("Malformed function type: \(byte)")
  300|      1|    }
$s10WasmParser0aB5ErrorV7MessageV14malformedLimityAEs5UInt8VFZ:
  306|      4|    static func malformedLimit(_ byte: UInt8) -> Self {
  307|      4|        Self("Malformed limit: \(byte)")
  308|      4|    }
$s10WasmParser0aB5ErrorV7MessageV24malformedDataSegmentKindyAEs6UInt32VFZ:
  312|      1|    @usableFromInline static func malformedDataSegmentKind(_ kind: UInt32) -> Self {
  313|      1|        Self("Malformed data segment kind: \(kind)")
  314|      1|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidResultArity8expected6actualAESi_SitFZ:
  316|      1|    @usableFromInline static func invalidResultArity(expected: Int, actual: Int) -> Self {
  317|      1|        Self("invalid result arity: expected \(expected) but got \(actual)")
  318|      1|    }
$s10WasmParser10ByteStreamPAAE11parseVector7contentSayqd__Gqd__yKXE_tKlF:
  325|  28.6k|    func parseVector<Content>(content parser: () throws -> Content) throws -> [Content] {
  326|  28.6k|        var contents = [Content]()
  327|  28.6k|        let count: UInt32 = try parseUnsigned()
  328|  47.1k|        for _ in 0..<count {
  329|  47.1k|            try contents.append(parser())
  330|  44.9k|        }
  331|  26.3k|        return contents
  332|  28.6k|    }
$s10WasmParser10ByteStreamPAAE13parseUnsignedyqd__qd__mKAA03RawF7IntegerRd__lF:
  339|   150k|    func parseUnsigned<T: RawUnsignedInteger>(_: T.Type = T.self) throws -> T {
  340|   150k|        try decodeLEB128(stream: self)
  341|   150k|    }
$s10WasmParser10ByteStreamPAAE11parseSignedqd__yKAA03RawF7IntegerRd__lF:
  344|  21.6k|    func parseSigned<T: FixedWidthInteger & RawSignedInteger>() throws -> T {
  345|  21.6k|        try decodeLEB128(stream: self)
  346|  21.6k|    }
$s10WasmParser10ByteStreamPAAE9parseName33_266B39EE9A5BCC72156BAE2430A75AC9LLSSyKF:
  352|  4.01k|    fileprivate func parseName() throws -> String {
  353|  4.01k|        let bytes = try parseVector { () -> UInt8 in
  354|  4.01k|            try consumeAny()
  355|  4.01k|        }
  356|  3.96k|
  357|  3.96k|        // TODO(optimize): Utilize ASCII fast path in UTF8 decoder
  358|  3.96k|        var name = ""
  359|  3.96k|
  360|  3.96k|        var iterator = bytes.makeIterator()
  361|  3.96k|        var decoder = UTF8()
  362|  6.80k|        Decode: while true {
  363|  6.80k|            switch decoder.decode(&iterator) {
  364|  6.80k|            case let .scalarValue(scalar): name.append(Character(scalar))
  365|  6.80k|            case .emptyInput: break Decode
  366|  6.80k|            case .error: throw WasmParserError(.invalidUTF8(bytes), offset: currentIndex)
  367|  6.80k|            }
  368|  3.96k|        }
  369|  3.96k|
  370|  3.96k|        return name
  371|  4.01k|    }
$s10WasmParser10ByteStreamPAAE9parseName33_266B39EE9A5BCC72156BAE2430A75AC9LLSSyKFs5UInt8VyKXEfU_:
  353|  3.02k|        let bytes = try parseVector { () -> UInt8 in
  354|  3.02k|            try consumeAny()
  355|  3.01k|        }
$s10WasmParser0B0V11parseVector7contentSayqd__Gqd__yKXE_tKlF:
  376|  24.6k|    func parseVector<Content>(content parser: () throws -> Content) throws -> [Content] {
  377|  24.6k|        try stream.parseVector(content: parser)
  378|  22.4k|    }
$s10WasmParser0B0V13parseUnsignedyqd__qd__mKAA03RawD7IntegerRd__lF:
  382|   121k|    func parseUnsigned<T: RawUnsignedInteger>(_: T.Type = T.self) throws -> T {
  383|   121k|        try stream.parseUnsigned(T.self)
  384|   121k|    }
$s10WasmParser0B0V12parseIntegerqd__yKAA011RawUnsignedD0Rd__lF:
  387|  21.6k|    func parseInteger<T: RawUnsignedInteger>() throws -> T {
  388|  21.6k|        let signed: T.Signed = try stream.parseSigned()
  389|  21.6k|        return T(bitPattern: signed)
  390|  21.6k|    }
$s10WasmParser0B0V9parseNameSSyKF:
  392|  4.01k|    func parseName() throws -> String {
  393|  4.01k|        try stream.parseName()
  394|  3.96k|    }
$s10WasmParser0B0V10parseFloats6UInt32VyKF:
  401|  5.14k|    func parseFloat() throws -> UInt32 {
  402|  5.14k|        let consumedLittleEndian = try stream.consume(count: 4).reversed()
  403|  5.13k|        let bitPattern = consumedLittleEndian.reduce(UInt32(0)) { acc, byte in
  404|  5.13k|            acc << 8 + UInt32(byte)
  405|  5.13k|        }
  406|  5.13k|        return bitPattern
  407|  5.14k|    }
$s10WasmParser0B0V10parseFloats6UInt32VyKFA2F_s5UInt8VtXEfU_:
  403|  20.5k|        let bitPattern = consumedLittleEndian.reduce(UInt32(0)) { acc, byte in
  404|  20.5k|            acc << 8 + UInt32(byte)
  405|  20.5k|        }
$s10WasmParser0B0V11parseDoubles6UInt64VyKF:
  410|  3.05k|    func parseDouble() throws -> UInt64 {
  411|  3.05k|        let consumedLittleEndian = try stream.consume(count: 8).reversed()
  412|  3.04k|        let bitPattern = consumedLittleEndian.reduce(UInt64(0)) { acc, byte in
  413|  3.04k|            acc << 8 + UInt64(byte)
  414|  3.04k|        }
  415|  3.04k|        return bitPattern
  416|  3.05k|    }
$s10WasmParser0B0V11parseDoubles6UInt64VyKFA2F_s5UInt8VtXEfU_:
  412|  24.3k|        let bitPattern = consumedLittleEndian.reduce(UInt64(0)) { acc, byte in
  413|  24.3k|            acc << 8 + UInt64(byte)
  414|  24.3k|        }
$s10WasmParser0B0V14parseValueType0A5Types0dE0OyKF:
  425|  21.0k|    func parseValueType() throws -> ValueType {
  426|  21.0k|        let b = try stream.consumeAny()
  427|  20.9k|
  428|  20.9k|        switch b {
  429|  20.9k|        case 0x7F: return .i32
  430|  20.9k|        case 0x7E: return .i64
  431|  20.9k|        case 0x7D: return .f32
  432|  20.9k|        case 0x7C: return .f64
  433|  20.9k|        case 0x70: return .ref(.funcRef)
  434|  20.9k|        case 0x6F: return .ref(.externRef)
  435|  20.9k|        default:
  436|     14|            throw StreamError<Stream.Element>.unexpected(b, index: offset, expected: Set(0x7C...0x7F))
  437|  20.9k|        }
  438|  20.9k|    }
$s10WasmParser0B0V15parseResultTypeAA05BlockE0OyKF:
  443|  9.42k|    func parseResultType() throws -> BlockType {
  444|  9.42k|        guard let nextByte = try stream.peek() else {
  445|     10|            throw makeError(.unexpectedEnd)
  446|  9.41k|        }
  447|  9.41k|        switch nextByte {
  448|  9.41k|        case 0x40:
  449|  3.57k|            _ = try stream.consumeAny()
  450|  3.57k|            return .empty
  451|  9.41k|        case 0x7C...0x7F, 0x70, 0x6F:
  452|  3.20k|            return try .type(parseValueType())
  453|  9.41k|        default:
  454|  2.63k|            return try .funcType(TypeIndex(stream.consumeAny()))
  455|  9.41k|        }
  456|  9.41k|    }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKF:
  461|  2.69k|    func parseFunctionType() throws -> FunctionType {
  462|  2.69k|        let opcode = try stream.consumeAny()
  463|  2.69k|
  464|  2.69k|        // XXX: spectest expects the first byte should be parsed as a LEB128 with 1 byte limit
  465|  2.69k|        // but the spec itself doesn't require it, so just check the continue bit of LEB128 here.
  466|  2.69k|        guard opcode & 0b10000000 == 0 else {
  467|      1|            throw makeError(.integerRepresentationTooLong)
  468|  2.69k|        }
  469|  2.69k|        guard opcode == 0x60 else {
  470|      1|            throw makeError(.malformedFunctionType(opcode))
  471|  2.69k|        }
  472|  2.69k|
  473|  2.69k|        let parameters = try parseVector { try parseValueType() }
  474|  2.66k|        let results = try parseVector { try parseValueType() }
  475|  2.65k|        return FunctionType(parameters: parameters, results: results)
  476|  2.69k|    }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKFAE05ValueE0OyKXEfU_:
  473|  3.21k|        let parameters = try parseVector { try parseValueType() }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKFAE05ValueE0OyKXEfU0_:
  474|  1.53k|        let results = try parseVector { try parseValueType() }
$s10WasmParser0B0V11parseLimitsAA0D0VyKF:
  481|  1.83k|    func parseLimits() throws -> Limits {
  482|  1.83k|        let b = try stream.consumeAny()
  483|  1.81k|        let sharedMask: UInt8 = 0b0010
  484|  1.81k|        let isMemory64Mask: UInt8 = 0b0100
  485|  1.81k|
  486|  1.81k|        let hasMax = b & 0b0001 != 0
  487|  1.81k|        let shared = b & sharedMask != 0
  488|  1.81k|        let isMemory64 = b & isMemory64Mask != 0
  489|  1.81k|
  490|  1.81k|        var flagMask: UInt8 = 0b0001
  491|  1.81k|        if features.contains(.threads) {
  492|      0|            flagMask |= sharedMask
  493|      0|        }
  494|  1.81k|        if features.contains(.memory64) {
  495|      0|            flagMask |= isMemory64Mask
  496|      0|        }
  497|  1.81k|        guard (b & ~flagMask) == 0 else {
  498|      4|            throw makeError(.malformedLimit(b))
  499|  1.80k|        }
  500|  1.80k|
  501|  1.80k|        let min: UInt64
  502|  1.80k|        if isMemory64 {
  503|      0|            min = try parseUnsigned(UInt64.self)
  504|  1.80k|        } else {
  505|  1.80k|            min = try UInt64(parseUnsigned(UInt32.self))
  506|  1.80k|        }
  507|  1.80k|        var max: UInt64?
  508|  1.80k|        if hasMax {
  509|    787|            if isMemory64 {
  510|      0|                max = try parseUnsigned(UInt64.self)
  511|    787|            } else {
  512|    787|                max = try UInt64(parseUnsigned(UInt32.self))
  513|    786|            }
  514|  1.80k|        }
  515|  1.80k|        return Limits(min: min, max: max, isMemory64: isMemory64, shared: shared)
  516|  1.83k|    }
$s10WasmParser0B0V15parseMemoryTypeAA6LimitsVyKF:
  520|    198|    func parseMemoryType() throws -> MemoryType {
  521|    198|        return try parseLimits()
  522|    198|    }
$s10WasmParser0B0V14parseTableTypeAA0dE0VyKF:
  527|    552|    func parseTableType() throws -> TableType {
  528|    552|        let elementType: ReferenceType
  529|    552|        let b = try stream.consumeAny()
  530|    543|
  531|    543|        switch b {
  532|    543|        case 0x70:
  533|    528|            elementType = .funcRef
  534|    543|        case 0x6F:
  535|     14|            elementType = .externRef
  536|    543|        default:
  537|      1|            throw StreamError.unexpected(b, index: offset, expected: [0x6F, 0x70])
  538|    543|        }
  539|    542|
  540|    542|        let limits = try parseLimits()
  541|    536|        return TableType(elementType: elementType, limits: limits)
  542|    552|    }
$s10WasmParser0B0V15parseGlobalTypeAA0dE0VyKF:
  547|  7.64k|    func parseGlobalType() throws -> GlobalType {
  548|  7.64k|        let valueType = try parseValueType()
  549|  7.63k|        let mutability = try parseMutability()
  550|  7.62k|        return GlobalType(mutability: mutability, valueType: valueType)
  551|  7.64k|    }
$s10WasmParser0B0V15parseMutabilityAA0D0OyKF:
  554|  7.63k|    func parseMutability() throws -> Mutability {
  555|  7.63k|        let b = try stream.consumeAny()
  556|  7.63k|        switch b {
  557|  7.63k|        case 0x00:
  558|  1.59k|            return .constant
  559|  7.63k|        case 0x01:
  560|  6.03k|            return .variable
  561|  7.63k|        default:
  562|      1|            throw makeError(.malformedMutability(b))
  563|  7.63k|        }
  564|  7.63k|    }
$s10WasmParser0B0V11parseMemargAA6MemArgVyKF:
  569|  18.7k|    func parseMemarg() throws -> MemArg {
  570|  18.7k|        let align: UInt32 = try parseUnsigned()
  571|  18.7k|        let offset: UInt64 = try features.contains(.memory64) ? parseUnsigned(UInt64.self) : UInt64(parseUnsigned(UInt32.self))
  572|  18.7k|        return MemArg(offset: offset, align: align)
  573|  18.7k|    }
$s10WasmParser0B0V16parseVectorBytess10ArraySliceVys5UInt8VGyKF:
  575|    384|    @inlinable func parseVectorBytes() throws -> ArraySlice<UInt8> {
  576|    384|        let count: UInt32 = try parseUnsigned()
  577|    380|        return try stream.consume(count: Int(count))
  578|    384|    }
$s10WasmParser0B0V16parseMemoryIndexs6UInt32VyKF:
  584|  9.01k|    @inlinable func parseMemoryIndex() throws -> UInt32 {
  585|  9.01k|        let zero = try stream.consumeAny()
  586|  9.01k|        guard zero == 0x00 else {
  587|     13|            throw makeError(.zeroExpected(actual: zero))
  588|  8.99k|        }
  589|  8.99k|        return 0
  590|  9.01k|    }
$s10WasmParser0B0V12visitUnknownyySays5UInt8VGKF:
  592|    157|    @inlinable func visitUnknown(_ opcode: [UInt8]) throws {
  593|    157|        throw makeError(.illegalOpcode(opcode))
  594|    157|    }
$s10WasmParser0B0V10visitBlockAA0D4TypeOyKF:
  596|  3.46k|    @inlinable mutating func visitBlock() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V9visitLoopAA9BlockTypeOyKF:
  597|  4.43k|    @inlinable mutating func visitLoop() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V7visitIfAA9BlockTypeOyKF:
  598|  1.52k|    @inlinable mutating func visitIf() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V7visitBrs6UInt32VyKF:
  599|  4.64k|    @inlinable mutating func visitBr() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V9visitBrIfs6UInt32VyKF:
  600|  1.23k|    @inlinable mutating func visitBrIf() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V12visitBrTableAA0dE0VyKF:
  601|  1.23k|    @inlinable mutating func visitBrTable() throws -> BrTable {
  602|  1.23k|        let labelIndices: [UInt32] = try parseVector { try parseUnsigned() }
  603|  1.21k|        let labelIndex: UInt32 = try parseUnsigned()
  604|  1.21k|        return BrTable(labelIndices: labelIndices, defaultIndex: labelIndex)
  605|  1.23k|    }
$s10WasmParser0B0V12visitBrTableAA0dE0VyKFs6UInt32VyKXEfU_:
  602|  4.06k|        let labelIndices: [UInt32] = try parseVector { try parseUnsigned() }
$s10WasmParser0B0V9visitCalls6UInt32VyKF:
  606|  3.04k|    @inlinable mutating func visitCall() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V17visitCallIndirects6UInt32V9typeIndex_AF05tableH0tyKF:
  608|    419|    @inlinable mutating func visitCallIndirect() throws -> (typeIndex: UInt32, tableIndex: UInt32) {
  609|    419|        let typeIndex: TypeIndex = try parseUnsigned()
  610|    418|        if try !features.contains(.referenceTypes) && stream.peek() != 0 {
  611|      0|            // Check that reserved byte is zero when reference-types is disabled
  612|      0|            throw makeError(.malformedIndirectCall)
  613|    418|        }
  614|    418|        let tableIndex: TableIndex = try parseUnsigned()
  615|    417|        return (typeIndex, tableIndex)
  616|    419|    }
$s10WasmParser0B0V16visitTypedSelect0A5Types9ValueTypeOyKF:
  618|    517|    @inlinable mutating func visitTypedSelect() throws -> WasmTypes.ValueType {
  619|    517|        let results = try parseVector { try parseValueType() }
  620|    502|        guard results.count == 1 else {
  621|      1|            throw makeError(.invalidResultArity(expected: 1, actual: results.count))
  622|    501|        }
  623|    501|        return results[0]
  624|    517|    }
$s10WasmParser0B0V16visitTypedSelect0A5Types9ValueTypeOyKFAGyKXEfU_:
  619|    710|        let results = try parseVector { try parseValueType() }
$s10WasmParser0B0V13visitLocalGets6UInt32VyKF:
  626|  2.77k|    @inlinable mutating func visitLocalGet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V13visitLocalSets6UInt32VyKF:
  627|  1.98k|    @inlinable mutating func visitLocalSet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V13visitLocalTees6UInt32VyKF:
  628|  4.56k|    @inlinable mutating func visitLocalTee() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V14visitGlobalGets6UInt32VyKF:
  629|  9.74k|    @inlinable mutating func visitGlobalGet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V14visitGlobalSets6UInt32VyKF:
  630|  6.59k|    @inlinable mutating func visitGlobalSet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V9visitLoadyAA6MemArgVAA11InstructionO0D0OKF:
  631|  16.1k|    @inlinable mutating func visitLoad(_: Instruction.Load) throws -> MemArg { try parseMemarg() }
$s10WasmParser0B0V10visitStoreyAA6MemArgVAA11InstructionO0D0OKF:
  632|  2.59k|    @inlinable mutating func visitStore(_: Instruction.Store) throws -> MemArg { try parseMemarg() }
$s10WasmParser0B0V15visitMemorySizes6UInt32VyKF:
  633|  6.79k|    @inlinable mutating func visitMemorySize() throws -> UInt32 {
  634|  6.79k|        try parseMemoryIndex()
  635|  6.78k|    }
$s10WasmParser0B0V15visitMemoryGrows6UInt32VyKF:
  636|  1.72k|    @inlinable mutating func visitMemoryGrow() throws -> UInt32 {
  637|  1.72k|        try parseMemoryIndex()
  638|  1.72k|    }
$s10WasmParser0B0V13visitI32Consts5Int32VyKF:
  639|  11.6k|    @inlinable mutating func visitI32Const() throws -> Int32 {
  640|  11.6k|        let n: UInt32 = try parseInteger()
  641|  11.6k|        return Int32(bitPattern: n)
  642|  11.6k|    }
$s10WasmParser0B0V13visitI64Consts5Int64VyKF:
  643|  10.0k|    @inlinable mutating func visitI64Const() throws -> Int64 {
  644|  10.0k|        let n: UInt64 = try parseInteger()
  645|  10.0k|        return Int64(bitPattern: n)
  646|  10.0k|    }
$s10WasmParser0B0V13visitF32ConstAA7IEEE754O7Float32VyKF:
  647|  5.14k|    @inlinable mutating func visitF32Const() throws -> IEEE754.Float32 {
  648|  5.14k|        let n = try parseFloat()
  649|  5.13k|        return IEEE754.Float32(bitPattern: n)
  650|  5.14k|    }
$s10WasmParser0B0V13visitF64ConstAA7IEEE754O7Float64VyKF:
  651|  3.05k|    @inlinable mutating func visitF64Const() throws -> IEEE754.Float64 {
  652|  3.05k|        let n = try parseDouble()
  653|  3.04k|        return IEEE754.Float64(bitPattern: n)
  654|  3.05k|    }
$s10WasmParser0B0V12visitRefNull0A5Types13ReferenceTypeOyKF:
  655|    134|    @inlinable mutating func visitRefNull() throws -> WasmTypes.ReferenceType {
  656|    134|        let type = try parseValueType()
  657|    127|        guard case let .ref(refType) = type else {
  658|      4|            throw makeError(.expectedRefType(actual: type))
  659|    123|        }
  660|    123|        return refType
  661|    134|    }
$s10WasmParser0B0V12visitRefFuncs6UInt32VyKF:
  663|    348|    @inlinable mutating func visitRefFunc() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V15visitMemoryInits6UInt32VyKF:
  664|    120|    @inlinable mutating func visitMemoryInit() throws -> UInt32 {
  665|    120|        let dataIndex: DataIndex = try parseUnsigned()
  666|    119|        _ = try parseMemoryIndex()
  667|    117|        return dataIndex
  668|    120|    }
$s10WasmParser0B0V13visitDataDrops6UInt32VyKF:
  670|    198|    @inlinable mutating func visitDataDrop() throws -> UInt32 {
  671|    198|        try parseUnsigned()
  672|    197|    }
$s10WasmParser0B0V15visitMemoryCopys6UInt32V6dstMem_AF03srcH0tyKF:
  674|    190|    @inlinable mutating func visitMemoryCopy() throws -> (dstMem: UInt32, srcMem: UInt32) {
  675|    190|        _ = try parseMemoryIndex()
  676|    188|        _ = try parseMemoryIndex()
  677|    186|        return (0, 0)
  678|    190|    }
$s10WasmParser0B0V15visitMemoryFills6UInt32VyKF:
  680|    164|    @inlinable mutating func visitMemoryFill() throws -> UInt32 {
  681|    164|        let zero = try stream.consumeAny()
  682|    163|        guard zero == 0x00 else {
  683|      1|            throw makeError(.zeroExpected(actual: zero))
  684|    162|        }
  685|    162|        return 0
  686|    164|    }
$s10WasmParser0B0V14visitTableInits6UInt32V9elemIndex_AF5tabletyKF:
  688|    376|    @inlinable mutating func visitTableInit() throws -> (elemIndex: UInt32, table: UInt32) {
  689|    376|        let elementIndex: ElementIndex = try parseUnsigned()
  690|    375|        let tableIndex: TableIndex = try parseUnsigned()
  691|    374|        return (elementIndex, tableIndex)
  692|    376|    }
$s10WasmParser0B0V13visitElemDrops6UInt32VyKF:
  693|    326|    @inlinable mutating func visitElemDrop() throws -> UInt32 {
  694|    326|        try parseUnsigned()
  695|    324|    }
$s10WasmParser0B0V14visitTableCopys6UInt32V03dstD0_AF03srcD0tyKF:
  696|    150|    @inlinable mutating func visitTableCopy() throws -> (dstTable: UInt32, srcTable: UInt32) {
  697|    150|        let destination: TableIndex = try parseUnsigned()
  698|    149|        let source: TableIndex = try parseUnsigned()
  699|    142|        return (destination, source)
  700|    150|    }
$s10WasmParser0B0V14visitTableFills6UInt32VyKF:
  701|    161|    @inlinable mutating func visitTableFill() throws -> UInt32 {
  702|    161|        try parseUnsigned()
  703|    160|    }
$s10WasmParser0B0V13visitTableGets6UInt32VyKF:
  704|    316|    @inlinable mutating func visitTableGet() throws -> UInt32 {
  705|    316|        try parseUnsigned()
  706|    311|    }
$s10WasmParser0B0V13visitTableSets6UInt32VyKF:
  707|  1.24k|    @inlinable mutating func visitTableSet() throws -> UInt32 {
  708|  1.24k|        try parseUnsigned()
  709|  1.23k|    }
$s10WasmParser0B0V14visitTableGrows6UInt32VyKF:
  710|    746|    @inlinable mutating func visitTableGrow() throws -> UInt32 {
  711|    746|        try parseUnsigned()
  712|    745|    }
$s10WasmParser0B0V14visitTableSizes6UInt32VyKF:
  713|    215|    @inlinable mutating func visitTableSize() throws -> UInt32 {
  714|    215|        try parseUnsigned()
  715|    214|    }
$s10WasmParser0B0V13claimNextBytes5UInt8VyKF:
  716|   265k|    @inlinable func claimNextByte() throws -> UInt8 {
  717|   265k|        return try stream.consumeAny()
  718|   265k|    }
$s10WasmParser0B0V16parseInstruction7visitorSbqd__z_tKAA0D7VisitorRd__lF:
  722|   255k|    mutating func parseInstruction<V: InstructionVisitor>(visitor v: inout V) throws -> Bool {
  723|   255k|        return try parseBinaryInstruction(visitor: &v, decoder: &self)
  724|   255k|    }
$s10WasmParser0B0V18InstructionFactoryV5instsSayAA0C0OGvpfi:
  728|  9.83k|        @usableFromInline var insts: [Instruction] = []
$s10WasmParser0B0V18InstructionFactoryVAEyx_GycfC:
  730|  9.83k|        @inlinable init() {}
$s10WasmParser0B0V18InstructionFactoryV5visityyAA0C0OKF:
  733|  76.2k|        mutating func visit(_ instruction: Instruction) throws {
  734|  76.2k|            insts.append(instruction)
  735|  76.2k|        }
$s10WasmParser0B0V20parseConstExpressionSayAA11InstructionOGyKF:
  739|  9.83k|    mutating func parseConstExpression() throws -> ConstExpression {
  740|  9.83k|        var factory = InstructionFactory()
  741|  9.83k|        var isEnd: Bool
  742|  78.0k|        repeat {
  743|  78.0k|            isEnd = try self.parseInstruction(visitor: &factory)
  744|  78.0k|        } while !isEnd
  745|  8.06k|        return factory.insts
  746|  9.83k|    }
$s10WasmParser0B0V18parseCustomSection4sizeAA0dE0Vs6UInt32V_tKF:
  755|    812|    func parseCustomSection(size: UInt32) throws -> CustomSection {
  756|    812|        let preNameIndex = stream.currentIndex
  757|    812|        let name = try parseName()
  758|    805|        let nameSize = stream.currentIndex - preNameIndex
  759|    805|        let contentSize = Int(size) - nameSize
  760|    805|
  761|    805|        guard contentSize >= 0 else {
  762|      7|            throw makeError(.invalidSectionSize(size))
  763|    798|        }
  764|    798|
  765|    798|        let bytes = try stream.consume(count: contentSize)
  766|    793|
  767|    793|        return CustomSection(name: name, bytes: bytes)
  768|    812|    }
$s10WasmParser0B0V16parseTypeSectionSay0A5Types08FunctionD0VGyKF:
  773|  1.59k|    func parseTypeSection() throws -> [FunctionType] {
  774|  1.59k|        return try parseVector { try parseFunctionType() }
  775|  1.59k|    }
$s10WasmParser0B0V16parseTypeSectionSay0A5Types08FunctionD0VGyKFAGyKXEfU_:
  774|  2.69k|        return try parseVector { try parseFunctionType() }
$s10WasmParser0B0V18parseImportSectionSayAA0D0VGyKF:
  780|    953|    func parseImportSection() throws -> [Import] {
  781|    953|        return try parseVector {
  782|    953|            let module = try parseName()
  783|    953|            let name = try parseName()
  784|    953|            let descriptor = try parseImportDescriptor()
  785|    953|            return Import(module: module, name: name, descriptor: descriptor)
  786|    953|        }
  787|    953|    }
$s10WasmParser0B0V18parseImportSectionSayAA0D0VGyKFAFyKXEfU_:
  781|    815|        return try parseVector {
  782|    815|            let module = try parseName()
  783|    791|            let name = try parseName()
  784|    786|            let descriptor = try parseImportDescriptor()
  785|    775|            return Import(module: module, name: name, descriptor: descriptor)
  786|    815|        }
$s10WasmParser0B0V21parseImportDescriptorAA0dE0OyKF:
  791|    786|    func parseImportDescriptor() throws -> ImportDescriptor {
  792|    786|        let b = try stream.consume(Set(0x00...0x03))
  793|    781|        switch b {
  794|    781|        case 0x00: return try .function(parseUnsigned())
  795|    781|        case 0x01: return try .table(parseTableType())
  796|    781|        case 0x02: return try .memory(parseMemoryType())
  797|    781|        case 0x03: return try .global(parseGlobalType())
  798|    781|        default:
  799|      0|            preconditionFailure("should never reach here")
  800|    781|        }
  801|      0|    }
$s10WasmParser0B0V20parseFunctionSectionSays6UInt32VGyKF:
  806|  1.49k|    func parseFunctionSection() throws -> [TypeIndex] {
  807|  1.49k|        return try parseVector { try parseUnsigned() }
  808|  1.49k|    }
$s10WasmParser0B0V20parseFunctionSectionSays6UInt32VGyKFAFyKXEfU_:
  807|  6.26k|        return try parseVector { try parseUnsigned() }
$s10WasmParser0B0V17parseTableSectionSayAA0D0VGyKF:
  813|    359|    func parseTableSection() throws -> [Table] {
  814|    359|        return try parseVector { try Table(type: parseTableType()) }
  815|    359|    }
$s10WasmParser0B0V17parseTableSectionSayAA0D0VGyKFAFyKXEfU_:
  814|    421|        return try parseVector { try Table(type: parseTableType()) }
$s10WasmParser0B0V18parseMemorySectionSayAA0D0VGyKF:
  820|    733|    func parseMemorySection() throws -> [Memory] {
  821|    733|        return try parseVector { try Memory(type: parseLimits()) }
  822|    733|    }
$s10WasmParser0B0V18parseMemorySectionSayAA0D0VGyKFAFyKXEfU_:
  821|  1.09k|        return try parseVector { try Memory(type: parseLimits()) }
$s10WasmParser0B0V18parseGlobalSectionSayAA0D0VGyKF:
  827|  2.21k|    mutating func parseGlobalSection() throws -> [Global] {
  828|  2.21k|        return try parseVector {
  829|  2.21k|            let type = try parseGlobalType()
  830|  2.21k|            let expression = try parseConstExpression()
  831|  2.21k|            return Global(type: type, initializer: expression)
  832|  2.21k|        }
  833|  2.21k|    }
$s10WasmParser0B0V18parseGlobalSectionSayAA0D0VGyKFAFyKXEfU_:
  828|  7.50k|        return try parseVector {
  829|  7.50k|            let type = try parseGlobalType()
  830|  7.48k|            let expression = try parseConstExpression()
  831|  6.50k|            return Global(type: type, initializer: expression)
  832|  7.50k|        }
$s10WasmParser0B0V18parseExportSectionSayAA0D0VGyKF:
  838|    409|    func parseExportSection() throws -> [Export] {
  839|    409|        return try parseVector {
  840|    409|            let name = try parseName()
  841|    409|            let descriptor = try parseExportDescriptor()
  842|    409|            return Export(name: name, descriptor: descriptor)
  843|    409|        }
  844|    409|    }
$s10WasmParser0B0V18parseExportSectionSayAA0D0VGyKFAFyKXEfU_:
  839|  1.59k|        return try parseVector {
  840|  1.59k|            let name = try parseName()
  841|  1.57k|            let descriptor = try parseExportDescriptor()
  842|  1.57k|            return Export(name: name, descriptor: descriptor)
  843|  1.59k|        }
$s10WasmParser0B0V21parseExportDescriptorAA0dE0OyKF:
  848|  1.57k|    func parseExportDescriptor() throws -> ExportDescriptor {
  849|  1.57k|        let b = try stream.consume(Set(0x00...0x03))
  850|  1.57k|        switch b {
  851|  1.57k|        case 0x00: return try .function(parseUnsigned())
  852|  1.57k|        case 0x01: return try .table(parseUnsigned())
  853|  1.57k|        case 0x02: return try .memory(parseUnsigned())
  854|  1.57k|        case 0x03: return try .global(parseUnsigned())
  855|  1.57k|        default:
  856|      0|            preconditionFailure("should never reach here")
  857|  1.57k|        }
  858|      0|    }
$s10WasmParser0B0V17parseStartSections6UInt32VyKF:
  863|    394|    func parseStartSection() throws -> FunctionIndex {
  864|    394|        return try parseUnsigned()
  865|    394|    }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKF:
  870|    612|    mutating func parseElementSection() throws -> [ElementSegment] {
  871|    612|        return try parseVector {
  872|    612|            let flag = try ElementSegment.Flag(rawValue: parseUnsigned())
  873|    612|
  874|    612|            let type: ReferenceType
  875|    612|            let initializer: [ConstExpression]
  876|    612|            let mode: ElementSegment.Mode
  877|    612|
  878|    612|            if flag.contains(.isPassiveOrDeclarative) {
  879|    612|                if flag.contains(.isDeclarative) {
  880|    612|                    mode = .declarative
  881|    612|                } else {
  882|    612|                    mode = .passive
  883|    612|                }
  884|    612|            } else {
  885|    612|                let table: TableIndex
  886|    612|
  887|    612|                if flag.contains(.hasTableIndex) {
  888|    612|                    table = try parseUnsigned()
  889|    612|                } else {
  890|    612|                    table = 0
  891|    612|                }
  892|    612|
  893|    612|                let offset = try parseConstExpression()
  894|    612|                mode = .active(table: table, offset: offset)
  895|    612|            }
  896|    612|
  897|    612|            if flag.segmentHasRefType {
  898|    612|                let valueType = try parseValueType()
  899|    612|
  900|    612|                guard case let .ref(refType) = valueType else {
  901|    612|                    throw makeError(.expectedRefType(actual: valueType))
  902|    612|                }
  903|    612|
  904|    612|                type = refType
  905|    612|            } else {
  906|    612|                type = .funcRef
  907|    612|            }
  908|    612|
  909|    612|            if flag.segmentHasElemKind {
  910|    612|                // `elemkind` parsing as defined in the spec
  911|    612|                let elemKind = try parseUnsigned() as UInt32
  912|    612|                guard elemKind == 0x00 else {
  913|    612|                    throw makeError(.unexpectedElementKind(expected: 0x00, actual: elemKind))
  914|    612|                }
  915|    612|            }
  916|    612|
  917|    612|            if flag.contains(.usesExpressions) {
  918|    612|                initializer = try parseVector { try parseConstExpression() }
  919|    612|            } else {
  920|    612|                initializer = try parseVector {
  921|    612|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  922|    612|                }
  923|    612|            }
  924|    612|
  925|    612|            return ElementSegment(type: type, initializer: initializer, mode: mode)
  926|    612|        }
  927|    612|    }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_:
  871|  3.27k|        return try parseVector {
  872|  3.27k|            let flag = try ElementSegment.Flag(rawValue: parseUnsigned())
  873|  3.25k|
  874|  3.25k|            let type: ReferenceType
  875|  3.25k|            let initializer: [ConstExpression]
  876|  3.25k|            let mode: ElementSegment.Mode
  877|  3.25k|
  878|  3.25k|            if flag.contains(.isPassiveOrDeclarative) {
  879|  1.53k|                if flag.contains(.isDeclarative) {
  880|    472|                    mode = .declarative
  881|  1.06k|                } else {
  882|  1.06k|                    mode = .passive
  883|  1.06k|                }
  884|  1.72k|            } else {
  885|  1.72k|                let table: TableIndex
  886|  1.72k|
  887|  1.72k|                if flag.contains(.hasTableIndex) {
  888|    117|                    table = try parseUnsigned()
  889|  1.60k|                } else {
  890|  1.60k|                    table = 0
  891|  1.72k|                }
  892|  1.72k|
  893|  1.72k|                let offset = try parseConstExpression()
  894|  1.23k|                mode = .active(table: table, offset: offset)
  895|  2.77k|            }
  896|  2.77k|
  897|  2.77k|            if flag.segmentHasRefType {
  898|     52|                let valueType = try parseValueType()
  899|     47|
  900|     47|                guard case let .ref(refType) = valueType else {
  901|      5|                    throw makeError(.expectedRefType(actual: valueType))
  902|     42|                }
  903|     42|
  904|     42|                type = refType
  905|  2.71k|            } else {
  906|  2.71k|                type = .funcRef
  907|  2.76k|            }
  908|  2.76k|
  909|  2.76k|            if flag.segmentHasElemKind {
  910|  1.58k|                // `elemkind` parsing as defined in the spec
  911|  1.58k|                let elemKind = try parseUnsigned() as UInt32
  912|  1.56k|                guard elemKind == 0x00 else {
  913|      2|                    throw makeError(.unexpectedElementKind(expected: 0x00, actual: elemKind))
  914|  1.56k|                }
  915|  2.74k|            }
  916|  2.74k|
  917|  2.74k|            if flag.contains(.usesExpressions) {
  918|    336|                initializer = try parseVector { try parseConstExpression() }
  919|  2.40k|            } else {
  920|  2.40k|                initializer = try parseVector {
  921|  2.40k|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  922|  2.40k|                }
  923|  2.70k|            }
  924|  2.70k|
  925|  2.70k|            return ElementSegment(type: type, initializer: initializer, mode: mode)
  926|  3.27k|        }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_SayAA11InstructionOGyKXEfU_:
  918|    154|                initializer = try parseVector { try parseConstExpression() }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_SayAA11InstructionOGyKXEfU0_:
  920|    877|                initializer = try parseVector {
  921|    877|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  922|    868|                }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKF:
  932|  1.47k|    func parseCodeSection() throws -> [Code] {
  933|  1.47k|        return try parseVector {
  934|  1.47k|            let size = try parseUnsigned() as UInt32
  935|  1.47k|            let bodyStart = stream.currentIndex
  936|  1.47k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  937|  1.47k|                let n: UInt32 = try parseUnsigned()
  938|  1.47k|                let t = try parseValueType()
  939|  1.47k|                return (n, t)
  940|  1.47k|            }
  941|  1.47k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
  942|  1.47k|            guard totalLocals < limits.maxFunctionLocals else {
  943|  1.47k|                throw makeError(.tooManyLocals(totalLocals, limit: limits.maxFunctionLocals))
  944|  1.47k|            }
  945|  1.47k|
  946|  1.47k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  947|  1.47k|                return Array(repeating: type, count: Int(n))
  948|  1.47k|            }
  949|  1.47k|            let expressionStart = stream.currentIndex
  950|  1.47k|            let expressionBytes = try stream.consume(
  951|  1.47k|                count: Int(size) - (expressionStart - bodyStart)
  952|  1.47k|            )
  953|  1.47k|            return Code(
  954|  1.47k|                locals: locals, expression: expressionBytes,
  955|  1.47k|                offset: expressionStart, features: features
  956|  1.47k|            )
  957|  1.47k|        }
  958|  1.47k|    }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_:
  933|  4.60k|        return try parseVector {
  934|  4.60k|            let size = try parseUnsigned() as UInt32
  935|  4.59k|            let bodyStart = stream.currentIndex
  936|  4.59k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  937|  4.59k|                let n: UInt32 = try parseUnsigned()
  938|  4.59k|                let t = try parseValueType()
  939|  4.59k|                return (n, t)
  940|  4.59k|            }
  941|  4.58k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
  942|  4.58k|            guard totalLocals < limits.maxFunctionLocals else {
  943|      1|                throw makeError(.tooManyLocals(totalLocals, limit: limits.maxFunctionLocals))
  944|  4.58k|            }
  945|  4.58k|
  946|  4.58k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  947|  4.58k|                return Array(repeating: type, count: Int(n))
  948|  4.58k|            }
  949|  4.58k|            let expressionStart = stream.currentIndex
  950|  4.58k|            let expressionBytes = try stream.consume(
  951|  4.58k|                count: Int(size) - (expressionStart - bodyStart)
  952|  4.58k|            )
  953|  4.58k|            return Code(
  954|  4.58k|                locals: locals, expression: expressionBytes,
  955|  4.58k|                offset: expressionStart, features: features
  956|  4.58k|            )
  957|  4.60k|        }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_s6UInt32V1n_0A5Types9ValueTypeO4typetyKXEfU_:
  936|  4.56k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  937|  4.56k|                let n: UInt32 = try parseUnsigned()
  938|  4.56k|                let t = try parseValueType()
  939|  4.55k|                return (n, t)
  940|  4.56k|            }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_s6UInt64VAI_s6UInt32V1n_0A5Types9ValueTypeO4typettXEfU0_:
  941|  4.49k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_Say0A5Types9ValueTypeOGs6UInt32V_AJtXEfU1_:
  946|  4.49k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  947|  4.49k|                return Array(repeating: type, count: Int(n))
  948|  4.49k|            }
$s10WasmParser0B0V16parseDataSectionSayAA0D7SegmentOGyKF:
  963|    356|    mutating func parseDataSection() throws -> [DataSegment] {
  964|    356|        return try parseVector {
  965|    356|            let kind: UInt32 = try parseUnsigned()
  966|    356|            switch kind {
  967|    356|            case 0:
  968|    356|                let offset = try parseConstExpression()
  969|    356|                let initializer = try parseVectorBytes()
  970|    356|                return .active(.init(index: 0, offset: offset, initializer: initializer))
  971|    356|
  972|    356|            case 1:
  973|    356|                return try .passive(parseVectorBytes())
  974|    356|
  975|    356|            case 2:
  976|    356|                let index: UInt32 = try parseUnsigned()
  977|    356|                let offset = try parseConstExpression()
  978|    356|                let initializer = try parseVectorBytes()
  979|    356|                return .active(.init(index: index, offset: offset, initializer: initializer))
  980|    356|            default:
  981|    356|                throw makeError(.malformedDataSegmentKind(kind))
  982|    356|            }
  983|    356|        }
  984|    356|    }
$s10WasmParser0B0V16parseDataSectionSayAA0D7SegmentOGyKFAFyKXEfU_:
  964|    709|        return try parseVector {
  965|    709|            let kind: UInt32 = try parseUnsigned()
  966|    688|            switch kind {
  967|    688|            case 0:
  968|    402|                let offset = try parseConstExpression()
  969|    105|                let initializer = try parseVectorBytes()
  970|    104|                return .active(.init(index: 0, offset: offset, initializer: initializer))
  971|    688|
  972|    688|            case 1:
  973|    208|                return try .passive(parseVectorBytes())
  974|    688|
  975|    688|            case 2:
  976|     77|                let index: UInt32 = try parseUnsigned()
  977|     76|                let offset = try parseConstExpression()
  978|     71|                let initializer = try parseVectorBytes()
  979|     70|                return .active(.init(index: index, offset: offset, initializer: initializer))
  980|    688|            default:
  981|      1|                throw makeError(.malformedDataSegmentKind(kind))
  982|    688|            }
  983|    688|        }
$s10WasmParser0B0V21parseDataCountSections6UInt32VyKF:
  989|     10|    func parseDataCountSection() throws -> UInt32 {
  990|     10|        return try parseUnsigned()
  991|     10|    }
$s10WasmParser0B0V16parseMagicNumberyyKF:
 1017|  3.77k|    func parseMagicNumber() throws {
 1018|  3.77k|        let magicNumber = try stream.consume(count: 4)
 1019|  3.76k|        guard magicNumber.elementsEqual(WASM_MAGIC) else {
 1020|      3|            throw makeError(.invalidMagicNumber(.init(magicNumber)))
 1021|  3.76k|        }
 1022|  3.76k|    }
$s10WasmParser0B0V12parseVersionSays5UInt8VGyKF:
 1027|  3.76k|    func parseVersion() throws -> [UInt8] {
 1028|  3.76k|        let version = try Array(stream.consume(count: 4))
 1029|  3.76k|        guard version == [0x01, 0x00, 0x00, 0x00] else {
 1030|      1|            throw makeError(.unknownVersion(.init(version)))
 1031|  3.76k|        }
 1032|  3.76k|        return version
 1033|  3.76k|    }
$s10WasmParser0B0V13OrderTrackingV4lastAE0C0Oyx__Gvpfi:
 1056|  5.69k|        var last: Order = .initial
$s10WasmParser0B0V13OrderTrackingV5track5order6parseryAE0C0Oyx__G_ACyxGtKF:
 1059|  8.50k|        mutating func track(order: Order, parser: Parser) throws {
 1060|  8.50k|            guard last.rawValue < order.rawValue else {
 1061|     18|                throw parser.makeError(.sectionOutOfOrder)
 1062|  8.48k|            }
 1063|  8.48k|            last = order
 1064|  8.48k|        }
$s10WasmParser0B0V9parseNextAA14ParsingPayloadOSgyKF:
 1096|  16.7k|    public mutating func parseNext() throws -> ParsingPayload? {
 1097|  16.7k|        switch nextParseTarget {
 1098|  16.7k|        case .header:
 1099|  3.77k|            try parseMagicNumber()
 1100|  3.76k|            let version = try parseVersion()
 1101|  3.76k|            self.nextParseTarget = .section
 1102|  3.76k|            return .header(version: version)
 1103|  16.7k|        case .section:
 1104|  13.0k|            guard try !stream.hasReachedEnd() else {
 1105|  1.57k|                return nil
 1106|  11.4k|            }
 1107|  11.4k|            let sectionID = try stream.consumeAny()
 1108|  11.4k|            let sectionSize: UInt32 = try parseUnsigned()
 1109|  11.4k|            let sectionStart = stream.currentIndex
 1110|  11.4k|
 1111|  11.4k|            let payload: ParsingPayload
 1112|  11.4k|            let order: OrderTracking.Order?
 1113|  11.4k|            switch sectionID {
 1114|  11.4k|            case 0:
 1115|    812|                order = nil
 1116|    812|                payload = .customSection(try parseCustomSection(size: sectionSize))
 1117|  11.4k|            case 1:
 1118|  1.59k|                order = .type
 1119|  1.59k|                payload = .typeSection(try parseTypeSection())
 1120|  11.4k|            case 2:
 1121|    953|                order = ._import
 1122|    953|                payload = .importSection(try parseImportSection())
 1123|  11.4k|            case 3:
 1124|  1.49k|                order = .function
 1125|  1.49k|                payload = .functionSection(try parseFunctionSection())
 1126|  11.4k|            case 4:
 1127|    359|                order = .table
 1128|    359|                payload = .tableSection(try parseTableSection())
 1129|  11.4k|            case 5:
 1130|    733|                order = .memory
 1131|    733|                payload = .memorySection(try parseMemorySection())
 1132|  11.4k|            case 6:
 1133|  2.21k|                order = .global
 1134|  2.21k|                payload = .globalSection(try parseGlobalSection())
 1135|  11.4k|            case 7:
 1136|    409|                order = .export
 1137|    409|                payload = .exportSection(try parseExportSection())
 1138|  11.4k|            case 8:
 1139|    394|                order = .start
 1140|    394|                payload = .startSection(try parseStartSection())
 1141|  11.4k|            case 9:
 1142|    612|                order = .element
 1143|    612|                payload = .elementSection(try parseElementSection())
 1144|  11.4k|            case 10:
 1145|  1.47k|                order = .code
 1146|  1.47k|                payload = .codeSection(try parseCodeSection())
 1147|  11.4k|            case 11:
 1148|    356|                order = .data
 1149|    356|                payload = .dataSection(try parseDataSection())
 1150|  11.4k|            case 12:
 1151|     10|                order = .dataCount
 1152|     10|                payload = .dataCount(try parseDataCountSection())
 1153|  11.4k|            default:
 1154|      4|                throw makeError(.malformedSectionID(sectionID))
 1155|  11.4k|            }
 1156|  9.29k|            if let order = order {
 1157|  8.50k|                try orderTracking.track(order: order, parser: self)
 1158|  9.28k|            }
 1159|  9.28k|            let expectedSectionEnd = sectionStart + Int(sectionSize)
 1160|  9.28k|            guard expectedSectionEnd == stream.currentIndex else {
 1161|     36|                throw makeError(.sectionSizeMismatch(expected: expectedSectionEnd, actual: offset))
 1162|  9.24k|            }
 1163|  9.24k|            return payload
 1164|  16.7k|        }
 1165|  16.7k|    }

$s10WasmParser4CodeV6locals10expression6offset8featuresACSay0A5Types9ValueTypeOG_s10ArraySliceVys5UInt8VGSiAA0A10FeatureSetVtcfC:
   19|  4.58k|    init(locals: [ValueType], expression: ArraySlice<UInt8>, offset: Int, features: WasmFeatureSet) {
   20|  4.58k|        self.locals = locals
   21|  4.58k|        self.expression = expression
   22|  4.58k|        self.offset = offset
   23|  4.58k|        self.features = features
   24|  4.58k|    }
$s10WasmParser6MemArgV6offset5alignACs6UInt64V_s6UInt32VtcfC:
   37|  18.7k|    public init(offset: UInt64, align: UInt32) {
   38|  18.7k|        self.offset = offset
   39|  18.7k|        self.align = align
   40|  18.7k|    }
$s10WasmParser6LimitsV3min3max10isMemory646sharedACs6UInt64V_AISgS2btcfC:
   57|  1.80k|    public init(min: UInt64, max: UInt64? = nil, isMemory64: Bool = false, shared: Bool = false) {
   58|  1.80k|        self.min = min
   59|  1.80k|        self.max = max
   60|  1.80k|        self.isMemory64 = isMemory64
   61|  1.80k|        self.shared = shared
   62|  1.80k|    }
$s10WasmParser9TableTypeV07elementD06limitsAC0A5Types09ReferenceD0O_AA6LimitsVtcfC:
   75|    536|    public init(elementType: ReferenceType, limits: Limits) {
   76|    536|        self.elementType = elementType
   77|    536|        self.limits = limits
   78|    536|    }
$s10WasmParser10GlobalTypeV10mutability05valueD0AcA10MutabilityO_0A5Types05ValueD0OtcfC:
   94|  7.62k|    public init(mutability: Mutability, valueType: ValueType) {
   95|  7.62k|        self.mutability = mutability
   96|  7.62k|        self.valueType = valueType
   97|  7.62k|    }
$s10WasmParser7IEEE754O7Float32V10bitPatternAEs6UInt32V_tcfC:
  113|  5.13k|        public init(bitPattern: UInt32) {
  114|  5.13k|            self.bitPattern = bitPattern
  115|  5.13k|        }
$s10WasmParser7IEEE754O7Float64V10bitPatternAEs6UInt64V_tcfC:
  120|  3.04k|        public init(bitPattern: UInt64) {
  121|  3.04k|            self.bitPattern = bitPattern
  122|  3.04k|        }
$s10WasmParser7BrTableV12labelIndices12defaultIndexACSays6UInt32VG_AGtcfC:
  130|  1.21k|    public init(labelIndices: [UInt32], defaultIndex: UInt32) {
  131|  1.21k|        self.labelIndices = labelIndices
  132|  1.21k|        self.defaultIndex = defaultIndex
  133|  1.21k|    }
$s10WasmParser5TableV4typeAcA0C4TypeV_tcfC:
  168|    407|    public init(type: TableType) {
  169|    407|        self.type = type
  170|    407|    }
$s10WasmParser14ElementSegmentV4FlagV8rawValueAEs6UInt32V_tcfC:
  196|  32.8k|        init(rawValue: UInt32) {
  197|  32.8k|            self.rawValue = rawValue
  198|  32.8k|        }
$s10WasmParser14ElementSegmentV4FlagV18segmentHasElemKindSbvg:
  200|  2.76k|        @inlinable var segmentHasElemKind: Bool {
  201|  2.76k|            !contains(.usesExpressions) && rawValue != 0
  202|  2.76k|        }
$s10WasmParser14ElementSegmentV4FlagV18segmentHasElemKindSbvgSbyKXEfu_:
  201|  2.42k|            !contains(.usesExpressions) && rawValue != 0
$s10WasmParser14ElementSegmentV4FlagV17segmentHasRefTypeSbvg:
  204|  2.77k|        @inlinable var segmentHasRefType: Bool {
  205|  2.77k|            contains(.usesExpressions) && rawValue != 4
  206|  2.77k|        }
$s10WasmParser14ElementSegmentV4FlagV17segmentHasRefTypeSbvgSbyKXEfu_:
  205|    346|            contains(.usesExpressions) && rawValue != 4
$s10WasmParser14ElementSegmentV4type11initializer4modeAC0A5Types13ReferenceTypeO_SaySayAA11InstructionOGGAC4ModeOtcfC:
  224|  2.70k|    public init(type: ReferenceType, initializer: [ConstExpression], mode: Mode) {
  225|  2.70k|        self.type = type
  226|  2.70k|        self.initializer = initializer
  227|  2.70k|        self.mode = mode
  228|  2.70k|    }
$s10WasmParser11DataSegmentO6ActiveV5index6offset11initializerAEs6UInt32V_SayAA11InstructionOGs10ArraySliceVys5UInt8VGtcfC:
  240|    174|        @inlinable init(index: UInt32, offset: ConstExpression, initializer: ArraySlice<UInt8>) {
  241|    174|            self.index = index
  242|    174|            self.offset = offset
  243|    174|            self.initializer = initializer
  244|    174|        }
$s10WasmParser6ExportV4name10descriptorACSS_AA0C10DescriptorOtcfC:
  260|  1.57k|    public init(name: String, descriptor: ExportDescriptor) {
  261|  1.57k|        self.name = name
  262|  1.57k|        self.descriptor = descriptor
  263|  1.57k|    }
$s10WasmParser6ImportV6module4name10descriptorACSS_SSAA0C10DescriptorOtcfC:
  289|    775|    public init(module: String, name: String, descriptor: ImportDescriptor) {
  290|    775|        self.module = module
  291|    775|        self.name = name
  292|    775|        self.descriptor = descriptor
  293|    775|    }
$s10WasmParser11InstructionO4LoadO16naturalAlignmentSivg:
  351|  51.7k|    public var naturalAlignment: Int {
  352|  51.7k|        switch self {
  353|  51.7k|        case .i32Load: return 2
  354|  51.7k|        case .i64Load: return 3
  355|  51.7k|        case .f32Load: return 2
  356|  51.7k|        case .f64Load: return 3
  357|  51.7k|        case .i32Load8S: return 0
  358|  51.7k|        case .i32Load8U: return 0
  359|  51.7k|        case .i32Load16S: return 1
  360|  51.7k|        case .i32Load16U: return 1
  361|  51.7k|        case .i64Load8S: return 0
  362|  51.7k|        case .i64Load8U: return 0
  363|  51.7k|        case .i64Load16S: return 1
  364|  51.7k|        case .i64Load16U: return 1
  365|  51.7k|        case .i64Load32S: return 2
  366|  51.7k|        case .i64Load32U: return 2
  367|  51.7k|        }
  368|  51.7k|    }
$s10WasmParser11InstructionO4LoadO4type0A5Types9ValueTypeOvg:
  372|  51.7k|    public var type: ValueType {
  373|  51.7k|        switch self {
  374|  51.7k|        case .i32Load: return .i32
  375|  51.7k|        case .i64Load: return .i64
  376|  51.7k|        case .f32Load: return .f32
  377|  51.7k|        case .f64Load: return .f64
  378|  51.7k|        case .i32Load8S: return .i32
  379|  51.7k|        case .i32Load8U: return .i32
  380|  51.7k|        case .i32Load16S: return .i32
  381|  51.7k|        case .i32Load16U: return .i32
  382|  51.7k|        case .i64Load8S: return .i64
  383|  51.7k|        case .i64Load8U: return .i64
  384|  51.7k|        case .i64Load16S: return .i64
  385|  51.7k|        case .i64Load16U: return .i64
  386|  51.7k|        case .i64Load32S: return .i64
  387|  51.7k|        case .i64Load32U: return .i64
  388|  51.7k|        }
  389|  51.7k|    }
$s10WasmParser11InstructionO5StoreO16naturalAlignmentSivg:
  396|  1.61k|    public var naturalAlignment: Int {
  397|  1.61k|        switch self {
  398|  1.61k|        case .i32Store: return 2
  399|  1.61k|        case .i64Store: return 3
  400|  1.61k|        case .f32Store: return 2
  401|  1.61k|        case .f64Store: return 3
  402|  1.61k|        case .i32Store8: return 0
  403|  1.61k|        case .i32Store16: return 1
  404|  1.61k|        case .i64Store8: return 0
  405|  1.61k|        case .i64Store16: return 1
  406|  1.61k|        case .i64Store32: return 2
  407|  1.61k|        }
  408|  1.61k|    }
$s10WasmParser11InstructionO5StoreO4type0A5Types9ValueTypeOvg:
  412|  1.61k|    public var type: ValueType {
  413|  1.61k|        switch self {
  414|  1.61k|        case .i32Store: return .i32
  415|  1.61k|        case .i64Store: return .i64
  416|  1.61k|        case .f32Store: return .f32
  417|  1.61k|        case .f64Store: return .f64
  418|  1.61k|        case .i32Store8: return .i32
  419|  1.61k|        case .i32Store16: return .i32
  420|  1.61k|        case .i64Store8: return .i64
  421|  1.61k|        case .i64Store16: return .i64
  422|  1.61k|        case .i64Store32: return .i64
  423|  1.61k|        }
  424|  1.61k|    }

$s9WasmTypes12FunctionTypeV10parameters7resultsACSayAA05ValueD0OG_AHtcfC:
    6|  9.73k|    public init(parameters: [ValueType], results: [ValueType] = []) {
    7|  9.73k|        self.parameters = parameters
    8|  9.73k|        self.results = results
    9|  9.73k|    }

