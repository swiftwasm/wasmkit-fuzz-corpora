$s14FuzzTranslator0A5Checkys5Int32VSPys5UInt8VG_SitF:
    5|  4.08k|public func FuzzCheck(_ start: UnsafePointer<UInt8>, _ count: Int) -> CInt {
    6|  4.08k|    let bytes = Array(UnsafeBufferPointer(start: start, count: count))
    7|  4.08k|    do {
    8|  4.08k|        try fuzzInstantiation(bytes: bytes)
    9|  4.00k|    } catch {
   10|  4.00k|        // Ignore errors
   11|  4.08k|    }
   12|  4.08k|    return 0
   13|  4.08k|}

$s14WasmKitFuzzing21FuzzerResourceLimiterVACycfC:
    7|  1.87k|    public init() {}
$s14WasmKitFuzzing21FuzzerResourceLimiterV17limitMemoryGrowth2toSbSi_tKF:
    9|   105k|    public func limitMemoryGrowth(to desired: Int) throws -> Bool {
   10|   105k|        return desired < 1024 * 1024 * 1024
   11|   105k|    }
$s14WasmKitFuzzing21FuzzerResourceLimiterV16limitTableGrowth2toSbSi_tKF:
   12|    318|    public func limitTableGrowth(to desired: Int) throws -> Bool {
   13|    318|        return desired < 1024 * 1024
   14|    318|    }
$s14WasmKitFuzzing17fuzzInstantiation5bytesySays5UInt8VG_tKF:
   20|  4.08k|public func fuzzInstantiation(bytes: [UInt8]) throws {
   21|  4.08k|    let module = try WasmKit.parseWasm(bytes: bytes)
   22|  1.87k|    let engine = Engine(configuration: EngineConfiguration(compilationMode: .eager))
   23|  1.87k|    let store = Store(engine: engine)
   24|  1.87k|    store.resourceLimiter = FuzzerResourceLimiter()
   25|  1.87k|
   26|  1.87k|    // Prepare dummy imports
   27|  1.87k|    var imports = Imports()
   28|  1.87k|    for importEntry in module.imports {
   29|    223|        let value: ExternalValueConvertible
   30|    223|        switch importEntry.descriptor {
   31|    223|        case .function(let typeIndex):
   32|     41|            guard typeIndex < module.types.count else {
   33|      6|                // Skip if import type index is out of bounds
   34|      6|                return
   35|     35|            }
   36|     35|            let type = module.types[Int(typeIndex)]
   37|     35|            value = Function(store: store, type: type) { _, _ in
   38|     35|                // Provide "start function" with empty results
   39|     35|                if type.results.isEmpty { return [] }
   40|     35|                fatalError("Unexpected function call")
   41|     35|            }
   42|    223|        case .global(let globalType):
   43|     44|            value = try Global(store: store, type: globalType, value: .i32(0))
   44|    223|        case .memory(let memoryType):
   45|    103|            value = try Memory(store: store, type: memoryType)
   46|    223|        case .table(let tableType):
   47|     35|            value = try Table(store: store, type: tableType)
   48|    223|        }
   49|    211|        imports.define(module: importEntry.module, name: importEntry.name, value.externalValue)
   50|  1.85k|    }
   51|  1.85k|
   52|  1.85k|    // Instantiate the module
   53|  1.85k|    _ = try module.instantiate(store: store, imports: imports)
   54|     65|}

$s7WasmKit6EngineC13configuration11interceptorAcA0C13ConfigurationV_AA0C11Interceptor_pSgtcfc:
   21|  1.87k|    public init(configuration: EngineConfiguration = EngineConfiguration(), interceptor: EngineInterceptor? = nil) {
   22|  1.87k|        self.configuration = configuration
   23|  1.87k|        self.interceptor = interceptor
   24|  1.87k|        self.funcTypeInterner = Interner()
   25|  1.87k|    }
$s7WasmKit19EngineConfigurationV14ThreadingModelO21useDirectThreadedCodeSbvgZ:
   46|  1.87k|        static var useDirectThreadedCode: Bool {
   47|  1.87k|            return WASMKIT_USE_DIRECT_THREADED_CODE == 1
   48|  1.87k|        }
$s7WasmKit19EngineConfigurationV14ThreadingModelO25defaultForCurrentPlatformAEvgZ:
   50|  1.87k|        static var defaultForCurrentPlatform: ThreadingModel {
   51|  1.87k|            return useDirectThreadedCode ? .direct : .token
   52|  1.87k|        }
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfC:
  109|  1.87k|    ) {
  110|  1.87k|        self.threadingModel = threadingModel ?? .defaultForCurrentPlatform
  111|  1.87k|        self.compilationMode = compilationMode ?? .lazy
  112|  1.87k|        self.stackSize = stackSize ?? (1 << 19)
  113|  1.87k|        self.features = features
  114|  1.87k|    }
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfcAIyKXEfu_:
  110|  1.87k|        self.threadingModel = threadingModel ?? .defaultForCurrentPlatform
$s7WasmKit19EngineConfigurationV14threadingModel15compilationMode9stackSize8featuresA2C09ThreadingF0OSg_AC011CompilationH0OSgSiSg0A6Parser0A10FeatureSetVtcfcSiyKXEfu1_:
  112|  1.87k|        self.stackSize = stackSize ?? (1 << 19)
$s7WasmKit6EngineC11resolveTypey0A5Types08FunctionE0VAA8InternedVyAGGF:
  118|  3.02k|    func resolveType(_ type: InternedFuncType) -> FunctionType {
  119|  3.02k|        return funcTypeInterner.resolve(type)
  120|  3.02k|    }
$s7WasmKit6EngineC10internTypeyAA8InternedVy0A5Types08FunctionE0VGAIF:
  121|  5.17k|    func internType(_ type: FunctionType) -> InternedFuncType {
  122|  5.17k|        return funcTypeInterner.intern(type)
  123|  5.17k|    }

$s7WasmKit22ConstEvaluationContextV9functions7globals20onFunctionReferencedAcA14ImmutableArrayVyAA08InternalI0VG_Say0A5Types5ValueOGyAJcSgtcfC:
   17|  3.56k|    ) {
   18|  3.56k|        self.functions = functions
   19|  3.56k|        self.globals = globals
   20|  3.56k|        self.onFunctionReferenced = onFunctionReferenced
   21|  3.56k|    }
$s7WasmKit22ConstEvaluationContextV8instance13moduleImportsAcA12EntityHandleVyAA08InstanceI0VG_AA06ModuleH0VtcfC:
   23|  1.74k|    init(instance: InternalInstance, moduleImports: ModuleImports) {
   24|  1.74k|        // Constant expressions can only reference imported globals
   25|  1.74k|        let externalGlobals = instance.globals
   26|  1.74k|            .prefix(moduleImports.numberOfGlobals)
   27|  1.74k|            .map { $0.value }
   28|  1.74k|        self.init(functions: instance.functions, globals: Array(externalGlobals))
   29|  1.74k|    }
$s7WasmKit22ConstEvaluationContextV8instance13moduleImportsAcA12EntityHandleVyAA08InstanceI0VG_AA06ModuleH0Vtcfc0A5Types5ValueOAGyAA06GlobalI0VGXEfU_:
   27|     18|            .map { $0.value }
$s7WasmKit22ConstEvaluationContextV11functionRefy0A5Types9ReferenceOs6UInt32VKF:
   31|     16|    func functionRef(_ index: FunctionIndex) throws -> Reference {
   32|     16|        let function = try self.functions[validating: Int(index)]
   33|     13|        self.onFunctionReferenced?(function)
   34|     13|        return .function(from: function)
   35|     16|    }
$s7WasmKit22ConstEvaluationContextV11globalValuey0A5Types0G0Os6UInt32VKF:
   36|      2|    func globalValue(_ index: GlobalIndex) throws -> Value {
   37|      2|        guard index < globals.count else {
   38|      2|            throw GlobalEntity.createOutOfBoundsError(index: Int(index), count: globals.count)
   39|      2|        }
   40|      0|        return self.globals[Int(index)]
   41|      2|    }
$sSa7WasmKit0A6Parser11InstructionORszlE8evaluate7context12expectedType0A5Types5ValueOqd___AH0jH0OtKAA30ConstEvaluationContextProtocolRd__lF:
   45|  7.55k|    func evaluate<C: ConstEvaluationContextProtocol>(context: C, expectedType: WasmTypes.ValueType) throws -> Value {
   46|  7.55k|        let result = try self._evaluate(context: context)
   47|  7.54k|        try result.checkType(expectedType)
   48|  7.52k|        return result
   49|  7.55k|    }
$sSa7WasmKit0A6Parser11InstructionORszlE9_evaluate33_4813626859827C7082EA5FE0B7501990LL7context0A5Types5ValueOqd___tKAA30ConstEvaluationContextProtocolRd__lF:
   51|  7.55k|    private func _evaluate<C: ConstEvaluationContextProtocol>(context: C) throws -> Value {
   52|  7.55k|        guard self.last == .end, self.count == 2 else {
   53|      4|            throw ValidationError(.expectedEndAtOffsetExpression)
   54|  7.55k|        }
   55|  7.55k|        let constInst = self[0]
   56|  7.55k|        switch constInst {
   57|  7.55k|        case .i32Const(let value): return .i32(UInt32(bitPattern: value))
   58|  7.55k|        case .i64Const(let value): return .i64(UInt64(bitPattern: value))
   59|  7.55k|        case .f32Const(let value): return .f32(value.bitPattern)
   60|  7.55k|        case .f64Const(let value): return .f64(value.bitPattern)
   61|  7.55k|        case .globalGet(let globalIndex):
   62|      1|            return try context.globalValue(globalIndex)
   63|  7.55k|        case .refNull(let type):
   64|      0|            switch type {
   65|      0|            case .externRef: return .ref(.extern(nil))
   66|      0|            case .funcRef: return .ref(.function(nil))
   67|      0|            }
   68|  7.55k|        case .refFunc(let functionIndex):
   69|     14|            return try .ref(context.functionRef(functionIndex))
   70|  7.55k|        default:
   71|      8|            throw ValidationError(.illegalConstExpressionInstruction(constInst))
   72|  7.55k|        }
   73|  7.55k|    }
$s10WasmParser14ElementSegmentV0A3KitE13evaluateInits7contextSay0A5Types9ReferenceOGx_tKAD30ConstEvaluationContextProtocolRzlF:
   77|    154|    func evaluateInits<C: ConstEvaluationContextProtocol>(context: C) throws -> [Reference] {
   78|    154|        return try self.initializer.map { expression -> Reference in
   79|    154|            let result = try Self._evaluateInits(context: context, expression: expression)
   80|    154|            try result.checkType(self.type)
   81|    154|            return result
   82|    154|        }
   83|    154|    }
$s10WasmParser14ElementSegmentV0A3KitE13evaluateInits7contextSay0A5Types9ReferenceOGx_tKAD30ConstEvaluationContextProtocolRzlFAISayAA11InstructionOGKXEfU_:
   78|     47|        return try self.initializer.map { expression -> Reference in
   79|     47|            let result = try Self._evaluateInits(context: context, expression: expression)
   80|      0|            try result.checkType(self.type)
   81|      0|            return result
   82|     47|        }
$s10WasmParser14ElementSegmentV0A3KitE14_evaluateInits7context10expression0A5Types9ReferenceOx_SayAA11InstructionOGtKAD30ConstEvaluationContextProtocolRzlFZ:
   86|     47|    ) throws -> Reference {
   87|     47|        switch expression[0] {
   88|     47|        case let .refFunc(index):
   89|      2|            return try context.functionRef(index)
   90|     47|        case .refNull(.funcRef):
   91|      0|            return .function(nil)
   92|     47|        case .refNull(.externRef):
   93|      0|            return .extern(nil)
   94|     47|        case .globalGet(let index):
   95|      1|            let value = try context.globalValue(index)
   96|      0|            switch value {
   97|      0|            case .ref(.function(let addr)):
   98|      0|                return .function(addr)
   99|      0|            default:
  100|      0|                throw ValidationError(.unexpectedGlobalValueType)
  101|      0|            }
  102|     47|        default:
  103|     44|            throw ValidationError(.unexpectedElementInitializer(expression: "\(expression)"))
  104|     47|        }
  105|     47|    }

wasmkit_execute_copyStack:
  224|   116k|    mutating func execute_copyStack(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  225|   116k|        let immediate = Instruction.CopyStackOperand.load(from: &pc.pointee)
  226|   116k|        self.copyStack(sp: sp.pointee, immediate: immediate)
  227|   116k|        let next = pc.pointee.pointee
  228|   116k|        pc.pointee = pc.pointee.advanced(by: 1)
  229|   116k|        return next
  230|   116k|    }
wasmkit_execute_globalGet:
  232|   103k|    mutating func execute_globalGet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  233|   103k|        let immediate = Instruction.GlobalAndVRegOperand.load(from: &pc.pointee)
  234|   103k|        self.globalGet(sp: sp.pointee, immediate: immediate)
  235|   103k|        let next = pc.pointee.pointee
  236|   103k|        pc.pointee = pc.pointee.advanced(by: 1)
  237|   103k|        return next
  238|   103k|    }
wasmkit_execute_globalSet:
  240|  5.72k|    mutating func execute_globalSet(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  241|  5.72k|        let immediate = Instruction.GlobalAndVRegOperand.load(from: &pc.pointee)
  242|  5.72k|        self.globalSet(sp: sp.pointee, immediate: immediate)
  243|  5.72k|        let next = pc.pointee.pointee
  244|  5.72k|        pc.pointee = pc.pointee.advanced(by: 1)
  245|  5.72k|        return next
  246|  5.72k|    }
wasmkit_execute_compilingCall:
  255|  1.17k|    mutating func execute_compilingCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  256|  1.17k|        let immediate = Instruction.CallOperand.load(from: &pc.pointee)
  257|  1.17k|        let next: CodeSlot
  258|  1.17k|        (pc.pointee, next) = try self.compilingCall(sp: &sp.pointee, pc: pc.pointee, immediate: immediate)
  259|  1.17k|        return next
  260|  1.17k|    }
wasmkit_execute_internalCall:
  262|   584k|    mutating func execute_internalCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  263|   584k|        let immediate = Instruction.CallOperand.load(from: &pc.pointee)
  264|   584k|        let next: CodeSlot
  265|   584k|        (pc.pointee, next) = try self.internalCall(sp: &sp.pointee, pc: pc.pointee, immediate: immediate)
  266|   584k|        return next
  267|   584k|    }
wasmkit_execute_returnCall:
  284|     17|    mutating func execute_returnCall(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  285|     17|        let immediate = Instruction.ReturnCallOperand.load(from: &pc.pointee)
  286|     17|        let next: CodeSlot
  287|     17|        (pc.pointee, next) = try self.returnCall(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
  288|     16|        return next
  289|     17|    }
wasmkit_execute_unreachable:
  298|     69|    mutating func execute_unreachable(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  299|     69|        let next: CodeSlot
  300|     69|        (pc.pointee, next) = try self.unreachable(sp: sp.pointee, pc: pc.pointee)
  301|      0|        return next
  302|     69|    }
wasmkit_execute_nop:
  304|   101k|    mutating func execute_nop(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  305|   101k|        self.nop(sp: sp.pointee)
  306|   101k|        let next = pc.pointee.pointee
  307|   101k|        pc.pointee = pc.pointee.advanced(by: 1)
  308|   101k|        return next
  309|   101k|    }
wasmkit_execute_br:
  311|  4.35k|    mutating func execute_br(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  312|  4.35k|        let immediate = Instruction.BrOperand.load(from: &pc.pointee)
  313|  4.35k|        let next: CodeSlot
  314|  4.35k|        (pc.pointee, next) = self.br(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  315|  4.35k|        return next
  316|  4.35k|    }
wasmkit_execute_brIf:
  318|  8.63k|    mutating func execute_brIf(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  319|  8.63k|        let immediate = Instruction.BrIfOperand.load(from: &pc.pointee)
  320|  8.63k|        let next: CodeSlot
  321|  8.63k|        (pc.pointee, next) = self.brIf(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  322|  8.63k|        return next
  323|  8.63k|    }
wasmkit_execute_brIfNot:
  325|      2|    mutating func execute_brIfNot(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  326|      2|        let immediate = Instruction.BrIfOperand.load(from: &pc.pointee)
  327|      2|        let next: CodeSlot
  328|      2|        (pc.pointee, next) = self.brIfNot(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  329|      2|        return next
  330|      2|    }
wasmkit_execute_brTable:
  332|  9.59k|    mutating func execute_brTable(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  333|  9.59k|        let immediate = Instruction.BrTableOperand.load(from: &pc.pointee)
  334|  9.59k|        let next: CodeSlot
  335|  9.59k|        (pc.pointee, next) = self.brTable(sp: sp.pointee, pc: pc.pointee, immediate: immediate)
  336|  9.59k|        return next
  337|  9.59k|    }
wasmkit_execute__return:
  339|   308k|    mutating func execute__return(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  340|   308k|        let next: CodeSlot
  341|   308k|        (pc.pointee, next) = self._return(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee)
  342|   308k|        return next
  343|   308k|    }
wasmkit_execute_endOfExecution:
  345|     12|    mutating func execute_endOfExecution(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  346|     12|        let next: CodeSlot
  347|     12|        (pc.pointee, next) = try self.endOfExecution(sp: &sp.pointee, pc: pc.pointee)
  348|      0|        return next
  349|     12|    }
wasmkit_execute_i32Load:
  351|  5.37k|    mutating func execute_i32Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  352|  5.37k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  353|  5.37k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i32($0) })
  354|  5.37k|        let next = pc.pointee.pointee
  355|  5.37k|        pc.pointee = pc.pointee.advanced(by: 1)
  356|  5.37k|        return next
  357|  5.37k|    }
$s7WasmKit9ExecutionV15execute_i32Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  353|  5.37k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i32($0) })
wasmkit_execute_i64Load:
  359|  4.27k|    mutating func execute_i64Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  360|  4.27k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  361|  4.27k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .i64($0) })
  362|  4.27k|        let next = pc.pointee.pointee
  363|  4.27k|        pc.pointee = pc.pointee.advanced(by: 1)
  364|  4.27k|        return next
  365|  4.27k|    }
$s7WasmKit9ExecutionV15execute_i64Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVAJXEfU_:
  361|  4.27k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .i64($0) })
wasmkit_execute_f32Load:
  367|  6.20k|    mutating func execute_f32Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  368|  6.20k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  369|  6.20k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .rawF32($0) })
  370|  6.20k|        let next = pc.pointee.pointee
  371|  6.20k|        pc.pointee = pc.pointee.advanced(by: 1)
  372|  6.20k|        return next
  373|  6.20k|    }
$s7WasmKit9ExecutionV15execute_f32Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  369|  6.20k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .rawF32($0) })
wasmkit_execute_f64Load:
  375|   309k|    mutating func execute_f64Load(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  376|   309k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  377|   309k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .rawF64($0) })
  378|   309k|        let next = pc.pointee.pointee
  379|   309k|        pc.pointee = pc.pointee.advanced(by: 1)
  380|   309k|        return next
  381|   309k|    }
$s7WasmKit9ExecutionV15execute_f64Load2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVAJXEfU_:
  377|   309k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt64.self, castToValue: { .rawF64($0) })
wasmkit_execute_i32Load8S:
  383|   121k|    mutating func execute_i32Load8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  384|   121k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  385|   121k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int32($0)) })
  386|   121k|        let next = pc.pointee.pointee
  387|   121k|        pc.pointee = pc.pointee.advanced(by: 1)
  388|   121k|        return next
  389|   121k|    }
$s7WasmKit9ExecutionV17execute_i32Load8S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs4Int8VXEfU_:
  385|   121k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int32($0)) })
wasmkit_execute_i32Load8U:
  391|  9.32k|    mutating func execute_i32Load8U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  392|  9.32k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  393|  9.32k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i32(UInt32($0)) })
  394|  9.31k|        let next = pc.pointee.pointee
  395|  9.31k|        pc.pointee = pc.pointee.advanced(by: 1)
  396|  9.31k|        return next
  397|  9.32k|    }
$s7WasmKit9ExecutionV17execute_i32Load8U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5UInt8VXEfU_:
  393|  9.31k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i32(UInt32($0)) })
wasmkit_execute_i32Load16S:
  399|   119k|    mutating func execute_i32Load16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  400|   119k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  401|   119k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int32($0)) })
  402|   119k|        let next = pc.pointee.pointee
  403|   119k|        pc.pointee = pc.pointee.advanced(by: 1)
  404|   119k|        return next
  405|   119k|    }
$s7WasmKit9ExecutionV18execute_i32Load16S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int16VXEfU_:
  401|   119k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int32($0)) })
wasmkit_execute_i32Load16U:
  407|  7.06k|    mutating func execute_i32Load16U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  408|  7.06k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  409|  7.06k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i32(UInt32($0)) })
  410|  7.06k|        let next = pc.pointee.pointee
  411|  7.06k|        pc.pointee = pc.pointee.advanced(by: 1)
  412|  7.06k|        return next
  413|  7.06k|    }
$s7WasmKit9ExecutionV18execute_i32Load16U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt16VXEfU_:
  409|  7.06k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i32(UInt32($0)) })
wasmkit_execute_i64Load8S:
  415|  11.5k|    mutating func execute_i64Load8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  416|  11.5k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  417|  11.5k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int64($0)) })
  418|  11.5k|        let next = pc.pointee.pointee
  419|  11.5k|        pc.pointee = pc.pointee.advanced(by: 1)
  420|  11.5k|        return next
  421|  11.5k|    }
$s7WasmKit9ExecutionV17execute_i64Load8S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs4Int8VXEfU_:
  417|  11.5k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int8.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load8U:
  423|  14.8k|    mutating func execute_i64Load8U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  424|  14.8k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  425|  14.8k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i64(UInt64($0)) })
  426|  14.8k|        let next = pc.pointee.pointee
  427|  14.8k|        pc.pointee = pc.pointee.advanced(by: 1)
  428|  14.8k|        return next
  429|  14.8k|    }
$s7WasmKit9ExecutionV17execute_i64Load8U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5UInt8VXEfU_:
  425|  14.8k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt8.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i64Load16S:
  431|   110k|    mutating func execute_i64Load16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  432|   110k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  433|   110k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int64($0)) })
  434|   110k|        let next = pc.pointee.pointee
  435|   110k|        pc.pointee = pc.pointee.advanced(by: 1)
  436|   110k|        return next
  437|   110k|    }
$s7WasmKit9ExecutionV18execute_i64Load16S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int16VXEfU_:
  433|   110k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int16.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load16U:
  439|  11.0k|    mutating func execute_i64Load16U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  440|  11.0k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  441|  11.0k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i64(UInt64($0)) })
  442|  11.0k|        let next = pc.pointee.pointee
  443|  11.0k|        pc.pointee = pc.pointee.advanced(by: 1)
  444|  11.0k|        return next
  445|  11.0k|    }
$s7WasmKit9ExecutionV18execute_i64Load16U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt16VXEfU_:
  441|  11.0k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt16.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i64Load32S:
  447|   524k|    mutating func execute_i64Load32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  448|   524k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  449|   524k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int32.self, castToValue: { .init(signed: Int64($0)) })
  450|   524k|        let next = pc.pointee.pointee
  451|   524k|        pc.pointee = pc.pointee.advanced(by: 1)
  452|   524k|        return next
  453|   524k|    }
$s7WasmKit9ExecutionV18execute_i64Load32S2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs5Int32VXEfU_:
  449|   524k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: Int32.self, castToValue: { .init(signed: Int64($0)) })
wasmkit_execute_i64Load32U:
  455|  10.6k|    mutating func execute_i64Load32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  456|  10.6k|        let immediate = Instruction.LoadOperand.load(from: &pc.pointee)
  457|  10.6k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i64(UInt64($0)) })
  458|  10.6k|        let next = pc.pointee.pointee
  459|  10.6k|        pc.pointee = pc.pointee.advanced(by: 1)
  460|  10.6k|        return next
  461|  10.6k|    }
$s7WasmKit9ExecutionV18execute_i64Load32U2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAA12UntypedValueVs6UInt32VXEfU_:
  457|  10.6k|        try memoryLoad(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: immediate, loadAs: UInt32.self, castToValue: { .i64(UInt64($0)) })
wasmkit_execute_i32Store:
  463|  7.48k|    mutating func execute_i32Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  464|  7.48k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  465|  7.48k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i32 })
  466|  7.48k|        let next = pc.pointee.pointee
  467|  7.48k|        pc.pointee = pc.pointee.advanced(by: 1)
  468|  7.48k|        return next
  469|  7.48k|    }
$s7WasmKit9ExecutionV16execute_i32Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  465|  7.48k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i32 })
wasmkit_execute_i64Store:
  471|  1.92k|    mutating func execute_i64Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  472|  1.92k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  473|  1.92k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i64 })
  474|  1.92k|        let next = pc.pointee.pointee
  475|  1.92k|        pc.pointee = pc.pointee.advanced(by: 1)
  476|  1.92k|        return next
  477|  1.92k|    }
$s7WasmKit9ExecutionV16execute_i64Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFAjA12UntypedValueVXEfU_:
  473|  1.92k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.i64 })
wasmkit_execute_f32Store:
  479|  1.51k|    mutating func execute_f32Store(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  480|  1.51k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  481|  1.51k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF32 })
  482|  1.51k|        let next = pc.pointee.pointee
  483|  1.51k|        pc.pointee = pc.pointee.advanced(by: 1)
  484|  1.51k|        return next
  485|  1.51k|    }
$s7WasmKit9ExecutionV16execute_f32Store2sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  481|  1.51k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { $0.rawF32 })
wasmkit_execute_i32Store8:
  495|  5.19k|    mutating func execute_i32Store8(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  496|  5.19k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  497|  5.19k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
  498|  5.19k|        let next = pc.pointee.pointee
  499|  5.19k|        pc.pointee = pc.pointee.advanced(by: 1)
  500|  5.19k|        return next
  501|  5.19k|    }
$s7WasmKit9ExecutionV17execute_i32Store82sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs5UInt8VAA12UntypedValueVXEfU_:
  497|  5.19k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
wasmkit_execute_i32Store16:
  503|  10.4k|    mutating func execute_i32Store16(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  504|  10.4k|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  505|  10.4k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
  506|  10.4k|        let next = pc.pointee.pointee
  507|  10.4k|        pc.pointee = pc.pointee.advanced(by: 1)
  508|  10.4k|        return next
  509|  10.4k|    }
$s7WasmKit9ExecutionV18execute_i32Store162sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt16VAA12UntypedValueVXEfU_:
  505|  10.4k|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
wasmkit_execute_i64Store8:
  511|      2|    mutating func execute_i64Store8(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  512|      2|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  513|      2|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
  514|      1|        let next = pc.pointee.pointee
  515|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  516|      1|        return next
  517|      2|    }
$s7WasmKit9ExecutionV17execute_i64Store82sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs5UInt8VAA12UntypedValueVXEfU_:
  513|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
wasmkit_execute_i64Store16:
  519|      2|    mutating func execute_i64Store16(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  520|      2|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  521|      2|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
  522|      2|        let next = pc.pointee.pointee
  523|      2|        pc.pointee = pc.pointee.advanced(by: 1)
  524|      2|        return next
  525|      2|    }
$s7WasmKit9ExecutionV18execute_i64Store162sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt16VAA12UntypedValueVXEfU_:
  521|      2|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
wasmkit_execute_i64Store32:
  527|      2|    mutating func execute_i64Store32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  528|      2|        let immediate = Instruction.StoreOperand.load(from: &pc.pointee)
  529|      2|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
  530|      1|        let next = pc.pointee.pointee
  531|      1|        pc.pointee = pc.pointee.advanced(by: 1)
  532|      1|        return next
  533|      2|    }
$s7WasmKit9ExecutionV18execute_i64Store322sp2pc2md2mss6UInt64VSpySpyAJGG_ALSpySvSgGSpySiGtKFs6UInt32VAA12UntypedValueVXEfU_:
  529|      1|        try memoryStore(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: immediate, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
wasmkit_execute_memorySize:
  535|   461k|    mutating func execute_memorySize(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  536|   461k|        let immediate = Instruction.MemorySizeOperand.load(from: &pc.pointee)
  537|   461k|        self.memorySize(sp: sp.pointee, immediate: immediate)
  538|   461k|        let next = pc.pointee.pointee
  539|   461k|        pc.pointee = pc.pointee.advanced(by: 1)
  540|   461k|        return next
  541|   461k|    }
wasmkit_execute_memoryGrow:
  543|   112k|    mutating func execute_memoryGrow(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  544|   112k|        let immediate = Instruction.MemoryGrowOperand.load(from: &pc.pointee)
  545|   112k|        try self.memoryGrow(sp: sp.pointee, md: &md.pointee, ms: &ms.pointee, immediate: immediate)
  546|   112k|        let next = pc.pointee.pointee
  547|   112k|        pc.pointee = pc.pointee.advanced(by: 1)
  548|   112k|        return next
  549|   112k|    }
wasmkit_execute_const32:
  583|  22.2k|    mutating func execute_const32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  584|  22.2k|        let immediate = Instruction.Const32Operand.load(from: &pc.pointee)
  585|  22.2k|        self.const32(sp: sp.pointee, immediate: immediate)
  586|  22.2k|        let next = pc.pointee.pointee
  587|  22.2k|        pc.pointee = pc.pointee.advanced(by: 1)
  588|  22.2k|        return next
  589|  22.2k|    }
wasmkit_execute_i32Add:
  599|  3.92k|    mutating func execute_i32Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  600|  3.92k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  601|  3.92k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].add(sp.pointee[i32: immediate.rhs])
  602|  3.92k|        let next = pc.pointee.pointee
  603|  3.92k|        pc.pointee = pc.pointee.advanced(by: 1)
  604|  3.92k|        return next
  605|  3.92k|    }
wasmkit_execute_i64Add:
  607|  4.20k|    mutating func execute_i64Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  608|  4.20k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  609|  4.20k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].add(sp.pointee[i64: immediate.rhs])
  610|  4.20k|        let next = pc.pointee.pointee
  611|  4.20k|        pc.pointee = pc.pointee.advanced(by: 1)
  612|  4.20k|        return next
  613|  4.20k|    }
wasmkit_execute_i32Sub:
  615|  4.68k|    mutating func execute_i32Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  616|  4.68k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  617|  4.68k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].sub(sp.pointee[i32: immediate.rhs])
  618|  4.68k|        let next = pc.pointee.pointee
  619|  4.68k|        pc.pointee = pc.pointee.advanced(by: 1)
  620|  4.68k|        return next
  621|  4.68k|    }
wasmkit_execute_i64Sub:
  623|   179k|    mutating func execute_i64Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  624|   179k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  625|   179k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].sub(sp.pointee[i64: immediate.rhs])
  626|   179k|        let next = pc.pointee.pointee
  627|   179k|        pc.pointee = pc.pointee.advanced(by: 1)
  628|   179k|        return next
  629|   179k|    }
wasmkit_execute_i32Mul:
  631|  6.48k|    mutating func execute_i32Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  632|  6.48k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  633|  6.48k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].mul(sp.pointee[i32: immediate.rhs])
  634|  6.48k|        let next = pc.pointee.pointee
  635|  6.48k|        pc.pointee = pc.pointee.advanced(by: 1)
  636|  6.48k|        return next
  637|  6.48k|    }
wasmkit_execute_i64Mul:
  639|  2.89k|    mutating func execute_i64Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  640|  2.89k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  641|  2.89k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].mul(sp.pointee[i64: immediate.rhs])
  642|  2.89k|        let next = pc.pointee.pointee
  643|  2.89k|        pc.pointee = pc.pointee.advanced(by: 1)
  644|  2.89k|        return next
  645|  2.89k|    }
wasmkit_execute_i32And:
  647|  4.19k|    mutating func execute_i32And(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  648|  4.19k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  649|  4.19k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].and(sp.pointee[i32: immediate.rhs])
  650|  4.19k|        let next = pc.pointee.pointee
  651|  4.19k|        pc.pointee = pc.pointee.advanced(by: 1)
  652|  4.19k|        return next
  653|  4.19k|    }
wasmkit_execute_i64And:
  655|  2.40k|    mutating func execute_i64And(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  656|  2.40k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  657|  2.40k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].and(sp.pointee[i64: immediate.rhs])
  658|  2.40k|        let next = pc.pointee.pointee
  659|  2.40k|        pc.pointee = pc.pointee.advanced(by: 1)
  660|  2.40k|        return next
  661|  2.40k|    }
wasmkit_execute_i32Or:
  663|  4.44k|    mutating func execute_i32Or(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  664|  4.44k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  665|  4.44k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].or(sp.pointee[i32: immediate.rhs])
  666|  4.44k|        let next = pc.pointee.pointee
  667|  4.44k|        pc.pointee = pc.pointee.advanced(by: 1)
  668|  4.44k|        return next
  669|  4.44k|    }
wasmkit_execute_i64Or:
  671|   154k|    mutating func execute_i64Or(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  672|   154k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  673|   154k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].or(sp.pointee[i64: immediate.rhs])
  674|   154k|        let next = pc.pointee.pointee
  675|   154k|        pc.pointee = pc.pointee.advanced(by: 1)
  676|   154k|        return next
  677|   154k|    }
wasmkit_execute_i32Xor:
  679|  3.91k|    mutating func execute_i32Xor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  680|  3.91k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  681|  3.91k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].xor(sp.pointee[i32: immediate.rhs])
  682|  3.91k|        let next = pc.pointee.pointee
  683|  3.91k|        pc.pointee = pc.pointee.advanced(by: 1)
  684|  3.91k|        return next
  685|  3.91k|    }
wasmkit_execute_i64Xor:
  687|  5.44k|    mutating func execute_i64Xor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  688|  5.44k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  689|  5.44k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].xor(sp.pointee[i64: immediate.rhs])
  690|  5.44k|        let next = pc.pointee.pointee
  691|  5.44k|        pc.pointee = pc.pointee.advanced(by: 1)
  692|  5.44k|        return next
  693|  5.44k|    }
wasmkit_execute_i32Shl:
  695|  2.92k|    mutating func execute_i32Shl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  696|  2.92k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  697|  2.92k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shl(sp.pointee[i32: immediate.rhs])
  698|  2.92k|        let next = pc.pointee.pointee
  699|  2.92k|        pc.pointee = pc.pointee.advanced(by: 1)
  700|  2.92k|        return next
  701|  2.92k|    }
wasmkit_execute_i64Shl:
  703|  8.10k|    mutating func execute_i64Shl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  704|  8.10k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  705|  8.10k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shl(sp.pointee[i64: immediate.rhs])
  706|  8.10k|        let next = pc.pointee.pointee
  707|  8.10k|        pc.pointee = pc.pointee.advanced(by: 1)
  708|  8.10k|        return next
  709|  8.10k|    }
wasmkit_execute_i32ShrS:
  711|  4.19k|    mutating func execute_i32ShrS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  712|  4.19k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  713|  4.19k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shrS(sp.pointee[i32: immediate.rhs])
  714|  4.19k|        let next = pc.pointee.pointee
  715|  4.19k|        pc.pointee = pc.pointee.advanced(by: 1)
  716|  4.19k|        return next
  717|  4.19k|    }
wasmkit_execute_i64ShrS:
  719|  47.6k|    mutating func execute_i64ShrS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  720|  47.6k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  721|  47.6k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shrS(sp.pointee[i64: immediate.rhs])
  722|  47.6k|        let next = pc.pointee.pointee
  723|  47.6k|        pc.pointee = pc.pointee.advanced(by: 1)
  724|  47.6k|        return next
  725|  47.6k|    }
wasmkit_execute_i32ShrU:
  727|  4.76k|    mutating func execute_i32ShrU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  728|  4.76k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  729|  4.76k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].shrU(sp.pointee[i32: immediate.rhs])
  730|  4.76k|        let next = pc.pointee.pointee
  731|  4.76k|        pc.pointee = pc.pointee.advanced(by: 1)
  732|  4.76k|        return next
  733|  4.76k|    }
wasmkit_execute_i64ShrU:
  735|  10.4k|    mutating func execute_i64ShrU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  736|  10.4k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  737|  10.4k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].shrU(sp.pointee[i64: immediate.rhs])
  738|  10.4k|        let next = pc.pointee.pointee
  739|  10.4k|        pc.pointee = pc.pointee.advanced(by: 1)
  740|  10.4k|        return next
  741|  10.4k|    }
wasmkit_execute_i32Rotl:
  743|  4.36k|    mutating func execute_i32Rotl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  744|  4.36k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  745|  4.36k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].rotl(sp.pointee[i32: immediate.rhs])
  746|  4.36k|        let next = pc.pointee.pointee
  747|  4.36k|        pc.pointee = pc.pointee.advanced(by: 1)
  748|  4.36k|        return next
  749|  4.36k|    }
wasmkit_execute_i64Rotl:
  751|  4.18k|    mutating func execute_i64Rotl(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  752|  4.18k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  753|  4.18k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].rotl(sp.pointee[i64: immediate.rhs])
  754|  4.18k|        let next = pc.pointee.pointee
  755|  4.18k|        pc.pointee = pc.pointee.advanced(by: 1)
  756|  4.18k|        return next
  757|  4.18k|    }
wasmkit_execute_i32Rotr:
  759|  5.61k|    mutating func execute_i32Rotr(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  760|  5.61k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  761|  5.61k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].rotr(sp.pointee[i32: immediate.rhs])
  762|  5.61k|        let next = pc.pointee.pointee
  763|  5.61k|        pc.pointee = pc.pointee.advanced(by: 1)
  764|  5.61k|        return next
  765|  5.61k|    }
wasmkit_execute_i64Rotr:
  767|  5.80k|    mutating func execute_i64Rotr(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  768|  5.80k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  769|  5.80k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.lhs].rotr(sp.pointee[i64: immediate.rhs])
  770|  5.80k|        let next = pc.pointee.pointee
  771|  5.80k|        pc.pointee = pc.pointee.advanced(by: 1)
  772|  5.80k|        return next
  773|  5.80k|    }
wasmkit_execute_i32DivS:
  775|  7.05k|    mutating func execute_i32DivS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  776|  7.05k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  777|  7.05k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].divS(sp.pointee[i32: immediate.rhs])
  778|  7.04k|        let next = pc.pointee.pointee
  779|  7.04k|        pc.pointee = pc.pointee.advanced(by: 1)
  780|  7.04k|        return next
  781|  7.05k|    }
wasmkit_execute_i64DivS:
  783|  16.3k|    mutating func execute_i64DivS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  784|  16.3k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  785|  16.3k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].divS(sp.pointee[i64: immediate.rhs])
  786|  16.3k|        let next = pc.pointee.pointee
  787|  16.3k|        pc.pointee = pc.pointee.advanced(by: 1)
  788|  16.3k|        return next
  789|  16.3k|    }
wasmkit_execute_i32DivU:
  791|  2.54k|    mutating func execute_i32DivU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  792|  2.54k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  793|  2.54k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].divU(sp.pointee[i32: immediate.rhs])
  794|  2.54k|        let next = pc.pointee.pointee
  795|  2.54k|        pc.pointee = pc.pointee.advanced(by: 1)
  796|  2.54k|        return next
  797|  2.54k|    }
wasmkit_execute_i64DivU:
  799|  4.44k|    mutating func execute_i64DivU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  800|  4.44k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  801|  4.44k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].divU(sp.pointee[i64: immediate.rhs])
  802|  4.44k|        let next = pc.pointee.pointee
  803|  4.44k|        pc.pointee = pc.pointee.advanced(by: 1)
  804|  4.44k|        return next
  805|  4.44k|    }
wasmkit_execute_i32RemS:
  807|  3.91k|    mutating func execute_i32RemS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  808|  3.91k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  809|  3.91k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].remS(sp.pointee[i32: immediate.rhs])
  810|  3.91k|        let next = pc.pointee.pointee
  811|  3.91k|        pc.pointee = pc.pointee.advanced(by: 1)
  812|  3.91k|        return next
  813|  3.91k|    }
wasmkit_execute_i64RemS:
  815|  4.90k|    mutating func execute_i64RemS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  816|  4.90k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  817|  4.90k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].remS(sp.pointee[i64: immediate.rhs])
  818|  4.89k|        let next = pc.pointee.pointee
  819|  4.89k|        pc.pointee = pc.pointee.advanced(by: 1)
  820|  4.89k|        return next
  821|  4.90k|    }
wasmkit_execute_i32RemU:
  823|  2.38k|    mutating func execute_i32RemU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  824|  2.38k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  825|  2.38k|        sp.pointee[i32: immediate.result] = try sp.pointee[i32: immediate.lhs].remU(sp.pointee[i32: immediate.rhs])
  826|  2.38k|        let next = pc.pointee.pointee
  827|  2.38k|        pc.pointee = pc.pointee.advanced(by: 1)
  828|  2.38k|        return next
  829|  2.38k|    }
wasmkit_execute_i64RemU:
  831|  24.1k|    mutating func execute_i64RemU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
  832|  24.1k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  833|  24.1k|        sp.pointee[i64: immediate.result] = try sp.pointee[i64: immediate.lhs].remU(sp.pointee[i64: immediate.rhs])
  834|  24.1k|        let next = pc.pointee.pointee
  835|  24.1k|        pc.pointee = pc.pointee.advanced(by: 1)
  836|  24.1k|        return next
  837|  24.1k|    }
wasmkit_execute_i32Eq:
  839|  10.6k|    mutating func execute_i32Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  840|  10.6k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  841|  10.6k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].eq(sp.pointee[i32: immediate.rhs])
  842|  10.6k|        let next = pc.pointee.pointee
  843|  10.6k|        pc.pointee = pc.pointee.advanced(by: 1)
  844|  10.6k|        return next
  845|  10.6k|    }
wasmkit_execute_i64Eq:
  847|  3.14k|    mutating func execute_i64Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  848|  3.14k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  849|  3.14k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].eq(sp.pointee[i64: immediate.rhs])
  850|  3.14k|        let next = pc.pointee.pointee
  851|  3.14k|        pc.pointee = pc.pointee.advanced(by: 1)
  852|  3.14k|        return next
  853|  3.14k|    }
wasmkit_execute_i32Ne:
  855|  3.91k|    mutating func execute_i32Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  856|  3.91k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  857|  3.91k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ne(sp.pointee[i32: immediate.rhs])
  858|  3.91k|        let next = pc.pointee.pointee
  859|  3.91k|        pc.pointee = pc.pointee.advanced(by: 1)
  860|  3.91k|        return next
  861|  3.91k|    }
wasmkit_execute_i64Ne:
  863|  3.43k|    mutating func execute_i64Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  864|  3.43k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  865|  3.43k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ne(sp.pointee[i64: immediate.rhs])
  866|  3.43k|        let next = pc.pointee.pointee
  867|  3.43k|        pc.pointee = pc.pointee.advanced(by: 1)
  868|  3.43k|        return next
  869|  3.43k|    }
wasmkit_execute_i32LtS:
  871|  4.37k|    mutating func execute_i32LtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  872|  4.37k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  873|  4.37k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ltS(sp.pointee[i32: immediate.rhs])
  874|  4.37k|        let next = pc.pointee.pointee
  875|  4.37k|        pc.pointee = pc.pointee.advanced(by: 1)
  876|  4.37k|        return next
  877|  4.37k|    }
wasmkit_execute_i64LtS:
  879|  4.76k|    mutating func execute_i64LtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  880|  4.76k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  881|  4.76k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ltS(sp.pointee[i64: immediate.rhs])
  882|  4.76k|        let next = pc.pointee.pointee
  883|  4.76k|        pc.pointee = pc.pointee.advanced(by: 1)
  884|  4.76k|        return next
  885|  4.76k|    }
wasmkit_execute_i32LtU:
  887|  4.00k|    mutating func execute_i32LtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  888|  4.00k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  889|  4.00k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].ltU(sp.pointee[i32: immediate.rhs])
  890|  4.00k|        let next = pc.pointee.pointee
  891|  4.00k|        pc.pointee = pc.pointee.advanced(by: 1)
  892|  4.00k|        return next
  893|  4.00k|    }
wasmkit_execute_i64LtU:
  895|  3.87k|    mutating func execute_i64LtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  896|  3.87k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  897|  3.87k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].ltU(sp.pointee[i64: immediate.rhs])
  898|  3.87k|        let next = pc.pointee.pointee
  899|  3.87k|        pc.pointee = pc.pointee.advanced(by: 1)
  900|  3.87k|        return next
  901|  3.87k|    }
wasmkit_execute_i32GtS:
  903|  5.54k|    mutating func execute_i32GtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  904|  5.54k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  905|  5.54k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].gtS(sp.pointee[i32: immediate.rhs])
  906|  5.54k|        let next = pc.pointee.pointee
  907|  5.54k|        pc.pointee = pc.pointee.advanced(by: 1)
  908|  5.54k|        return next
  909|  5.54k|    }
wasmkit_execute_i64GtS:
  911|  3.69k|    mutating func execute_i64GtS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  912|  3.69k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  913|  3.69k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].gtS(sp.pointee[i64: immediate.rhs])
  914|  3.69k|        let next = pc.pointee.pointee
  915|  3.69k|        pc.pointee = pc.pointee.advanced(by: 1)
  916|  3.69k|        return next
  917|  3.69k|    }
wasmkit_execute_i32GtU:
  919|    851|    mutating func execute_i32GtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  920|    851|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  921|    851|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].gtU(sp.pointee[i32: immediate.rhs])
  922|    851|        let next = pc.pointee.pointee
  923|    851|        pc.pointee = pc.pointee.advanced(by: 1)
  924|    851|        return next
  925|    851|    }
wasmkit_execute_i64GtU:
  927|  3.75k|    mutating func execute_i64GtU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  928|  3.75k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  929|  3.75k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].gtU(sp.pointee[i64: immediate.rhs])
  930|  3.75k|        let next = pc.pointee.pointee
  931|  3.75k|        pc.pointee = pc.pointee.advanced(by: 1)
  932|  3.75k|        return next
  933|  3.75k|    }
wasmkit_execute_i32LeS:
  935|  3.67k|    mutating func execute_i32LeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  936|  3.67k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  937|  3.67k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].leS(sp.pointee[i32: immediate.rhs])
  938|  3.67k|        let next = pc.pointee.pointee
  939|  3.67k|        pc.pointee = pc.pointee.advanced(by: 1)
  940|  3.67k|        return next
  941|  3.67k|    }
wasmkit_execute_i64LeS:
  943|  3.17k|    mutating func execute_i64LeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  944|  3.17k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  945|  3.17k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].leS(sp.pointee[i64: immediate.rhs])
  946|  3.17k|        let next = pc.pointee.pointee
  947|  3.17k|        pc.pointee = pc.pointee.advanced(by: 1)
  948|  3.17k|        return next
  949|  3.17k|    }
wasmkit_execute_i32LeU:
  951|  5.22k|    mutating func execute_i32LeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  952|  5.22k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  953|  5.22k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].leU(sp.pointee[i32: immediate.rhs])
  954|  5.22k|        let next = pc.pointee.pointee
  955|  5.22k|        pc.pointee = pc.pointee.advanced(by: 1)
  956|  5.22k|        return next
  957|  5.22k|    }
wasmkit_execute_i64LeU:
  959|  2.63k|    mutating func execute_i64LeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  960|  2.63k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  961|  2.63k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].leU(sp.pointee[i64: immediate.rhs])
  962|  2.63k|        let next = pc.pointee.pointee
  963|  2.63k|        pc.pointee = pc.pointee.advanced(by: 1)
  964|  2.63k|        return next
  965|  2.63k|    }
wasmkit_execute_i32GeS:
  967|  3.32k|    mutating func execute_i32GeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  968|  3.32k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  969|  3.32k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].geS(sp.pointee[i32: immediate.rhs])
  970|  3.32k|        let next = pc.pointee.pointee
  971|  3.32k|        pc.pointee = pc.pointee.advanced(by: 1)
  972|  3.32k|        return next
  973|  3.32k|    }
wasmkit_execute_i64GeS:
  975|  3.18k|    mutating func execute_i64GeS(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  976|  3.18k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  977|  3.18k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].geS(sp.pointee[i64: immediate.rhs])
  978|  3.18k|        let next = pc.pointee.pointee
  979|  3.18k|        pc.pointee = pc.pointee.advanced(by: 1)
  980|  3.18k|        return next
  981|  3.18k|    }
wasmkit_execute_i32GeU:
  983|  4.09k|    mutating func execute_i32GeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  984|  4.09k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  985|  4.09k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.lhs].geU(sp.pointee[i32: immediate.rhs])
  986|  4.09k|        let next = pc.pointee.pointee
  987|  4.09k|        pc.pointee = pc.pointee.advanced(by: 1)
  988|  4.09k|        return next
  989|  4.09k|    }
wasmkit_execute_i64GeU:
  991|  6.88k|    mutating func execute_i64GeU(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
  992|  6.88k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
  993|  6.88k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.lhs].geU(sp.pointee[i64: immediate.rhs])
  994|  6.88k|        let next = pc.pointee.pointee
  995|  6.88k|        pc.pointee = pc.pointee.advanced(by: 1)
  996|  6.88k|        return next
  997|  6.88k|    }
wasmkit_execute_i32Clz:
  999|  8.68k|    mutating func execute_i32Clz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1000|  8.68k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1001|  8.68k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].clz
 1002|  8.68k|        let next = pc.pointee.pointee
 1003|  8.68k|        pc.pointee = pc.pointee.advanced(by: 1)
 1004|  8.68k|        return next
 1005|  8.68k|    }
wasmkit_execute_i64Clz:
 1007|   234k|    mutating func execute_i64Clz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1008|   234k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1009|   234k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].clz
 1010|   234k|        let next = pc.pointee.pointee
 1011|   234k|        pc.pointee = pc.pointee.advanced(by: 1)
 1012|   234k|        return next
 1013|   234k|    }
wasmkit_execute_i32Ctz:
 1015|  2.73k|    mutating func execute_i32Ctz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1016|  2.73k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1017|  2.73k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].ctz
 1018|  2.73k|        let next = pc.pointee.pointee
 1019|  2.73k|        pc.pointee = pc.pointee.advanced(by: 1)
 1020|  2.73k|        return next
 1021|  2.73k|    }
wasmkit_execute_i64Ctz:
 1023|  8.12k|    mutating func execute_i64Ctz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1024|  8.12k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1025|  8.12k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].ctz
 1026|  8.12k|        let next = pc.pointee.pointee
 1027|  8.12k|        pc.pointee = pc.pointee.advanced(by: 1)
 1028|  8.12k|        return next
 1029|  8.12k|    }
wasmkit_execute_i32Popcnt:
 1031|  26.3k|    mutating func execute_i32Popcnt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1032|  26.3k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1033|  26.3k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].popcnt
 1034|  26.3k|        let next = pc.pointee.pointee
 1035|  26.3k|        pc.pointee = pc.pointee.advanced(by: 1)
 1036|  26.3k|        return next
 1037|  26.3k|    }
wasmkit_execute_i64Popcnt:
 1039|  70.8k|    mutating func execute_i64Popcnt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1040|  70.8k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1041|  70.8k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].popcnt
 1042|  70.8k|        let next = pc.pointee.pointee
 1043|  70.8k|        pc.pointee = pc.pointee.advanced(by: 1)
 1044|  70.8k|        return next
 1045|  70.8k|    }
wasmkit_execute_i32Eqz:
 1047|  10.2k|    mutating func execute_i32Eqz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1048|  10.2k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1049|  10.2k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].eqz
 1050|  10.2k|        let next = pc.pointee.pointee
 1051|  10.2k|        pc.pointee = pc.pointee.advanced(by: 1)
 1052|  10.2k|        return next
 1053|  10.2k|    }
wasmkit_execute_i64Eqz:
 1055|  3.14k|    mutating func execute_i64Eqz(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1056|  3.14k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1057|  3.14k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.input].eqz
 1058|  3.14k|        let next = pc.pointee.pointee
 1059|  3.14k|        pc.pointee = pc.pointee.advanced(by: 1)
 1060|  3.14k|        return next
 1061|  3.14k|    }
wasmkit_execute_i32WrapI64:
 1063|  29.2k|    mutating func execute_i32WrapI64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1064|  29.2k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1065|  29.2k|        sp.pointee[i32: immediate.result] = sp.pointee[i64: immediate.input].wrap
 1066|  29.2k|        let next = pc.pointee.pointee
 1067|  29.2k|        pc.pointee = pc.pointee.advanced(by: 1)
 1068|  29.2k|        return next
 1069|  29.2k|    }
wasmkit_execute_i64ExtendI32S:
 1071|  4.10k|    mutating func execute_i64ExtendI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1072|  4.10k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1073|  4.10k|        sp.pointee[i64: immediate.result] = sp.pointee[i32: immediate.input].extendI32S
 1074|  4.10k|        let next = pc.pointee.pointee
 1075|  4.10k|        pc.pointee = pc.pointee.advanced(by: 1)
 1076|  4.10k|        return next
 1077|  4.10k|    }
wasmkit_execute_i64ExtendI32U:
 1079|  21.7k|    mutating func execute_i64ExtendI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1080|  21.7k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1081|  21.7k|        sp.pointee[i64: immediate.result] = sp.pointee[i32: immediate.input].extendI32U
 1082|  21.7k|        let next = pc.pointee.pointee
 1083|  21.7k|        pc.pointee = pc.pointee.advanced(by: 1)
 1084|  21.7k|        return next
 1085|  21.7k|    }
wasmkit_execute_i32Extend8S:
 1087|   143k|    mutating func execute_i32Extend8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1088|   143k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1089|   143k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].extend8S
 1090|   143k|        let next = pc.pointee.pointee
 1091|   143k|        pc.pointee = pc.pointee.advanced(by: 1)
 1092|   143k|        return next
 1093|   143k|    }
wasmkit_execute_i64Extend8S:
 1095|  10.2k|    mutating func execute_i64Extend8S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1096|  10.2k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1097|  10.2k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend8S
 1098|  10.2k|        let next = pc.pointee.pointee
 1099|  10.2k|        pc.pointee = pc.pointee.advanced(by: 1)
 1100|  10.2k|        return next
 1101|  10.2k|    }
wasmkit_execute_i32Extend16S:
 1103|  10.0k|    mutating func execute_i32Extend16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1104|  10.0k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1105|  10.0k|        sp.pointee[i32: immediate.result] = sp.pointee[i32: immediate.input].extend16S
 1106|  10.0k|        let next = pc.pointee.pointee
 1107|  10.0k|        pc.pointee = pc.pointee.advanced(by: 1)
 1108|  10.0k|        return next
 1109|  10.0k|    }
wasmkit_execute_i64Extend16S:
 1111|  37.1k|    mutating func execute_i64Extend16S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1112|  37.1k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1113|  37.1k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend16S
 1114|  37.1k|        let next = pc.pointee.pointee
 1115|  37.1k|        pc.pointee = pc.pointee.advanced(by: 1)
 1116|  37.1k|        return next
 1117|  37.1k|    }
wasmkit_execute_i64Extend32S:
 1119|  22.4k|    mutating func execute_i64Extend32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1120|  22.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1121|  22.4k|        sp.pointee[i64: immediate.result] = sp.pointee[i64: immediate.input].extend32S
 1122|  22.4k|        let next = pc.pointee.pointee
 1123|  22.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1124|  22.4k|        return next
 1125|  22.4k|    }
wasmkit_execute_i32TruncF32S:
 1127|  4.45k|    mutating func execute_i32TruncF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1128|  4.45k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1129|  4.45k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncToI32S
 1130|  4.45k|        let next = pc.pointee.pointee
 1131|  4.45k|        pc.pointee = pc.pointee.advanced(by: 1)
 1132|  4.45k|        return next
 1133|  4.45k|    }
wasmkit_execute_i32TruncF32U:
 1135|  4.19k|    mutating func execute_i32TruncF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1136|  4.19k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1137|  4.19k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncToI32U
 1138|  4.19k|        let next = pc.pointee.pointee
 1139|  4.19k|        pc.pointee = pc.pointee.advanced(by: 1)
 1140|  4.19k|        return next
 1141|  4.19k|    }
wasmkit_execute_i32TruncSatF32S:
 1143|  8.86k|    mutating func execute_i32TruncSatF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1144|  8.86k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1145|  8.86k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI32S
 1146|  8.86k|        let next = pc.pointee.pointee
 1147|  8.86k|        pc.pointee = pc.pointee.advanced(by: 1)
 1148|  8.86k|        return next
 1149|  8.86k|    }
wasmkit_execute_i32TruncSatF32U:
 1151|  5.87k|    mutating func execute_i32TruncSatF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1152|  5.87k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1153|  5.87k|        sp.pointee[i32: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI32U
 1154|  5.87k|        let next = pc.pointee.pointee
 1155|  5.87k|        pc.pointee = pc.pointee.advanced(by: 1)
 1156|  5.87k|        return next
 1157|  5.87k|    }
wasmkit_execute_i32TruncF64S:
 1159|  10.4k|    mutating func execute_i32TruncF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1160|  10.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1161|  10.4k|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncToI32S
 1162|  10.4k|        let next = pc.pointee.pointee
 1163|  10.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1164|  10.4k|        return next
 1165|  10.4k|    }
wasmkit_execute_i32TruncF64U:
 1167|   262k|    mutating func execute_i32TruncF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1168|   262k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1169|   262k|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncToI32U
 1170|   262k|        let next = pc.pointee.pointee
 1171|   262k|        pc.pointee = pc.pointee.advanced(by: 1)
 1172|   262k|        return next
 1173|   262k|    }
wasmkit_execute_i32TruncSatF64S:
 1175|      1|    mutating func execute_i32TruncSatF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1176|      1|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1177|      1|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI32S
 1178|      1|        let next = pc.pointee.pointee
 1179|      1|        pc.pointee = pc.pointee.advanced(by: 1)
 1180|      1|        return next
 1181|      1|    }
wasmkit_execute_i32TruncSatF64U:
 1183|    587|    mutating func execute_i32TruncSatF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1184|    587|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1185|    587|        sp.pointee[i32: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI32U
 1186|    587|        let next = pc.pointee.pointee
 1187|    587|        pc.pointee = pc.pointee.advanced(by: 1)
 1188|    587|        return next
 1189|    587|    }
wasmkit_execute_i64TruncF32S:
 1191|  2.88k|    mutating func execute_i64TruncF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1192|  2.88k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1193|  2.88k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncToI64S
 1194|  2.88k|        let next = pc.pointee.pointee
 1195|  2.88k|        pc.pointee = pc.pointee.advanced(by: 1)
 1196|  2.88k|        return next
 1197|  2.88k|    }
wasmkit_execute_i64TruncF32U:
 1199|  19.4k|    mutating func execute_i64TruncF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1200|  19.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1201|  19.4k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncToI64U
 1202|  19.4k|        let next = pc.pointee.pointee
 1203|  19.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1204|  19.4k|        return next
 1205|  19.4k|    }
wasmkit_execute_i64TruncSatF32S:
 1207|  5.17k|    mutating func execute_i64TruncSatF32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1208|  5.17k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1209|  5.17k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI64S
 1210|  5.17k|        let next = pc.pointee.pointee
 1211|  5.17k|        pc.pointee = pc.pointee.advanced(by: 1)
 1212|  5.17k|        return next
 1213|  5.17k|    }
wasmkit_execute_i64TruncSatF32U:
 1215|  3.59k|    mutating func execute_i64TruncSatF32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1216|  3.59k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1217|  3.59k|        sp.pointee[i64: immediate.result] = try sp.pointee[f32: immediate.input].truncSatToI64U
 1218|  3.59k|        let next = pc.pointee.pointee
 1219|  3.59k|        pc.pointee = pc.pointee.advanced(by: 1)
 1220|  3.59k|        return next
 1221|  3.59k|    }
wasmkit_execute_i64TruncF64S:
 1223|  3.68k|    mutating func execute_i64TruncF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1224|  3.68k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1225|  3.68k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncToI64S
 1226|  3.68k|        let next = pc.pointee.pointee
 1227|  3.68k|        pc.pointee = pc.pointee.advanced(by: 1)
 1228|  3.68k|        return next
 1229|  3.68k|    }
wasmkit_execute_i64TruncF64U:
 1231|  3.36k|    mutating func execute_i64TruncF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1232|  3.36k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1233|  3.36k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncToI64U
 1234|  3.36k|        let next = pc.pointee.pointee
 1235|  3.36k|        pc.pointee = pc.pointee.advanced(by: 1)
 1236|  3.36k|        return next
 1237|  3.36k|    }
wasmkit_execute_i64TruncSatF64S:
 1239|   285k|    mutating func execute_i64TruncSatF64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1240|   285k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1241|   285k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI64S
 1242|   285k|        let next = pc.pointee.pointee
 1243|   285k|        pc.pointee = pc.pointee.advanced(by: 1)
 1244|   285k|        return next
 1245|   285k|    }
wasmkit_execute_i64TruncSatF64U:
 1247|  20.6k|    mutating func execute_i64TruncSatF64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws -> CodeSlot {
 1248|  20.6k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1249|  20.6k|        sp.pointee[i64: immediate.result] = try sp.pointee[f64: immediate.input].truncSatToI64U
 1250|  20.6k|        let next = pc.pointee.pointee
 1251|  20.6k|        pc.pointee = pc.pointee.advanced(by: 1)
 1252|  20.6k|        return next
 1253|  20.6k|    }
wasmkit_execute_f32ConvertI32S:
 1255|  8.47k|    mutating func execute_f32ConvertI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1256|  8.47k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1257|  8.47k|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].convertToF32S
 1258|  8.47k|        let next = pc.pointee.pointee
 1259|  8.47k|        pc.pointee = pc.pointee.advanced(by: 1)
 1260|  8.47k|        return next
 1261|  8.47k|    }
wasmkit_execute_f32ConvertI32U:
 1263|  14.7k|    mutating func execute_f32ConvertI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1264|  14.7k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1265|  14.7k|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].convertToF32U
 1266|  14.7k|        let next = pc.pointee.pointee
 1267|  14.7k|        pc.pointee = pc.pointee.advanced(by: 1)
 1268|  14.7k|        return next
 1269|  14.7k|    }
wasmkit_execute_f32ConvertI64S:
 1271|   103k|    mutating func execute_f32ConvertI64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1272|   103k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1273|   103k|        sp.pointee[f32: immediate.result] = sp.pointee[i64: immediate.input].convertToF32S
 1274|   103k|        let next = pc.pointee.pointee
 1275|   103k|        pc.pointee = pc.pointee.advanced(by: 1)
 1276|   103k|        return next
 1277|   103k|    }
wasmkit_execute_f32ConvertI64U:
 1279|  23.3k|    mutating func execute_f32ConvertI64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1280|  23.3k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1281|  23.3k|        sp.pointee[f32: immediate.result] = sp.pointee[i64: immediate.input].convertToF32U
 1282|  23.3k|        let next = pc.pointee.pointee
 1283|  23.3k|        pc.pointee = pc.pointee.advanced(by: 1)
 1284|  23.3k|        return next
 1285|  23.3k|    }
wasmkit_execute_f64ConvertI32S:
 1287|  4.43k|    mutating func execute_f64ConvertI32S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1288|  4.43k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1289|  4.43k|        sp.pointee[f64: immediate.result] = sp.pointee[i32: immediate.input].convertToF64S
 1290|  4.43k|        let next = pc.pointee.pointee
 1291|  4.43k|        pc.pointee = pc.pointee.advanced(by: 1)
 1292|  4.43k|        return next
 1293|  4.43k|    }
wasmkit_execute_f64ConvertI32U:
 1295|  17.8k|    mutating func execute_f64ConvertI32U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1296|  17.8k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1297|  17.8k|        sp.pointee[f64: immediate.result] = sp.pointee[i32: immediate.input].convertToF64U
 1298|  17.8k|        let next = pc.pointee.pointee
 1299|  17.8k|        pc.pointee = pc.pointee.advanced(by: 1)
 1300|  17.8k|        return next
 1301|  17.8k|    }
wasmkit_execute_f64ConvertI64S:
 1303|  7.75k|    mutating func execute_f64ConvertI64S(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1304|  7.75k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1305|  7.75k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].convertToF64S
 1306|  7.75k|        let next = pc.pointee.pointee
 1307|  7.75k|        pc.pointee = pc.pointee.advanced(by: 1)
 1308|  7.75k|        return next
 1309|  7.75k|    }
wasmkit_execute_f64ConvertI64U:
 1311|  13.4k|    mutating func execute_f64ConvertI64U(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1312|  13.4k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1313|  13.4k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].convertToF64U
 1314|  13.4k|        let next = pc.pointee.pointee
 1315|  13.4k|        pc.pointee = pc.pointee.advanced(by: 1)
 1316|  13.4k|        return next
 1317|  13.4k|    }
wasmkit_execute_f32ReinterpretI32:
 1319|  66.3k|    mutating func execute_f32ReinterpretI32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1320|  66.3k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1321|  66.3k|        sp.pointee[f32: immediate.result] = sp.pointee[i32: immediate.input].reinterpretToF32
 1322|  66.3k|        let next = pc.pointee.pointee
 1323|  66.3k|        pc.pointee = pc.pointee.advanced(by: 1)
 1324|  66.3k|        return next
 1325|  66.3k|    }
wasmkit_execute_f64ReinterpretI64:
 1327|   276k|    mutating func execute_f64ReinterpretI64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1328|   276k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1329|   276k|        sp.pointee[f64: immediate.result] = sp.pointee[i64: immediate.input].reinterpretToF64
 1330|   276k|        let next = pc.pointee.pointee
 1331|   276k|        pc.pointee = pc.pointee.advanced(by: 1)
 1332|   276k|        return next
 1333|   276k|    }
wasmkit_execute_i32ReinterpretF32:
 1335|  3.05k|    mutating func execute_i32ReinterpretF32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1336|  3.05k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1337|  3.05k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.input].reinterpretToI32
 1338|  3.05k|        let next = pc.pointee.pointee
 1339|  3.05k|        pc.pointee = pc.pointee.advanced(by: 1)
 1340|  3.05k|        return next
 1341|  3.05k|    }
wasmkit_execute_i64ReinterpretF64:
 1343|  1.09k|    mutating func execute_i64ReinterpretF64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1344|  1.09k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1345|  1.09k|        sp.pointee[i64: immediate.result] = sp.pointee[f64: immediate.input].reinterpretToI64
 1346|  1.09k|        let next = pc.pointee.pointee
 1347|  1.09k|        pc.pointee = pc.pointee.advanced(by: 1)
 1348|  1.09k|        return next
 1349|  1.09k|    }
wasmkit_execute_f32Add:
 1351|  3.16k|    mutating func execute_f32Add(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1352|  3.16k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1353|  3.16k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].add(sp.pointee[f32: immediate.rhs])
 1354|  3.16k|        let next = pc.pointee.pointee
 1355|  3.16k|        pc.pointee = pc.pointee.advanced(by: 1)
 1356|  3.16k|        return next
 1357|  3.16k|    }
wasmkit_execute_f32Sub:
 1367|  5.19k|    mutating func execute_f32Sub(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1368|  5.19k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1369|  5.19k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].sub(sp.pointee[f32: immediate.rhs])
 1370|  5.19k|        let next = pc.pointee.pointee
 1371|  5.19k|        pc.pointee = pc.pointee.advanced(by: 1)
 1372|  5.19k|        return next
 1373|  5.19k|    }
wasmkit_execute_f32Mul:
 1383|  3.91k|    mutating func execute_f32Mul(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1384|  3.91k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1385|  3.91k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].mul(sp.pointee[f32: immediate.rhs])
 1386|  3.91k|        let next = pc.pointee.pointee
 1387|  3.91k|        pc.pointee = pc.pointee.advanced(by: 1)
 1388|  3.91k|        return next
 1389|  3.91k|    }
wasmkit_execute_f32Div:
 1399|  4.71k|    mutating func execute_f32Div(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1400|  4.71k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1401|  4.71k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].div(sp.pointee[f32: immediate.rhs])
 1402|  4.71k|        let next = pc.pointee.pointee
 1403|  4.71k|        pc.pointee = pc.pointee.advanced(by: 1)
 1404|  4.71k|        return next
 1405|  4.71k|    }
wasmkit_execute_f32Min:
 1415|  4.93k|    mutating func execute_f32Min(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1416|  4.93k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1417|  4.93k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].min(sp.pointee[f32: immediate.rhs])
 1418|  4.93k|        let next = pc.pointee.pointee
 1419|  4.93k|        pc.pointee = pc.pointee.advanced(by: 1)
 1420|  4.93k|        return next
 1421|  4.93k|    }
wasmkit_execute_f32Max:
 1431|  7.08k|    mutating func execute_f32Max(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1432|  7.08k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1433|  7.08k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.lhs].max(sp.pointee[f32: immediate.rhs])
 1434|  7.08k|        let next = pc.pointee.pointee
 1435|  7.08k|        pc.pointee = pc.pointee.advanced(by: 1)
 1436|  7.08k|        return next
 1437|  7.08k|    }
wasmkit_execute_f32Eq:
 1463|  4.69k|    mutating func execute_f32Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1464|  4.69k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1465|  4.69k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].eq(sp.pointee[f32: immediate.rhs])
 1466|  4.69k|        let next = pc.pointee.pointee
 1467|  4.69k|        pc.pointee = pc.pointee.advanced(by: 1)
 1468|  4.69k|        return next
 1469|  4.69k|    }
wasmkit_execute_f64Eq:
 1471|  2.15k|    mutating func execute_f64Eq(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1472|  2.15k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1473|  2.15k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].eq(sp.pointee[f64: immediate.rhs])
 1474|  2.15k|        let next = pc.pointee.pointee
 1475|  2.15k|        pc.pointee = pc.pointee.advanced(by: 1)
 1476|  2.15k|        return next
 1477|  2.15k|    }
wasmkit_execute_f32Ne:
 1479|  4.43k|    mutating func execute_f32Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1480|  4.43k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1481|  4.43k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].ne(sp.pointee[f32: immediate.rhs])
 1482|  4.43k|        let next = pc.pointee.pointee
 1483|  4.43k|        pc.pointee = pc.pointee.advanced(by: 1)
 1484|  4.43k|        return next
 1485|  4.43k|    }
wasmkit_execute_f64Ne:
 1487|    785|    mutating func execute_f64Ne(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1488|    785|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1489|    785|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].ne(sp.pointee[f64: immediate.rhs])
 1490|    785|        let next = pc.pointee.pointee
 1491|    785|        pc.pointee = pc.pointee.advanced(by: 1)
 1492|    785|        return next
 1493|    785|    }
wasmkit_execute_f32Lt:
 1495|  3.59k|    mutating func execute_f32Lt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1496|  3.59k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1497|  3.59k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].lt(sp.pointee[f32: immediate.rhs])
 1498|  3.59k|        let next = pc.pointee.pointee
 1499|  3.59k|        pc.pointee = pc.pointee.advanced(by: 1)
 1500|  3.59k|        return next
 1501|  3.59k|    }
wasmkit_execute_f64Lt:
 1503|    422|    mutating func execute_f64Lt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1504|    422|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1505|    422|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].lt(sp.pointee[f64: immediate.rhs])
 1506|    422|        let next = pc.pointee.pointee
 1507|    422|        pc.pointee = pc.pointee.advanced(by: 1)
 1508|    422|        return next
 1509|    422|    }
wasmkit_execute_f32Gt:
 1511|  6.98k|    mutating func execute_f32Gt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1512|  6.98k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1513|  6.98k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].gt(sp.pointee[f32: immediate.rhs])
 1514|  6.98k|        let next = pc.pointee.pointee
 1515|  6.98k|        pc.pointee = pc.pointee.advanced(by: 1)
 1516|  6.98k|        return next
 1517|  6.98k|    }
wasmkit_execute_f64Gt:
 1519|  1.60k|    mutating func execute_f64Gt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1520|  1.60k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1521|  1.60k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].gt(sp.pointee[f64: immediate.rhs])
 1522|  1.60k|        let next = pc.pointee.pointee
 1523|  1.60k|        pc.pointee = pc.pointee.advanced(by: 1)
 1524|  1.60k|        return next
 1525|  1.60k|    }
wasmkit_execute_f32Le:
 1527|  5.49k|    mutating func execute_f32Le(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1528|  5.49k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1529|  5.49k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].le(sp.pointee[f32: immediate.rhs])
 1530|  5.49k|        let next = pc.pointee.pointee
 1531|  5.49k|        pc.pointee = pc.pointee.advanced(by: 1)
 1532|  5.49k|        return next
 1533|  5.49k|    }
wasmkit_execute_f64Le:
 1535|  2.81k|    mutating func execute_f64Le(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1536|  2.81k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1537|  2.81k|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].le(sp.pointee[f64: immediate.rhs])
 1538|  2.81k|        let next = pc.pointee.pointee
 1539|  2.81k|        pc.pointee = pc.pointee.advanced(by: 1)
 1540|  2.81k|        return next
 1541|  2.81k|    }
wasmkit_execute_f32Ge:
 1543|  3.89k|    mutating func execute_f32Ge(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1544|  3.89k|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1545|  3.89k|        sp.pointee[i32: immediate.result] = sp.pointee[f32: immediate.lhs].ge(sp.pointee[f32: immediate.rhs])
 1546|  3.89k|        let next = pc.pointee.pointee
 1547|  3.89k|        pc.pointee = pc.pointee.advanced(by: 1)
 1548|  3.89k|        return next
 1549|  3.89k|    }
wasmkit_execute_f64Ge:
 1551|    361|    mutating func execute_f64Ge(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1552|    361|        let immediate = Instruction.BinaryOperand.load(from: &pc.pointee)
 1553|    361|        sp.pointee[i32: immediate.result] = sp.pointee[f64: immediate.lhs].ge(sp.pointee[f64: immediate.rhs])
 1554|    361|        let next = pc.pointee.pointee
 1555|    361|        pc.pointee = pc.pointee.advanced(by: 1)
 1556|    361|        return next
 1557|    361|    }
wasmkit_execute_f32Abs:
 1559|  2.38k|    mutating func execute_f32Abs(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1560|  2.38k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1561|  2.38k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].abs
 1562|  2.38k|        let next = pc.pointee.pointee
 1563|  2.38k|        pc.pointee = pc.pointee.advanced(by: 1)
 1564|  2.38k|        return next
 1565|  2.38k|    }
wasmkit_execute_f64Abs:
 1567|  4.25k|    mutating func execute_f64Abs(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1568|  4.25k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1569|  4.25k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].abs
 1570|  4.25k|        let next = pc.pointee.pointee
 1571|  4.25k|        pc.pointee = pc.pointee.advanced(by: 1)
 1572|  4.25k|        return next
 1573|  4.25k|    }
wasmkit_execute_f32Neg:
 1575|  3.20k|    mutating func execute_f32Neg(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1576|  3.20k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1577|  3.20k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].neg
 1578|  3.20k|        let next = pc.pointee.pointee
 1579|  3.20k|        pc.pointee = pc.pointee.advanced(by: 1)
 1580|  3.20k|        return next
 1581|  3.20k|    }
wasmkit_execute_f64Neg:
 1583|  8.03k|    mutating func execute_f64Neg(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1584|  8.03k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1585|  8.03k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].neg
 1586|  8.03k|        let next = pc.pointee.pointee
 1587|  8.03k|        pc.pointee = pc.pointee.advanced(by: 1)
 1588|  8.03k|        return next
 1589|  8.03k|    }
wasmkit_execute_f32Ceil:
 1591|  2.63k|    mutating func execute_f32Ceil(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1592|  2.63k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1593|  2.63k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].ceil
 1594|  2.63k|        let next = pc.pointee.pointee
 1595|  2.63k|        pc.pointee = pc.pointee.advanced(by: 1)
 1596|  2.63k|        return next
 1597|  2.63k|    }
wasmkit_execute_f64Ceil:
 1599|  20.0k|    mutating func execute_f64Ceil(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1600|  20.0k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1601|  20.0k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].ceil
 1602|  20.0k|        let next = pc.pointee.pointee
 1603|  20.0k|        pc.pointee = pc.pointee.advanced(by: 1)
 1604|  20.0k|        return next
 1605|  20.0k|    }
wasmkit_execute_f32Floor:
 1607|  3.08k|    mutating func execute_f32Floor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1608|  3.08k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1609|  3.08k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].floor
 1610|  3.08k|        let next = pc.pointee.pointee
 1611|  3.08k|        pc.pointee = pc.pointee.advanced(by: 1)
 1612|  3.08k|        return next
 1613|  3.08k|    }
wasmkit_execute_f64Floor:
 1615|   105k|    mutating func execute_f64Floor(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1616|   105k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1617|   105k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].floor
 1618|   105k|        let next = pc.pointee.pointee
 1619|   105k|        pc.pointee = pc.pointee.advanced(by: 1)
 1620|   105k|        return next
 1621|   105k|    }
wasmkit_execute_f32Trunc:
 1623|  14.6k|    mutating func execute_f32Trunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1624|  14.6k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1625|  14.6k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].trunc
 1626|  14.6k|        let next = pc.pointee.pointee
 1627|  14.6k|        pc.pointee = pc.pointee.advanced(by: 1)
 1628|  14.6k|        return next
 1629|  14.6k|    }
wasmkit_execute_f64Trunc:
 1631|   129k|    mutating func execute_f64Trunc(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1632|   129k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1633|   129k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].trunc
 1634|   129k|        let next = pc.pointee.pointee
 1635|   129k|        pc.pointee = pc.pointee.advanced(by: 1)
 1636|   129k|        return next
 1637|   129k|    }
wasmkit_execute_f32Nearest:
 1639|  3.69k|    mutating func execute_f32Nearest(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1640|  3.69k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1641|  3.69k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].nearest
 1642|  3.69k|        let next = pc.pointee.pointee
 1643|  3.69k|        pc.pointee = pc.pointee.advanced(by: 1)
 1644|  3.69k|        return next
 1645|  3.69k|    }
wasmkit_execute_f64Nearest:
 1647|  16.9k|    mutating func execute_f64Nearest(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1648|  16.9k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1649|  16.9k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].nearest
 1650|  16.9k|        let next = pc.pointee.pointee
 1651|  16.9k|        pc.pointee = pc.pointee.advanced(by: 1)
 1652|  16.9k|        return next
 1653|  16.9k|    }
wasmkit_execute_f32Sqrt:
 1655|  3.92k|    mutating func execute_f32Sqrt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1656|  3.92k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1657|  3.92k|        sp.pointee[f32: immediate.result] = sp.pointee[f32: immediate.input].sqrt
 1658|  3.92k|        let next = pc.pointee.pointee
 1659|  3.92k|        pc.pointee = pc.pointee.advanced(by: 1)
 1660|  3.92k|        return next
 1661|  3.92k|    }
wasmkit_execute_f64Sqrt:
 1663|  5.42k|    mutating func execute_f64Sqrt(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1664|  5.42k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1665|  5.42k|        sp.pointee[f64: immediate.result] = sp.pointee[f64: immediate.input].sqrt
 1666|  5.42k|        let next = pc.pointee.pointee
 1667|  5.42k|        pc.pointee = pc.pointee.advanced(by: 1)
 1668|  5.42k|        return next
 1669|  5.42k|    }
wasmkit_execute_f64PromoteF32:
 1671|  4.46k|    mutating func execute_f64PromoteF32(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1672|  4.46k|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1673|  4.46k|        sp.pointee[f64: immediate.result] = sp.pointee[f32: immediate.input].promoteF32
 1674|  4.46k|        let next = pc.pointee.pointee
 1675|  4.46k|        pc.pointee = pc.pointee.advanced(by: 1)
 1676|  4.46k|        return next
 1677|  4.46k|    }
wasmkit_execute_f32DemoteF64:
 1679|      1|    mutating func execute_f32DemoteF64(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1680|      1|        let immediate = Instruction.UnaryOperand.load(from: &pc.pointee)
 1681|      1|        sp.pointee[f32: immediate.result] = sp.pointee[f64: immediate.input].demoteF64
 1682|      1|        let next = pc.pointee.pointee
 1683|      1|        pc.pointee = pc.pointee.advanced(by: 1)
 1684|      1|        return next
 1685|      1|    }
wasmkit_execute_select:
 1687|  6.66k|    mutating func execute_select(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1688|  6.66k|        let immediate = Instruction.SelectOperand.load(from: &pc.pointee)
 1689|  6.66k|        self.select(sp: sp.pointee, immediate: immediate)
 1690|  6.66k|        let next = pc.pointee.pointee
 1691|  6.66k|        pc.pointee = pc.pointee.advanced(by: 1)
 1692|  6.66k|        return next
 1693|  6.66k|    }
wasmkit_execute_refNull:
 1695|  3.76k|    mutating func execute_refNull(sp: UnsafeMutablePointer<Sp>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) -> CodeSlot {
 1696|  3.76k|        let immediate = Instruction.RefNullOperand.load(from: &pc.pointee)
 1697|  3.76k|        self.refNull(sp: sp.pointee, immediate: immediate)
 1698|  3.76k|        let next = pc.pointee.pointee
 1699|  3.76k|        pc.pointee = pc.pointee.advanced(by: 1)
 1700|  3.76k|        return next
 1701|  3.76k|    }
$s7WasmKit11InstructionO7handlerSuvg:
 1802|   161k|    var handler: UInt {
 1803|   161k|        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
 1804|   161k|            let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
 1805|   161k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1806|   161k|                $0[Int(self.opcodeID)]
 1807|   161k|            }
 1808|   161k|        }
 1809|   161k|    }
$s7WasmKit11InstructionO7handlerSuvgSuSPySu_S198utGXEfU_:
 1803|   161k|        return withUnsafePointer(to: wasmkit_tc_exec_handlers) {
 1804|   161k|            let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
 1805|   161k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1806|   161k|                $0[Int(self.opcodeID)]
 1807|   161k|            }
 1808|   161k|        }
$s7WasmKit11InstructionO7handlerSuvgSuSPySu_S198utGXEfU_SuSPySuGXEfU_:
 1805|   161k|            return $0.withMemoryRebound(to: UInt.self, capacity: count) {
 1806|   161k|                $0[Int(self.opcodeID)]
 1807|   161k|            }

$s7WasmKit4TrapV_9backtraceAcA0C6ReasonO_AA9BacktraceVSgtcfC:
   36|    568|    init(_ code: TrapReason, backtrace: Backtrace? = nil) {
   37|    568|        self.reason = code
   38|    568|        self.backtrace = backtrace
   39|    568|    }
$s7WasmKit4TrapV_9backtraceAcA0C6ReasonO7MessageV_AA9BacktraceVSgtcfC:
   41|      4|    init(_ message: TrapReason.Message, backtrace: Backtrace? = nil) {
   42|      4|        self.init(.message(message), backtrace: backtrace)
   43|      4|    }
$s7WasmKit4TrapV13withBacktraceyAcA0E0VF:
   54|    563|    func withBacktrace(_ backtrace: Backtrace) -> Trap {
   55|    563|        var trap = self
   56|    563|        trap.backtrace = backtrace
   57|    563|        return trap
   58|    563|    }
$s7WasmKit10TrapReasonO7MessageVyAESScfC:
   66|      4|        init(_ text: String) {
   67|      4|            self.text = text
   68|      4|        }
$s7WasmKit10TrapReasonO7MessageV28initialTableSizeExceedsLimit16numberOfElementsAESi_tFZ:
  121|      3|    static func initialTableSizeExceedsLimit(numberOfElements: Int) -> Self {
  122|      3|        Self("initial table size exceeds the resource limit: \(numberOfElements) elements")
  123|      3|    }
$s7WasmKit10TrapReasonO7MessageV29initialMemorySizeExceedsLimit04byteH0AESi_tFZ:
  124|      1|    static func initialMemorySizeExceedsLimit(byteSize: Int) -> Self {
  125|      1|        Self("initial memory size exceeds the resource limit: \(byteSize) bytes")
  126|      1|    }
$s7WasmKit11ImportErrorV7MessageVyAESScfC:
  148|      8|        init(_ text: String) {
  149|      8|            self.text = text
  150|      8|        }
$s7WasmKit11ImportErrorVyA2C7MessageVcfC:
  155|      8|    init(_ message: Message) {
  156|      8|        self.message = message
  157|      8|    }
$s7WasmKit11ImportErrorV7MessageV16incompatibleType_6entityAE0A6Parser0C0V_AA21InternalExternalValueOtFZ:
  164|      4|    static func incompatibleType(_ importEntry: Import, entity: InternalExternalValue) -> Self {
  165|      4|        let expected: String
  166|      4|        switch importEntry.descriptor {
  167|      4|        case .function:
  168|      0|            expected = "function"
  169|      4|        case .global:
  170|      1|            expected = "global"
  171|      4|        case .memory:
  172|      1|            expected = "memory"
  173|      4|        case .table:
  174|      2|            expected = "table"
  175|      4|        }
  176|      4|        let got: String
  177|      4|        switch entity {
  178|      4|        case .function:
  179|      0|            got = "function"
  180|      4|        case .global:
  181|      1|            got = "global"
  182|      4|        case .memory:
  183|      2|            got = "memory"
  184|      4|        case .table:
  185|      1|            got = "table"
  186|      4|        }
  187|      4|        return Self("incompatible import type for \(importEntry.module).\(importEntry.name), expected \(expected), got \(got)")
  188|      4|    }
$s7WasmKit11ImportErrorV7MessageV21incompatibleTableType_6actual8expectedAE0A6Parser0C0V_AI0gH0VAMtFZ:
  192|      2|    static func incompatibleTableType(_ importEntry: Import, actual: TableType, expected: TableType) -> Self {
  193|      2|        Self("incompatible import type: table type for \(importEntry.module).\(importEntry.name), expected \(expected), got \(actual)")
  194|      2|    }
$s7WasmKit11ImportErrorV7MessageV22incompatibleGlobalType_6actual8expectedAE0A6Parser0C0V_AI0gH0VAMtFZ:
  198|      2|    static func incompatibleGlobalType(_ importEntry: Import, actual: GlobalType, expected: GlobalType) -> Self {
  199|      2|        Self("incompatible import type: global type for \(importEntry.module).\(importEntry.name), expected \(expected), got \(actual)")
  200|      2|    }

$s7WasmKit9ExecutionV4trap33_46BE72AA5BC0E6798196575DFA250830LLSV5error_Spys6UInt64VG2sptSgvpfi:
   15|    614|    private var trap: (error: UnsafeRawPointer, sp: Sp)? = nil
$s7WasmKit9ExecutionV4with5store4bodyxAA8StoreRefV_xACz_Spys6UInt64VGtKXEtKlFZ:
   22|    614|    ) rethrows -> T {
   23|    614|        let limit = store.value.engine.configuration.stackSize / MemoryLayout<StackSlot>.stride
   24|    614|        let valueStack = UnsafeMutablePointer<StackSlot>.allocate(capacity: limit)
   25|    614|        defer {
   26|    614|            valueStack.deallocate()
   27|    614|        }
   28|    614|        var context = Execution(store: store, stackEnd: valueStack.advanced(by: limit))
   29|    614|        return try body(&context, valueStack)
   30|    614|    }
$s7WasmKit9ExecutionV15currentInstance2spAA12EntityHandleVyAA0eG0VGSpys6UInt64VG_tF:
   34|   574k|    func currentInstance(sp: Sp) -> InternalInstance {
   35|   574k|        sp.currentInstance.unsafelyUnwrapped
   36|   574k|    }
$s7WasmKit9ExecutionV13FrameIteratorV2spAESpys6UInt64VG_tcfC:
   48|    563|        init(sp: Sp) {
   49|    563|            self.sp = sp
   50|    563|        }
$s7WasmKit9ExecutionV13FrameIteratorV4nextAE7ElementVSgyF:
   52|   278k|        mutating func next() -> Element? {
   53|   278k|            guard let sp = self.sp, let pc = sp.returnPC else {
   54|    563|                // Reached the root frame, whose stack pointer is nil.
   55|    563|                return nil
   56|   278k|            }
   57|   278k|            self.sp = sp.previousSP
   58|   278k|            return Element(pc: pc, function: sp.currentFunction)
   59|   278k|        }
$s7WasmKit9ExecutionV16captureBacktrace2sp5storeAA0E0VSpys6UInt64VG_AA5StoreCtFZ:
   62|    563|    static func captureBacktrace(sp: Sp, store: Store) -> Backtrace {
   63|    563|        var frames = FrameIterator(sp: sp)
   64|    563|        var symbols: [Backtrace.Symbol?] = []
   65|   278k|        while let frame = frames.next() {
   66|   278k|            guard let function = frame.function else {
   67|    563|                symbols.append(nil)
   68|    563|                continue
   69|   277k|            }
   70|   277k|            let symbolName = store.nameRegistry.symbolicate(.wasm(function))
   71|   277k|            symbols.append(
   72|   277k|                Backtrace.Symbol(
   73|   277k|                    function: Function(handle: .wasm(function), store: store),
   74|   277k|                    name: symbolName
   75|   277k|                )
   76|   277k|            )
   77|   277k|        }
   78|    563|        return Backtrace(symbols: symbols)
   79|    563|    }
$s7WasmKit9ExecutionV20initializeConstSlots33_46BE72AA5BC0E6798196575DFA250830LL2sp4iseq26numberOfNonParameterLocalsySpys6UInt64VG_AA19InstructionSequenceVSitF:
   84|   585k|    ) {
   85|   585k|        // Initialize the locals with zeros (all types of value have the same representation)
   86|   585k|        sp.initialize(repeating: UntypedValue.default.storage, count: numberOfNonParameterLocals)
   87|   585k|        if let constants = iseq.constants.baseAddress {
   88|   585k|            let count = iseq.constants.count
   89|   585k|            sp.advanced(by: numberOfNonParameterLocals).withMemoryRebound(to: UntypedValue.self, capacity: count) {
   90|   585k|                $0.initialize(from: constants, count: count)
   91|   585k|            }
   92|   585k|        }
   93|   585k|    }
$s7WasmKit9ExecutionV20initializeConstSlots33_46BE72AA5BC0E6798196575DFA250830LL2sp4iseq26numberOfNonParameterLocalsySpys6UInt64VG_AA19InstructionSequenceVSitFySpyAA12UntypedValueVGXEfU_:
   89|   585k|            sp.advanced(by: numberOfNonParameterLocals).withMemoryRebound(to: UntypedValue.self, capacity: count) {
   90|   585k|                $0.initialize(from: constants, count: count)
   91|   585k|            }
$s7WasmKit9ExecutionV9pushFrame4iseq8function26numberOfNonParameterLocals2sp8returnPC0M6AddendSpys6UInt64VGAA19InstructionSequenceV_AA12EntityHandleVyAA0a8FunctionT0VGSiA2Ms5Int16VtKF:
  103|   586k|    ) throws -> Sp {
  104|   586k|        let newSp = sp.advanced(by: Int(spAddend))
  105|   586k|        try checkStackBoundary(newSp.advanced(by: iseq.maxStackHeight))
  106|   585k|        initializeConstSlots(sp: newSp, iseq: iseq, numberOfNonParameterLocals: numberOfNonParameterLocals)
  107|   585k|        newSp.previousSP = sp
  108|   585k|        newSp.returnPC = returnPC
  109|   585k|        newSp.currentFunction = function
  110|   585k|        return newSp
  111|   586k|    }
$s7WasmKit9ExecutionV8popFrame2sp2pc2md2msySpys6UInt64VGz_AKzSvSgzSiztF:
  115|   308k|    func popFrame(sp: inout Sp, pc: inout Pc, md: inout Md, ms: inout Ms) {
  116|   308k|        let oldSp = sp
  117|   308k|        sp = oldSp.previousSP.unsafelyUnwrapped
  118|   308k|        pc = oldSp.returnPC.unsafelyUnwrapped
  119|   308k|        let toInstance = oldSp.currentInstance.unsafelyUnwrapped
  120|   308k|        let fromInstance = sp.currentInstance
  121|   308k|        CurrentMemory.mayUpdateCurrentInstance(instance: toInstance, from: fromInstance, md: &md, ms: &ms)
  122|   308k|    }
$s7WasmKit8StoreRefV5valueAA0C0Cvg:
  130|   118k|    var value: Store {
  131|   118k|        _value.takeUnretainedValue()
  132|   118k|    }
$s7WasmKit8StoreRefVyAcA0C0ChcfC:
  134|  1.72k|    init(_ value: __shared Store) {
  135|  1.72k|        self._value = .passUnretained(value)
  136|  1.72k|    }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cs17FixedWidthIntegerRd__luig:
  163|  2.90M|        get {
  164|  2.90M|            return UntypedValue(storage: self[Int(index)])
  165|  2.90M|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cs17FixedWidthIntegerRd__luis:
  166|  1.38M|        nonmutating set {
  167|  1.38M|            self[Int(index)] = newValue.storage
  168|  1.38M|            return
  169|  1.38M|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cAA11ShiftedVRegRd__luig:
  173|   121k|        get {
  174|   121k|            return UntypedValue(storage: read(shifted: index))
  175|   121k|        }
$sSp7WasmKits6UInt64VRszlEyAA12UntypedValueVqd__cAA11ShiftedVRegRd__luis:
  176|   703k|        nonmutating set {
  177|   703k|            write(shifted: index, newValue)
  178|   703k|        }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LL7shiftedqd__qd_0__ts17FixedWidthIntegerRd__AA11ShiftedVRegRd_0_r0_lF:
  181|  2.28M|    private func read<T: FixedWidthInteger, R: ShiftedVReg>(shifted index: R) -> T {
  182|  2.28M|        return UnsafeRawPointer(self).advanced(by: Int(index.value)).withMemoryRebound(to: T.self, capacity: 1) {
  183|  2.28M|            $0.pointee
  184|  2.28M|        }
  185|  2.28M|    }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LL7shiftedqd__qd_0__ts17FixedWidthIntegerRd__AA11ShiftedVRegRd_0_r0_lFqd__SPyqd__GXEfU_:
  182|  2.28M|        return UnsafeRawPointer(self).advanced(by: Int(index.value)).withMemoryRebound(to: T.self, capacity: 1) {
  183|  2.28M|            $0.pointee
  184|  2.28M|        }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LLyqd__qd_0_s17FixedWidthIntegerRd__sAFRd_0_r0_lF:
  186|  1.39M|    private func read<T: FixedWidthInteger, R: FixedWidthInteger>(_ index: R) -> T {
  187|  1.39M|        return self.advanced(by: Int(index)).withMemoryRebound(to: T.self, capacity: 1) {
  188|  1.39M|            $0.pointee
  189|  1.39M|        }
  190|  1.39M|    }
$sSp7WasmKits6UInt64VRszlE4read33_46BE72AA5BC0E6798196575DFA250830LLyqd__qd_0_s17FixedWidthIntegerRd__sAFRd_0_r0_lFqd__Spyqd__GXEfU_:
  187|  1.39M|        return self.advanced(by: Int(index)).withMemoryRebound(to: T.self, capacity: 1) {
  188|  1.39M|            $0.pointee
  189|  1.39M|        }
$sSp7WasmKits6UInt64VRszlE5write33_46BE72AA5BC0E6798196575DFA250830LL7shifted_yqd___AA12UntypedValueVtAA11ShiftedVRegRd__lF:
  191|  3.54M|    private func write<R: ShiftedVReg>(shifted index: R, _ value: UntypedValue) {
  192|  3.54M|        UnsafeMutableRawPointer(self).advanced(by: Int(index.value)).storeBytes(of: value.storage, as: UInt64.self)
  193|  3.54M|    }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcAA11ShiftedVRegRd__luig:
  199|   348k|        get { return read(shifted: index) }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcAA11ShiftedVRegRd__luis:
  200|   720k|        nonmutating set { write(shifted: index, .i32(newValue)) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcAA11ShiftedVRegRd__luig:
  203|   840k|        get { return read(shifted: index) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcAA11ShiftedVRegRd__luis:
  204|  1.22M|        nonmutating set { write(shifted: index, .i64(newValue)) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcAA11ShiftedVRegRd__luig:
  207|  95.6k|        get { return Float32(bitPattern: read(shifted: index)) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcAA11ShiftedVRegRd__luis:
  208|   279k|        nonmutating set { write(shifted: index, .f32(newValue)) }
$sSp7WasmKits6UInt64VRszlE3f64Sdqd___tcAA11ShiftedVRegRd__luig:
  211|   876k|        get { return Float64(bitPattern: read(shifted: index)) }
$sSp7WasmKits6UInt64VRszlE3f64Sdqd___tcAA11ShiftedVRegRd__luis:
  212|   613k|        nonmutating set { write(shifted: index, .f64(newValue)) }
$sSp7WasmKits6UInt64VRszlE3i32s6UInt32Vqd___tcs17FixedWidthIntegerRd__luig:
  216|   238k|        get { return read(index) }
$sSp7WasmKits6UInt64VRszlE3i64ACqd___tcs17FixedWidthIntegerRd__luig:
  220|  1.02M|        get { return read(index) }
$sSp7WasmKits6UInt64VRszlE3f32Sfqd___tcs17FixedWidthIntegerRd__luig:
  224|   116k|        get { return Float32(bitPattern: read(index)) }
$sSp7WasmKits6UInt64VRszlE3f64Sdqd___tcs17FixedWidthIntegerRd__luig:
  228|  16.2k|        get { return Float64(bitPattern: read(index)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvg:
  236|  1.46M|        get { return EntityHandle<WasmFunctionEntity>(bitPattern: UInt(self[-3].i64)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvs:
  237|   586k|        nonmutating set { self[-3] = UInt64(UInt(bitPattern: newValue?.bitPattern ?? 0)) }
$sSp7WasmKits6UInt64VRszlE15currentFunction33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0aeK0VGSgvsSiyKXEfu_:
  237|    614|        nonmutating set { self[-3] = UInt64(UInt(bitPattern: newValue?.bitPattern ?? 0)) }
$sSp7WasmKits6UInt64VRszlE8returnPC33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvg:
  242|   586k|        get { return Pc(bitPattern: UInt(self[-2])) }
$sSp7WasmKits6UInt64VRszlE8returnPC33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvs:
  243|   585k|        nonmutating set { self[-2] = UInt64(UInt(bitPattern: newValue)) }
$sSp7WasmKits6UInt64VRszlE10previousSP33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvg:
  248|   586k|        get { return Sp(bitPattern: UInt(self[-1])) }
$sSp7WasmKits6UInt64VRszlE10previousSP33_46BE72AA5BC0E6798196575DFA250830LLSpyACGSgvs:
  249|   586k|        nonmutating set { self[-1] = UInt64(UInt(bitPattern: newValue)) }
$sSp7WasmKits6UInt64VRszlE15currentInstance33_46BE72AA5BC0E6798196575DFA250830LLAA12EntityHandleVyAA0eK0VGSgvg:
  252|  1.19M|    fileprivate var currentInstance: InternalInstance? {
  253|  1.19M|        currentFunction?.instance
  254|  1.19M|    }
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlF:
  259|  7.57M|    mutating func read<T>(_: T.Type = T.self) -> T {
  260|  7.57M|        assert(MemoryLayout<T>.stride == 8)
  261|  7.57M|        let value = self.withMemoryRebound(to: T.self, capacity: 1) { $0.pointee }
  262|  7.57M|        self += 1
  263|  7.57M|        return value
  264|  7.57M|    }
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlFSbyXEfu_:
  260|  7.57M|        assert(MemoryLayout<T>.stride == 8)
$sSp7WasmKits6UInt64VRszlE4readyqd__qd__mlFqd__Spyqd__GXEfU_:
  261|  7.57M|        let value = self.withMemoryRebound(to: T.self, capacity: 1) { $0.pointee }
$sSp7WasmKits6UInt64VRszlE4nextSpyACG_ACtyF:
  266|   915k|    func next() -> (Pc, CodeSlot) {
  267|   915k|        return (self.advanced(by: 1), pointee)
  268|   915k|    }
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKF:
  287|    614|) throws -> [Value] {
  288|    614|    // NOTE: `store` variable must not outlive this function
  289|    614|    let store = StoreRef(store)
  290|    614|    return try Execution.with(store: store) { (stack, sp) in
  291|    614|        // Advance the stack pointer to be able to reference negative indices
  292|    614|        // for saving slots.
  293|    614|        let sp = sp.advanced(by: FrameHeaderLayout.numberOfSavingSlots)
  294|    614|        // Mark root stack pointer and current function as nil.
  295|    614|        sp.previousSP = nil
  296|    614|        sp.currentFunction = nil
  297|    614|        for (index, argument) in arguments.enumerated() {
  298|    614|            sp[VReg(index)] = UntypedValue(argument)
  299|    614|        }
  300|    614|
  301|    614|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  302|    614|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  303|    614|                threadingModel: store.value.engine.configuration.threadingModel
  304|    614|            )
  305|    614|            try stack.execute(
  306|    614|                sp: sp,
  307|    614|                pc: rootISeq.baseAddress!,
  308|    614|                handle: handle,
  309|    614|                type: type
  310|    614|            )
  311|    614|        }
  312|    614|        return type.results.enumerated().map { (i, type) in
  313|    614|            sp[VReg(i)].cast(to: type)
  314|    614|        }
  315|    614|    }
  316|    614|}
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKFAkA9ExecutionVz_Spys6UInt64VGtKXEfU_:
  290|    614|    return try Execution.with(store: store) { (stack, sp) in
  291|    614|        // Advance the stack pointer to be able to reference negative indices
  292|    614|        // for saving slots.
  293|    614|        let sp = sp.advanced(by: FrameHeaderLayout.numberOfSavingSlots)
  294|    614|        // Mark root stack pointer and current function as nil.
  295|    614|        sp.previousSP = nil
  296|    614|        sp.currentFunction = nil
  297|    614|        for (index, argument) in arguments.enumerated() {
  298|      0|            sp[VReg(index)] = UntypedValue(argument)
  299|    614|        }
  300|    614|
  301|    614|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  302|    614|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  303|    614|                threadingModel: store.value.engine.configuration.threadingModel
  304|    614|            )
  305|    614|            try stack.execute(
  306|    614|                sp: sp,
  307|    614|                pc: rootISeq.baseAddress!,
  308|    614|                handle: handle,
  309|    614|                type: type
  310|    614|            )
  311|    614|        }
  312|     12|        return type.results.enumerated().map { (i, type) in
  313|     12|            sp[VReg(i)].cast(to: type)
  314|     12|        }
  315|    614|    }
$s7WasmKit07executeA05store8function4type9arguments14callerInstanceSay0A5Types5ValueOGAA5StoreC_AA16InternalFunctionVAH0N4TypeVAkA12EntityHandleVyAA0iP0VGtKFAkA9ExecutionVz_Spys6UInt64VGtKXEfU_ySryAZGKXEfU_:
  301|    614|        try withUnsafeTemporaryAllocation(of: CodeSlot.self, capacity: 2) { rootISeq in
  302|    614|            rootISeq[0] = Instruction.endOfExecution.headSlot(
  303|    614|                threadingModel: store.value.engine.configuration.threadingModel
  304|    614|            )
  305|    614|            try stack.execute(
  306|    614|                sp: sp,
  307|    614|                pc: rootISeq.baseAddress!,
  308|    614|                handle: handle,
  309|    614|                type: type
  310|    614|            )
  311|     12|        }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign33_46BE72AA5BC0E6798196575DFA250830LL2md2ms6memoryySvSgz_SizAA12EntityHandleVyAA0eO0VGtFZ:
  323|    587|        private static func assign(md: inout Md, ms: inout Ms, memory: InternalMemory) {
  324|    587|            memory.withValue { assign(md: &md, ms: &ms, memory: &$0) }
  325|    587|        }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign33_46BE72AA5BC0E6798196575DFA250830LL2md2ms6memoryySvSgz_SizAA12EntityHandleVyAA0eO0VGtFZyAOzXEfU_:
  324|    587|            memory.withValue { assign(md: &md, ms: &ms, memory: &$0) }
$s7WasmKit9ExecutionV13CurrentMemoryO6assign2md2ms6memoryySvSgz_SizAA0E6EntityVztFZ:
  329|   112k|        static func assign(md: inout Md, ms: inout Ms, memory: inout MemoryEntity) {
  330|   112k|            md = UnsafeMutableRawPointer(memory.data._baseAddressIfContiguous)
  331|   112k|            ms = memory.data.count
  332|   112k|        }
$s7WasmKit9ExecutionV13CurrentMemoryO9assignNil33_46BE72AA5BC0E6798196575DFA250830LL2md2msySvSgz_SiztFZ:
  336|      2|        private static func assignNil(md: inout Md, ms: inout Ms) {
  337|      2|            md = nil
  338|      2|            ms = 0
  339|      2|        }
$s7WasmKit9ExecutionV13CurrentMemoryO09mayUpdateD8Instance8instance4from2md2msyAA12EntityHandleVyAA0hM0VG_AOSgSvSgzSiztFZ:
  347|   308k|        ) {
  348|   308k|            if lastInstance != instance {
  349|    589|                mayUpdateCurrentInstance(instance: instance, md: &md, ms: &ms)
  350|    589|            }
  351|   308k|        }
$s7WasmKit9ExecutionV13CurrentMemoryO09mayUpdateD8Instance8instance2md2msyAA12EntityHandleVyAA0hL0VG_SvSgzSiztFZ:
  355|    589|        static func mayUpdateCurrentInstance(instance: InternalInstance, md: inout Md, ms: inout Ms) {
  356|    589|            guard let memory = instance.memories.first else {
  357|      2|                assignNil(md: &md, ms: &ms)
  358|      2|                return
  359|    587|            }
  360|    587|            CurrentMemory.assign(md: &md, ms: &ms, memory: memory)
  361|    587|        }
$s7WasmKit9ExecutionV7execute2sp2pc6handle4typeySpys6UInt64VG_AkA16InternalFunctionV0A5Types0K4TypeVtKF:
  373|    614|    ) throws {
  374|    614|        var sp: Sp = sp
  375|    614|        var md: Md = nil
  376|    614|        var ms: Ms = 0
  377|    614|        var pc = pc
  378|    614|        (pc, sp) = try invoke(
  379|    614|            function: handle,
  380|    614|            callerInstance: nil,
  381|    614|            spAddend: FrameHeaderLayout.size(of: type),
  382|    614|            sp: sp, pc: pc, md: &md, ms: &ms
  383|    614|        )
  384|    577|        do {
  385|    577|            switch self.store.value.engine.configuration.threadingModel {
  386|    577|            case .direct:
  387|    577|                try runDirectThreaded(sp: sp, pc: pc, md: md, ms: ms)
  388|    577|            case .token:
  389|      0|                try runTokenThreaded(sp: &sp, pc: &pc, md: &md, ms: &ms)
  390|    577|            }
  391|     12|        } catch is EndOfExecution {
  392|     12|            return
  393|     12|        }
  394|      0|    }
$s7WasmKit9ExecutionV17runDirectThreaded2sp2pc2md2msySpys6UInt64VG_AKSvSgSitKF:
  400|    577|    ) throws {
  401|    577|        var pc = pc
  402|    577|        let handler = pc.read(wasmkit_tc_exec.self)
  403|    577|        wasmkit_tc_start(handler, sp, pc, md, ms, &self)
  404|    577|        if let (rawError, trappingSp) = self.trap {
  405|    577|            let error = unsafeBitCast(rawError, to: Error.self)
  406|    577|            // Manually release the error object because the trap is caught in C and
  407|    577|            // held as a raw pointer.
  408|    577|            wasmkit_swift_errorRelease(rawError)
  409|    577|
  410|    577|            guard let trap = error as? Trap else {
  411|     14|                throw error
  412|    563|            }
  413|    563|            // Attach backtrace if the thrown error is a trap
  414|    563|            throw trap.withBacktrace(Self.captureBacktrace(sp: trappingSp, store: store.value))
  415|    577|        }
  416|      0|    }
wasmkit_execution_state_set_error:
  508|    577|    mutating func setError(_ rawError: UnsafeRawPointer, sp: Sp) {
  509|    577|        precondition(self.trap == nil)
  510|    577|        self.trap = (rawError, sp)
  511|    577|    }
$s7WasmKit9ExecutionV8setError_2spySV_Spys6UInt64VGtFSbyXEfu_:
  509|    577|        precondition(self.trap == nil)
$s7WasmKit9ExecutionV18checkStackBoundaryyySpys6UInt64VGKF:
  514|   586k|    func checkStackBoundary(_ sp: Sp) throws {
  515|   586k|        guard sp < stackEnd else { throw Trap(.callStackExhausted) }
  516|   585k|    }
$s7WasmKit9ExecutionV6invoke8function14callerInstance8spAddend0H02pc2md2msSpys6UInt64VG_ANtAA16InternalFunctionV_AA12EntityHandleVyAA0gP0VGSgs5Int16VA2NSvSgzSiztKF:
  525|    614|    ) throws -> (Pc, Sp) {
  526|    614|        if function.isWasm {
  527|    614|            return try invokeWasmFunction(
  528|    614|                function: function.wasm, callerInstance: callerInstance,
  529|    614|                spAddend: spAddend, sp: sp, pc: pc, md: &md, ms: &ms
  530|    614|            )
  531|    614|        } else {
  532|      0|            try invokeHostFunction(function: function.host, sp: sp, spAddend: spAddend)
  533|      0|            return (pc, sp)
  534|      0|        }
  535|    614|    }
$s7WasmKit9ExecutionV10tailInvoke8function14callerInstance2sp2pc2md2msSpys6UInt64VG_AMtAA16InternalFunctionV_AA12EntityHandleVyAA0hP0VGSgA2MSvSgzSiztKF:
  542|     17|    ) throws -> (Pc, Sp) {
  543|     17|        if function.isWasm {
  544|     17|            return try tailInvokeWasmFunction(
  545|     17|                function: function.wasm, callerInstance: callerInstance,
  546|     17|                sp: sp, md: &md, ms: &ms
  547|     17|            )
  548|     17|        } else {
  549|      0|            try invokeHostFunction(function: function.host, sp: sp, spAddend: 0)
  550|      0|            return (pc, sp)
  551|      0|        }
  552|     17|    }
$s7WasmKit9ExecutionV010tailInvokeA8Function33_46BE72AA5BC0E6798196575DFA250830LL8function14callerInstance2sp2md2msSpys6UInt64VG_AMtAA12EntityHandleVyAA0afS0VG_AOyAA0nS0VGSgAMSvSgzSiztKF:
  563|     17|    ) throws -> (Pc, Sp) {
  564|     17|        let iseq = try function.ensureCompiled(store: store)
  565|     16|        try checkStackBoundary(sp.advanced(by: iseq.maxStackHeight))
  566|     16|        sp.currentFunction = function
  567|     16|
  568|     16|        initializeConstSlots(sp: sp, iseq: iseq, numberOfNonParameterLocals: function.numberOfNonParameterLocals)
  569|     16|
  570|     16|        Execution.CurrentMemory.mayUpdateCurrentInstance(
  571|     16|            instance: function.instance,
  572|     16|            from: callerInstance, md: &md, ms: &ms
  573|     16|        )
  574|     16|        return (iseq.baseAddress, sp)
  575|     17|    }
$s7WasmKit9ExecutionV06invokeA8Function33_46BE72AA5BC0E6798196575DFA250830LL8function14callerInstance8spAddend0N02pc2md2msSpys6UInt64VG_AOtAA12EntityHandleVyAA0aeT0VG_AQyAA0mT0VGSgs5Int16VA2OSvSgzSiztKF:
  584|    614|    ) throws -> (Pc, Sp) {
  585|    614|        let iseq = try function.ensureCompiled(store: store)
  586|    577|
  587|    577|        let newSp = try pushFrame(
  588|    577|            iseq: iseq,
  589|    577|            function: function,
  590|    577|            numberOfNonParameterLocals: function.numberOfNonParameterLocals,
  591|    577|            sp: sp,
  592|    577|            returnPC: pc,
  593|    577|            spAddend: spAddend
  594|    577|        )
  595|    577|        Execution.CurrentMemory.mayUpdateCurrentInstance(
  596|    577|            instance: function.instance,
  597|    577|            from: callerInstance, md: &md, ms: &ms
  598|    577|        )
  599|    577|        return (iseq.baseAddress, newSp)
  600|    614|    }

$s7WasmKit8FunctionV6handle5storeAcA08InternalC0V_AA5StoreCtcfC:
   40|   277k|    internal init(handle: InternalFunction, store: Store) {
   41|   277k|        self.handle = handle
   42|   277k|        self.store = store
   43|   277k|    }
$s7WasmKit8FunctionV5store4type4bodyAcA5StoreC_0A5Types0C4TypeVSayAI5ValueOGAA6CallerV_ANtKctcfC:
   70|     35|    ) {
   71|     35|        self.init(handle: store.allocator.allocate(type: type, implementation: body, engine: store.engine), store: store)
   72|     35|    }
$s7WasmKit16InternalFunctionV10bitPatternSivg:
  121|   877k|    var bitPattern: Int { _storage }
$s7WasmKit16InternalFunctionV10bitPatternACSi_tcfC:
  123|  1.73M|    init(bitPattern: Int) {
  124|  1.73M|        _storage = bitPattern
  125|  1.73M|    }
$s7WasmKit16InternalFunctionV02isA0Sbvg:
  127|   287k|    var isWasm: Bool {
  128|   287k|        _storage & 0b1 == 0
  129|   287k|    }
$s7WasmKit16InternalFunctionV4typeAA8InternedVy0A5Types0D4TypeVGvg:
  131|  3.87k|    var type: InternedFuncType {
  132|  3.87k|        if isWasm {
  133|  3.36k|            return wasm.type
  134|  3.36k|        } else {
  135|    513|            return host.type
  136|    513|        }
  137|  3.87k|    }
$s7WasmKit16InternalFunctionV4wasmyAcA12EntityHandleVyAA0adF0VGFZ:
  139|   560k|    static func wasm(_ handle: EntityHandle<WasmFunctionEntity>) -> InternalFunction {
  140|   560k|        assert(MemoryLayout<WasmFunctionEntity>.alignment >= 2)
  141|   560k|        return InternalFunction(bitPattern: handle.bitPattern | 0b0)
  142|   560k|    }
$s7WasmKit16InternalFunctionV4wasmyAcA12EntityHandleVyAA0adF0VGFZSbyXEfu_:
  140|   560k|        assert(MemoryLayout<WasmFunctionEntity>.alignment >= 2)
$s7WasmKit16InternalFunctionV4hostyAcA12EntityHandleVyAA04HostdF0VGFZ:
  144|     35|    static func host(_ handle: EntityHandle<HostFunctionEntity>) -> InternalFunction {
  145|     35|        assert(MemoryLayout<HostFunctionEntity>.alignment >= 2)
  146|     35|        return InternalFunction(bitPattern: handle.bitPattern | 0b1)
  147|     35|    }
$s7WasmKit16InternalFunctionV4hostyAcA12EntityHandleVyAA04HostdF0VGFZSbyXEfu_:
  145|     35|        assert(MemoryLayout<HostFunctionEntity>.alignment >= 2)
$s7WasmKit16InternalFunctionV4wasmAA12EntityHandleVyAA0adF0VGvg:
  149|   873k|    var wasm: EntityHandle<WasmFunctionEntity> {
  150|   873k|        EntityHandle(unsafe: UnsafeMutablePointer(bitPattern: bitPattern & ~0b0)!)
  151|   873k|    }
$s7WasmKit16InternalFunctionV4hostAA12EntityHandleVyAA04HostdF0VGvg:
  152|    513|    var host: EntityHandle<HostFunctionEntity> {
  153|    513|        EntityHandle(unsafe: UnsafeMutablePointer(bitPattern: bitPattern & ~0b1)!)
  154|    513|    }
$s7WasmKit16InternalFunctionV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  158|     14|    static func createOutOfBoundsError(index: Int, count: Int) -> any Error {
  159|     14|        ValidationError(.indexOutOfBounds("function", index, max: count))
  160|     14|    }
$s7WasmKit16InternalFunctionV6invoke_5storeSay0A5Types5ValueOGAI_AA5StoreCtKF:
  164|    614|    func invoke(_ arguments: [Value], store: Store) throws -> [Value] {
  165|    614|        if isWasm {
  166|    614|            let entity = wasm
  167|    614|            let resolvedType = store.engine.resolveType(entity.type)
  168|    614|            try check(functionType: resolvedType, parameters: arguments)
  169|    614|            return try executeWasm(
  170|    614|                store: store,
  171|    614|                function: self,
  172|    614|                type: resolvedType,
  173|    614|                arguments: arguments,
  174|    614|                callerInstance: entity.instance
  175|    614|            )
  176|    614|        } else {
  177|      0|            let entity = host
  178|      0|            let resolvedType = store.engine.resolveType(entity.type)
  179|      0|            try check(functionType: resolvedType, parameters: arguments)
  180|      0|            let caller = Caller(instanceHandle: nil, store: store)
  181|      0|            let results = try entity.implementation(caller, arguments)
  182|      0|            try check(functionType: resolvedType, results: results)
  183|      0|            return results
  184|      0|        }
  185|    614|    }
$s7WasmKit16InternalFunctionV5check33_9089726AEE4A690993C4A5B9E70A219ELL13expectedTypes6valuesSbSay0aN09ValueTypeOG_SayAH0P0OGtF:
  187|    614|    private func check(expectedTypes: [ValueType], values: [Value]) -> Bool {
  188|    614|        guard expectedTypes.count == values.count else { return false }
  189|    614|        for (expected, value) in zip(expectedTypes, values) {
  190|      0|            switch (expected, value) {
  191|      0|            case (.i32, .i32), (.i64, .i64), (.f32, .f32), (.f64, .f64),
  192|      0|                (.ref(.funcRef), .ref(.function)), (.ref(.externRef), .ref(.extern)):
  193|      0|                break
  194|      0|            default: return false
  195|      0|            }
  196|    614|        }
  197|    614|        return true
  198|    614|    }
$s7WasmKit16InternalFunctionV5check33_9089726AEE4A690993C4A5B9E70A219ELL12functionType10parametersy0A5Types0dN0V_SayAH5ValueOGtKF:
  200|    614|    private func check(functionType: FunctionType, parameters: [Value]) throws {
  201|    614|        guard check(expectedTypes: functionType.parameters, values: parameters) else {
  202|      0|            throw Trap(.parameterTypesMismatch(expected: functionType.parameters, got: parameters))
  203|    614|        }
  204|    614|    }
$s7WasmKit16InternalFunctionV14assumeCompiledAA19InstructionSequenceV_Si6localsAA12EntityHandleVyAA0adJ0VG8functiontyF:
  216|   585k|    ) {
  217|   585k|        let entity = self.wasm
  218|   585k|        guard case let .compiled(iseq) = entity.code else {
  219|      0|            preconditionFailure()
  220|   585k|        }
  221|   585k|        return (iseq, entity.numberOfNonParameterLocals, entity)
  222|   585k|    }
$s7WasmKit0A14FunctionEntityV5index4type4code8instanceACs6UInt32V_AA8InternedVy0A5Types0C4TypeVGAA0D6HandleVy0A6Parser4CodeVGAQyAA08InstanceD0VGtcfC:
  232|  5.10k|    init(index: FunctionIndex, type: InternedFuncType, code: InternalUncompiledCode, instance: InternalInstance) {
  233|  5.10k|        self.type = type
  234|  5.10k|        self.instance = instance
  235|  5.10k|        self.code = .uncompiled(code)
  236|  5.10k|        self.numberOfNonParameterLocals = code.locals.count
  237|  5.10k|        self.index = index
  238|  5.10k|    }
$s7WasmKit0A14FunctionEntityV7compile5store4codeAA19InstructionSequenceVAA8StoreRefV_AA0D6HandleVy0A6Parser4CodeVGtKF:
  250|  2.41k|    mutating func compile(store: StoreRef, code: InternalUncompiledCode) throws -> InstructionSequence {
  251|  2.41k|        let store = store.value
  252|  2.41k|        let engine = store.engine
  253|  2.41k|        let type = self.type
  254|  2.41k|        var translator = try InstructionTranslator(
  255|  2.41k|            allocator: store.allocator.iseqAllocator,
  256|  2.41k|            engineConfiguration: engine.configuration,
  257|  2.41k|            funcTypeInterner: engine.funcTypeInterner,
  258|  2.41k|            module: instance,
  259|  2.41k|            type: engine.resolveType(type),
  260|  2.41k|            locals: code.locals,
  261|  2.41k|            functionIndex: index,
  262|  2.41k|            codeSize: code.expression.count,
  263|  2.41k|            intercepting: engine.interceptor != nil
  264|  2.41k|        )
  265|  2.41k|        let iseq = try code.withValue { code in
  266|  2.41k|            try translator.translate(code: code, instance: instance)
  267|  2.41k|        }
  268|  1.32k|        self.code = .compiled(iseq)
  269|  1.32k|        return iseq
  270|  2.41k|    }
$s7WasmKit0A14FunctionEntityV7compile5store4codeAA19InstructionSequenceVAA8StoreRefV_AA0D6HandleVy0A6Parser4CodeVGtKFAhOzKXEfU_:
  265|  2.41k|        let iseq = try code.withValue { code in
  266|  2.41k|            try translator.translate(code: code, instance: instance)
  267|  1.32k|        }
$s7WasmKit12EntityHandleVA2A0a8FunctionC0VRszlE14ensureCompiled5storeAA19InstructionSequenceVAA8StoreRefV_tKF:
  276|  3.07k|    func ensureCompiled(store: StoreRef) throws -> InstructionSequence {
  277|  3.07k|        switch self.code {
  278|  3.07k|        case .uncompiled(let code):
  279|  2.41k|            return try self.withValue {
  280|  2.41k|                let iseq = try $0.compile(store: store, code: code)
  281|  2.41k|                $0.code = .compiled(iseq)
  282|  2.41k|                return iseq
  283|  2.41k|            }
  284|  3.07k|        case .compiled(let iseq): return iseq
  285|  3.07k|        }
  286|  3.07k|    }
$s7WasmKit12EntityHandleVA2A0a8FunctionC0VRszlE14ensureCompiled5storeAA19InstructionSequenceVAA8StoreRefV_tKFAiEzKXEfU_:
  279|  2.41k|            return try self.withValue {
  280|  2.41k|                let iseq = try $0.compile(store: store, code: code)
  281|  1.32k|                $0.code = .compiled(iseq)
  282|  1.32k|                return iseq
  283|  2.41k|            }
$s7WasmKit19InstructionSequenceV12instructions14maxStackHeight9constantsACSrys6UInt64VG_SiSRyAA12UntypedValueVGtcfC:
  302|  1.32k|    init(instructions: UnsafeMutableBufferPointer<CodeSlot>, maxStackHeight: Int, constants: UnsafeBufferPointer<UntypedValue>) {
  303|  1.32k|        self.instructions = instructions
  304|  1.32k|        self.maxStackHeight = maxStackHeight
  305|  1.32k|        self.constants = constants
  306|  1.32k|    }
$s7WasmKit19InstructionSequenceV11baseAddressSpys6UInt64VGvg:
  308|   585k|    var baseAddress: UnsafeMutablePointer<CodeSlot> {
  309|   585k|        self.instructions.baseAddress!
  310|   585k|    }
$s9WasmTypes9ReferenceO0A3KitE8function4fromAcD16InternalFunctionV_tFZ:
  319|     13|    static func function(from value: InternalFunction) -> Reference {
  320|     13|        // TODO: Consider having internal reference representation instead
  321|     13|        //       of public one in WasmTypes
  322|     13|        return .function(value.bitPattern)
  323|     13|    }

$s7WasmKit12EntityHandleV6unsafeACyxGSpyxG_tcfC:
   45|   895k|    init(unsafe pointer: UnsafeMutablePointer<T>) {
   46|   895k|        self.pointer = pointer
   47|   895k|    }
$s7WasmKit12EntityHandleV10bitPatternACyxGSgSu_tcfC:
   49|  1.57M|    init?(bitPattern: UInt) {
   50|  1.57M|        guard let pointer = UnsafeMutablePointer<T>(bitPattern: bitPattern) else { return nil }
   51|  1.57M|        self.pointer = pointer
   52|  1.57M|    }
$s7WasmKit12EntityHandleV13dynamicMemberqd__s7KeyPathCyxqd__G_tcluig:
   54|  4.30M|    subscript<R>(dynamicMember keyPath: KeyPath<T, R>) -> R {
   55|  4.30M|        pointer.pointee[keyPath: keyPath]
   56|  4.30M|    }
$s7WasmKit12EntityHandleV9withValueyqd__qd__xzKXEKlF:
   59|   228k|    func withValue<R>(_ body: (inout T) throws -> R) rethrows -> R {
   60|   228k|        return try body(&pointer.pointee)
   61|   228k|    }
$s7WasmKit12EntityHandleV10bitPatternSivg:
   63|  1.16M|    var bitPattern: Int {
   64|  1.16M|        return Int(bitPattern: pointer)
   65|  1.16M|    }
$s7WasmKit12EntityHandleVA2A011ValidatableC0RzlE22createOutOfBoundsError5index5counts0J0_pSi_SitFZ:
   69|    113|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
   70|    113|        T.createOutOfBoundsError(index: index, count: count)
   71|    113|    }
$s7WasmKit14InstanceEntityV5emptyACvgZ:
   87|     90|    static var empty: InstanceEntity {
   88|     90|        InstanceEntity(
   89|     90|            types: [],
   90|     90|            functions: ImmutableArray(),
   91|     90|            tables: ImmutableArray(),
   92|     90|            memories: ImmutableArray(),
   93|     90|            globals: ImmutableArray(),
   94|     90|            elementSegments: ImmutableArray(),
   95|     90|            dataSegments: ImmutableArray(),
   96|     90|            exports: [:],
   97|     90|            functionRefs: [],
   98|     90|            features: [],
   99|     90|            dataCount: nil
  100|     90|        )
  101|     90|    }
$s7WasmKit14InstanceEntityV19compileAllFunctions5storeyAA5StoreC_tKF:
  103|  1.11k|    internal func compileAllFunctions(store: Store) throws {
  104|  1.11k|        let store = StoreRef(store)
  105|  1.29k|        for function in functions {
  106|  1.29k|            guard function.isWasm else { continue }
  107|  1.26k|            try function.wasm.ensureCompiled(store: store)
  108|    216|        }
  109|     65|    }
$s7WasmKit8InstanceV6handle5storeAcA12EntityHandleVyAA0cF0VG_AA5StoreCtcfC:
  182|     65|    init(handle: InternalInstance, store: Store) {
  183|     65|        self.handle = handle
  184|     65|        self.store = store
  185|     65|    }
$s7WasmKit11TableEntityV6limits0A6Parser6LimitsVvg:
  269|    742|    var limits: Limits { tableType.limits }
$s7WasmKit11TableEntityV7maxSize10isMemory64s6UInt64VSb_tFZ:
  271|    312|    static func maxSize(isMemory64: Bool) -> UInt64 {
  272|    312|        return UInt64(UInt32.max)
  273|    312|    }
$s7WasmKit11TableEntityV_15resourceLimiterAC0A6Parser0C4TypeV_AA08ResourceF0_ptKcfC:
  275|    318|    init(_ tableType: TableType, resourceLimiter: any ResourceLimiter) throws {
  276|    318|        let emptyElement: Reference
  277|    318|        switch tableType.elementType {
  278|    318|        case .funcRef:
  279|    314|            emptyElement = .function(nil)
  280|    318|        case .externRef:
  281|      4|            emptyElement = .extern(nil)
  282|    318|        }
  283|    318|
  284|    318|        let numberOfElements = Int(tableType.limits.min)
  285|    318|        guard try resourceLimiter.limitTableGrowth(to: numberOfElements) else {
  286|      3|            throw Trap(.initialTableSizeExceedsLimit(numberOfElements: numberOfElements))
  287|    315|        }
  288|    315|        elements = Array(repeating: emptyElement, count: numberOfElements)
  289|    315|        self.tableType = tableType
  290|    315|    }
$s7WasmKit11TableEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  371|     31|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  372|     31|        ValidationError(.indexOutOfBounds("table", index, max: count))
  373|     31|    }
$s7WasmKit5TableV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  409|     34|    init(handle: InternalTable, allocator: StoreAllocator) {
  410|     34|        self.handle = handle
  411|     34|        self.allocator = allocator
  412|     34|    }
$s7WasmKit5TableV5store4typeAcA5StoreC_0A6Parser0C4TypeVtKcfC:
  433|     35|    public init(store: Store, type: TableType) throws {
  434|     35|        self.init(
  435|     35|            handle: try store.allocator.allocate(tableType: type, resourceLimiter: store.resourceLimiter),
  436|     34|            allocator: store.allocator
  437|     34|        )
  438|     34|    }
$s7WasmKit12MemoryEntityV12maxPageCount10isMemory64s6UInt64VSb_tFZ:
  455|  2.10k|    static func maxPageCount(isMemory64: Bool) -> UInt64 {
  456|  2.10k|        isMemory64 ? UInt64.max : UInt64(1 << 32) / UInt64(pageSize)
  457|  2.10k|    }
$s7WasmKit12MemoryEntityV_15resourceLimiterAC0A6Parser6LimitsV_AA08ResourceF0_ptKcfC:
  463|  1.00k|    init(_ memoryType: MemoryType, resourceLimiter: any ResourceLimiter) throws {
  464|  1.00k|        let byteSize = Int(memoryType.min) * Self.pageSize
  465|  1.00k|        guard try resourceLimiter.limitMemoryGrowth(to: byteSize) else {
  466|      1|            throw Trap(.initialMemorySizeExceedsLimit(byteSize: byteSize))
  467|  1.00k|        }
  468|  1.00k|        data = Array(repeating: 0, count: byteSize)
  469|  1.00k|        let defaultMaxPageCount = Self.maxPageCount(isMemory64: memoryType.isMemory64)
  470|  1.00k|        maxPageCount = memoryType.max ?? defaultMaxPageCount
  471|  1.00k|        limit = memoryType
  472|  1.00k|    }
$s7WasmKit12MemoryEntityV_15resourceLimiterAC0A6Parser6LimitsV_AA08ResourceF0_ptKcfcs6UInt64VyKXEfu_:
  470|    661|        maxPageCount = memoryType.max ?? defaultMaxPageCount
$s7WasmKit12MemoryEntityV4grow2by15resourceLimiter0A5Types5ValueOSi_AA08ResourceH0_ptKF:
  476|   112k|    mutating func grow(by pageCount: Int, resourceLimiter: any ResourceLimiter) throws -> Value {
  477|   112k|        let newPageCount = data.count / Self.pageSize + pageCount
  478|   112k|
  479|   112k|        guard newPageCount <= maxPageCount else {
  480|  7.68k|            return limit.isMemory64 ? .i64((-1 as Int64).unsigned) : .i32((-1 as Int32).unsigned)
  481|   104k|        }
  482|   104k|        guard try resourceLimiter.limitMemoryGrowth(to: newPageCount * Self.pageSize) else {
  483|    562|            return limit.isMemory64 ? .i64((-1 as Int64).unsigned) : .i32((-1 as Int32).unsigned)
  484|   104k|        }
  485|   104k|
  486|   104k|        let result = Int32(data.count / MemoryEntity.pageSize).unsigned
  487|   104k|        data.append(contentsOf: Array(repeating: 0, count: Int(pageCount) * MemoryEntity.pageSize))
  488|   104k|
  489|   104k|        return limit.isMemory64 ? .i64(UInt64(result)) : .i32(result)
  490|   112k|    }
$s7WasmKit12MemoryEntityV5write6offset5bytesySi_s10ArraySliceVys5UInt8VGtKF:
  531|      5|    mutating func write(offset: Int, bytes: ArraySlice<UInt8>) throws {
  532|      5|        let endOffset = offset + bytes.count
  533|      5|        guard endOffset <= data.count else {
  534|      1|            throw Trap(.memoryOutOfBounds)
  535|      4|        }
  536|      4|        data[offset..<endOffset] = bytes
  537|      4|    }
$s7WasmKit12MemoryEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  541|     43|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  542|     43|        ValidationError(.indexOutOfBounds("memory", index, max: count))
  543|     43|    }
$s7WasmKit6MemoryV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  555|    101|    init(handle: InternalMemory, allocator: StoreAllocator) {
  556|    101|        self.handle = handle
  557|    101|        self.allocator = allocator
  558|    101|    }
$s7WasmKit6MemoryV5store4typeAcA5StoreC_0A6Parser6LimitsVtKcfC:
  582|    103|    public init(store: Store, type: MemoryType) throws {
  583|    103|        // Validate the memory type because the type is not validated at instantiation time.
  584|    103|        try ModuleValidator.checkMemoryType(type, features: store.engine.configuration.features)
  585|    102|
  586|    102|        self.init(
  587|    102|            handle: try store.allocator.allocate(memoryType: type, resourceLimiter: store.resourceLimiter),
  588|    101|            allocator: store.allocator
  589|    101|        )
  590|    101|    }
$s7WasmKit12GlobalEntityV5value0A5Types5ValueOvg:
  622|     36|        get { rawValue.cast(to: globalType.valueType) }
$s7WasmKit12GlobalEntityV10globalType12initialValueAC0A6Parser0cF0V_0A5Types0H0OtKcfC:
  627|  7.56k|    init(globalType: GlobalType, initialValue: Value) throws {
  628|  7.56k|        try initialValue.checkType(globalType.valueType)
  629|  7.56k|        rawValue = UntypedValue(initialValue)
  630|  7.56k|        self.globalType = globalType
  631|  7.56k|    }
$s7WasmKit12GlobalEntityV22createOutOfBoundsError5index5counts0I0_pSi_SitFZ:
  635|     38|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  636|     38|        ValidationError(.indexOutOfBounds("global", index, max: count))
  637|     38|    }
$s7WasmKit6GlobalV6handle9allocatorAcA12EntityHandleVyAA0cF0VG_AA14StoreAllocatorCtcfC:
  667|     41|    init(handle: InternalGlobal, allocator: StoreAllocator) {
  668|     41|        self.handle = handle
  669|     41|        self.allocator = allocator
  670|     41|    }
$s7WasmKit6GlobalV5store4type5valueAcA5StoreC_0A6Parser0C4TypeV0A5Types5ValueOtKcfC:
  703|     44|    public init(store: Store, type: GlobalType, value: Value) throws {
  704|     44|        let handle = try store.allocator.allocate(globalType: type, initialValue: value)
  705|     41|        self.init(handle: handle, allocator: store.allocator)
  706|     41|    }
$s7WasmKit20ElementSegmentEntityV22createOutOfBoundsError5index5counts0J0_pSi_SitFZ:
  721|      3|    static func createOutOfBoundsError(index: Int, count: Int) -> Error {
  722|      3|        ValidationError(.indexOutOfBounds("element", index, max: count))
  723|      3|    }
$s7WasmKit13ExternalValueO11internalizeAA08InternalcD0O_AA14StoreAllocatorCtyF:
  762|    167|    func internalize() -> (InternalExternalValue, StoreAllocator) {
  763|    167|        switch self {
  764|    167|        case .function(let function):
  765|     34|            return (.function(function.handle), function.store.allocator)
  766|    167|        case .table(let table):
  767|     23|            return (.table(table.handle), table.allocator)
  768|    167|        case .memory(let memory):
  769|     85|            return (.memory(memory.handle), memory.allocator)
  770|    167|        case .global(let global):
  771|     25|            return (.global(global.handle), global.allocator)
  772|    167|        }
  773|    167|    }

$s7WasmKit9ExecutionV11unreachable2sp2pcSpys6UInt64VG_AHtAI_AItKF:
    4|     69|    func unreachable(sp: Sp, pc: Pc) throws -> (Pc, CodeSlot) {
    5|     69|        throw Trap(.unreachable)
    6|     69|    }
$s7WasmKit9ExecutionV3nop2spySpys6UInt64VG_tF:
    7|   101k|    mutating func nop(sp: Sp) {
    8|   101k|    }
$s7WasmKit9ExecutionV2br2sp2pc9immediateSpys6UInt64VG_AItAJ_AJs5Int32VtF:
   10|  4.35k|    mutating func br(sp: Sp, pc: Pc, immediate: Instruction.BrOperand) -> (Pc, CodeSlot) {
   11|  4.35k|        return pc.advanced(by: Int(immediate)).next()
   12|  4.35k|    }
$s7WasmKit9ExecutionV4brIf2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   13|  8.63k|    mutating func brIf(sp: Sp, pc: Pc, immediate: Instruction.BrIfOperand) -> (Pc, CodeSlot) {
   14|  8.63k|        // NOTE: Marked as `_fastPath` to teach the compiler not to use conditional
   15|  8.63k|        // instructions (e.g. csel) to utilize the branch prediction. Typically
   16|  8.63k|        // if-conversion is applied to optimize branches into conditional instructions
   17|  8.63k|        // but it's not always the best choice for performance when the branch is
   18|  8.63k|        // highly predictable:
   19|  8.63k|        //
   20|  8.63k|        // > Use branches when the condition is highly predictable. The cost of
   21|  8.63k|        // > mispredicts will be low, and the code will be executed with optimal
   22|  8.63k|        // > latency.
   23|  8.63k|        // >
   24|  8.63k|        // > Apple Silicon CPU Optimization Guide: 3.0 (Page 105)
   25|  8.63k|        //
   26|  8.63k|        // We prefer branch instructions over conditional instructions to provide
   27|  8.63k|        // the best performance when guest code is highly predictable.
   28|  8.63k|        guard _fastPath(sp[i32: immediate.condition] != 0) else {
   29|  5.97k|            return pc.next()
   30|  5.97k|        }
   31|  2.66k|        return pc.advanced(by: Int(immediate.offset)).next()
   32|  8.63k|    }
$s7WasmKit9ExecutionV7brIfNot2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   33|      2|    mutating func brIfNot(sp: Sp, pc: Pc, immediate: Instruction.BrIfOperand) -> (Pc, CodeSlot) {
   34|      2|        // NOTE: See `brIf` for the rationale.
   35|      2|        guard _fastPath(sp[i32: immediate.condition] == 0) else {
   36|      1|            return pc.next()
   37|      1|        }
   38|      1|        return pc.advanced(by: Int(immediate.offset)).next()
   39|      2|    }
$s7WasmKit9ExecutionV7brTable2sp2pc9immediateSpys6UInt64VG_AItAJ_AjA11InstructionO02BrE7OperandVtF:
   40|  9.59k|    mutating func brTable(sp: Sp, pc: Pc, immediate: Instruction.BrTableOperand) -> (Pc, CodeSlot) {
   41|  9.59k|        let index = sp[i32: immediate.index]
   42|  9.59k|        let normalizedOffset = min(Int(index), Int(immediate.count - 1))
   43|  9.59k|        let entry = immediate.baseAddress[normalizedOffset]
   44|  9.59k|        return pc.advanced(by: Int(entry.offset)).next()
   45|  9.59k|    }
$s7WasmKit9ExecutionV7_return2sp2pc2md2msSpys6UInt64VG_AJtAKz_AKSvSgzSiztF:
   48|   308k|    mutating func _return(sp: inout Sp, pc: Pc, md: inout Md, ms: inout Ms) -> (Pc, CodeSlot) {
   49|   308k|        var pc = pc
   50|   308k|        popFrame(sp: &sp, pc: &pc, md: &md, ms: &ms)
   51|   308k|        return pc.next()
   52|   308k|    }
$s7WasmKit9ExecutionV05endOfC02sp2pcSpys6UInt64VG_AHtAIz_AItKF:
   54|     12|    mutating func endOfExecution(sp: inout Sp, pc: Pc) throws -> (Pc, CodeSlot) {
   55|     12|        throw EndOfExecution()
   56|     12|    }
$s7WasmKit9ExecutionV13_internalCall33_6B1266CB0931A942C36904C610F10643LL2sp2pc6callee0dE7OperandySpys6UInt64VGz_ALzAA16InternalFunctionVAA11InstructionO0eO0VtKF:
   77|   585k|    ) throws {
   78|   585k|        // The callee is known to be a function defined within the same module, so we can
   79|   585k|        // skip updating the current instance.
   80|   585k|        let (iseq, locals, instance) = internalCallOperand.callee.assumeCompiled()
   81|   585k|        sp = try pushFrame(
   82|   585k|            iseq: iseq,
   83|   585k|            function: instance,
   84|   585k|            numberOfNonParameterLocals: locals,
   85|   585k|            sp: sp, returnPC: pc,
   86|   585k|            spAddend: internalCallOperand.spAddend
   87|   585k|        )
   88|   585k|        pc = iseq.baseAddress
   89|   585k|    }
$s7WasmKit9ExecutionV12internalCall2sp2pc9immediateSpys6UInt64VG_AItAJz_AjA11InstructionO0E7OperandVtKF:
   92|   584k|    mutating func internalCall(sp: inout Sp, pc: Pc, immediate: Instruction.CallOperand) throws -> (Pc, CodeSlot) {
   93|   584k|        var pc = pc
   94|   584k|        let callee = immediate.callee
   95|   584k|        try _internalCall(sp: &sp, pc: &pc, callee: callee, internalCallOperand: immediate)
   96|   584k|        return pc.next()
   97|   584k|    }
$s7WasmKit9ExecutionV13compilingCall2sp2pc9immediateSpys6UInt64VG_AItAJz_AjA11InstructionO0E7OperandVtKF:
  100|  1.17k|    mutating func compilingCall(sp: inout Sp, pc: Pc, immediate: Instruction.CallOperand) throws -> (Pc, CodeSlot) {
  101|  1.17k|        var pc = pc
  102|  1.17k|        // NOTE: `CompilingCallOperand` consumes 2 slots, discriminator is at -3
  103|  1.17k|        let headSlotPc = pc.advanced(by: -3)
  104|  1.17k|        let callee = immediate.callee
  105|  1.17k|        try callee.wasm.ensureCompiled(store: store)
  106|  1.17k|        let replaced = Instruction.internalCall(immediate)
  107|  1.17k|        headSlotPc.pointee = replaced.headSlot(threadingModel: store.value.engine.configuration.threadingModel)
  108|  1.17k|        try _internalCall(sp: &sp, pc: &pc, callee: callee, internalCallOperand: immediate)
  109|  1.17k|        return pc.next()
  110|  1.17k|    }
$s7WasmKit9ExecutionV10returnCall2sp2pc2md2ms9immediateSpys6UInt64VG_AKtALz_ALSvSgzSizAA11InstructionO06ReturnE7OperandVtKF:
  155|     17|    mutating func returnCall(sp: inout Sp, pc: Pc, md: inout Md, ms: inout Ms, immediate: Instruction.ReturnCallOperand) throws -> (Pc, CodeSlot) {
  156|     17|        var pc = pc
  157|     17|        (pc, sp) = try tailInvoke(
  158|     17|            function: immediate.callee,
  159|     17|            callerInstance: currentInstance(sp: sp),
  160|     17|            sp: sp, pc: pc, md: &md, ms: &ms
  161|     17|        )
  162|     16|        return pc.next()
  163|     17|    }

$s7WasmKit11InstructionO16CopyStackOperandV4load4fromAESpys6UInt64VGz_tFZ:
  424|   116k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  425|   116k|            let (source, dest) = pc.read((LVReg, LVReg).self)
  426|   116k|            return Self(source: source, dest: dest)
  427|   116k|        }
$s7WasmKit11InstructionO16CopyStackOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  428|  6.02k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  429|  6.02k|            emitSlot { unsafeBitCast(($0.source, $0.dest) as (LVReg, LVReg), to: CodeSlot.self) }
  430|  6.02k|        }
$s7WasmKit11InstructionO16CopyStackOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  429|  6.02k|            emitSlot { unsafeBitCast(($0.source, $0.dest) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4load4fromAESpys6UInt64VGz_tFZ:
  436|   109k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  437|   109k|            let (reg) = pc.read((LLVReg).self)
  438|   109k|            let (rawGlobal) = pc.read((UInt64).self)
  439|   109k|            return Self(reg: reg, rawGlobal: rawGlobal)
  440|   109k|        }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  441|  16.1k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  442|  16.1k|            emitSlot { unsafeBitCast(($0.reg) as (LLVReg), to: CodeSlot.self) }
  443|  16.1k|            emitSlot { $0.rawGlobal }
  444|  16.1k|        }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  442|  16.1k|            emitSlot { unsafeBitCast(($0.reg) as (LLVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  443|  16.1k|            emitSlot { $0.rawGlobal }
$s7WasmKit11InstructionO11CallOperandV4load4fromAESpys6UInt64VGz_tFZ:
  450|   585k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  451|   585k|            let (rawCallee) = pc.read((UInt64).self)
  452|   585k|            let (spAddend, _, _, _, _, _, _) = pc.read((VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8).self)
  453|   585k|            return Self(rawCallee: rawCallee, spAddend: spAddend)
  454|   585k|        }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  455|  3.75k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  456|  3.75k|            emitSlot { $0.rawCallee }
  457|  3.75k|            emitSlot { unsafeBitCast(($0.spAddend, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  458|  3.75k|        }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  456|  3.75k|            emitSlot { $0.rawCallee }
$s7WasmKit11InstructionO11CallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  457|  3.75k|            emitSlot { unsafeBitCast(($0.spAddend, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  471|    172|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  472|    172|            emitSlot { unsafeBitCast(($0.tableIndex, $0.rawType) as (UInt32, UInt32), to: CodeSlot.self) }
  473|    172|            emitSlot { unsafeBitCast(($0.index, $0.spAddend, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  474|    172|        }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  472|    172|            emitSlot { unsafeBitCast(($0.tableIndex, $0.rawType) as (UInt32, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO19CallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  473|    172|            emitSlot { unsafeBitCast(($0.index, $0.spAddend, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO24ResizeFrameHeaderOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  484|     60|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  485|     60|            emitSlot { unsafeBitCast(($0.delta, $0.sizeToCopy, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  486|     60|        }
$s7WasmKit11InstructionO24ResizeFrameHeaderOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  485|     60|            emitSlot { unsafeBitCast(($0.delta, $0.sizeToCopy, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO17ReturnCallOperandV4load4fromAESpys6UInt64VGz_tFZ:
  491|     17|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  492|     17|            let (rawCallee) = pc.read((UInt64).self)
  493|     17|            return Self(rawCallee: rawCallee)
  494|     17|        }
$s7WasmKit11InstructionO17ReturnCallOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  495|     63|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  496|     63|            emitSlot { $0.rawCallee }
  497|     63|        }
$s7WasmKit11InstructionO17ReturnCallOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  496|     63|            emitSlot { $0.rawCallee }
$s7WasmKit11InstructionO25ReturnCallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  509|     35|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  510|     35|            emitSlot { unsafeBitCast(($0.tableIndex, $0.rawType) as (UInt32, UInt32), to: CodeSlot.self) }
  511|     35|            emitSlot { unsafeBitCast(($0.index, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  512|     35|        }
$s7WasmKit11InstructionO25ReturnCallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  510|     35|            emitSlot { unsafeBitCast(($0.tableIndex, $0.rawType) as (UInt32, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO25ReturnCallIndirectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  511|     35|            emitSlot { unsafeBitCast(($0.index, 0, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO11BrIfOperandV4load4fromAESpys6UInt64VGz_tFZ:
  518|  8.63k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  519|  8.63k|            let (condition, offset) = pc.read((LVReg, Int32).self)
  520|  8.63k|            return Self(condition: condition, offset: offset)
  521|  8.63k|        }
$s7WasmKit11InstructionO11BrIfOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  522|  2.66k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  523|  2.66k|            emitSlot { unsafeBitCast(($0.condition, $0.offset) as (LVReg, Int32), to: CodeSlot.self) }
  524|  2.66k|        }
$s7WasmKit11InstructionO11BrIfOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  523|  1.09k|            emitSlot { unsafeBitCast(($0.condition, $0.offset) as (LVReg, Int32), to: CodeSlot.self) }
$s7WasmKit11InstructionO14BrTableOperandV4load4fromAESpys6UInt64VGz_tFZ:
  531|  9.59k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  532|  9.59k|            let (rawBaseAddress) = pc.read((UInt64).self)
  533|  9.59k|            let (count, index, _, _, _, _) = pc.read((UInt16, VReg, UInt8, UInt8, UInt8, UInt8).self)
  534|  9.59k|            return Self(rawBaseAddress: rawBaseAddress, count: count, index: index)
  535|  9.59k|        }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  536|    999|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  537|    999|            emitSlot { $0.rawBaseAddress }
  538|    999|            emitSlot { unsafeBitCast(($0.count, $0.index, 0, 0, 0, 0) as (UInt16, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  539|    999|        }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  537|    999|            emitSlot { $0.rawBaseAddress }
$s7WasmKit11InstructionO14BrTableOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  538|    999|            emitSlot { unsafeBitCast(($0.count, $0.index, 0, 0, 0, 0) as (UInt16, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO11LoadOperandV4load4fromAESpys6UInt64VGz_tFZ:
  546|  1.26M|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  547|  1.26M|            let (offset) = pc.read((UInt64).self)
  548|  1.26M|            let (pointer, result, _, _, _, _) = pc.read((VReg, VReg, UInt8, UInt8, UInt8, UInt8).self)
  549|  1.26M|            return Self(offset: offset, pointer: pointer, result: result)
  550|  1.26M|        }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  551|  15.2k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  552|  15.2k|            emitSlot { $0.offset }
  553|  15.2k|            emitSlot { unsafeBitCast(($0.pointer, $0.result, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  554|  15.2k|        }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  552|  15.2k|            emitSlot { $0.offset }
$s7WasmKit11InstructionO11LoadOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  553|  15.2k|            emitSlot { unsafeBitCast(($0.pointer, $0.result, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO12StoreOperandV4load4fromAESpys6UInt64VGz_tFZ:
  561|  26.6k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  562|  26.6k|            let (offset) = pc.read((UInt64).self)
  563|  26.6k|            let (pointer, value, _, _, _, _) = pc.read((VReg, VReg, UInt8, UInt8, UInt8, UInt8).self)
  564|  26.6k|            return Self(offset: offset, pointer: pointer, value: value)
  565|  26.6k|        }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  566|    250|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  567|    250|            emitSlot { $0.offset }
  568|    250|            emitSlot { unsafeBitCast(($0.pointer, $0.value, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  569|    250|        }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  567|    250|            emitSlot { $0.offset }
$s7WasmKit11InstructionO12StoreOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  568|    250|            emitSlot { unsafeBitCast(($0.pointer, $0.value, 0, 0, 0, 0) as (VReg, VReg, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemorySizeOperandV4load4fromAESpys6UInt64VGz_tFZ:
  575|   461k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  576|   461k|            let (memoryIndex, result) = pc.read((UInt32, LVReg).self)
  577|   461k|            return Self(memoryIndex: memoryIndex, result: result)
  578|   461k|        }
$s7WasmKit11InstructionO17MemorySizeOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  579|  10.2k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  580|  10.2k|            emitSlot { unsafeBitCast(($0.memoryIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  581|  10.2k|        }
$s7WasmKit11InstructionO17MemorySizeOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  580|  10.2k|            emitSlot { unsafeBitCast(($0.memoryIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryGrowOperandV4load4fromAESpys6UInt64VGz_tFZ:
  588|   112k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  589|   112k|            let (result, delta, memory) = pc.read((VReg, VReg, UInt32).self)
  590|   112k|            return Self(result: result, delta: delta, memory: memory)
  591|   112k|        }
$s7WasmKit11InstructionO17MemoryGrowOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  592|  1.96k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  593|  1.96k|            emitSlot { unsafeBitCast(($0.result, $0.delta, $0.memory) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  594|  1.96k|        }
$s7WasmKit11InstructionO17MemoryGrowOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  593|  1.96k|            emitSlot { unsafeBitCast(($0.result, $0.delta, $0.memory) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  632|     10|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  633|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.sourceOffset, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
  634|     10|        }
$s7WasmKit11InstructionO17MemoryCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  633|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.sourceOffset, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO17MemoryFillOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  645|     10|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  646|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.value, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
  647|     10|        }
$s7WasmKit11InstructionO17MemoryFillOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  646|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.value, $0.size) as (VReg, VReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const32OperandV4load4fromAESpys6UInt64VGz_tFZ:
  653|  22.2k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  654|  22.2k|            let (value, result) = pc.read((UInt32, LVReg).self)
  655|  22.2k|            return Self(value: value, result: result)
  656|  22.2k|        }
$s7WasmKit11InstructionO14Const32OperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  657|  1.51k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  658|  1.51k|            emitSlot { unsafeBitCast(($0.value, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  659|  1.51k|        }
$s7WasmKit11InstructionO14Const32OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  658|  1.51k|            emitSlot { unsafeBitCast(($0.value, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  670|    596|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  671|    596|            emitSlot { unsafeBitCast(($0.value) as (UntypedValue), to: CodeSlot.self) }
  672|    596|            emitSlot { unsafeBitCast(($0.result) as (LLVReg), to: CodeSlot.self) }
  673|    596|        }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  671|    596|            emitSlot { unsafeBitCast(($0.value) as (UntypedValue), to: CodeSlot.self) }
$s7WasmKit11InstructionO14Const64OperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  672|    596|            emitSlot { unsafeBitCast(($0.result) as (LLVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO13BinaryOperandV4load4fromAESpys6UInt64VGz_tFZ:
  680|   691k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  681|   691k|            let (result, lhs, rhs) = pc.read((LVReg, VReg, VReg).self)
  682|   691k|            return Self(result: result, lhs: lhs, rhs: rhs)
  683|   691k|        }
$s7WasmKit11InstructionO13BinaryOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  684|  17.1k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  685|  17.1k|            emitSlot { unsafeBitCast(($0.result, $0.lhs, $0.rhs) as (LVReg, VReg, VReg), to: CodeSlot.self) }
  686|  17.1k|        }
$s7WasmKit11InstructionO13BinaryOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  685|  17.1k|            emitSlot { unsafeBitCast(($0.result, $0.lhs, $0.rhs) as (LVReg, VReg, VReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO12UnaryOperandV4load4fromAESpys6UInt64VGz_tFZ:
  692|  2.15M|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  693|  2.15M|            let (result, input) = pc.read((LVReg, LVReg).self)
  694|  2.15M|            return Self(result: result, input: input)
  695|  2.15M|        }
$s7WasmKit11InstructionO12UnaryOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  696|  54.9k|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  697|  54.9k|            emitSlot { unsafeBitCast(($0.result, $0.input) as (LVReg, LVReg), to: CodeSlot.self) }
  698|  54.9k|        }
$s7WasmKit11InstructionO12UnaryOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  697|  54.9k|            emitSlot { unsafeBitCast(($0.result, $0.input) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO13SelectOperandV4load4fromAESpys6UInt64VGz_tFZ:
  706|  6.66k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  707|  6.66k|            let (result, condition, onTrue, onFalse) = pc.read((VReg, VReg, VReg, VReg).self)
  708|  6.66k|            return Self(result: result, condition: condition, onTrue: onTrue, onFalse: onFalse)
  709|  6.66k|        }
$s7WasmKit11InstructionO13SelectOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  710|    212|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  711|    212|            emitSlot { unsafeBitCast(($0.result, $0.condition, $0.onTrue, $0.onFalse) as (VReg, VReg, VReg, VReg), to: CodeSlot.self) }
  712|    212|        }
$s7WasmKit11InstructionO13SelectOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  711|    212|            emitSlot { unsafeBitCast(($0.result, $0.condition, $0.onTrue, $0.onFalse) as (VReg, VReg, VReg, VReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14RefNullOperandV4load4fromAESpys6UInt64VGz_tFZ:
  718|  3.76k|        @inline(__always) static func load(from pc: inout Pc) -> Self {
  719|  3.76k|            let (result, rawType, _, _, _, _, _) = pc.read((VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8).self)
  720|  3.76k|            return Self(result: result, rawType: rawType)
  721|  3.76k|        }
$s7WasmKit11InstructionO14RefNullOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  722|     60|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  723|     60|            emitSlot { unsafeBitCast(($0.result, $0.rawType, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
  724|     60|        }
$s7WasmKit11InstructionO14RefNullOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  723|     60|            emitSlot { unsafeBitCast(($0.result, $0.rawType, 0, 0, 0, 0, 0) as (VReg, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO16RefIsNullOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  734|     20|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  735|     20|            emitSlot { unsafeBitCast(($0.value, $0.result) as (LVReg, LVReg), to: CodeSlot.self) }
  736|     20|        }
$s7WasmKit11InstructionO16RefIsNullOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  735|     20|            emitSlot { unsafeBitCast(($0.value, $0.result) as (LVReg, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO14RefFuncOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  746|     77|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  747|     77|            emitSlot { unsafeBitCast(($0.index, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  748|     77|        }
$s7WasmKit11InstructionO14RefFuncOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  747|     77|            emitSlot { unsafeBitCast(($0.index, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO15TableGetOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  759|     24|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  760|     24|            emitSlot { unsafeBitCast(($0.index, $0.result, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  761|     24|        }
$s7WasmKit11InstructionO15TableGetOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  760|     24|            emitSlot { unsafeBitCast(($0.index, $0.result, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO15TableSetOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  772|     10|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  773|     10|            emitSlot { unsafeBitCast(($0.index, $0.value, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
  774|     10|        }
$s7WasmKit11InstructionO15TableSetOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  773|     10|            emitSlot { unsafeBitCast(($0.index, $0.value, $0.tableIndex) as (VReg, VReg, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO16TableSizeOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  784|     19|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  785|     19|            emitSlot { unsafeBitCast(($0.tableIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
  786|     19|        }
$s7WasmKit11InstructionO16TableSizeOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  785|     19|            emitSlot { unsafeBitCast(($0.tableIndex, $0.result) as (UInt32, LVReg), to: CodeSlot.self) }
$s7WasmKit11InstructionO16TableCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZ:
  832|     10|        @inline(__always) static func emit(to emitSlot: ((Self) -> CodeSlot) -> Void) {
  833|     10|            emitSlot { unsafeBitCast(($0.sourceIndex, $0.destIndex) as (UInt32, UInt32), to: CodeSlot.self) }
  834|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.sourceOffset, $0.size, 0, 0) as (VReg, VReg, VReg, UInt8, UInt8), to: CodeSlot.self) }
  835|     10|        }
$s7WasmKit11InstructionO16TableCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU_:
  833|     10|            emitSlot { unsafeBitCast(($0.sourceIndex, $0.destIndex) as (UInt32, UInt32), to: CodeSlot.self) }
$s7WasmKit11InstructionO16TableCopyOperandV4emit2toyys6UInt64VAEXEXE_tFZAiEXEfU0_:
  834|     10|            emitSlot { unsafeBitCast(($0.destOffset, $0.sourceOffset, $0.size, 0, 0) as (VReg, VReg, VReg, UInt8, UInt8), to: CodeSlot.self) }
$s7WasmKit11InstructionO12rawImmediateAA0cE0_pSgvg:
  868|   159k|    var rawImmediate: (any InstructionImmediate)? {
  869|   159k|        switch self {
  870|   159k|        case .copyStack(let immediate): return immediate
  871|   159k|        case .globalGet(let immediate): return immediate
  872|   159k|        case .globalSet(let immediate): return immediate
  873|   159k|        case .call(let immediate): return immediate
  874|   159k|        case .compilingCall(let immediate): return immediate
  875|   159k|        case .internalCall(let immediate): return immediate
  876|   159k|        case .callIndirect(let immediate): return immediate
  877|   159k|        case .resizeFrameHeader(let immediate): return immediate
  878|   159k|        case .returnCall(let immediate): return immediate
  879|   159k|        case .returnCallIndirect(let immediate): return immediate
  880|   159k|        case .br(let immediate): return immediate
  881|   159k|        case .brIf(let immediate): return immediate
  882|   159k|        case .brIfNot(let immediate): return immediate
  883|   159k|        case .brTable(let immediate): return immediate
  884|   159k|        case .i32Load(let immediate): return immediate
  885|   159k|        case .i64Load(let immediate): return immediate
  886|   159k|        case .f32Load(let immediate): return immediate
  887|   159k|        case .f64Load(let immediate): return immediate
  888|   159k|        case .i32Load8S(let immediate): return immediate
  889|   159k|        case .i32Load8U(let immediate): return immediate
  890|   159k|        case .i32Load16S(let immediate): return immediate
  891|   159k|        case .i32Load16U(let immediate): return immediate
  892|   159k|        case .i64Load8S(let immediate): return immediate
  893|   159k|        case .i64Load8U(let immediate): return immediate
  894|   159k|        case .i64Load16S(let immediate): return immediate
  895|   159k|        case .i64Load16U(let immediate): return immediate
  896|   159k|        case .i64Load32S(let immediate): return immediate
  897|   159k|        case .i64Load32U(let immediate): return immediate
  898|   159k|        case .i32Store(let immediate): return immediate
  899|   159k|        case .i64Store(let immediate): return immediate
  900|   159k|        case .f32Store(let immediate): return immediate
  901|   159k|        case .f64Store(let immediate): return immediate
  902|   159k|        case .i32Store8(let immediate): return immediate
  903|   159k|        case .i32Store16(let immediate): return immediate
  904|   159k|        case .i64Store8(let immediate): return immediate
  905|   159k|        case .i64Store16(let immediate): return immediate
  906|   159k|        case .i64Store32(let immediate): return immediate
  907|   159k|        case .memorySize(let immediate): return immediate
  908|   159k|        case .memoryGrow(let immediate): return immediate
  909|   159k|        case .memoryInit(let immediate): return immediate
  910|   159k|        case .memoryDataDrop(let immediate): return immediate
  911|   159k|        case .memoryCopy(let immediate): return immediate
  912|   159k|        case .memoryFill(let immediate): return immediate
  913|   159k|        case .const32(let immediate): return immediate
  914|   159k|        case .const64(let immediate): return immediate
  915|   159k|        case .i32Add(let immediate): return immediate
  916|   159k|        case .i64Add(let immediate): return immediate
  917|   159k|        case .i32Sub(let immediate): return immediate
  918|   159k|        case .i64Sub(let immediate): return immediate
  919|   159k|        case .i32Mul(let immediate): return immediate
  920|   159k|        case .i64Mul(let immediate): return immediate
  921|   159k|        case .i32And(let immediate): return immediate
  922|   159k|        case .i64And(let immediate): return immediate
  923|   159k|        case .i32Or(let immediate): return immediate
  924|   159k|        case .i64Or(let immediate): return immediate
  925|   159k|        case .i32Xor(let immediate): return immediate
  926|   159k|        case .i64Xor(let immediate): return immediate
  927|   159k|        case .i32Shl(let immediate): return immediate
  928|   159k|        case .i64Shl(let immediate): return immediate
  929|   159k|        case .i32ShrS(let immediate): return immediate
  930|   159k|        case .i64ShrS(let immediate): return immediate
  931|   159k|        case .i32ShrU(let immediate): return immediate
  932|   159k|        case .i64ShrU(let immediate): return immediate
  933|   159k|        case .i32Rotl(let immediate): return immediate
  934|   159k|        case .i64Rotl(let immediate): return immediate
  935|   159k|        case .i32Rotr(let immediate): return immediate
  936|   159k|        case .i64Rotr(let immediate): return immediate
  937|   159k|        case .i32DivS(let immediate): return immediate
  938|   159k|        case .i64DivS(let immediate): return immediate
  939|   159k|        case .i32DivU(let immediate): return immediate
  940|   159k|        case .i64DivU(let immediate): return immediate
  941|   159k|        case .i32RemS(let immediate): return immediate
  942|   159k|        case .i64RemS(let immediate): return immediate
  943|   159k|        case .i32RemU(let immediate): return immediate
  944|   159k|        case .i64RemU(let immediate): return immediate
  945|   159k|        case .i32Eq(let immediate): return immediate
  946|   159k|        case .i64Eq(let immediate): return immediate
  947|   159k|        case .i32Ne(let immediate): return immediate
  948|   159k|        case .i64Ne(let immediate): return immediate
  949|   159k|        case .i32LtS(let immediate): return immediate
  950|   159k|        case .i64LtS(let immediate): return immediate
  951|   159k|        case .i32LtU(let immediate): return immediate
  952|   159k|        case .i64LtU(let immediate): return immediate
  953|   159k|        case .i32GtS(let immediate): return immediate
  954|   159k|        case .i64GtS(let immediate): return immediate
  955|   159k|        case .i32GtU(let immediate): return immediate
  956|   159k|        case .i64GtU(let immediate): return immediate
  957|   159k|        case .i32LeS(let immediate): return immediate
  958|   159k|        case .i64LeS(let immediate): return immediate
  959|   159k|        case .i32LeU(let immediate): return immediate
  960|   159k|        case .i64LeU(let immediate): return immediate
  961|   159k|        case .i32GeS(let immediate): return immediate
  962|   159k|        case .i64GeS(let immediate): return immediate
  963|   159k|        case .i32GeU(let immediate): return immediate
  964|   159k|        case .i64GeU(let immediate): return immediate
  965|   159k|        case .i32Clz(let immediate): return immediate
  966|   159k|        case .i64Clz(let immediate): return immediate
  967|   159k|        case .i32Ctz(let immediate): return immediate
  968|   159k|        case .i64Ctz(let immediate): return immediate
  969|   159k|        case .i32Popcnt(let immediate): return immediate
  970|   159k|        case .i64Popcnt(let immediate): return immediate
  971|   159k|        case .i32Eqz(let immediate): return immediate
  972|   159k|        case .i64Eqz(let immediate): return immediate
  973|   159k|        case .i32WrapI64(let immediate): return immediate
  974|   159k|        case .i64ExtendI32S(let immediate): return immediate
  975|   159k|        case .i64ExtendI32U(let immediate): return immediate
  976|   159k|        case .i32Extend8S(let immediate): return immediate
  977|   159k|        case .i64Extend8S(let immediate): return immediate
  978|   159k|        case .i32Extend16S(let immediate): return immediate
  979|   159k|        case .i64Extend16S(let immediate): return immediate
  980|   159k|        case .i64Extend32S(let immediate): return immediate
  981|   159k|        case .i32TruncF32S(let immediate): return immediate
  982|   159k|        case .i32TruncF32U(let immediate): return immediate
  983|   159k|        case .i32TruncSatF32S(let immediate): return immediate
  984|   159k|        case .i32TruncSatF32U(let immediate): return immediate
  985|   159k|        case .i32TruncF64S(let immediate): return immediate
  986|   159k|        case .i32TruncF64U(let immediate): return immediate
  987|   159k|        case .i32TruncSatF64S(let immediate): return immediate
  988|   159k|        case .i32TruncSatF64U(let immediate): return immediate
  989|   159k|        case .i64TruncF32S(let immediate): return immediate
  990|   159k|        case .i64TruncF32U(let immediate): return immediate
  991|   159k|        case .i64TruncSatF32S(let immediate): return immediate
  992|   159k|        case .i64TruncSatF32U(let immediate): return immediate
  993|   159k|        case .i64TruncF64S(let immediate): return immediate
  994|   159k|        case .i64TruncF64U(let immediate): return immediate
  995|   159k|        case .i64TruncSatF64S(let immediate): return immediate
  996|   159k|        case .i64TruncSatF64U(let immediate): return immediate
  997|   159k|        case .f32ConvertI32S(let immediate): return immediate
  998|   159k|        case .f32ConvertI32U(let immediate): return immediate
  999|   159k|        case .f32ConvertI64S(let immediate): return immediate
 1000|   159k|        case .f32ConvertI64U(let immediate): return immediate
 1001|   159k|        case .f64ConvertI32S(let immediate): return immediate
 1002|   159k|        case .f64ConvertI32U(let immediate): return immediate
 1003|   159k|        case .f64ConvertI64S(let immediate): return immediate
 1004|   159k|        case .f64ConvertI64U(let immediate): return immediate
 1005|   159k|        case .f32ReinterpretI32(let immediate): return immediate
 1006|   159k|        case .f64ReinterpretI64(let immediate): return immediate
 1007|   159k|        case .i32ReinterpretF32(let immediate): return immediate
 1008|   159k|        case .i64ReinterpretF64(let immediate): return immediate
 1009|   159k|        case .f32Add(let immediate): return immediate
 1010|   159k|        case .f64Add(let immediate): return immediate
 1011|   159k|        case .f32Sub(let immediate): return immediate
 1012|   159k|        case .f64Sub(let immediate): return immediate
 1013|   159k|        case .f32Mul(let immediate): return immediate
 1014|   159k|        case .f64Mul(let immediate): return immediate
 1015|   159k|        case .f32Div(let immediate): return immediate
 1016|   159k|        case .f64Div(let immediate): return immediate
 1017|   159k|        case .f32Min(let immediate): return immediate
 1018|   159k|        case .f64Min(let immediate): return immediate
 1019|   159k|        case .f32Max(let immediate): return immediate
 1020|   159k|        case .f64Max(let immediate): return immediate
 1021|   159k|        case .f32CopySign(let immediate): return immediate
 1022|   159k|        case .f64CopySign(let immediate): return immediate
 1023|   159k|        case .f32Eq(let immediate): return immediate
 1024|   159k|        case .f64Eq(let immediate): return immediate
 1025|   159k|        case .f32Ne(let immediate): return immediate
 1026|   159k|        case .f64Ne(let immediate): return immediate
 1027|   159k|        case .f32Lt(let immediate): return immediate
 1028|   159k|        case .f64Lt(let immediate): return immediate
 1029|   159k|        case .f32Gt(let immediate): return immediate
 1030|   159k|        case .f64Gt(let immediate): return immediate
 1031|   159k|        case .f32Le(let immediate): return immediate
 1032|   159k|        case .f64Le(let immediate): return immediate
 1033|   159k|        case .f32Ge(let immediate): return immediate
 1034|   159k|        case .f64Ge(let immediate): return immediate
 1035|   159k|        case .f32Abs(let immediate): return immediate
 1036|   159k|        case .f64Abs(let immediate): return immediate
 1037|   159k|        case .f32Neg(let immediate): return immediate
 1038|   159k|        case .f64Neg(let immediate): return immediate
 1039|   159k|        case .f32Ceil(let immediate): return immediate
 1040|   159k|        case .f64Ceil(let immediate): return immediate
 1041|   159k|        case .f32Floor(let immediate): return immediate
 1042|   159k|        case .f64Floor(let immediate): return immediate
 1043|   159k|        case .f32Trunc(let immediate): return immediate
 1044|   159k|        case .f64Trunc(let immediate): return immediate
 1045|   159k|        case .f32Nearest(let immediate): return immediate
 1046|   159k|        case .f64Nearest(let immediate): return immediate
 1047|   159k|        case .f32Sqrt(let immediate): return immediate
 1048|   159k|        case .f64Sqrt(let immediate): return immediate
 1049|   159k|        case .f64PromoteF32(let immediate): return immediate
 1050|   159k|        case .f32DemoteF64(let immediate): return immediate
 1051|   159k|        case .select(let immediate): return immediate
 1052|   159k|        case .refNull(let immediate): return immediate
 1053|   159k|        case .refIsNull(let immediate): return immediate
 1054|   159k|        case .refFunc(let immediate): return immediate
 1055|   159k|        case .tableGet(let immediate): return immediate
 1056|   159k|        case .tableSet(let immediate): return immediate
 1057|   159k|        case .tableSize(let immediate): return immediate
 1058|   159k|        case .tableGrow(let immediate): return immediate
 1059|   159k|        case .tableFill(let immediate): return immediate
 1060|   159k|        case .tableCopy(let immediate): return immediate
 1061|   159k|        case .tableInit(let immediate): return immediate
 1062|   159k|        case .tableElementDrop(let immediate): return immediate
 1063|   159k|        case .onEnter(let immediate): return immediate
 1064|   159k|        case .onExit(let immediate): return immediate
 1065|   159k|        default: return nil
 1066|   159k|        }
 1067|   159k|    }
$s7WasmKit11InstructionO8opcodeIDs6UInt64Vvg:
 1073|   161k|    var opcodeID: OpcodeID {
 1074|   161k|        switch self {
 1075|   161k|        case .copyStack: return 0
 1076|   161k|        case .globalGet: return 1
 1077|   161k|        case .globalSet: return 2
 1078|   161k|        case .call: return 3
 1079|   161k|        case .compilingCall: return 4
 1080|   161k|        case .internalCall: return 5
 1081|   161k|        case .callIndirect: return 6
 1082|   161k|        case .resizeFrameHeader: return 7
 1083|   161k|        case .returnCall: return 8
 1084|   161k|        case .returnCallIndirect: return 9
 1085|   161k|        case .unreachable: return 10
 1086|   161k|        case .nop: return 11
 1087|   161k|        case .br: return 12
 1088|   161k|        case .brIf: return 13
 1089|   161k|        case .brIfNot: return 14
 1090|   161k|        case .brTable: return 15
 1091|   161k|        case ._return: return 16
 1092|   161k|        case .endOfExecution: return 17
 1093|   161k|        case .i32Load: return 18
 1094|   161k|        case .i64Load: return 19
 1095|   161k|        case .f32Load: return 20
 1096|   161k|        case .f64Load: return 21
 1097|   161k|        case .i32Load8S: return 22
 1098|   161k|        case .i32Load8U: return 23
 1099|   161k|        case .i32Load16S: return 24
 1100|   161k|        case .i32Load16U: return 25
 1101|   161k|        case .i64Load8S: return 26
 1102|   161k|        case .i64Load8U: return 27
 1103|   161k|        case .i64Load16S: return 28
 1104|   161k|        case .i64Load16U: return 29
 1105|   161k|        case .i64Load32S: return 30
 1106|   161k|        case .i64Load32U: return 31
 1107|   161k|        case .i32Store: return 32
 1108|   161k|        case .i64Store: return 33
 1109|   161k|        case .f32Store: return 34
 1110|   161k|        case .f64Store: return 35
 1111|   161k|        case .i32Store8: return 36
 1112|   161k|        case .i32Store16: return 37
 1113|   161k|        case .i64Store8: return 38
 1114|   161k|        case .i64Store16: return 39
 1115|   161k|        case .i64Store32: return 40
 1116|   161k|        case .memorySize: return 41
 1117|   161k|        case .memoryGrow: return 42
 1118|   161k|        case .memoryInit: return 43
 1119|   161k|        case .memoryDataDrop: return 44
 1120|   161k|        case .memoryCopy: return 45
 1121|   161k|        case .memoryFill: return 46
 1122|   161k|        case .const32: return 47
 1123|   161k|        case .const64: return 48
 1124|   161k|        case .i32Add: return 49
 1125|   161k|        case .i64Add: return 50
 1126|   161k|        case .i32Sub: return 51
 1127|   161k|        case .i64Sub: return 52
 1128|   161k|        case .i32Mul: return 53
 1129|   161k|        case .i64Mul: return 54
 1130|   161k|        case .i32And: return 55
 1131|   161k|        case .i64And: return 56
 1132|   161k|        case .i32Or: return 57
 1133|   161k|        case .i64Or: return 58
 1134|   161k|        case .i32Xor: return 59
 1135|   161k|        case .i64Xor: return 60
 1136|   161k|        case .i32Shl: return 61
 1137|   161k|        case .i64Shl: return 62
 1138|   161k|        case .i32ShrS: return 63
 1139|   161k|        case .i64ShrS: return 64
 1140|   161k|        case .i32ShrU: return 65
 1141|   161k|        case .i64ShrU: return 66
 1142|   161k|        case .i32Rotl: return 67
 1143|   161k|        case .i64Rotl: return 68
 1144|   161k|        case .i32Rotr: return 69
 1145|   161k|        case .i64Rotr: return 70
 1146|   161k|        case .i32DivS: return 71
 1147|   161k|        case .i64DivS: return 72
 1148|   161k|        case .i32DivU: return 73
 1149|   161k|        case .i64DivU: return 74
 1150|   161k|        case .i32RemS: return 75
 1151|   161k|        case .i64RemS: return 76
 1152|   161k|        case .i32RemU: return 77
 1153|   161k|        case .i64RemU: return 78
 1154|   161k|        case .i32Eq: return 79
 1155|   161k|        case .i64Eq: return 80
 1156|   161k|        case .i32Ne: return 81
 1157|   161k|        case .i64Ne: return 82
 1158|   161k|        case .i32LtS: return 83
 1159|   161k|        case .i64LtS: return 84
 1160|   161k|        case .i32LtU: return 85
 1161|   161k|        case .i64LtU: return 86
 1162|   161k|        case .i32GtS: return 87
 1163|   161k|        case .i64GtS: return 88
 1164|   161k|        case .i32GtU: return 89
 1165|   161k|        case .i64GtU: return 90
 1166|   161k|        case .i32LeS: return 91
 1167|   161k|        case .i64LeS: return 92
 1168|   161k|        case .i32LeU: return 93
 1169|   161k|        case .i64LeU: return 94
 1170|   161k|        case .i32GeS: return 95
 1171|   161k|        case .i64GeS: return 96
 1172|   161k|        case .i32GeU: return 97
 1173|   161k|        case .i64GeU: return 98
 1174|   161k|        case .i32Clz: return 99
 1175|   161k|        case .i64Clz: return 100
 1176|   161k|        case .i32Ctz: return 101
 1177|   161k|        case .i64Ctz: return 102
 1178|   161k|        case .i32Popcnt: return 103
 1179|   161k|        case .i64Popcnt: return 104
 1180|   161k|        case .i32Eqz: return 105
 1181|   161k|        case .i64Eqz: return 106
 1182|   161k|        case .i32WrapI64: return 107
 1183|   161k|        case .i64ExtendI32S: return 108
 1184|   161k|        case .i64ExtendI32U: return 109
 1185|   161k|        case .i32Extend8S: return 110
 1186|   161k|        case .i64Extend8S: return 111
 1187|   161k|        case .i32Extend16S: return 112
 1188|   161k|        case .i64Extend16S: return 113
 1189|   161k|        case .i64Extend32S: return 114
 1190|   161k|        case .i32TruncF32S: return 115
 1191|   161k|        case .i32TruncF32U: return 116
 1192|   161k|        case .i32TruncSatF32S: return 117
 1193|   161k|        case .i32TruncSatF32U: return 118
 1194|   161k|        case .i32TruncF64S: return 119
 1195|   161k|        case .i32TruncF64U: return 120
 1196|   161k|        case .i32TruncSatF64S: return 121
 1197|   161k|        case .i32TruncSatF64U: return 122
 1198|   161k|        case .i64TruncF32S: return 123
 1199|   161k|        case .i64TruncF32U: return 124
 1200|   161k|        case .i64TruncSatF32S: return 125
 1201|   161k|        case .i64TruncSatF32U: return 126
 1202|   161k|        case .i64TruncF64S: return 127
 1203|   161k|        case .i64TruncF64U: return 128
 1204|   161k|        case .i64TruncSatF64S: return 129
 1205|   161k|        case .i64TruncSatF64U: return 130
 1206|   161k|        case .f32ConvertI32S: return 131
 1207|   161k|        case .f32ConvertI32U: return 132
 1208|   161k|        case .f32ConvertI64S: return 133
 1209|   161k|        case .f32ConvertI64U: return 134
 1210|   161k|        case .f64ConvertI32S: return 135
 1211|   161k|        case .f64ConvertI32U: return 136
 1212|   161k|        case .f64ConvertI64S: return 137
 1213|   161k|        case .f64ConvertI64U: return 138
 1214|   161k|        case .f32ReinterpretI32: return 139
 1215|   161k|        case .f64ReinterpretI64: return 140
 1216|   161k|        case .i32ReinterpretF32: return 141
 1217|   161k|        case .i64ReinterpretF64: return 142
 1218|   161k|        case .f32Add: return 143
 1219|   161k|        case .f64Add: return 144
 1220|   161k|        case .f32Sub: return 145
 1221|   161k|        case .f64Sub: return 146
 1222|   161k|        case .f32Mul: return 147
 1223|   161k|        case .f64Mul: return 148
 1224|   161k|        case .f32Div: return 149
 1225|   161k|        case .f64Div: return 150
 1226|   161k|        case .f32Min: return 151
 1227|   161k|        case .f64Min: return 152
 1228|   161k|        case .f32Max: return 153
 1229|   161k|        case .f64Max: return 154
 1230|   161k|        case .f32CopySign: return 155
 1231|   161k|        case .f64CopySign: return 156
 1232|   161k|        case .f32Eq: return 157
 1233|   161k|        case .f64Eq: return 158
 1234|   161k|        case .f32Ne: return 159
 1235|   161k|        case .f64Ne: return 160
 1236|   161k|        case .f32Lt: return 161
 1237|   161k|        case .f64Lt: return 162
 1238|   161k|        case .f32Gt: return 163
 1239|   161k|        case .f64Gt: return 164
 1240|   161k|        case .f32Le: return 165
 1241|   161k|        case .f64Le: return 166
 1242|   161k|        case .f32Ge: return 167
 1243|   161k|        case .f64Ge: return 168
 1244|   161k|        case .f32Abs: return 169
 1245|   161k|        case .f64Abs: return 170
 1246|   161k|        case .f32Neg: return 171
 1247|   161k|        case .f64Neg: return 172
 1248|   161k|        case .f32Ceil: return 173
 1249|   161k|        case .f64Ceil: return 174
 1250|   161k|        case .f32Floor: return 175
 1251|   161k|        case .f64Floor: return 176
 1252|   161k|        case .f32Trunc: return 177
 1253|   161k|        case .f64Trunc: return 178
 1254|   161k|        case .f32Nearest: return 179
 1255|   161k|        case .f64Nearest: return 180
 1256|   161k|        case .f32Sqrt: return 181
 1257|   161k|        case .f64Sqrt: return 182
 1258|   161k|        case .f64PromoteF32: return 183
 1259|   161k|        case .f32DemoteF64: return 184
 1260|   161k|        case .select: return 185
 1261|   161k|        case .refNull: return 186
 1262|   161k|        case .refIsNull: return 187
 1263|   161k|        case .refFunc: return 188
 1264|   161k|        case .tableGet: return 189
 1265|   161k|        case .tableSet: return 190
 1266|   161k|        case .tableSize: return 191
 1267|   161k|        case .tableGrow: return 192
 1268|   161k|        case .tableFill: return 193
 1269|   161k|        case .tableCopy: return 194
 1270|   161k|        case .tableInit: return 195
 1271|   161k|        case .tableElementDrop: return 196
 1272|   161k|        case .onEnter: return 197
 1273|   161k|        case .onExit: return 198
 1274|   161k|        }
 1275|   161k|    }

$s7WasmKit5LVRegVyACs5Int16VcfC:
   20|   152k|    init(_ value: VReg) {
   21|   152k|        // Pre-shift to avoid runtime shift operation by using
   22|   152k|        // unused high bits.
   23|   152k|        self.value = Int32(value) * Int32(MemoryLayout<StackSlot>.size)
   24|   152k|    }
$s7WasmKit6LLVRegVyACs5Int16VcfC:
   40|  16.7k|    init(_ value: VReg) {
   41|  16.7k|        // Pre-shift to avoid runtime shift operation by using
   42|  16.7k|        // unused high bits.
   43|  16.7k|        self.value = Int64(value) * Int64(MemoryLayout<StackSlot>.size)
   44|  16.7k|    }
$s7WasmKit20InstructionImmediatePAAE4emit2toyys6UInt64Vc_tF:
   79|   135k|    func emit(to emitSlot: @escaping (CodeSlot) -> Void) {
   80|   135k|        Self.emit { buildCodeSlot in
   81|   135k|            emitSlot(buildCodeSlot(self))
   82|   135k|        }
   83|   135k|    }
$s7WasmKit20InstructionImmediatePAAE4emit2toyys6UInt64Vc_tFyAGxXEcfU_:
   80|   172k|        Self.emit { buildCodeSlot in
   81|   172k|            emitSlot(buildCodeSlot(self))
   82|   172k|        }
$ss5Int32V7WasmKitE4load4fromABSpys6UInt64VGz_tFZ:
   96|  4.35k|    static func load(from pc: inout Pc) -> Self {
   97|  4.35k|        Int32(bitPattern: UInt32(pc.read(UInt64.self)))
   98|  4.35k|    }
$ss5Int32V7WasmKitE4emit2toyys6UInt64VABXEc_tFZ:
   99|  10.4k|    static func emit(to emitSlot: @escaping ((Self) -> CodeSlot) -> Void) {
  100|  10.4k|        emitSlot { CodeSlot(UInt32(bitPattern: $0)) }
  101|  10.4k|    }
$ss5Int32V7WasmKitE4emit2toyys6UInt64VABXEc_tFZAgBXEfU_:
  100|  4.44k|        emitSlot { CodeSlot(UInt32(bitPattern: $0)) }
$s7WasmKit11InstructionO14RefNullOperandV6result4typeAEs5Int16V_0A5Types13ReferenceTypeOtcfC:
  107|     60|    init(result: VReg, type: ReferenceType) {
  108|     60|        self.init(result: result, rawType: type.rawValue)
  109|     60|    }
$s7WasmKit11InstructionO14RefNullOperandV4type0A5Types13ReferenceTypeOvg:
  111|  3.76k|    var type: ReferenceType {
  112|  3.76k|        ReferenceType(rawValue: rawType).unsafelyUnwrapped
  113|  3.76k|    }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV3reg6globalAeA6LLVRegV_AA12EntityHandleVyAA0dK0VGtcfC:
  117|  16.1k|    init(reg: LLVReg, global: InternalGlobal) {
  118|  16.1k|        self.init(reg: reg, rawGlobal: UInt64(UInt(bitPattern: global.bitPattern)))
  119|  16.1k|    }
$s7WasmKit11InstructionO20GlobalAndVRegOperandV6globalAA12EntityHandleVyAA0dI0VGvg:
  120|   109k|    var global: InternalGlobal {
  121|   109k|        InternalGlobal(bitPattern: UInt(rawGlobal)).unsafelyUnwrapped
  122|   109k|    }
$s7WasmKit11InstructionO14BrTableOperandV11baseAddress5count5indexAESPyAE5EntryVG_s6UInt16Vs5Int16VtcfC:
  130|    999|    init(baseAddress: UnsafePointer<Entry>, count: UInt16, index: VReg) {
  131|    999|        self.init(rawBaseAddress: UInt64(UInt(bitPattern: baseAddress)), count: count, index: index)
  132|    999|    }
$s7WasmKit11InstructionO14BrTableOperandV11baseAddressSPyAE5EntryVGvg:
  134|  9.59k|    var baseAddress: UnsafePointer<Entry> {
  135|  9.59k|        UnsafePointer(bitPattern: UInt(rawBaseAddress)).unsafelyUnwrapped
  136|  9.59k|    }
$s7WasmKit11InstructionO11CallOperandV6callee8spAddendAeA16InternalFunctionV_s5Int16VtcfC:
  140|  3.75k|    init(callee: InternalFunction, spAddend: VReg) {
  141|  3.75k|        self.init(rawCallee: UInt64(UInt(bitPattern: callee.bitPattern)), spAddend: spAddend)
  142|  3.75k|    }
$s7WasmKit11InstructionO11CallOperandV6calleeAA16InternalFunctionVvg:
  144|  1.17M|    var callee: InternalFunction {
  145|  1.17M|        InternalFunction(bitPattern: Int(bitPattern: UInt(rawCallee)))
  146|  1.17M|    }
$s7WasmKit11InstructionO19CallIndirectOperandV10tableIndex4type5index8spAddendAEs6UInt32V_AA8InternedVy0A5Types12FunctionTypeVGs5Int16VAStcfC:
  151|    172|    init(tableIndex: UInt32, type: InternedFuncType, index: VReg, spAddend: VReg) {
  152|    172|        self.init(tableIndex: tableIndex, rawType: type.id, index: index, spAddend: spAddend)
  153|    172|    }
$s7WasmKit11InstructionO17ReturnCallOperandV6calleeAeA16InternalFunctionV_tcfC:
  161|     63|    init(callee: InternalFunction) {
  162|     63|        self.init(rawCallee: UInt64(UInt(bitPattern: callee.bitPattern)))
  163|     63|    }
$s7WasmKit11InstructionO17ReturnCallOperandV6calleeAA16InternalFunctionVvg:
  165|     17|    var callee: InternalFunction {
  166|     17|        InternalFunction(bitPattern: Int(bitPattern: UInt(rawCallee)))
  167|     17|    }
$s7WasmKit11InstructionO25ReturnCallIndirectOperandV10tableIndex4type5indexAEs6UInt32V_AA8InternedVy0A5Types12FunctionTypeVGs5Int16VtcfC:
  172|     35|    init(tableIndex: UInt32, type: InternedFuncType, index: VReg) {
  173|     35|        self.init(tableIndex: tableIndex, rawType: type.id, index: index)
  174|     35|    }
$s7WasmKit11InstructionO8headSlot14threadingModels6UInt64VAA19EngineConfigurationV09ThreadingG0O_tF:
  221|   161k|    func headSlot(threadingModel: EngineConfiguration.ThreadingModel) -> CodeSlot {
  222|   161k|        switch threadingModel {
  223|   161k|        case .direct:
  224|   161k|            return CodeSlot(handler)
  225|   161k|        case .token:
  226|      0|            return opcodeID
  227|   161k|        }
  228|   161k|    }

$s7WasmKit9ExecutionV28throwOutOfBoundsMemoryAccesss5NeverOyKF:
    4|     38|    @inline(never) func throwOutOfBoundsMemoryAccess() throws -> Never {
    5|     38|        throw Trap(.memoryOutOfBounds)
    6|     38|    }
$s7WasmKit9ExecutionV10memoryLoad2sp2md2ms11loadOperand0I2As11castToValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxmAA07UntypedN0VxXEtKs17FixedWidthIntegerRzlF:
    9|  1.26M|    ) throws {
   10|  1.26M|        let length = UInt64(T.bitWidth) / 8
   11|  1.26M|        let i = sp[loadOperand.pointer].asAddressOffset()
   12|  1.26M|        let (endAddress, isEndOverflow) = i.addingReportingOverflow(length &+ loadOperand.offset)
   13|  1.26M|        if _fastPath(!isEndOverflow && endAddress <= ms) {
   14|  1.26M|            let address = loadOperand.offset + i
   15|  1.26M|            let loaded = md.unsafelyUnwrapped.loadUnaligned(fromByteOffset: Int(address), as: T.self)
   16|  1.26M|            sp[loadOperand.result] = castToValue(loaded)
   17|  1.26M|        } else {
   18|     31|            try throwOutOfBoundsMemoryAccess()
   19|  1.26M|        }
   20|  1.26M|    }
$s7WasmKit9ExecutionV10memoryLoad2sp2md2ms11loadOperand0I2As11castToValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxmAA07UntypedN0VxXEtKs17FixedWidthIntegerRzlFSbyKXEfu_:
   13|  1.26M|        if _fastPath(!isEndOverflow && endAddress <= ms) {
$s7WasmKit9ExecutionV11memoryStore2sp2md2ms12storeOperand13castFromValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxAA07UntypedM0VXEtKs17FixedWidthIntegerRzlF:
   23|  26.6k|    mutating func memoryStore<T: FixedWidthInteger>(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand, castFromValue: (UntypedValue) -> T) throws {
   24|  26.6k|        let value = sp[storeOperand.value]
   25|  26.6k|        let length = UInt64(T.bitWidth) / 8
   26|  26.6k|        let i = sp[storeOperand.pointer].asAddressOffset()
   27|  26.6k|        let address = storeOperand.offset + i
   28|  26.6k|        let (endAddress, isEndOverflow) = i.addingReportingOverflow(length &+ storeOperand.offset)
   29|  26.6k|        if _fastPath(!isEndOverflow && endAddress <= ms) {
   30|  26.5k|            let toStore = castFromValue(value)
   31|  26.5k|            md.unsafelyUnwrapped.advanced(by: Int(address))
   32|  26.5k|                .bindMemory(to: T.self, capacity: 1).pointee = toStore.littleEndian
   33|  26.5k|        } else {
   34|      7|            try throwOutOfBoundsMemoryAccess()
   35|  26.5k|        }
   36|  26.5k|    }
$s7WasmKit9ExecutionV11memoryStore2sp2md2ms12storeOperand13castFromValueySpys6UInt64VG_SvSgSiAA11InstructionO0eJ0VxAA07UntypedM0VXEtKs17FixedWidthIntegerRzlFSbyKXEfu_:
   29|  26.6k|        if _fastPath(!isEndOverflow && endAddress <= ms) {
$s7WasmKit9ExecutionV10memorySize2sp9immediateySpys6UInt64VG_AA11InstructionO06MemoryE7OperandVtF:
   38|   461k|    mutating func memorySize(sp: Sp, immediate: Instruction.MemorySizeOperand) {
   39|   461k|        let memory = currentInstance(sp: sp).memories[Int(immediate.memoryIndex)]
   40|   461k|
   41|   461k|        let pageCount = memory.data.count / MemoryEntity.pageSize
   42|   461k|        let value: Value = memory.limit.isMemory64 ? .i64(UInt64(pageCount)) : .i32(UInt32(pageCount))
   43|   461k|        sp[immediate.result] = UntypedValue(value)
   44|   461k|    }
$s7WasmKit9ExecutionV10memoryGrow2sp2md2ms9immediateySpys6UInt64VG_SvSgzSizAA11InstructionO06MemoryE7OperandVtKF:
   46|   112k|    mutating func memoryGrow(sp: Sp, md: inout Md, ms: inout Ms, immediate: Instruction.MemoryGrowOperand) throws {
   47|   112k|        let memory = currentInstance(sp: sp).memories[Int(immediate.memory)]
   48|   112k|        try memory.withValue { memory in
   49|   112k|            let isMemory64 = memory.limit.isMemory64
   50|   112k|
   51|   112k|            let value = sp[immediate.delta]
   52|   112k|            let pageCount: UInt64 = isMemory64 ? value.i64 : UInt64(value.i32)
   53|   112k|            let oldPageCount = try memory.grow(by: Int(pageCount), resourceLimiter: store.value.resourceLimiter)
   54|   112k|            CurrentMemory.assign(md: &md, ms: &ms, memory: &memory)
   55|   112k|            sp[immediate.result] = UntypedValue(oldPageCount)
   56|   112k|        }
   57|   112k|    }
$s7WasmKit9ExecutionV10memoryGrow2sp2md2ms9immediateySpys6UInt64VG_SvSgzSizAA11InstructionO06MemoryE7OperandVtKFyAA0L6EntityVzKXEfU_:
   48|   112k|        try memory.withValue { memory in
   49|   112k|            let isMemory64 = memory.limit.isMemory64
   50|   112k|
   51|   112k|            let value = sp[immediate.delta]
   52|   112k|            let pageCount: UInt64 = isMemory64 ? value.i64 : UInt64(value.i32)
   53|   112k|            let oldPageCount = try memory.grow(by: Int(pageCount), resourceLimiter: store.value.resourceLimiter)
   54|   112k|            CurrentMemory.assign(md: &md, ms: &ms, memory: &memory)
   55|   112k|            sp[immediate.result] = UntypedValue(oldPageCount)
   56|   112k|        }

$s7WasmKit9ExecutionV9globalGet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtF:
    4|   103k|    mutating func globalGet(sp: Sp, immediate: Instruction.GlobalAndVRegOperand) {
    5|   103k|        immediate.global.withValue {
    6|   103k|            sp[immediate.reg] = $0.rawValue
    7|   103k|        }
    8|   103k|    }
$s7WasmKit9ExecutionV9globalGet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtFyAA0J6EntityVzXEfU_:
    5|   103k|        immediate.global.withValue {
    6|   103k|            sp[immediate.reg] = $0.rawValue
    7|   103k|        }
$s7WasmKit9ExecutionV9globalSet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtF:
    9|  5.72k|    mutating func globalSet(sp: Sp, immediate: Instruction.GlobalAndVRegOperand) {
   10|  5.72k|        let value = sp[immediate.reg]
   11|  5.72k|        immediate.global.withValue { $0.rawValue = value }
   12|  5.72k|    }
$s7WasmKit9ExecutionV9globalSet2sp9immediateySpys6UInt64VG_AA11InstructionO20GlobalAndVRegOperandVtFyAA0J6EntityVzXEfU_:
   11|  5.72k|        immediate.global.withValue { $0.rawValue = value }
$s7WasmKit9ExecutionV9copyStack2sp9immediateySpys6UInt64VG_AA11InstructionO04CopyE7OperandVtF:
   14|   116k|    mutating func copyStack(sp: Sp, immediate: Instruction.CopyStackOperand) {
   15|   116k|        sp[immediate.dest] = sp[immediate.source]
   16|   116k|    }
$s7WasmKit9ExecutionV7refNull2sp9immediateySpys6UInt64VG_AA11InstructionO03RefE7OperandVtF:
   22|  3.76k|    mutating func refNull(sp: Sp, immediate: Instruction.RefNullOperand) {
   23|  3.76k|        let value: Value
   24|  3.76k|        switch immediate.type {
   25|  3.76k|        case .externRef:
   26|  1.28k|            value = .ref(.extern(nil))
   27|  3.76k|        case .funcRef:
   28|  2.47k|            value = .ref(.function(nil))
   29|  3.76k|        }
   30|  3.76k|        sp[immediate.result] = UntypedValue(value)
   31|  3.76k|    }
$s7WasmKit9ExecutionV7const322sp9immediateySpys6UInt64VG_AA11InstructionO14Const32OperandVtF:
   53|  22.2k|    mutating func const32(sp: Sp, immediate: Instruction.Const32Operand) {
   54|  22.2k|        sp[immediate.result] = UntypedValue(storage32: immediate.value)
   55|  22.2k|    }
$s7WasmKit9ExecutionV6select2sp9immediateySpys6UInt64VG_AA11InstructionO13SelectOperandVtF:
   65|  6.66k|    mutating func select(sp: Sp, immediate: Instruction.SelectOperand) {
   66|  6.66k|        let flag = sp[i32: immediate.condition]
   67|  6.66k|        let selected = flag != 0 ? immediate.onTrue : immediate.onFalse
   68|  6.66k|        let value = sp[selected]
   69|  6.66k|        sp[immediate.result] = value
   70|  6.66k|    }

$s7WasmKit12NameRegistryV13functionNames33_41338D6D703C89393C72591DE351AF00LLSDyAA16InternalFunctionVSSGvpfi:
    7|  1.87k|    private var functionNames: [InternalFunction: String] = [:]
$s7WasmKit12NameRegistryV13materializers33_41338D6D703C89393C72591DE351AF00LLSayyACzKcGvpfi:
    8|  1.87k|    private var materializers: [(inout NameRegistry) throws -> Void] = []
$s7WasmKit12NameRegistryVACycfC:
   10|  1.87k|    init() {}
$s7WasmKit12NameRegistryV19materializeIfNeeded33_41338D6D703C89393C72591DE351AF00LLyyKF:
   39|   277k|    private mutating func materializeIfNeeded() throws {
   40|   277k|        guard !materializers.isEmpty else { return }
   41|      0|        for materialize in materializers {
   42|      0|            try materialize(&self)
   43|      0|        }
   44|      0|        materializers = []
   45|      0|    }
$s7WasmKit12NameRegistryV6lookupySSSgAA16InternalFunctionVKF:
   47|   277k|    mutating func lookup(_ addr: InternalFunction) throws -> String? {
   48|   277k|        try materializeIfNeeded()
   49|   277k|        return functionNames[addr]
   50|   277k|    }
$s7WasmKit12NameRegistryV11symbolicateySSAA16InternalFunctionVF:
   52|   277k|    mutating func symbolicate(_ function: InternalFunction) -> String {
   53|   277k|        if let name = try? lookup(function) {
   54|      0|            return name
   55|   277k|        }
   56|   277k|        // Fallback
   57|   277k|        if function.isWasm {
   58|   277k|            return "wasm function[\(function.wasm.index)]"
   59|   277k|        } else {
   60|      0|            return "unknown host function"
   61|      0|        }
   62|   277k|    }

$s7WasmKit5StoreC12nameRegistryAA04NameE0Vvpfi:
    7|  1.87k|    var nameRegistry = NameRegistry()
$s7WasmKit5StoreC15resourceLimiterAA08ResourceE0_pvpfi:
    9|  1.87k|    public var resourceLimiter: ResourceLimiter = DefaultResourceLimiter()
$s7WasmKit5StoreC6engineAcA6EngineC_tcfc:
   22|  1.87k|    public init(engine: Engine) {
   23|  1.87k|        self.engine = engine
   24|  1.87k|        self.allocator = StoreAllocator(funcTypeInterner: engine.funcTypeInterner)
   25|  1.87k|    }

$s7WasmKit13BumpAllocatorC5pages33_8EACE635DD16791045BB0F1DDDCAD7E4LLSaySryxGGvpfi:
    5|  16.8k|    private var pages: [UnsafeMutableBufferPointer<T>] = []
$s7WasmKit13BumpAllocatorC13currentOffset33_8EACE635DD16791045BB0F1DDDCAD7E4LLSivpfi:
    7|  16.8k|    private var currentOffset: Int = 0
$s7WasmKit13BumpAllocatorC15initialCapacityACyxGSi_tcfc:
   11|  16.8k|    init(initialCapacity: Int) {
   12|  16.8k|        currentPageSize = initialCapacity
   13|  16.8k|        currentPage = .allocate(capacity: currentPageSize)
   14|  16.8k|    }
$s7WasmKit13BumpAllocatorCfd:
   16|  16.8k|    deinit {
   17|  16.8k|        for page in pages {
   18|     24|            page.deinitialize().deallocate()
   19|  16.8k|        }
   20|  21.0k|        for i in 0..<currentOffset {
   21|  21.0k|            currentPage.deinitializeElement(at: i)
   22|  21.0k|        }
   23|  16.8k|        currentPage.deallocate()
   24|  16.8k|    }
$s7WasmKit13BumpAllocatorC12startNewPage33_8EACE635DD16791045BB0F1DDDCAD7E4LLyyF:
   27|     24|    private func startNewPage() {
   28|     24|        pages.append(currentPage)
   29|     24|        // TODO: Should we grow the page size?
   30|     24|        let page = UnsafeMutableBufferPointer<T>.allocate(capacity: currentPageSize)
   31|     24|        currentPage = page
   32|     24|        currentOffset = 0
   33|     24|    }
$s7WasmKit13BumpAllocatorC8allocate12initializingSpyxGx_tF:
   39|  19.2k|    func allocate(initializing value: T) -> UnsafeMutablePointer<T> {
   40|  19.2k|        let pointer = allocate()
   41|  19.2k|        pointer.initialize(to: value)
   42|  19.2k|        return pointer
   43|  19.2k|    }
$s7WasmKit13BumpAllocatorC8allocateSpyxGyF:
   51|  21.0k|    func allocate() -> UnsafeMutablePointer<T> {
   52|  21.0k|        if currentOffset == currentPageSize {
   53|     24|            startNewPage()
   54|     24|        }
   55|  21.0k|        let pointer = currentPage.baseAddress!.advanced(by: currentOffset)
   56|  21.0k|        currentOffset += 1
   57|  21.0k|        return pointer
   58|  21.0k|    }
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC12arrayBuffersSaySvGvpfi:
   68|  1.87k|    private var arrayBuffers: [UnsafeMutableRawPointer] = []
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC8allocate5countSryxGSi_tlF:
   73|  10.8k|    func allocate<T>(count: Int) -> UnsafeMutableBufferPointer<T> {
   74|  10.8k|        // We only support trivial types for now. Otherwise, we have to track the element type
   75|  10.8k|        // until the deallocation of this allocator.
   76|  10.8k|        assert(_isPOD(T.self), "ImmutableArrayAllocator only supports trivial element types.")
   77|  10.8k|        let buffer = UnsafeMutableBufferPointer<T>.allocate(capacity: count)
   78|  10.8k|        // If count is zero, don't manage such empty buffer.
   79|  10.8k|        if let baseAddress = buffer.baseAddress {
   80|  10.8k|            arrayBuffers.append(baseAddress)
   81|  10.8k|        }
   82|  10.8k|        return buffer
   83|  10.8k|    }
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC8allocate5countSryxGSi_tlFSbyXEfu_:
   76|  10.8k|        assert(_isPOD(T.self), "ImmutableArrayAllocator only supports trivial element types.")
$s7WasmKit23ImmutableArrayAllocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLCfd:
   85|  1.87k|    deinit {
   86|  10.8k|        for buffer in arrayBuffers {
   87|  10.8k|            buffer.deallocate()
   88|  10.8k|        }
   89|  1.87k|    }
$s7WasmKit14ImmutableArrayV9allocator5count10initializeACyxGAA0cD9Allocator33_8EACE635DD16791045BB0F1DDDCAD7E4LLC_SiySryxGKXEtKcAILlfC:
  102|  10.8k|    fileprivate init(allocator: ImmutableArrayAllocator, count: Int, initialize: (UnsafeMutableBufferPointer<T>) throws -> Void) rethrows {
  103|  10.8k|        let mutable: UnsafeMutableBufferPointer<T> = allocator.allocate(count: count)
  104|  10.8k|        try initialize(mutable)
  105|  10.7k|        buffer = UnsafeBufferPointer(mutable)
  106|  10.7k|    }
$s7WasmKit14ImmutableArrayVACyxGycfC:
  109|    540|    init() {
  110|    540|        buffer = UnsafeBufferPointer(start: nil, count: 0)
  111|    540|    }
$s7WasmKit14ImmutableArrayVyxSicig:
  114|   594k|    subscript(index: Int) -> T {
  115|   594k|        buffer[index]
  116|   594k|    }
$s7WasmKit14ImmutableArrayV10validatingxSi_tcAA17ValidatableEntityRzluig:
  124|  55.4k|        get throws {
  125|  55.4k|            return try self[validating: index, T.createOutOfBoundsError]
  126|  55.4k|        }
$s7WasmKit14ImmutableArrayV10validatingxSi_tcAA17ValidatableEntityRzluigs5Error_pSi_Sitcfu_:
  125|    127|            return try self[validating: index, T.createOutOfBoundsError]
$s7WasmKit14ImmutableArrayV10validating_xSi_s5Error_pSi_SitXEtcig:
  132|  55.4k|        get throws {
  133|  55.4k|            guard index >= 0 && index < buffer.count else {
  134|    127|                throw createError(index, buffer.count)
  135|  55.2k|            }
  136|  55.2k|            return buffer[index]
  137|  55.4k|        }
$s7WasmKit14ImmutableArrayV10validating_xSi_s5Error_pSi_SitXEtcigSbyKXEfu_:
  133|  55.4k|            guard index >= 0 && index < buffer.count else {
$s7WasmKit14ImmutableArrayV5firstxSgvg:
  141|    589|    var first: T? { buffer.first }
$s7WasmKit14ImmutableArrayV12makeIteratorSR0F0Vyx_GyF:
  151|  2.85k|    func makeIterator() -> Iterator {
  152|  2.85k|        buffer.makeIterator()
  153|  2.85k|    }
$s7WasmKit8InternerCACyxGycfc:
  174|  1.87k|    init() {
  175|  1.87k|        itemByIntern = []
  176|  1.87k|        internByItem = [:]
  177|  1.87k|    }
$s7WasmKit8InternerC6internyAA8InternedVyxGxF:
  181|  5.37k|    func intern(_ item: Item) -> Interned<Item> {
  182|  5.37k|        if let interned = internByItem[item] {
  183|  2.91k|            return interned
  184|  2.91k|        }
  185|  2.46k|        let id = itemByIntern.count
  186|  2.46k|        itemByIntern.append(item)
  187|  2.46k|        let newInterned = Interned<Item>(id: Item.Offset(id))
  188|  2.46k|        internByItem[item] = newInterned
  189|  2.46k|        return newInterned
  190|  5.37k|    }
$s7WasmKit8InternerC7resolveyxAA8InternedVyxGF:
  193|  6.86k|    func resolve(_ interned: Interned<Item>) -> Item {
  194|  6.86k|        return itemByIntern[Int(interned.id)]
  195|  6.86k|    }
$s7WasmKit14StoreAllocatorC16funcTypeInternerAcA0G0Cy0A5Types08FunctionF0VG_tcfc:
  224|  1.87k|    init(funcTypeInterner: Interner<FunctionType>) {
  225|  1.87k|        instances = BumpAllocator(initialCapacity: 2)
  226|  1.87k|        functions = BumpAllocator(initialCapacity: 64)
  227|  1.87k|        hostFunctions = BumpAllocator(initialCapacity: 32)
  228|  1.87k|        codes = BumpAllocator(initialCapacity: 64)
  229|  1.87k|        tables = BumpAllocator(initialCapacity: 2)
  230|  1.87k|        memories = BumpAllocator(initialCapacity: 2)
  231|  1.87k|        globals = BumpAllocator(initialCapacity: 256)
  232|  1.87k|        elements = BumpAllocator(initialCapacity: 2)
  233|  1.87k|        datas = BumpAllocator(initialCapacity: 64)
  234|  1.87k|        arrayAllocator = ImmutableArrayAllocator()
  235|  1.87k|        iseqAllocator = ISeqAllocator()
  236|  1.87k|        self.funcTypeInterner = funcTypeInterner
  237|  1.87k|    }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF:
  255|  1.83k|    ) throws -> InternalInstance {
  256|  1.83k|        // Step 1 of module allocation algorithm, according to Wasm 2.0 spec.
  257|  1.83k|
  258|  1.83k|        let types = module.types
  259|  1.83k|        var importedFunctions: [InternalFunction] = []
  260|  1.83k|        var importedTables: [InternalTable] = []
  261|  1.83k|        var importedMemories: [InternalMemory] = []
  262|  1.83k|        var importedGlobals: [InternalGlobal] = []
  263|  1.83k|
  264|  1.83k|        // External values imported in this module should be included in corresponding index spaces before definitions
  265|  1.83k|        // local to to the module are added.
  266|  1.83k|        for importEntry in module.imports {
  267|    167|            guard let (external, allocator) = imports.lookup(module: importEntry.module, name: importEntry.name) else {
  268|      0|                throw ImportError(.missing(moduleName: importEntry.module, externalName: importEntry.name))
  269|    167|            }
  270|    167|            guard allocator === self else {
  271|      0|                throw ImportError(.importedEntityFromDifferentStore(importEntry))
  272|    167|            }
  273|    167|
  274|    167|            switch (importEntry.descriptor, external) {
  275|    167|            case let (.function(typeIndex), .function(externalFunc)):
  276|     34|                let type = externalFunc.type
  277|     34|                guard typeIndex < module.types.count else {
  278|      0|                    throw ValidationError(.indexOutOfBounds("type", typeIndex, max: module.types.count))
  279|     34|                }
  280|     34|                let expected = module.types[Int(typeIndex)]
  281|     34|                guard engine.internType(expected) == type else {
  282|      0|                    let actual = engine.resolveType(type)
  283|      0|                    throw ImportError(.incompatibleFunctionType(importEntry, actual: actual, expected: expected))
  284|     34|                }
  285|     34|                importedFunctions.append(externalFunc)
  286|    167|
  287|    167|            case let (.table(tableType), .table(table)):
  288|     22|                if let max = table.limits.max, max < tableType.limits.min {
  289|      2|                    throw ImportError(.incompatibleTableType(importEntry, actual: tableType, expected: table.tableType))
  290|     20|                }
  291|     20|                importedTables.append(table)
  292|    167|
  293|    167|            case let (.memory(memoryType), .memory(memory)):
  294|     83|                if let max = memory.limit.max, max < memoryType.min {
  295|      0|                    throw ImportError(.incompatibleMemoryType(importEntry, actual: memoryType, expected: memory.limit))
  296|     83|                }
  297|     83|                importedMemories.append(memory)
  298|    167|
  299|    167|            case let (.global(globalType), .global(global)):
  300|     24|                guard globalType == global.globalType else {
  301|      2|                    throw ImportError(.incompatibleGlobalType(importEntry, actual: global.globalType, expected: globalType))
  302|     22|                }
  303|     22|                importedGlobals.append(global)
  304|    167|
  305|    167|            default:
  306|      4|                throw ImportError(.incompatibleType(importEntry, entity: external))
  307|    167|            }
  308|  1.83k|        }
  309|  1.83k|
  310|  1.83k|        func allocateEntities<EntityHandle, Internals: Collection>(
  311|  1.83k|            imports: [EntityHandle],
  312|  1.83k|            internals: Internals, allocateHandle: (Internals.Element, Int) throws -> EntityHandle
  313|  1.83k|        ) rethrows -> ImmutableArray<EntityHandle> {
  314|  1.83k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  1.83k|                for (index, importedEntity) in imports.enumerated() {
  316|  1.83k|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  1.83k|                }
  318|  1.83k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  1.83k|                    let index = imports.count + internalIndex
  320|  1.83k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  1.83k|                    buffer.initializeElement(at: index, to: allocated)
  322|  1.83k|                }
  323|  1.83k|            }
  324|  1.83k|        }
  325|  1.83k|
  326|  1.83k|        // Uninitialized instance
  327|  1.83k|        let instancePointer = instances.allocate()
  328|  1.83k|        var instanceInitialized = false
  329|  1.83k|        defer {
  330|  1.83k|            // If the instance is not initialized due to an exception, initialize it with an empty instance
  331|  1.83k|            // to allow bump deallocation by the bump allocator.
  332|  1.83k|            // This is not optimal as it leaves an empty instance without deallocating the space but
  333|  1.83k|            // good at code simplicity.
  334|  1.83k|            if !instanceInitialized {
  335|  1.83k|                instancePointer.initialize(to: .empty)
  336|  1.83k|            }
  337|  1.83k|        }
  338|  1.83k|        let instanceHandle = InternalInstance(unsafe: instancePointer)
  339|  1.83k|
  340|  1.83k|        // Step 2.
  341|  1.83k|        let functions = allocateEntities(
  342|  1.83k|            imports: importedFunctions,
  343|  1.83k|            internals: module.functions,
  344|  1.83k|            allocateHandle: { f, index in
  345|  1.83k|                allocate(function: f, index: FunctionIndex(index), instance: instanceHandle, engine: engine)
  346|  1.83k|            }
  347|  1.83k|        )
  348|  1.83k|
  349|  1.83k|        // Step 3.
  350|  1.83k|        let tables = try allocateEntities(
  351|  1.83k|            imports: importedTables,
  352|  1.83k|            internals: module.internalTables,
  353|  1.83k|            allocateHandle: { t, _ in try allocate(tableType: t, resourceLimiter: resourceLimiter) }
  354|  1.83k|        )
  355|  1.82k|
  356|  1.82k|        // Step 4.
  357|  1.82k|        let memories = try allocateEntities(
  358|  1.82k|            imports: importedMemories,
  359|  1.82k|            internals: module.internalMemories,
  360|  1.82k|            allocateHandle: { m, _ in try allocate(memoryType: m, resourceLimiter: resourceLimiter) }
  361|  1.82k|        )
  362|  1.82k|
  363|  1.82k|        var functionRefs: Set<InternalFunction> = []
  364|  1.82k|        // Step 5.
  365|  1.82k|        let constEvalContext = ConstEvaluationContext(
  366|  1.82k|            functions: functions,
  367|  1.82k|            globals: importedGlobals.map(\.value),
  368|  1.82k|            onFunctionReferenced: { function in
  369|  1.82k|                functionRefs.insert(function)
  370|  1.82k|            }
  371|  1.82k|        )
  372|  1.82k|
  373|  1.82k|        let globals = try allocateEntities(
  374|  1.82k|            imports: importedGlobals,
  375|  1.82k|            internals: module.globals,
  376|  1.82k|            allocateHandle: { global, _ in
  377|  1.82k|                let initialValue = try global.initializer.evaluate(
  378|  1.82k|                    context: constEvalContext, expectedType: global.type.valueType
  379|  1.82k|                )
  380|  1.82k|                return try allocate(globalType: global.type, initialValue: initialValue)
  381|  1.82k|            }
  382|  1.82k|        )
  383|  1.79k|
  384|  1.79k|        // Step 6.
  385|  1.79k|        let elements = try ImmutableArray<InternalElementSegment>(allocator: arrayAllocator, count: module.elements.count) { buffer in
  386|  1.79k|            for (index, element) in module.elements.enumerated() {
  387|  1.79k|                // TODO: Avoid evaluating element expr twice in `Module.instantiate` and here.
  388|  1.79k|                var references = try element.evaluateInits(context: constEvalContext)
  389|  1.79k|                switch element.mode {
  390|  1.79k|                case .active, .declarative:
  391|  1.79k|                    // active & declarative segments are unavailable at runtime
  392|  1.79k|                    references = []
  393|  1.79k|                case .passive: break
  394|  1.79k|                }
  395|  1.79k|                let handle = allocate(elementType: element.type, references: references)
  396|  1.79k|                buffer.initializeElement(at: index, to: handle)
  397|  1.79k|            }
  398|  1.79k|        }
  399|  1.74k|
  400|  1.74k|        // Step 13.
  401|  1.74k|        let dataSegments = ImmutableArray<InternalDataSegment>(allocator: arrayAllocator, count: module.data.count) { buffer in
  402|  1.74k|            for (index, datum) in module.data.enumerated() {
  403|  1.74k|                let segment: InternalDataSegment
  404|  1.74k|                switch datum {
  405|  1.74k|                case let .passive(bytes):
  406|  1.74k|                    segment = allocate(bytes: bytes)
  407|  1.74k|                case .active:
  408|  1.74k|                    // Active segments are copied into memories while instantiation
  409|  1.74k|                    // They are semantically dropped after instantiation, so we don't
  410|  1.74k|                    // need them at runtime
  411|  1.74k|                    segment = allocate(bytes: [])
  412|  1.74k|                }
  413|  1.74k|                buffer.initializeElement(at: index, to: segment)
  414|  1.74k|            }
  415|  1.74k|        }
  416|  1.74k|
  417|  1.74k|        func createExportValue(_ export: WasmParser.Export) throws -> InternalExternalValue {
  418|  1.74k|            switch export.descriptor {
  419|  1.74k|            case let .function(index):
  420|  1.74k|                let handle = try functions[validating: Int(index)]
  421|  1.74k|                return .function(handle)
  422|  1.74k|            case let .table(index):
  423|  1.74k|                let handle = try tables[validating: Int(index)]
  424|  1.74k|                return .table(handle)
  425|  1.74k|            case let .memory(index):
  426|  1.74k|                let handle = try memories[validating: Int(index)]
  427|  1.74k|                return .memory(handle)
  428|  1.74k|            case let .global(index):
  429|  1.74k|                let handle = try globals[validating: Int(index)]
  430|  1.74k|                return .global(handle)
  431|  1.74k|            }
  432|  1.74k|        }
  433|  1.74k|
  434|  1.74k|        let exports: [String: InternalExternalValue] = try module.exports.reduce(into: [:]) { result, export in
  435|  1.74k|            guard result[export.name] == nil else {
  436|  1.74k|                throw ValidationError(.duplicateExportName(name: export.name))
  437|  1.74k|            }
  438|  1.74k|            result[export.name] = try createExportValue(export)
  439|  1.74k|        }
  440|  1.74k|
  441|  1.74k|        // Steps 20-21.
  442|  1.74k|        let instanceEntity = InstanceEntity(
  443|  1.74k|            types: types,
  444|  1.74k|            functions: functions,
  445|  1.74k|            tables: tables,
  446|  1.74k|            memories: memories,
  447|  1.74k|            globals: globals,
  448|  1.74k|            elementSegments: elements,
  449|  1.74k|            dataSegments: dataSegments,
  450|  1.74k|            exports: exports,
  451|  1.74k|            functionRefs: functionRefs,
  452|  1.74k|            features: module.features,
  453|  1.74k|            dataCount: module.dataCount
  454|  1.74k|        )
  455|  1.74k|        instancePointer.initialize(to: instanceEntity)
  456|  1.74k|        instanceInitialized = true
  457|  1.74k|        return instanceHandle
  458|  1.83k|    }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0E8EntitiesL_AH9internals0eL0AA14ImmutableArrayVyxGSayxG_q_x7ElementQy__SitKXEtKSlR_r0_lF:
  313|  7.31k|        ) rethrows -> ImmutableArray<EntityHandle> {
  314|  7.31k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  7.31k|                for (index, importedEntity) in imports.enumerated() {
  316|  7.31k|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  7.31k|                }
  318|  7.31k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  7.31k|                    let index = imports.count + internalIndex
  320|  7.31k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  7.31k|                    buffer.initializeElement(at: index, to: allocated)
  322|  7.31k|                }
  323|  7.31k|            }
  324|  7.31k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0E8EntitiesL_AH9internals0eL0AA14ImmutableArrayVyxGSayxG_q_x7ElementQy__SitKXEtKSlR_r0_lFySryxGKXEfU_:
  314|  7.31k|            return try ImmutableArray<EntityHandle>(allocator: arrayAllocator, count: imports.count + internals.count) { buffer in
  315|  7.31k|                for (index, importedEntity) in imports.enumerated() {
  316|    152|                    buffer.initializeElement(at: index, to: importedEntity)
  317|  7.31k|                }
  318|  13.8k|                for (internalIndex, internalEntity) in internals.enumerated() {
  319|  13.8k|                    let index = imports.count + internalIndex
  320|  13.8k|                    let allocated = try allocateHandle(internalEntity, index)
  321|  13.8k|                    buffer.initializeElement(at: index, to: allocated)
  322|  13.8k|                }
  323|  7.28k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAA16InternalFunctionVAA05GuestS0V_SitXEfU_:
  344|  5.10k|            allocateHandle: { f, index in
  345|  5.10k|                allocate(function: f, index: FunctionIndex(index), instance: instanceHandle, engine: engine)
  346|  5.10k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA05TableK0VG0A6Parser0R4TypeV_SitKXEfU0_:
  353|    283|            allocateHandle: { t, _ in try allocate(tableType: t, resourceLimiter: resourceLimiter) }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA06MemoryK0VG0A6Parser6LimitsV_SitKXEfU1_:
  360|    904|            allocateHandle: { m, _ in try allocate(memoryType: m, resourceLimiter: resourceLimiter) }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF0A5Types5ValueOAJyAA06GlobalK0VGcfu_:
  367|     18|            globals: importedGlobals.map(\.value),
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFyAA16InternalFunctionVcfU2_:
  368|     13|            onFunctionReferenced: { function in
  369|     13|                functionRefs.insert(function)
  370|     13|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFAJyAA06GlobalK0VG0A6Parser0R0V_SitKXEfU3_:
  376|  7.55k|            allocateHandle: { global, _ in
  377|  7.55k|                let initialValue = try global.initializer.evaluate(
  378|  7.55k|                    context: constEvalContext, expectedType: global.type.valueType
  379|  7.55k|                )
  380|  7.52k|                return try allocate(globalType: global.type, initialValue: initialValue)
  381|  7.55k|            }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySryAJyAA014ElementSegmentK0VGGKXEfU4_:
  385|  1.79k|        let elements = try ImmutableArray<InternalElementSegment>(allocator: arrayAllocator, count: module.elements.count) { buffer in
  386|  1.79k|            for (index, element) in module.elements.enumerated() {
  387|    154|                // TODO: Avoid evaluating element expr twice in `Module.instantiate` and here.
  388|    154|                var references = try element.evaluateInits(context: constEvalContext)
  389|    107|                switch element.mode {
  390|    107|                case .active, .declarative:
  391|     92|                    // active & declarative segments are unavailable at runtime
  392|     92|                    references = []
  393|    107|                case .passive: break
  394|    107|                }
  395|    107|                let handle = allocate(elementType: element.type, references: references)
  396|    107|                buffer.initializeElement(at: index, to: handle)
  397|  1.74k|            }
  398|  1.74k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySryAJyAA011DataSegmentK0VGGXEfU5_:
  401|  1.74k|        let dataSegments = ImmutableArray<InternalDataSegment>(allocator: arrayAllocator, count: module.data.count) { buffer in
  402|  1.74k|            for (index, datum) in module.data.enumerated() {
  403|     43|                let segment: InternalDataSegment
  404|     43|                switch datum {
  405|     43|                case let .passive(bytes):
  406|      9|                    segment = allocate(bytes: bytes)
  407|     43|                case .active:
  408|     34|                    // Active segments are copied into memories while instantiation
  409|     34|                    // They are semantically dropped after instantiation, so we don't
  410|     34|                    // need them at runtime
  411|     34|                    segment = allocate(bytes: [])
  412|     43|                }
  413|     43|                buffer.initializeElement(at: index, to: segment)
  414|  1.74k|            }
  415|  1.74k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKF17createExportValueL_yAA016InternalExternalT0O0A6Parser0S0VKF:
  417|  1.03k|        func createExportValue(_ export: WasmParser.Export) throws -> InternalExternalValue {
  418|  1.03k|            switch export.descriptor {
  419|  1.03k|            case let .function(index):
  420|    111|                let handle = try functions[validating: Int(index)]
  421|    109|                return .function(handle)
  422|  1.03k|            case let .table(index):
  423|     18|                let handle = try tables[validating: Int(index)]
  424|     17|                return .table(handle)
  425|  1.03k|            case let .memory(index):
  426|     93|                let handle = try memories[validating: Int(index)]
  427|     92|                return .memory(handle)
  428|  1.03k|            case let .global(index):
  429|    812|                let handle = try globals[validating: Int(index)]
  430|    809|                return .global(handle)
  431|  1.03k|            }
  432|  1.03k|        }
$s7WasmKit14StoreAllocatorC8allocate6module6engine15resourceLimiter7importsAA12EntityHandleVyAA08InstanceK0VGAA6ModuleV_AA6EngineCAA08ResourceI0_pAA7ImportsVtKFySDySSAA21InternalExternalValueOGz_0A6Parser6ExportVtKXEfU6_:
  434|  1.03k|        let exports: [String: InternalExternalValue] = try module.exports.reduce(into: [:]) { result, export in
  435|  1.03k|            guard result[export.name] == nil else {
  436|      2|                throw ValidationError(.duplicateExportName(name: export.name))
  437|  1.03k|            }
  438|  1.03k|            result[export.name] = try createExportValue(export)
  439|  1.02k|        }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL8function5index8instance6engineAA16InternalFunctionVAA05GuestQ0V_s6UInt32VAA12EntityHandleVyAA08InstanceT0VGAA6EngineCtF:
  467|  5.10k|    ) -> InternalFunction {
  468|  5.10k|        let code = InternalUncompiledCode(unsafe: codes.allocate(initializing: function.code))
  469|  5.10k|        let pointer = functions.allocate(
  470|  5.10k|            initializing: WasmFunctionEntity(
  471|  5.10k|                index: index, type: engine.internType(function.type),
  472|  5.10k|                code: code,
  473|  5.10k|                instance: instance
  474|  5.10k|            )
  475|  5.10k|        )
  476|  5.10k|        return InternalFunction.wasm(EntityHandle(unsafe: pointer))
  477|  5.10k|    }
$s7WasmKit14StoreAllocatorC8allocate4type14implementation6engineAA16InternalFunctionV0A5Types0J4TypeV_SayAJ5ValueOGAA6CallerV_AOtKcAA6EngineCtF:
  483|     35|    ) -> InternalFunction {
  484|     35|        let pointer = hostFunctions.allocate(
  485|     35|            initializing: HostFunctionEntity(
  486|     35|                type: engine.internType(type), implementation: implementation
  487|     35|            )
  488|     35|        )
  489|     35|        return InternalFunction.host(EntityHandle(unsafe: pointer))
  490|     35|    }
$s7WasmKit14StoreAllocatorC8allocate9tableType15resourceLimiterAA12EntityHandleVyAA05TableJ0VG0A6Parser0lG0V_AA08ResourceI0_ptKF:
  494|    318|    func allocate(tableType: TableType, resourceLimiter: any ResourceLimiter) throws -> InternalTable {
  495|    318|        let pointer = try tables.allocate(initializing: TableEntity(tableType, resourceLimiter: resourceLimiter))
  496|    315|        return InternalTable(unsafe: pointer)
  497|    318|    }
$s7WasmKit14StoreAllocatorC8allocate10memoryType15resourceLimiterAA12EntityHandleVyAA06MemoryJ0VG0A6Parser6LimitsV_AA08ResourceI0_ptKF:
  501|  1.00k|    func allocate(memoryType: MemoryType, resourceLimiter: any ResourceLimiter) throws -> InternalMemory {
  502|  1.00k|        let pointer = try memories.allocate(initializing: MemoryEntity(memoryType, resourceLimiter: resourceLimiter))
  503|  1.00k|        return InternalMemory(unsafe: pointer)
  504|  1.00k|    }
$s7WasmKit14StoreAllocatorC8allocate10globalType12initialValueAA12EntityHandleVyAA06GlobalJ0VG0A6Parser0lG0V_0A5Types0I0OtKF:
  508|  7.56k|    func allocate(globalType: GlobalType, initialValue: Value) throws -> InternalGlobal {
  509|  7.56k|        let pointer = try globals.allocate(initializing: GlobalEntity(globalType: globalType, initialValue: initialValue))
  510|  7.56k|        return InternalGlobal(unsafe: pointer)
  511|  7.56k|    }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL11elementType10referencesAA12EntityHandleVyAA014ElementSegmentO0VG0A5Types09ReferenceM0O_SayAM0T0OGtF:
  515|    107|    private func allocate(elementType: ReferenceType, references: [Reference]) -> InternalElementSegment {
  516|    107|        let pointer = elements.allocate(initializing: ElementSegmentEntity(type: elementType, references: references))
  517|    107|        return InternalElementSegment(unsafe: pointer)
  518|    107|    }
$s7WasmKit14StoreAllocatorC8allocate33_8EACE635DD16791045BB0F1DDDCAD7E4LL5bytesAA12EntityHandleVyAA011DataSegmentM0VGs10ArraySliceVys5UInt8VG_tF:
  522|     43|    private func allocate(bytes: ArraySlice<UInt8>) -> InternalDataSegment {
  523|     43|        let pointer = datas.allocate(initializing: DataSegmentEntity(data: bytes))
  524|     43|        return EntityHandle(unsafe: pointer)
  525|     43|    }

$s7WasmKit12UntypedValueV7defaultACvgZ:
   13|   585k|    static var `default`: UntypedValue {
   14|   585k|        UntypedValue(storage: 0)
   15|   585k|    }
$s7WasmKit12UntypedValueV17isNullMaskPattern33_659430D1A12A457F633FD7DBB171E78ALLs6UInt64VvgZ:
   18|  3.77k|    private static var isNullMaskPattern: UInt64 { (0x1 << 63) }
$s7WasmKit12UntypedValueV6signedACs5Int32V_tcfC:
   21|   241k|    init(signed value: Int32) {
   22|   241k|        self = .i32(UInt32(bitPattern: value))
   23|   241k|    }
$s7WasmKit12UntypedValueV6signedACs5Int64V_tcfC:
   26|   646k|    init(signed value: Int64) {
   27|   646k|        self = .i64(UInt64(bitPattern: value))
   28|   646k|    }
$s7WasmKit12UntypedValueV3i32yACs6UInt32VFZ:
   32|  1.57M|    static func i32(_ value: UInt32) -> UntypedValue {
   33|  1.57M|        return UntypedValue(storage: UInt64(value))
   34|  1.57M|    }
$s7WasmKit12UntypedValueV3i64yACs6UInt64VFZ:
   35|  1.92M|    static func i64(_ value: UInt64) -> UntypedValue {
   36|  1.92M|        return UntypedValue(storage: value)
   37|  1.92M|    }
$s7WasmKit12UntypedValueV6rawF32yACs6UInt32VFZ:
   38|   290k|    static func rawF32(_ value: UInt32) -> UntypedValue {
   39|   290k|        return UntypedValue(storage: UInt64(value))
   40|   290k|    }
$s7WasmKit12UntypedValueV6rawF64yACs6UInt64VFZ:
   41|   925k|    static func rawF64(_ value: UInt64) -> UntypedValue {
   42|   925k|        return UntypedValue(storage: value)
   43|   925k|    }
$s7WasmKit12UntypedValueV3f32yACSfFZ:
   44|   279k|    static func f32(_ value: Float32) -> UntypedValue {
   45|   279k|        return rawF32(value.bitPattern)
   46|   279k|    }
$s7WasmKit12UntypedValueV3f64yACSdFZ:
   47|   613k|    static func f64(_ value: Float64) -> UntypedValue {
   48|   613k|        return rawF64(value.bitPattern)
   49|   613k|    }
$s7WasmKit12UntypedValueV9storage32ACs6UInt32V_tcfC:
   53|  22.2k|    init(storage32: UInt32) {
   54|  22.2k|        self.storage = UInt64(storage32)
   55|  22.2k|    }
$s7WasmKit12UntypedValueV7storageACs6UInt64V_tcfC:
   58|  8.33M|    init(storage: UInt64) {
   59|  8.33M|        self.storage = storage
   60|  8.33M|    }
$s7WasmKit12UntypedValueVyAC0A5Types0D0OcfC:
   63|   610k|    init(_ value: Value) {
   64|   610k|        func encodeOptionalInt(_ value: Int?) -> UInt64 {
   65|   610k|            guard let value = value else { return Self.isNullMaskPattern }
   66|   610k|            let unsigned = UInt64(bitPattern: Int64(value))
   67|   610k|            // Check if the value does not exceed the 63-bits limit.
   68|   610k|            precondition(unsigned & Self.isNullMaskPattern == 0)
   69|   610k|            return unsigned
   70|   610k|        }
   71|   610k|        switch value {
   72|   610k|        case .i32(let value): self = .i32(value)
   73|   610k|        case .i64(let value): self = .i64(value)
   74|   610k|        case .f32(let value): self = .rawF32(value)
   75|   610k|        case .f64(let value): self = .rawF64(value)
   76|   610k|        case .ref(.function(let value)), .ref(.extern(let value)):
   77|  3.77k|            storage = encodeOptionalInt(value)
   78|   610k|        }
   79|   610k|    }
$s7WasmKit12UntypedValueVyAC0A5Types0D0Ocfc17encodeOptionalIntL_ys6UInt64VSiSgF:
   64|  3.77k|        func encodeOptionalInt(_ value: Int?) -> UInt64 {
   65|  3.77k|            guard let value = value else { return Self.isNullMaskPattern }
   66|      8|            let unsigned = UInt64(bitPattern: Int64(value))
   67|      8|            // Check if the value does not exceed the 63-bits limit.
   68|      8|            precondition(unsigned & Self.isNullMaskPattern == 0)
   69|      8|            return unsigned
   70|  3.77k|        }
$s7WasmKit12UntypedValueVyAC0A5Types0D0Ocfc17encodeOptionalIntL_ys6UInt64VSiSgFSbyXEfu_:
   68|      8|            precondition(unsigned & Self.isNullMaskPattern == 0)
$s7WasmKit12UntypedValueV3i32s6UInt32Vvg:
   83|   136k|    var i32: UInt32 {
   84|   136k|        return UInt32(truncatingIfNeeded: storage & 0x0000_0000_ffff_ffff)
   85|   136k|    }
$s7WasmKit12UntypedValueV3i64s6UInt64Vvg:
   87|  2.76M|    var i64: UInt64 {
   88|  2.76M|        return storage
   89|  2.76M|    }
$s7WasmKit12UntypedValueV6rawF32s6UInt32Vvg:
   91|  1.51k|    var rawF32: UInt32 {
   92|  1.51k|        return i32
   93|  1.51k|    }
$s7WasmKit12UntypedValueV15asAddressOffsets6UInt64VyF:
  126|  1.29M|    func asAddressOffset() -> UInt64 {
  127|  1.29M|        // NOTE: It's ok to load address offset as i64 because
  128|  1.29M|        //       it's always evaluated as unsigned and the higher
  129|  1.29M|        //       32-bits of i32 are always zero.
  130|  1.29M|        return i64
  131|  1.29M|    }
$s7WasmKit12UntypedValueV4cast2to0A5Types0D0OAF0D4TypeO_tF:
  139|     36|    func cast(to type: ValueType) -> Value {
  140|     36|        switch type {
  141|     36|        case .i32: return .i32(i32)
  142|     36|        case .i64: return .i64(i64)
  143|     36|        case .f32: return .f32(rawF32)
  144|     36|        case .f64: return .f64(rawF64)
  145|     36|        case .v128:
  146|      0|            fatalError("v128 value type is not supported yet.")
  147|     36|        case .ref(let referenceType):
  148|      0|            return .ref(asReference(referenceType))
  149|     36|        }
  150|      0|    }

$s9WasmTypes5ValueO0A3KitE18maybeAddressOffsetys6UInt64VSgSbF:
   10|      5|    func maybeAddressOffset(_ isMemory64: Bool) -> UInt64? {
   11|      5|        switch (isMemory64, self) {
   12|      5|        case (true, .i64(let value)): return value
   13|      5|        case (false, .i32(let value)): return UInt64(value)
   14|      5|        default: return nil
   15|      5|        }
   16|      5|    }
$s7WasmKit18RawUnsignedIntegerPAAE6signed6SignedQzvg:
   63|   308k|    var signed: Signed {
   64|   308k|        .init(bitPattern: self)
   65|   308k|    }
$s7WasmKit16RawSignedIntegerPAAE8unsigned8UnsignedQzvg:
   69|   517k|    var unsigned: Unsigned {
   70|   517k|        .init(bitPattern: self)
   71|   517k|    }
$s9WasmTypes9ValueTypeO0A3KitE07addressD010isMemory64ACSb_tFZ:
   94|    765|    static func addressType(isMemory64: Bool) -> ValueType {
   95|    765|        return isMemory64 ? .i64 : .i32
   96|    765|    }
$ss17FixedWidthIntegerP7WasmKitE3addyxxF:
  102|  8.12k|    func add(_ other: Self) -> Self { self &+ other }
$ss17FixedWidthIntegerP7WasmKitE3subyxxF:
  103|   184k|    func sub(_ other: Self) -> Self { self &- other }
$ss17FixedWidthIntegerP7WasmKitE3mulyxxF:
  104|  9.38k|    func mul(_ other: Self) -> Self { self &* other }
$ss17FixedWidthIntegerP7WasmKitE2eqys6UInt32VxF:
  105|  13.8k|    func eq(_ other: Self) -> UInt32 { self == other ? 1 : 0 }
$ss17FixedWidthIntegerP7WasmKitE2neys6UInt32VxF:
  106|  7.34k|    func ne(_ other: Self) -> UInt32 { self == other ? 0 : 1 }
$ss17FixedWidthIntegerP7WasmKitE3andyxxF:
  107|  6.59k|    func and(_ other: Self) -> Self { self & other }
$ss17FixedWidthIntegerP7WasmKitE2oryxxF:
  108|   159k|    func or(_ other: Self) -> Self { self | other }
$ss17FixedWidthIntegerP7WasmKitE3xoryxxF:
  109|  9.36k|    func xor(_ other: Self) -> Self { self ^ other }
$ss17FixedWidthIntegerP7WasmKitE3clzxvg:
  111|   242k|    var clz: Self { Self(leadingZeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE3ctzxvg:
  112|  10.8k|    var ctz: Self { Self(trailingZeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE6popcntxvg:
  113|  97.2k|    var popcnt: Self { Self(nonzeroBitCount) }
$ss17FixedWidthIntegerP7WasmKitE3eqzs6UInt32Vvg:
  114|  13.4k|    var eqz: UInt32 { self == 0 ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3ltSys6UInt32VxF:
  118|  9.13k|    func ltS(_ other: Self) -> UInt32 { self.signed < other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3ltUys6UInt32VxF:
  119|  7.88k|    func ltU(_ other: Self) -> UInt32 { self < other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3gtSys6UInt32VxF:
  120|  9.23k|    func gtS(_ other: Self) -> UInt32 { self.signed > other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3gtUys6UInt32VxF:
  121|  4.60k|    func gtU(_ other: Self) -> UInt32 { self > other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3leSys6UInt32VxF:
  122|  6.85k|    func leS(_ other: Self) -> UInt32 { self.signed <= other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3leUys6UInt32VxF:
  123|  7.85k|    func leU(_ other: Self) -> UInt32 { self <= other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3geSys6UInt32VxF:
  124|  6.50k|    func geS(_ other: Self) -> UInt32 { self.signed >= other.signed ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3geUys6UInt32VxF:
  125|  10.9k|    func geU(_ other: Self) -> UInt32 { self >= other ? 1 : 0 }
$s7WasmKit18RawUnsignedIntegerPAAE3shlyxxF:
  127|  11.0k|    func shl(_ other: Self) -> Self {
  128|  11.0k|        let shift = other % Self(Self.bitWidth)
  129|  11.0k|        return self << shift
  130|  11.0k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4shrSyxxF:
  131|  51.8k|    func shrS(_ other: Self) -> Self {
  132|  51.8k|        let shift = other % Self(Self.bitWidth)
  133|  51.8k|        return (self.signed >> shift).unsigned
  134|  51.8k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4shrUyxxF:
  135|  15.2k|    func shrU(_ other: Self) -> Self {
  136|  15.2k|        let shift = other % Self(Self.bitWidth)
  137|  15.2k|        return self >> shift
  138|  15.2k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4rotlyxxF:
  139|  8.54k|    func rotl(_ other: Self) -> Self {
  140|  8.54k|        let shift = other % Self(Self.bitWidth)
  141|  8.54k|        return self << shift | self >> (Self(Self.bitWidth) - shift)
  142|  8.54k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4rotryxxF:
  143|  11.4k|    func rotr(_ other: Self) -> Self {
  144|  11.4k|        let shift = other % Self(Self.bitWidth)
  145|  11.4k|        return self >> shift | self << (Self(Self.bitWidth) - shift)
  146|  11.4k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4divSyxxKF:
  148|  23.3k|    func divS(_ other: Self) throws -> Self {
  149|  23.3k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  150|  23.3k|        let (signed, overflow) = signed.dividedReportingOverflow(by: other.signed)
  151|  23.3k|        guard !overflow else { throw Trap(.integerOverflow) }
  152|  23.3k|        return signed.unsigned
  153|  23.3k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4divUyxxKF:
  154|  6.99k|    func divU(_ other: Self) throws -> Self {
  155|  6.99k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  156|  6.99k|        let (unsigned, overflow) = dividedReportingOverflow(by: other)
  157|  6.99k|        guard !overflow else { throw Trap(.integerOverflow) }
  158|  6.99k|        return unsigned
  159|  6.99k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4remSyxxKF:
  160|  8.81k|    func remS(_ other: Self) throws -> Self {
  161|  8.81k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  162|  8.81k|        let (signed, overflow) = signed.remainderReportingOverflow(dividingBy: other.signed)
  163|  8.81k|        guard !overflow else { return 0 }
  164|  8.81k|        return signed.unsigned
  165|  8.81k|    }
$s7WasmKit18RawUnsignedIntegerPAAE4remUyxxKF:
  166|  26.5k|    func remU(_ other: Self) throws -> Self {
  167|  26.5k|        if _slowPath(other == 0) { throw Trap(.integerDividedByZero) }
  168|  26.5k|        let (unsigned, overflow) = remainderReportingOverflow(dividingBy: other)
  169|  26.5k|        guard !overflow else { throw Trap(.integerOverflow) }
  170|  26.5k|        return unsigned
  171|  26.5k|    }
$ss6UInt32V7WasmKitE10extendI32Ss6UInt64Vvg:
  175|  4.10k|    var extendI32S: UInt64 {
  176|  4.10k|        return UInt64(bitPattern: Int64(signed))
  177|  4.10k|    }
$ss6UInt32V7WasmKitE10extendI32Us6UInt64Vvg:
  178|  21.7k|    var extendI32U: UInt64 {
  179|  21.7k|        return UInt64(self)
  180|  21.7k|    }
$ss6UInt32V7WasmKitE13convertToF32SSfvg:
  181|  8.47k|    var convertToF32S: Float32 { Float32(signed) }
$ss6UInt32V7WasmKitE13convertToF32USfvg:
  182|  14.7k|    var convertToF32U: Float32 { Float32(self) }
$ss6UInt32V7WasmKitE13convertToF64SSdvg:
  183|  4.43k|    var convertToF64S: Float64 { Float64(signed) }
$ss6UInt32V7WasmKitE13convertToF64USdvg:
  184|  17.8k|    var convertToF64U: Float64 { Float64(self) }
$ss6UInt32V7WasmKitE16reinterpretToF32Sfvg:
  185|  66.3k|    var reinterpretToF32: Float32 { Float32(bitPattern: self) }
$s7WasmKit18RawUnsignedIntegerPAAE8extend8Sxvg:
  189|   153k|    var extend8S: Self {
  190|   153k|        return Self(bitPattern: Self.Signed(Int8(truncatingIfNeeded: self)))
  191|   153k|    }
$s7WasmKit18RawUnsignedIntegerPAAE9extend16Sxvg:
  192|  47.1k|    var extend16S: Self {
  193|  47.1k|        return Self(bitPattern: Self.Signed(Int16(truncatingIfNeeded: self)))
  194|  47.1k|    }
$ss6UInt64V7WasmKitE9extend32SABvg:
  198|  22.4k|    var extend32S: UInt64 {
  199|  22.4k|        return UInt64(bitPattern: Int64(Int32(truncatingIfNeeded: self)))
  200|  22.4k|    }
$ss6UInt64V7WasmKitE13convertToF32SSfvg:
  201|   103k|    var convertToF32S: Float32 { Float32(signed) }
$ss6UInt64V7WasmKitE13convertToF32USfvg:
  202|  23.3k|    var convertToF32U: Float32 { Float32(self) }
$ss6UInt64V7WasmKitE13convertToF64SSdvg:
  203|  7.75k|    var convertToF64S: Float64 { Float64(signed) }
$ss6UInt64V7WasmKitE13convertToF64USdvg:
  204|  13.4k|    var convertToF64U: Float64 { Float64(self) }
$ss6UInt64V7WasmKitE16reinterpretToF64Sdvg:
  205|   276k|    var reinterpretToF64: Float64 { Float64(bitPattern: self) }
$ss6UInt64V7WasmKitE4wraps6UInt32Vvg:
  209|  29.2k|    var wrap: UInt32 {
  210|  29.2k|        return UInt32(truncatingIfNeeded: self)
  211|  29.2k|    }
$sSF7WasmKitE3addyxxF:
  215|  3.16k|    func add(_ other: Self) -> Self { self + other }
$sSF7WasmKitE3subyxxF:
  216|  5.19k|    func sub(_ other: Self) -> Self { self - other }
$sSF7WasmKitE3mulyxxF:
  217|  3.91k|    func mul(_ other: Self) -> Self { self * other }
$sSF7WasmKitE3divyxxF:
  218|  4.71k|    func div(_ other: Self) -> Self { self / other }
$sSF7WasmKitE3minyxxF:
  219|  4.93k|    func min(_ other: Self) -> Self {
  220|  4.93k|        guard !isNaN && !other.isNaN else {
  221|      0|            return .nan
  222|  4.93k|        }
  223|  4.93k|        // min(0.0, -0.0) returns 0.0 in Swift, but wasm expects to return -0.0
  224|  4.93k|        // spec: https://webassembly.github.io/spec/core/exec/numerics.html#op-fmin
  225|  4.93k|        if self.isZero, self == other {
  226|  2.86k|            return self.sign == .minus ? self : other
  227|  2.86k|        }
  228|  2.07k|        return Swift.min(self, other)
  229|  4.93k|    }
$sSF7WasmKitE3minyxxFSbyKXEfu_:
  220|  4.93k|        guard !isNaN && !other.isNaN else {
$sSF7WasmKitE3maxyxxF:
  230|  7.08k|    func max(_ other: Self) -> Self {
  231|  7.08k|        guard !isNaN && !other.isNaN else {
  232|      0|            return .nan
  233|  7.08k|        }
  234|  7.08k|        //  max(-0.0, 0.0) returns -0.0 in Swift, but wasm expects to return 0.0
  235|  7.08k|        // spec: https://webassembly.github.io/spec/core/exec/numerics.html#op-fmax
  236|  7.08k|        if self.isZero, self == other {
  237|  3.15k|            return self.sign == .plus ? self : other
  238|  3.93k|        }
  239|  3.93k|        return Swift.max(self, other)
  240|  7.08k|    }
$sSF7WasmKitE3maxyxxFSbyKXEfu_:
  231|  7.08k|        guard !isNaN && !other.isNaN else {
$sSF7WasmKitE2eqys6UInt32VxF:
  244|  6.84k|    func eq(_ other: Self) -> UInt32 { self == other ? 1 : 0 }
$sSF7WasmKitE2neys6UInt32VxF:
  245|  5.21k|    func ne(_ other: Self) -> UInt32 { self == other ? 0 : 1 }
$sSF7WasmKitE2ltys6UInt32VxF:
  246|  4.02k|    func lt(_ other: Self) -> UInt32 { self < other ? 1 : 0 }
$sSF7WasmKitE2gtys6UInt32VxF:
  247|  8.58k|    func gt(_ other: Self) -> UInt32 { self > other ? 1 : 0 }
$sSF7WasmKitE2leys6UInt32VxF:
  248|  8.30k|    func le(_ other: Self) -> UInt32 { self <= other ? 1 : 0 }
$sSF7WasmKitE2geys6UInt32VxF:
  249|  4.25k|    func ge(_ other: Self) -> UInt32 { self >= other ? 1 : 0 }
$sSF7WasmKitE3absxvg:
  251|  6.63k|    var abs: Self { Swift.abs(self) }
$sSF7WasmKitE3negxvg:
  252|  11.2k|    var neg: Self { -self }
$sSF7WasmKitE4ceilxvg:
  253|  22.6k|    var ceil: Self { self.rounded(.up) }
$sSF7WasmKitE5floorxvg:
  254|   108k|    var floor: Self { self.rounded(.down) }
$sSF7WasmKitE5truncxvg:
  255|   143k|    var trunc: Self { self.rounded(.towardZero) }
$sSF7WasmKitE7nearestxvg:
  256|  20.6k|    var nearest: Self { self.rounded(.toNearestOrEven) }
$sSF7WasmKitE4sqrtxvg:
  257|  9.35k|    var sqrt: Self { self.squareRoot() }
$sSF7WasmKitE7truncTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lF:
  265|   310k|    ) throws -> T {
  266|   310k|        guard !self.isNaN else { throw Trap(.invalidConversionToInteger) }
  267|   310k|        if self <= min || self >= max {
  268|      6|            throw Trap(.integerOverflow)
  269|   310k|        }
  270|   310k|        return rounding(self)
  271|   310k|    }
$sSF7WasmKitE7truncTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lFSbyKXEfu_:
  267|   310k|        if self <= min || self >= max {
$sSF7WasmKitE10truncSatTo33_B0C98B8FF72C70E8770D0F3B19594F54LL8rounding3max3minqd__qd__xXE_xxtKs17FixedWidthIntegerRd__lF:
  276|   330k|    ) throws -> T {
  277|   330k|        guard !self.isNaN else { return .zero }
  278|   328k|        if self <= min {
  279|  2.79k|            return .min
  280|   325k|        } else if self >= max {
  281|  3.84k|            return .max
  282|   321k|        }
  283|   321k|        return rounding(self)
  284|   330k|    }
$sSf7WasmKitE11truncToI32Ss6UInt32Vvg:
  289|  4.45k|        get throws {
  290|  4.45k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
  291|  4.45k|        }
$sSf7WasmKitE11truncToI32Ss6UInt32Vvgs5Int32VSfXEfU_:
  290|  4.45k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
$sSf7WasmKitE11truncToI64Ss6UInt64Vvg:
  294|  2.88k|        get throws {
  295|  2.88k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
  296|  2.88k|        }
$sSf7WasmKitE11truncToI64Ss6UInt64Vvgs5Int64VSfXEfU_:
  295|  2.88k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
$sSf7WasmKitE11truncToI32Us6UInt32Vvg:
  299|  4.19k|        get throws {
  300|  4.19k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  301|  4.19k|        }
$sSf7WasmKitE11truncToI32Us6UInt32VvgADSfXEfU_:
  300|  4.19k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSf7WasmKitE11truncToI64Us6UInt64Vvg:
  304|  19.4k|        get throws {
  305|  19.4k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  306|  19.4k|        }
$sSf7WasmKitE11truncToI64Us6UInt64VvgADSfXEfU_:
  305|  19.4k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSf7WasmKitE14truncSatToI32Ss6UInt32Vvg:
  309|  8.86k|        get throws {
  310|  8.86k|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
  311|  8.86k|        }
$sSf7WasmKitE14truncSatToI32Ss6UInt32Vvgs5Int32VSfXEfU_:
  310|  3.40k|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483904.0).unsigned
$sSf7WasmKitE14truncSatToI64Ss6UInt64Vvg:
  314|  5.17k|        get throws {
  315|  5.17k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
  316|  5.17k|        }
$sSf7WasmKitE14truncSatToI64Ss6UInt64Vvgs5Int64VSfXEfU_:
  315|  5.17k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223373136366403584.0).unsigned
$sSf7WasmKitE14truncSatToI32Us6UInt32Vvg:
  319|  5.87k|        get throws {
  320|  5.87k|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  321|  5.87k|        }
$sSf7WasmKitE14truncSatToI32Us6UInt32VvgADSfXEfU_:
  320|  3.61k|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSf7WasmKitE14truncSatToI64Us6UInt64Vvg:
  324|  3.59k|        get throws {
  325|  3.59k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  326|  3.59k|        }
$sSf7WasmKitE14truncSatToI64Us6UInt64VvgADSfXEfU_:
  325|  3.06k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSf7WasmKitE10promoteF32Sdvg:
  328|  4.46k|    var promoteF32: Float64 { Float64(self) }
$sSf7WasmKitE16reinterpretToI32s6UInt32Vvg:
  329|  3.05k|    var reinterpretToI32: UInt32 { bitPattern }
$sSd7WasmKitE11truncToI32Ss6UInt32Vvg:
  333|  10.4k|        get throws {
  334|  10.4k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
  335|  10.4k|        }
$sSd7WasmKitE11truncToI32Ss6UInt32Vvgs5Int32VSdXEfU_:
  334|  10.4k|            return try truncTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
$sSd7WasmKitE11truncToI64Ss6UInt64Vvg:
  338|  3.68k|        get throws {
  339|  3.68k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
  340|  3.68k|        }
$sSd7WasmKitE11truncToI64Ss6UInt64Vvgs5Int64VSdXEfU_:
  339|  3.68k|            return try truncTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
$sSd7WasmKitE11truncToI32Us6UInt32Vvg:
  343|   262k|        get throws {
  344|   262k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  345|   262k|        }
$sSd7WasmKitE11truncToI32Us6UInt32VvgADSdXEfU_:
  344|   262k|            return try truncTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSd7WasmKitE11truncToI64Us6UInt64Vvg:
  348|  3.36k|        get throws {
  349|  3.36k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  350|  3.36k|        }
$sSd7WasmKitE11truncToI64Us6UInt64VvgADSdXEfU_:
  349|  3.35k|            return try truncTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSd7WasmKitE14truncSatToI32Ss6UInt32Vvg:
  353|      1|        get throws {
  354|      1|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
  355|      1|        }
$sSd7WasmKitE14truncSatToI32Ss6UInt32Vvgs5Int32VSdXEfU_:
  354|      1|            return try truncSatTo(rounding: { Int32($0) }, max: 2147483648.0, min: -2147483649.0).unsigned
$sSd7WasmKitE14truncSatToI64Ss6UInt64Vvg:
  358|   285k|        get throws {
  359|   285k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
  360|   285k|        }
$sSd7WasmKitE14truncSatToI64Ss6UInt64Vvgs5Int64VSdXEfU_:
  359|   285k|            return try truncSatTo(rounding: { Int64($0) }, max: 9223372036854775808.0, min: -9223372036854777856.0).unsigned
$sSd7WasmKitE14truncSatToI32Us6UInt32Vvg:
  363|    587|        get throws {
  364|    587|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
  365|    587|        }
$sSd7WasmKitE14truncSatToI32Us6UInt32VvgADSdXEfU_:
  364|    587|            return try truncSatTo(rounding: { UInt32($0) }, max: 4294967296.0, min: -1.0)
$sSd7WasmKitE14truncSatToI64Us6UInt64Vvg:
  368|  20.6k|        get throws {
  369|  20.6k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
  370|  20.6k|        }
$sSd7WasmKitE14truncSatToI64Us6UInt64VvgADSdXEfU_:
  369|  20.6k|            return try truncSatTo(rounding: { UInt64($0) }, max: 18446744073709551616.0, min: -1.0)
$sSd7WasmKitE9demoteF64Sfvg:
  372|      1|    var demoteF64: Float32 { Float32(self) }
$sSd7WasmKitE16reinterpretToI64s6UInt64Vvg:
  373|  1.09k|    var reinterpretToI64: UInt64 { bitPattern }

$s7WasmKit7ImportsV11definitions33_6D96F85BFFF5D538ECAADDF4180F550ALLSDySSSDySSAA13ExternalValueOGGvpfi:
   26|  1.87k|    private var definitions: [String: [String: ExternalValue]] = [:]
$s7WasmKit7ImportsVACycfC:
   29|  1.87k|    public init() {
   30|  1.87k|    }
$s7WasmKit7ImportsV6define6module4name_ySS_SSxtAA24ExternalValueConvertibleRzlF:
   33|    211|    public mutating func define<Extern: ExternalValueConvertible>(module: String, name: String, _ value: Extern) {
   34|    211|        definitions[module, default: [:]][name] = value.externalValue
   35|    211|    }
$s7WasmKit7ImportsV6define6module4name_ySS_SSxtAA24ExternalValueConvertibleRzlFSDySSAA0gH0OGyXEfu_:
   34|    172|        definitions[module, default: [:]][name] = value.externalValue
$s7WasmKit7ImportsV6lookup6module4nameAA21InternalExternalValueO_AA14StoreAllocatorCtSgSS_SStF:
   50|    167|    func lookup(module: String, name: String) -> (InternalExternalValue, StoreAllocator)? {
   51|    167|        definitions[module]?[name]?.internalize()
   52|    167|    }
$s7WasmKit13ExternalValueO08externalD0ACvg:
   61|    211|    public var externalValue: ExternalValue { self }
$s7WasmKit6MemoryV13externalValueAA08ExternalE0Ovg:
   65|    101|    public var externalValue: ExternalValue { .memory(self) }
$s7WasmKit5TableV13externalValueAA08ExternalE0Ovg:
   69|     34|    public var externalValue: ExternalValue { .table(self) }
$s7WasmKit6GlobalV13externalValueAA08ExternalE0Ovg:
   73|     41|    public var externalValue: ExternalValue { .global(self) }
$s7WasmKit8FunctionV13externalValueAA08ExternalE0Ovg:
   77|     35|    public var externalValue: ExternalValue { .function(self) }

$s7WasmKit13ModuleImportsV5build4from19functionTypeIndices11globalTypes06memoryK005tableK0ACSay0A6Parser6ImportVG_Says6UInt32VGzSayAJ06GlobalH0VGzSayAJ6LimitsVGzSayAJ05TableH0VGztFZ:
   15|  1.87k|    ) -> ModuleImports {
   16|  1.87k|        var numberOfFunctions: Int = 0
   17|  1.87k|        var numberOfGlobals: Int = 0
   18|  1.87k|        var numberOfMemories: Int = 0
   19|  1.87k|        var numberOfTables: Int = 0
   20|  1.87k|        for item in imports {
   21|    238|            switch item.descriptor {
   22|    238|            case .function(let typeIndex):
   23|     47|                numberOfFunctions += 1
   24|     47|                functionTypeIndices.append(typeIndex)
   25|    238|            case .table(let tableType):
   26|     35|                numberOfTables += 1
   27|     35|                tableTypes.append(tableType)
   28|    238|            case .memory(let memoryType):
   29|    105|                numberOfMemories += 1
   30|    105|                memoryTypes.append(memoryType)
   31|    238|            case .global(let globalType):
   32|     51|                numberOfGlobals += 1
   33|     51|                globalTypes.append(globalType)
   34|    238|            }
   35|  1.87k|        }
   36|  1.87k|        return ModuleImports(
   37|  1.87k|            numberOfFunctions: numberOfFunctions,
   38|  1.87k|            numberOfGlobals: numberOfGlobals,
   39|  1.87k|            numberOfMemories: numberOfMemories,
   40|  1.87k|            numberOfTables: numberOfTables
   41|  1.87k|        )
   42|  1.87k|    }
$s7WasmKit6ModuleV5types9functions8elements4data5start7imports7exports7globals8memories6tables14customSections8features0G5CountACSay0A5Types12FunctionTypeVG_SayAA05GuestS0VGSay0A6Parser14ElementSegmentVGSayAX04DataX0OGs6UInt32VSgSayAX6ImportVGSayAX6ExportVGSayAX6GlobalVGSayAX6LimitsVGSayAX05TableT0VGSayAX13CustomSectionVGAX0A10FeatureSetVA5_tcfC:
   81|  1.87k|    ) {
   82|  1.87k|        self.functions = functions
   83|  1.87k|        self.elements = elements
   84|  1.87k|        self.data = data
   85|  1.87k|        self.start = start
   86|  1.87k|        self.imports = imports
   87|  1.87k|        self.exports = exports
   88|  1.87k|        self.globals = globals
   89|  1.87k|        self.customSections = customSections
   90|  1.87k|        self.features = features
   91|  1.87k|        self.dataCount = dataCount
   92|  1.87k|
   93|  1.87k|        var importedFunctionTypes: [TypeIndex] = []
   94|  1.87k|        var globalTypes: [GlobalType] = []
   95|  1.87k|        var memoryTypes: [MemoryType] = []
   96|  1.87k|        var tableTypes: [TableType] = []
   97|  1.87k|
   98|  1.87k|        self.moduleImports = ModuleImports.build(
   99|  1.87k|            from: imports,
  100|  1.87k|            functionTypeIndices: &importedFunctionTypes,
  101|  1.87k|            globalTypes: &globalTypes,
  102|  1.87k|            memoryTypes: &memoryTypes,
  103|  1.87k|            tableTypes: &tableTypes
  104|  1.87k|        )
  105|  1.87k|        self.types = types
  106|  1.87k|        self.importedFunctionTypes = importedFunctionTypes
  107|  1.87k|        self.memoryTypes = memoryTypes + memories
  108|  1.87k|        self.tableTypes = tableTypes + tables
  109|  1.87k|    }
$s7WasmKit6ModuleV11resolveType_11typeSection0A5Types08FunctionE0Vs6UInt32V_SayAHGtKFZ:
  111|  5.14k|    static func resolveType(_ index: TypeIndex, typeSection: [FunctionType]) throws -> FunctionType {
  112|  5.14k|        guard Int(index) < typeSection.count else {
  113|      2|            throw TranslationError("Type index \(index) is out of range")
  114|  5.14k|        }
  115|  5.14k|        return typeSection[Int(index)]
  116|  5.14k|    }
$s7WasmKit6ModuleV19resolveFunctionTypey0A5Types0eF0Vs6UInt32VKF:
  118|    619|    internal func resolveFunctionType(_ index: FunctionIndex) throws -> FunctionType {
  119|    619|        guard Int(index) < functions.count + self.moduleImports.numberOfFunctions else {
  120|      3|            throw TranslationError("Function index \(index) is out of range")
  121|    616|        }
  122|    616|        if Int(index) < self.moduleImports.numberOfFunctions {
  123|      0|            return try Self.resolveType(
  124|      0|                importedFunctionTypes[Int(index)],
  125|      0|                typeSection: types
  126|      0|            )
  127|    616|        }
  128|    616|        return functions[Int(index) - self.moduleImports.numberOfFunctions].type
  129|    619|    }
$s7WasmKit6ModuleV11instantiate5store7importsAA8InstanceVAA5StoreC_AA7ImportsVtKF:
  137|  1.85k|    public func instantiate(store: Store, imports: Imports = [:]) throws -> Instance {
  138|  1.85k|        Instance(handle: try self.instantiateHandle(store: store, imports: imports), store: store)
  139|     65|    }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKF:
  143|  1.85k|    private func instantiateHandle(store: Store, imports: Imports) throws -> InternalInstance {
  144|  1.85k|        try ModuleValidator(module: self).validate()
  145|  1.83k|
  146|  1.83k|        // Steps 5-8.
  147|  1.83k|
  148|  1.83k|        // Step 9.
  149|  1.83k|        // Process `elem.init` evaluation during allocation
  150|  1.83k|
  151|  1.83k|        // Step 11.
  152|  1.83k|        let instance = try store.allocator.allocate(
  153|  1.83k|            module: self, engine: store.engine,
  154|  1.83k|            resourceLimiter: store.resourceLimiter,
  155|  1.83k|            imports: imports
  156|  1.83k|        )
  157|  1.74k|
  158|  1.74k|        if let nameSection = customSections.first(where: { $0.name == "name" }) {
  159|      0|            // FIXME?: Just ignore parsing error of name section for now.
  160|      0|            // Should emit warning instead of just discarding it?
  161|      0|            try? store.nameRegistry.register(instance: instance, nameSection: nameSection)
  162|      0|        }
  163|  1.74k|
  164|  1.74k|        let constEvalContext = ConstEvaluationContext(instance: instance, moduleImports: moduleImports)
  165|  1.74k|        // Step 12-13.
  166|  1.74k|
  167|  1.74k|        // Steps 14-15.
  168|  1.74k|        for element in elements {
  169|     45|            guard case let .active(tableIndex, offset) = element.mode else { continue }
  170|     14|            let table = try instance.tables[validating: Int(tableIndex)]
  171|      0|            let offsetValue = try offset.evaluate(
  172|      0|                context: constEvalContext,
  173|      0|                expectedType: .addressType(isMemory64: table.limits.isMemory64)
  174|      0|            )
  175|      0|            try table.withValue { table in
  176|      0|                guard let offset = offsetValue.maybeAddressOffset(table.limits.isMemory64) else {
  177|      0|                    throw ValidationError(
  178|      0|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: table.limits.isMemory64), got: offsetValue)
  179|      0|                    )
  180|      0|                }
  181|      0|                guard table.tableType.elementType == element.type else {
  182|      0|                    throw ValidationError(
  183|      0|                        .elementSegmentTypeMismatch(
  184|      0|                            elementType: element.type,
  185|      0|                            tableElementType: table.tableType.elementType
  186|      0|                        )
  187|      0|                    )
  188|      0|                }
  189|      0|                let references = try element.evaluateInits(context: constEvalContext)
  190|      0|                try table.initialize(
  191|      0|                    references, from: 0, to: Int(offset), count: references.count
  192|      0|                )
  193|      0|            }
  194|  1.72k|        }
  195|  1.72k|
  196|  1.72k|        // Step 16.
  197|  1.72k|        for case let .active(data) in data {
  198|     21|            let memory = try instance.memories[validating: Int(data.index)]
  199|     13|            let offsetValue = try data.offset.evaluate(
  200|     13|                context: constEvalContext,
  201|     13|                expectedType: .addressType(isMemory64: memory.limit.isMemory64)
  202|     13|            )
  203|     12|            try memory.withValue { memory in
  204|     12|                guard let offset = offsetValue.maybeAddressOffset(memory.limit.isMemory64) else {
  205|     12|                    throw ValidationError(
  206|     12|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: memory.limit.isMemory64), got: offsetValue)
  207|     12|                    )
  208|     12|                }
  209|     12|                try memory.write(offset: Int(offset), bytes: data.initializer)
  210|     12|            }
  211|  1.71k|        }
  212|  1.71k|
  213|  1.71k|        // Step 17.
  214|  1.71k|        if let startIndex = start {
  215|    614|            let startFunction = try instance.functions[validating: Int(startIndex)]
  216|    614|            _ = try startFunction.invoke([], store: store)
  217|  1.11k|        }
  218|  1.11k|
  219|  1.11k|        // Compile all functions eagerly if the engine is in eager compilation mode
  220|  1.11k|        if store.engine.configuration.compilationMode == .eager {
  221|  1.11k|            try instance.withValue {
  222|  1.11k|                try $0.compileAllFunctions(store: store)
  223|  1.11k|            }
  224|     65|        }
  225|     65|
  226|     65|        return instance
  227|  1.85k|    }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFSb0A6Parser13CustomSectionVXEfU_:
  158|    469|        if let nameSection = customSections.first(where: { $0.name == "name" }) {
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFyAA06MemoryR0VzKXEfU1_:
  203|      5|            try memory.withValue { memory in
  204|      5|                guard let offset = offsetValue.maybeAddressOffset(memory.limit.isMemory64) else {
  205|      0|                    throw ValidationError(
  206|      0|                        .unexpectedOffsetInitializer(expected: .addressType(isMemory64: memory.limit.isMemory64), got: offsetValue)
  207|      0|                    )
  208|      5|                }
  209|      5|                try memory.write(offset: Int(offset), bytes: data.initializer)
  210|      4|            }
$s7WasmKit6ModuleV17instantiateHandle33_9D7B6AF9E60BD2C9958AA3A316E12A98LL5store7importsAA06EntityE0VyAA08InstanceR0VGAA5StoreC_AA7ImportsVtKFyAKzKXEfU2_:
  221|  1.11k|            try instance.withValue {
  222|  1.11k|                try $0.compileAllFunctions(store: store)
  223|     65|            }
$s7WasmKit6ModuleV16internalMemoriess10ArraySliceVy0A6Parser6LimitsVGvg:
  235|  1.82k|    var internalMemories: ArraySlice<MemoryType> {
  236|  1.82k|        return memoryTypes[moduleImports.numberOfMemories...]
  237|  1.82k|    }
$s7WasmKit6ModuleV14internalTabless10ArraySliceVy0A6Parser9TableTypeVGvg:
  238|  1.83k|    var internalTables: ArraySlice<TableType> {
  239|  1.83k|        return tableTypes[moduleImports.numberOfTables...]
  240|  1.83k|    }

$s7WasmKit05parseA05bytes8featuresAA6ModuleVSays5UInt8VG_0A6Parser0A10FeatureSetVtKF:
   28|  4.08k|public func parseWasm(bytes: [UInt8], features: WasmFeatureSet = .default) throws -> Module {
   29|  4.08k|    let stream = StaticByteStream(bytes: bytes)
   30|  4.08k|    let module = try parseModule(stream: stream, features: features)
   31|  1.87k|    return module
   32|  4.08k|}
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlF:
   36|  4.08k|func parseModule<Stream: ByteStream>(stream: Stream, features: WasmFeatureSet = .default) throws -> Module {
   37|  4.08k|    var types: [FunctionType] = []
   38|  4.08k|    var typeIndices: [TypeIndex] = []
   39|  4.08k|    var codes: [Code] = []
   40|  4.08k|    var tables: [TableType] = []
   41|  4.08k|    var memories: [MemoryType] = []
   42|  4.08k|    var globals: [WasmParser.Global] = []
   43|  4.08k|    var elements: [ElementSegment] = []
   44|  4.08k|    var data: [DataSegment] = []
   45|  4.08k|    var start: FunctionIndex?
   46|  4.08k|    var imports: [Import] = []
   47|  4.08k|    var exports: [Export] = []
   48|  4.08k|    var customSections: [CustomSection] = []
   49|  4.08k|    var dataCount: UInt32?
   50|  4.08k|
   51|  4.08k|    var parser = WasmParser.Parser<Stream>(
   52|  4.08k|        stream: stream, features: features
   53|  4.08k|    )
   54|  4.08k|
   55|  14.9k|    while let payload = try parser.parseNext() {
   56|  14.9k|        switch payload {
   57|  14.9k|        case .header: break
   58|  14.9k|        case .customSection(let customSection):
   59|    788|            customSections.append(customSection)
   60|  14.9k|        case .typeSection(let typeSection):
   61|  1.77k|            types = typeSection
   62|  14.9k|        case .importSection(let importSection):
   63|  1.11k|            imports = importSection
   64|  14.9k|        case .functionSection(let types):
   65|  1.73k|            typeIndices = types
   66|  14.9k|        case .tableSection(let tableSection):
   67|    314|            tables = tableSection.map(\.type)
   68|  14.9k|        case .memorySection(let memorySection):
   69|    949|            memories = memorySection.map(\.type)
   70|  14.9k|        case .globalSection(let globalSection):
   71|  1.42k|            globals = globalSection
   72|  14.9k|        case .exportSection(let exportSection):
   73|    337|            exports = exportSection
   74|  14.9k|        case .startSection(let functionIndex):
   75|    623|            start = functionIndex
   76|  14.9k|        case .elementSection(let elementSection):
   77|     65|            elements = elementSection
   78|  14.9k|        case .codeSection(let codeSection):
   79|  1.71k|            codes = codeSection
   80|  14.9k|        case .dataSection(let dataSection):
   81|     20|            data = dataSection
   82|  14.9k|        case .dataCount(let count):
   83|      7|            dataCount = count
   84|  14.9k|        }
   85|  14.9k|    }
   86|  1.87k|
   87|  1.87k|    guard typeIndices.count == codes.count else {
   88|      2|        throw ValidationError(
   89|      2|            .inconsistentFunctionAndCodeLength(
   90|      2|                functionCount: typeIndices.count,
   91|      2|                codeCount: codes.count
   92|      2|            ))
   93|  1.87k|    }
   94|  1.87k|
   95|  1.87k|    if let dataCount = dataCount, dataCount != UInt32(data.count) {
   96|      3|        throw ValidationError(
   97|      3|            .inconsistentDataCountAndDataSectionLength(
   98|      3|                dataCount: dataCount,
   99|      3|                dataSection: data.count
  100|      3|            ))
  101|  1.87k|    }
  102|  1.87k|
  103|  1.87k|    let functions = try codes.enumerated().map { index, code in
  104|  1.87k|        // SAFETY: The number of typeIndices is guaranteed to be the same as the number of codes
  105|  1.87k|        let funcTypeIndex = typeIndices[index]
  106|  1.87k|        let funcType = try Module.resolveType(funcTypeIndex, typeSection: types)
  107|  1.87k|        return GuestFunction(
  108|  1.87k|            type: funcType,
  109|  1.87k|            code: code
  110|  1.87k|        )
  111|  1.87k|    }
  112|  1.87k|
  113|  1.87k|    return Module(
  114|  1.87k|        types: types,
  115|  1.87k|        functions: functions,
  116|  1.87k|        elements: elements,
  117|  1.87k|        data: data,
  118|  1.87k|        start: start,
  119|  1.87k|        imports: imports,
  120|  1.87k|        exports: exports,
  121|  1.87k|        globals: globals,
  122|  1.87k|        memories: memories,
  123|  1.87k|        tables: tables,
  124|  1.87k|        customSections: customSections,
  125|  1.87k|        features: features,
  126|  1.87k|        dataCount: dataCount
  127|  1.87k|    )
  128|  4.08k|}
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAG9TableTypeVAG0L0Vcfu_:
   67|    313|            tables = tableSection.map(\.type)
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAG6LimitsVAG6MemoryVcfu0_:
   69|  1.01k|            memories = memorySection.map(\.type)
$s7WasmKit11parseModule6stream8featuresAA0D0Vx_0A6Parser0A10FeatureSetVtKAG10ByteStreamRzlFAA13GuestFunctionVSi_AG4CodeVtKXEfU_:
  103|  5.14k|    let functions = try codes.enumerated().map { index, code in
  104|  5.14k|        // SAFETY: The number of typeIndices is guaranteed to be the same as the number of codes
  105|  5.14k|        let funcTypeIndex = typeIndices[index]
  106|  5.14k|        let funcType = try Module.resolveType(funcTypeIndex, typeSection: types)
  107|  5.14k|        return GuestFunction(
  108|  5.14k|            type: funcType,
  109|  5.14k|            code: code
  110|  5.14k|        )
  111|  5.14k|    }

$s7WasmKit13ISeqAllocatorC7buffers021_3C1F9FC595E9AC192A47I10B121D811E8LLSaySwGvpfi:
    6|  1.87k|    private var buffers: [UnsafeMutableRawBufferPointer] = []
$s7WasmKit13ISeqAllocatorC15allocateBrTable8capacitySryAA11InstructionO0fG7OperandV5EntryVGSi_tF:
    8|    999|    func allocateBrTable(capacity: Int) -> UnsafeMutableBufferPointer<Instruction.BrTableOperand.Entry> {
    9|    999|        assert(_isPOD(Instruction.BrTableOperand.Entry.self), "Instruction.BrTableOperand.Entry must be POD")
   10|    999|        let buffer = UnsafeMutableBufferPointer<Instruction.BrTableOperand.Entry>.allocate(capacity: capacity)
   11|    999|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   12|    999|        return buffer
   13|    999|    }
$s7WasmKit13ISeqAllocatorC15allocateBrTable8capacitySryAA11InstructionO0fG7OperandV5EntryVGSi_tFSbyXEfu_:
    9|    999|        assert(_isPOD(Instruction.BrTableOperand.Entry.self), "Instruction.BrTableOperand.Entry must be POD")
$s7WasmKit13ISeqAllocatorC17allocateConstantsySRyAA12UntypedValueVGSayAFGF:
   15|  1.32k|    func allocateConstants(_ slots: [UntypedValue]) -> UnsafeBufferPointer<UntypedValue> {
   16|  1.32k|        let buffer = UnsafeMutableBufferPointer<UntypedValue>.allocate(capacity: slots.count)
   17|  1.32k|        _ = buffer.initialize(fromContentsOf: slots)
   18|  1.32k|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   19|  1.32k|        return UnsafeBufferPointer(buffer)
   20|  1.32k|    }
$s7WasmKit13ISeqAllocatorC20allocateInstructions8capacitySrys6UInt64VGSi_tF:
   22|  1.32k|    func allocateInstructions(capacity: Int) -> UnsafeMutableBufferPointer<UInt64> {
   23|  1.32k|        assert(_isPOD(Instruction.self), "Instruction must be POD")
   24|  1.32k|        let buffer = UnsafeMutableBufferPointer<UInt64>.allocate(capacity: capacity)
   25|  1.32k|        self.buffers.append(UnsafeMutableRawBufferPointer(buffer))
   26|  1.32k|        return buffer
   27|  1.32k|    }
$s7WasmKit13ISeqAllocatorC20allocateInstructions8capacitySrys6UInt64VGSi_tFSbyXEfu_:
   23|  1.32k|        assert(_isPOD(Instruction.self), "Instruction must be POD")
$s7WasmKit13ISeqAllocatorCfd:
   29|  1.87k|    deinit {
   30|  3.64k|        for buffer in buffers {
   31|  3.64k|            buffer.deallocate()
   32|  3.64k|        }
   33|  1.87k|    }
$s7WasmKit17TranslatorContextPAAE11addressType11memoryIndex0A5Types05ValueF0Os6UInt32V_tKF:
   53|    157|    func addressType(memoryIndex: MemoryIndex) throws -> ValueType {
   54|    157|        return ValueType.addressType(isMemory64: try isMemory64(memoryIndex: memoryIndex))
   55|    157|    }
$s7WasmKit17TranslatorContextPAAE11addressType10tableIndex0A5Types05ValueF0Os6UInt32V_tKF:
   56|    611|    func addressType(tableIndex: TableIndex) throws -> ValueType {
   57|    611|        return ValueType.addressType(isMemory64: try isMemory64(tableIndex: tableIndex))
   58|    611|    }
$s7WasmKit17TranslatorContextPAAE22validateElementSegmentyys6UInt32VKF:
   59|      1|    func validateElementSegment(_ index: ElementIndex) throws {
   60|      1|        _ = try elementType(index)
   61|      0|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE11resolveTypey0A5Types08FunctionG0Vs6UInt32VKF:
   65|    316|    func resolveType(_ index: TypeIndex) throws -> FunctionType {
   66|    316|        guard Int(index) < self.types.count else {
   67|      2|            throw ValidationError(.indexOutOfBounds("type", index, max: UInt32(self.types.count)))
   68|    314|        }
   69|    314|        return self.types[Int(index)]
   70|    316|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE16resolveBlockTypey0A5Types08FunctionH0V0A6Parser0gH0OKF:
   71|  7.21k|    func resolveBlockType(_ blockType: BlockType) throws -> FunctionType {
   72|  7.21k|        try FunctionType(blockType: blockType, typeSection: self.types)
   73|  7.18k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE12functionType_8interner0A5Types08FunctionG0Vs6UInt32V_AA8InternerCyAJGtKF:
   74|  3.84k|    func functionType(_ index: FunctionIndex, interner: Interner<FunctionType>) throws -> FunctionType {
   75|  3.84k|        return try interner.resolve(self.functions[validating: Int(index)].type)
   76|  3.84k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10globalTypey0A5Types05ValueG0Os6UInt32VKF:
   77|  16.2k|    func globalType(_ index: GlobalIndex) throws -> ValueType {
   78|  16.2k|        return try self.globals[validating: Int(index)].globalType.valueType
   79|  16.2k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10isMemory6411memoryIndexSbs6UInt32V_tKF:
   80|  32.4k|    func isMemory64(memoryIndex index: MemoryIndex) throws -> Bool {
   81|  32.4k|        return try self.memories[validating: Int(index)].limit.isMemory64
   82|  32.4k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE10isMemory6410tableIndexSbs6UInt32V_tKF:
   83|    727|    func isMemory64(tableIndex index: TableIndex) throws -> Bool {
   84|    727|        return try self.tables[validating: Int(index)].limits.isMemory64
   85|    727|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9tableTypey0A6Parser05TableG0Vs6UInt32VKF:
   86|    385|    func tableType(_ index: TableIndex) throws -> TableType {
   87|    385|        return try self.tables[validating: Int(index)].tableType
   88|    385|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE11elementTypey0A5Types09ReferenceG0Os6UInt32VKF:
   89|      3|    func elementType(_ index: ElementIndex) throws -> ReferenceType {
   90|      3|        try self.elementSegments[validating: Int(index)].type
   91|      0|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE13resolveCalleeyAA16InternalFunctionVSgs6UInt32VF:
   93|  3.81k|    func resolveCallee(_ index: FunctionIndex) -> InternalFunction? {
   94|  3.81k|        return self.functions[Int(index)]
   95|  3.81k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE13resolveGlobalyACyAA0gC0VGSgs6UInt32VF:
   96|  16.1k|    func resolveGlobal(_ index: GlobalIndex) -> InternalGlobal? {
   97|  16.1k|        return self.globals[Int(index)]
   98|  16.1k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE06isSameE0ySbACyAEGF:
   99|  3.31k|    func isSameInstance(_ instance: InternalInstance) -> Bool {
  100|  3.31k|        return instance == self
  101|  3.31k|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE21validateFunctionIndexyys6UInt32VKF:
  102|     79|    func validateFunctionIndex(_ index: FunctionIndex) throws {
  103|     79|        let function = try self.functions[validating: Int(index)]
  104|     78|        guard self.functionRefs.contains(function) else {
  105|      1|            throw ValidationError(.functionIndexNotDeclared(index: index))
  106|     77|        }
  107|     77|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9dataCounts6UInt32VSgvg:
  108|      2|    var dataCount: UInt32? {
  109|      2|        self.withValue { $0.dataCount }
  110|      2|    }
$s7WasmKit12EntityHandleVA2A08InstanceC0VRszlE9dataCounts6UInt32VSgvgAiEzXEfU_:
  109|      2|        self.withValue { $0.dataCount }
$s7WasmKit17FrameHeaderLayoutV4typeAC0A5Types12FunctionTypeV_tcfC:
  212|  2.51k|    init(type: FunctionType) {
  213|  2.51k|        self.type = type
  214|  2.51k|        self.size = Self.size(of: type)
  215|  2.51k|    }
$s7WasmKit17FrameHeaderLayoutV8paramRegys5Int16VSiF:
  217|  2.95k|    func paramReg(_ index: Int) -> VReg {
  218|  2.95k|        VReg(index) - size
  219|  2.95k|    }
$s7WasmKit17FrameHeaderLayoutV9returnRegys5Int16VSiF:
  221|    407|    func returnReg(_ index: Int) -> VReg {
  222|    407|        return VReg(index) - size
  223|    407|    }
$s7WasmKit17FrameHeaderLayoutV4size2ofs5Int16V0A5Types12FunctionTypeV_tFZ:
  225|  7.25k|    internal static func size(of: FunctionType) -> VReg {
  226|  7.25k|        size(parameters: of.parameters.count, results: of.results.count)
  227|  7.25k|    }
$s7WasmKit17FrameHeaderLayoutV4size10parameters7resultss5Int16VSi_SitFZ:
  228|  7.25k|    internal static func size(parameters: Int, results: Int) -> VReg {
  229|  7.25k|        VReg(max(parameters, results)) + VReg(numberOfSavingSlots)
  230|  7.25k|    }
$s7WasmKit17FrameHeaderLayoutV19numberOfSavingSlotsSivgZ:
  232|  7.92k|    internal static var numberOfSavingSlots: Int { 3 }
$s7WasmKit11StackLayoutV12stackRegBases5Int16Vvg:
  240|  2.41k|    var stackRegBase: VReg {
  241|  2.41k|        return VReg(numberOfLocals + constantSlotSize)
  242|  2.41k|    }
$s7WasmKit11StackLayoutV4type14numberOfLocals8codeSizeAC0A5Types12FunctionTypeV_S2itKcfC:
  244|  2.41k|    init(type: FunctionType, numberOfLocals: Int, codeSize: Int) throws {
  245|  2.41k|        self.frameHeader = FrameHeaderLayout(type: type)
  246|  2.41k|        self.numberOfLocals = numberOfLocals
  247|  2.41k|        // The number of constant slots is determined by the code size
  248|  2.41k|        // This is a heuristic value to balance the fast access to constants
  249|  2.41k|        // and the size of stack frame. Cap the slot size to avoid size explosion.
  250|  2.41k|        self.constantSlotSize = min(max(codeSize / 20, 4), 128)
  251|  2.41k|        let (maxSlots, overflow) = self.constantSlotSize.addingReportingOverflow(numberOfLocals)
  252|  2.41k|        guard !overflow, maxSlots < VReg.max else {
  253|      1|            throw TranslationError("The number of constant slots overflows")
  254|  2.41k|        }
  255|  2.41k|    }
$s7WasmKit11StackLayoutV8localRegys5Int16Vs6UInt32VF:
  257|  18.1k|    func localReg(_ index: LocalIndex) -> VReg {
  258|  18.1k|        if isParameter(index) {
  259|  2.95k|            return frameHeader.paramReg(Int(index))
  260|  15.2k|        } else {
  261|  15.2k|            return VReg(index) - VReg(frameHeader.type.parameters.count)
  262|  15.2k|        }
  263|  18.1k|    }
$s7WasmKit11StackLayoutV11isParameterySbs6UInt32VF:
  265|  18.1k|    func isParameter(_ index: LocalIndex) -> Bool {
  266|  18.1k|        index < frameHeader.type.parameters.count
  267|  18.1k|    }
$s7WasmKit11StackLayoutV8constRegys5Int16VSiF:
  269|  18.2k|    func constReg(_ index: Int) -> VReg {
  270|  18.2k|        return VReg(numberOfLocals + index)
  271|  18.2k|    }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV4KindO5blockAIyx___GvgZ:
  329|  2.91k|                static var block: Kind { .block(root: false) }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9reachableSbvpfi:
  337|  9.59k|            var reachable: Bool = true
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9copyTypesSay0aI09ValueTypeOGvg:
  339|  38.9k|            var copyTypes: [ValueType] {
  340|  38.9k|                switch self.kind {
  341|  38.9k|                case .block, .if:
  342|  29.8k|                    return blockType.results
  343|  38.9k|                case .loop:
  344|  9.10k|                    return blockType.parameters
  345|  38.9k|                }
  346|  38.9k|            }
$s7WasmKit21InstructionTranslatorV12ControlStackV0E5FrameV9copyCounts6UInt16Vvg:
  347|  24.9k|            var copyCount: UInt16 {
  348|  24.9k|                return UInt16(copyTypes.count)
  349|  24.9k|            }
$s7WasmKit21InstructionTranslatorV12ControlStackV6frames021_3C1F9FC595E9AC192A47K10B121D811E8LLSayAE0E5FrameVyx__GGvpfi:
  352|  2.41k|        private var frames: [ControlFrame] = []
$s7WasmKit21InstructionTranslatorV12ControlStackV14numberOfFramesSivg:
  354|  1.35k|        var numberOfFrames: Int { frames.count }
$s7WasmKit21InstructionTranslatorV12ControlStackV9pushFrameyyAE0eH0Vyx__GF:
  356|  9.94k|        mutating func pushFrame(_ frame: ControlFrame) {
  357|  9.94k|            self.frames.append(frame)
  358|  9.94k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV8popFrameAE0eH0Vyx__GSgyF:
  360|  3.34k|        mutating func popFrame() -> ControlFrame? {
  361|  3.34k|            self.frames.popLast()
  362|  3.34k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV15markUnreachableyyKF:
  364|  24.6k|        mutating func markUnreachable() throws {
  365|  24.6k|            try setReachability(false)
  366|  24.6k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV17resetReachabilityyyKF:
  367|    361|        mutating func resetReachability() throws {
  368|    361|            try setReachability(true)
  369|    361|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV15setReachability021_3C1F9FC595E9AC192A47L10B121D811E8LLyySbKF:
  371|  24.9k|        private mutating func setReachability(_ value: Bool) throws {
  372|  24.9k|            guard !self.frames.isEmpty else {
  373|      0|                throw ValidationError(.controlStackEmpty)
  374|  24.9k|            }
  375|  24.9k|            self.frames[self.frames.count - 1].reachable = value
  376|  24.9k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV12currentFrameAE0eH0Vyx__GyKF:
  378|   215k|        func currentFrame() throws -> ControlFrame {
  379|   215k|            guard let frame = self.frames.last else {
  380|      0|                throw ValidationError(.controlStackEmpty)
  381|   215k|            }
  382|   215k|            return frame
  383|   215k|        }
$s7WasmKit21InstructionTranslatorV12ControlStackV12branchTarget13relativeDepthAE0E5FrameVyx__Gs6UInt32V_tKF:
  385|  14.5k|        func branchTarget(relativeDepth: UInt32) throws -> ControlFrame {
  386|  14.5k|            let index = frames.count - 1 - Int(relativeDepth)
  387|  14.5k|            guard frames.indices.contains(index) else {
  388|     19|                throw ValidationError(.relativeDepthOutOfRange(relativeDepth: relativeDepth))
  389|  14.5k|            }
  390|  14.5k|            return frames[index]
  391|  14.5k|        }
$s7WasmKit21InstructionTranslatorV16MetaValueOnStackO4typeAC0eF0Oyx_Gvg:
  404|   142k|        var type: MetaValue {
  405|   142k|            switch self {
  406|   142k|            case .local(let type, _): return .some(type)
  407|   142k|            case .stack(let type): return type
  408|   142k|            case .const(let type, _): return .some(type)
  409|   142k|            }
  410|   142k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV6values021_3C1F9FC595E9AC192A47K10B121D811E8LLSayAC04Metae2OnF0Oyx_GGvpfi:
  420|  2.41k|        private var values: [MetaValueOnStack] = []
$s7WasmKit21InstructionTranslatorV10ValueStackV9maxHeightSivpfi:
  422|  2.41k|        private(set) var maxHeight: Int = 0
$s7WasmKit21InstructionTranslatorV10ValueStackV6heightSivg:
  423|   691k|        var height: Int { values.count }
$s7WasmKit21InstructionTranslatorV10ValueStackV11stackLayoutAEyx_GAA0fH0V_tcfC:
  427|  2.41k|        init(stackLayout: StackLayout) {
  428|  2.41k|            self.stackRegBase = stackLayout.stackRegBase
  429|  2.41k|            self.stackLayout = stackLayout
  430|  2.41k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16V0A5Types0E4TypeOF:
  432|   139k|        mutating func push(_ value: ValueType) -> VReg {
  433|   139k|            push(.some(value))
  434|   139k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16VAC04MetaE0Oyx_GF:
  435|   140k|        mutating func push(_ value: MetaValue) -> VReg {
  436|   140k|            // Record the maximum height of the stack we have seen
  437|   140k|            maxHeight = max(maxHeight, height)
  438|   140k|            let usedRegister = self.values.count
  439|   140k|            self.values.append(.stack(value))
  440|   140k|            assert(height < UInt16.max)
  441|   140k|            return stackRegBase + VReg(usedRegister)
  442|   140k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV4pushys5Int16VAC04MetaE0Oyx_GFSbyXEfu_:
  440|   140k|            assert(height < UInt16.max)
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushLocal_6localsys6UInt32V_AC6LocalsVyx_GztKF:
  443|  9.81k|        mutating func pushLocal(_ localIndex: LocalIndex, locals: inout Locals) throws {
  444|  9.81k|            let type = try locals.type(of: localIndex)
  445|  9.81k|            self.values.append(.local(type, localIndex))
  446|  9.81k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushConst_4typeySi_0A5Types0E4TypeOtF:
  447|  22.4k|        mutating func pushConst(_ index: Int, type: ValueType) {
  448|  22.4k|            assert(index < stackLayout.constantSlotSize)
  449|  22.4k|            self.values.append(.const(type, index))
  450|  22.4k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV9pushConst_4typeySi_0A5Types0E4TypeOtFSbyXEfu_:
  448|  22.4k|            assert(index < stackLayout.constantSlotSize)
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveLocalsOnF0ySays5Int16VGs6UInt32VF:
  451|  9.12k|        mutating func preserveLocalsOnStack(_ localIndex: LocalIndex) -> [VReg] {
  452|  9.12k|            var copyTo: [VReg] = []
  453|  24.2k|            for i in 0..<values.count {
  454|  24.2k|                guard case .local(let type, localIndex) = self.values[i] else { continue }
  455|  1.34k|                self.values[i] = .stack(.some(type))
  456|  1.34k|                copyTo.append(stackRegBase + VReg(i))
  457|  9.12k|            }
  458|  9.12k|            return copyTo
  459|  9.12k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveLocalsOnF05depthSays6UInt32V6source_s5Int16V2totGSi_tF:
  461|  20.9k|        mutating func preserveLocalsOnStack(depth: Int) -> [(source: LocalIndex, to: VReg)] {
  462|  20.9k|            var copies: [(source: LocalIndex, to: VReg)] = []
  463|  26.5k|            for offset in 0..<min(depth, self.values.count) {
  464|  26.5k|                let valueIndex = self.values.count - 1 - offset
  465|  26.5k|                let value = self.values[valueIndex]
  466|  26.5k|                guard case .local(let type, let localIndex) = value else { continue }
  467|    518|                self.values[valueIndex] = .stack(.some(type))
  468|    518|                copies.append((localIndex, self.stackRegBase + VReg(valueIndex)))
  469|  20.9k|            }
  470|  20.9k|            return copies
  471|  20.9k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV016preserveConstsOnF05depthSays5Int16V6source_AI2totGSi_tF:
  473|  16.8k|        mutating func preserveConstsOnStack(depth: Int) -> [(source: VReg, to: VReg)] {
  474|  16.8k|            var copies: [(source: VReg, to: VReg)] = []
  475|  16.8k|            for offset in 0..<min(depth, self.values.count) {
  476|  5.06k|                let valueIndex = self.values.count - 1 - offset
  477|  5.06k|                let value = self.values[valueIndex]
  478|  5.06k|                guard case .const(let type, let index) = value else { continue }
  479|  1.14k|                self.values[valueIndex] = .stack(.some(type))
  480|  1.14k|                copies.append((stackLayout.constReg(index), self.stackRegBase + VReg(valueIndex)))
  481|  16.8k|            }
  482|  16.8k|            return copies
  483|  16.8k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV8peekType5depthAC04MetaE0Oyx_GSi_tF:
  489|    383|        func peekType(depth: Int) -> MetaValue {
  490|    383|            return self.values[height - 1 - depth].type
  491|    383|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV04makeE6Source021_3C1F9FC595E9AC192A47L10B121D811E8LLyAC0eH0Oyx_GAC04Metae2OnF0Oyx_GF:
  493|   142k|        private func makeValueSource(_ value: MetaValueOnStack) -> ValueSource {
  494|   142k|            let source: ValueSource
  495|   142k|            switch value {
  496|   142k|            case .local(_, let localIndex):
  497|  7.17k|                source = .local(localIndex)
  498|   142k|            case .stack:
  499|   117k|                source = .vreg(stackRegBase + VReg(height))
  500|   142k|            case .const(let type, let index):
  501|  17.9k|                source = .const(index, type)
  502|   142k|            }
  503|   142k|            return source
  504|   142k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV3popAC04MetaE0Oyx_G_AC0E6SourceOyx_GtyKF:
  506|   142k|        mutating func pop() throws -> (MetaValue, ValueSource) {
  507|   142k|            guard let value = self.values.popLast() else {
  508|      2|                throw TranslationError("Expected a value on stack but it's empty")
  509|   142k|            }
  510|   142k|            let source = makeValueSource(value)
  511|   142k|            return (value.type, source)
  512|   142k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV3popyAC0E6SourceOyx_G0A5Types0E4TypeOKF:
  513|   142k|        mutating func pop(_ expected: ValueType) throws -> ValueSource {
  514|   142k|            let (value, register) = try pop()
  515|   142k|            switch value {
  516|   142k|            case .some(let actual):
  517|   141k|                guard actual == expected else {
  518|    411|                    throw TranslationError("Expected \(expected) on the stack top but got \(actual)")
  519|    411|                }
  520|   142k|            case .unknown: break  // OK
  521|   142k|            }
  522|   141k|            return register
  523|   142k|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV6popRefAC0E6SourceOyx_GyKF:
  524|     27|        mutating func popRef() throws -> ValueSource {
  525|     27|            let (value, register) = try pop()
  526|     25|            switch value {
  527|     25|            case .some(let actual):
  528|     15|                guard case .ref = actual else {
  529|      5|                    throw TranslationError("Expected reference value on the stack top but got \(actual)")
  530|      5|                }
  531|     25|            case .unknown: break  // OK
  532|     25|            }
  533|     20|            return register
  534|     27|        }
$s7WasmKit21InstructionTranslatorV10ValueStackV8truncate6heightySi_tKF:
  535|  24.6k|        mutating func truncate(height: Int) throws {
  536|  24.6k|            guard height <= self.height else {
  537|      0|                throw TranslationError("Truncating to \(height) but the stack height is \(self.height)")
  538|  24.6k|            }
  539|  49.4k|            while height != self.height {
  540|  24.8k|                guard self.values.popLast() != nil else {
  541|      0|                    throw TranslationError("Internal consistency error: Stack height is \(self.height) but failed to pop")
  542|  24.8k|                }
  543|  24.8k|            }
  544|  24.6k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV9LabelUserV11descriptionSSvg:
  573|     19|            var description: String {
  574|     19|                "LabelUser:\(sourceLine)"
  575|     19|            }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6labelsSayAF10LabelEntryOyx__GGvpfi:
  588|  2.41k|        private var labels: [LabelEntry] = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV14unpinnedLabelsShySiGvpfi:
  589|  2.41k|        private var unpinnedLabels: Set<LabelRef> = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12instructionsSays6UInt64VGvpfi:
  590|  2.41k|        private var instructions: [UInt64] = []
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV11insertingPCAA18MetaProgramCounterAELLVvg:
  592|   178k|        fileprivate var insertingPC: MetaProgramCounter {
  593|   178k|            MetaProgramCounter(offsetFromHead: instructions.count)
  594|   178k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV19engineConfigurationAFyx_GAA06EngineQ0V_tcfC:
  597|  2.41k|        init(engineConfiguration: EngineConfiguration) {
  598|  2.41k|            self.engineConfiguration = engineConfiguration
  599|  2.41k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV20assertDanglingLabelsyyKF:
  601|  1.33k|        func assertDanglingLabels() throws {
  602|  1.33k|            for ref in unpinnedLabels {
  603|    139|                let label = labels[ref]
  604|    139|                switch label {
  605|    139|                case .unpinned(let users):
  606|    139|                    guard !users.isEmpty else { continue }
  607|      6|                    throw TranslationError("Internal consistency error: Label (#\(ref)) is used but not pinned at finalization-time: \(users)")
  608|    139|                case .pinned: break  // unreachable in theory
  609|    139|                }
  610|  1.32k|            }
  611|  1.32k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV5traceyySSyXKF:
  613|   505k|        func trace(_ message: @autoclosure () -> String) {
  614|       |            #if WASMKIT_TRANSLATOR_TRACE
  615|       |                print(message())
  616|       |            #endif
  617|   505k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6assign2at_ySi_AA0C0OtF:
  619|  6.09k|        private mutating func assign(at index: Int, _ instruction: Instruction) {
  620|  6.09k|            trace("assign: \(instruction)")
  621|  6.09k|            let headSlot = instruction.headSlot(threadingModel: engineConfiguration.threadingModel)
  622|  6.09k|            trace("        [\(index)] = 0x\(String(headSlot, radix: 16))")
  623|  6.09k|            self.instructions[index] = headSlot
  624|  6.09k|            if let immediate = instruction.rawImmediate {
  625|  6.09k|                var slots: [CodeSlot] = []
  626|  6.09k|                immediate.emit(to: { slots.append($0) })
  627|  6.11k|                for (i, slot) in slots.enumerated() {
  628|  6.11k|                    let slotIndex = index + 1 + i
  629|  6.11k|                    trace("        [\(slotIndex)] = 0x\(String(slot, radix: 16))")
  630|  6.11k|                    self.instructions[slotIndex] = slot
  631|  6.11k|                }
  632|  6.09k|            }
  633|  6.09k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV6assign2at_ySi_AA0C0OtFys6UInt64VcfU_:
  626|  6.11k|                immediate.emit(to: { slots.append($0) })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV17resetLastEmissionyyF:
  635|   164k|        mutating func resetLastEmission() {
  636|   164k|            lastEmission = nil
  637|   164k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV010relinkLastC6ResultySbs5Int16VF:
  639|    789|        mutating func relinkLastInstructionResult(_ newResult: VReg) -> Bool {
  640|    789|            guard let lastEmission = self.lastEmission,
  641|    789|                let resultRelink = lastEmission.resultRelink
  642|    789|            else { return false }
  643|    565|            let newInstruction = resultRelink(newResult)
  644|    565|            assign(at: lastEmission.position.offsetFromHead, newInstruction)
  645|    565|            resetLastEmission()
  646|    565|            return true
  647|    789|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8emitSlotyys6UInt64VF:
  649|   334k|        private mutating func emitSlot(_ codeSlot: CodeSlot) {
  650|   334k|            trace("emitSlot[\(instructions.count)]: 0x\(String(codeSlot, radix: 16))")
  651|   334k|            self.instructions.append(codeSlot)
  652|   334k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8finalizeSays6UInt64VGyF:
  660|  1.32k|        func finalize() -> [UInt64] {
  661|  1.32k|            return instructions
  662|  1.32k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV4emit_12resultRelinkyAA0C0O_AJs5Int16VcSgtF:
  664|   153k|        mutating func emit(_ instruction: Instruction, resultRelink: ResultRelink? = nil) {
  665|   153k|            self.lastEmission = LastEmission(position: insertingPC, resultRelink: resultRelink)
  666|   153k|            trace("emitInstruction: \(instruction)")
  667|   153k|            emitSlot(instruction.headSlot(threadingModel: engineConfiguration.threadingModel))
  668|   153k|            if let immediate = instruction.rawImmediate {
  669|   128k|                var slots: [CodeSlot] = []
  670|   128k|                immediate.emit(to: { slots.append($0) })
  671|   166k|                for slot in slots { emitSlot(slot) }
  672|   128k|            }
  673|   153k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV4emit_12resultRelinkyAA0C0O_AJs5Int16VcSgtFys6UInt64VcfU_:
  670|   166k|                immediate.emit(to: { slots.append($0) })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8putLabelSiyF:
  675|  3.07k|        mutating func putLabel() -> LabelRef {
  676|  3.07k|            let ref = labels.count
  677|  3.07k|            self.labels.append(.pinned(insertingPC))
  678|  3.07k|            return ref
  679|  3.07k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV10allocLabelSiyF:
  681|  8.03k|        mutating func allocLabel() -> LabelRef {
  682|  8.03k|            let ref = labels.count
  683|  8.03k|            self.labels.append(.unpinned(users: []))
  684|  8.03k|            self.unpinnedLabels.insert(ref)
  685|  8.03k|            return ref
  686|  8.03k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12resolveLabelyAA18MetaProgramCounterAELLVSgSiF:
  688|    312|        fileprivate func resolveLabel(_ ref: LabelRef) -> MetaProgramCounter? {
  689|    312|            let entry = self.labels[ref]
  690|    312|            switch entry {
  691|    312|            case .pinned(let pc): return pc
  692|    312|            case .unpinned: return nil
  693|    312|            }
  694|    312|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV8pinLabel_2pcySi_AA18MetaProgramCounterAELLVtKF:
  696|  3.44k|        fileprivate mutating func pinLabel(_ ref: LabelRef, pc: MetaProgramCounter) throws {
  697|  3.44k|            switch self.labels[ref] {
  698|  3.44k|            case .pinned(let oldPC):
  699|      9|                throw TranslationError("Internal consistency error: Label \(ref) is already pinned at \(oldPC), but tried to pin at \(pc) again")
  700|  3.44k|            case .unpinned(let users):
  701|  3.43k|                self.labels[ref] = .pinned(pc)
  702|  3.43k|                self.unpinnedLabels.remove(ref)
  703|  4.90k|                for user in users {
  704|  4.90k|                    switch user.action {
  705|  4.90k|                    case let .emitInstruction(insertAt, source, make):
  706|  3.71k|                        assign(at: insertAt.offsetFromHead, make(self, source, pc))
  707|  4.90k|                    case let .fillBrTableEntry(brTable, index, make):
  708|  1.19k|                        brTable[index] = make(self, pc)
  709|  4.90k|                    }
  710|  4.90k|                }
  711|  3.44k|            }
  712|  3.43k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV12pinLabelHereyySiKF:
  714|  3.44k|        mutating func pinLabelHere(_ ref: LabelRef) throws {
  715|  3.44k|            try pinLabel(ref, pc: insertingPC)
  716|  3.43k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lF:
  733|  7.55k|        ) {
  734|  7.55k|            let insertAt = insertingPC
  735|  7.55k|
  736|  7.55k|            // Emit dummy instruction to be replaced later
  737|  7.55k|            emitSlot(0)  // dummy opcode
  738|  7.55k|            var immediateSlots = 0
  739|  7.55k|            Immediate.emit(to: { _ in immediateSlots += 1 })
  740|  7.55k|            for _ in 0..<immediateSlots { emitSlot(0) }
  741|  7.55k|
  742|  7.55k|            // Schedule actual emission
  743|  7.55k|            emitWithLabel(
  744|  7.55k|                ref, insertAt: insertAt, line: line,
  745|  7.55k|                make: {
  746|  7.55k|                    makeInstruction(make($0, $1, $2))
  747|  7.55k|                })
  748|  7.55k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lFys6UInt64Vqd__XEcfU_:
  739|  7.55k|            Immediate.emit(to: { _ in immediateSlots += 1 })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel__4line4makeyAA0C0Oqd__c_SiSuqd__AFyx_G_AA18MetaProgramCounterAELLVANtctAA0C9ImmediateRd__lFAkL_A2NtcfU0_:
  745|  5.53k|                make: {
  746|  5.53k|                    makeInstruction(make($0, $1, $2))
  747|  5.53k|                })
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV13emitWithLabel_8insertAt4line4makeySi_AA18MetaProgramCounterAELLVSuAA0C0OAFyx_G_A2LtctF:
  758|  7.55k|        ) {
  759|  7.55k|            switch self.labels[ref] {
  760|  7.55k|            case .pinned(let pc):
  761|  1.81k|                assign(at: insertAt.offsetFromHead, make(self, insertingPC, pc))
  762|  7.55k|            case .unpinned(var users):
  763|  5.73k|                users.append(LabelUser(action: .emitInstruction(insertAt: insertAt, source: insertingPC, make), sourceLine: line))
  764|  5.73k|                self.labels[ref] = .unpinned(users: users)
  765|  7.55k|            }
  766|  7.55k|        }
$s7WasmKit21InstructionTranslatorV11ISeqBuilder021_3C1F9FC595E9AC192A47J10B121D811E8LLV16fillBrTableEntry_5table5index4line4makeySi_SryAA0C0O0qR7OperandV0S0VGSiSuAqFyx_G_AA18MetaProgramCounterAELLVtctF:
  779|  2.09k|        ) {
  780|  2.09k|            switch self.labels[ref] {
  781|  2.09k|            case .pinned(let pc):
  782|    500|                table[index] = make(self, pc)
  783|  2.09k|            case .unpinned(var users):
  784|  1.59k|                users.append(LabelUser(action: .fillBrTableEntry(buildingTable: table, index: index, make: make), sourceLine: line))
  785|  1.59k|                self.labels[ref] = .unpinned(users: users)
  786|  2.09k|            }
  787|  2.09k|        }
$s7WasmKit21InstructionTranslatorV6LocalsV4type2of0A5Types9ValueTypeOs6UInt32V_tKF:
  795|  18.9k|        func type(of localIndex: UInt32) throws -> ValueType {
  796|  18.9k|            guard Int(localIndex) < types.count else {
  797|     11|                throw TranslationError("Local index \(localIndex) is out of range")
  798|  18.9k|            }
  799|  18.9k|            return self.types[Int(localIndex)]
  800|  18.9k|        }
$s7WasmKit21InstructionTranslatorV10ConstSlotsV11stackLayoutAEyx_GAA05StackH0V_tcfC:
  808|  2.41k|        init(stackLayout: StackLayout) {
  809|  2.41k|            self.values = []
  810|  2.41k|            self.indexByValue = [:]
  811|  2.41k|            self.stackLayout = stackLayout
  812|  2.41k|        }
$s7WasmKit21InstructionTranslatorV10ConstSlotsV8allocateySiSg0A5Types5ValueOF:
  814|  23.7k|        mutating func allocate(_ value: Value) -> Int? {
  815|  23.7k|            let untyped = UntypedValue(value)
  816|  23.7k|            if let allocated = indexByValue[untyped] {
  817|  8.94k|                // NOTE: Share the same const slot for exactly the same bit pattern
  818|  8.94k|                // values even having different types
  819|  8.94k|                return allocated
  820|  14.8k|            }
  821|  14.8k|            guard values.count < stackLayout.constantSlotSize else { return nil }
  822|  13.4k|            let constSlotIndex = values.count
  823|  13.4k|            values.append(untyped)
  824|  13.4k|            indexByValue[untyped] = constSlotIndex
  825|  13.4k|            return constSlotIndex
  826|  23.7k|        }
$s7WasmKit21InstructionTranslatorV9allocator19engineConfiguration16funcTypeInterner6module4type6locals13functionIndex8codeSize12interceptingACyxGAA13ISeqAllocatorC_AA06EngineG0VAA0J0Cy0A5Types08FunctionI0VGxAVSayAT05ValueI0OGs6UInt32VSiSbtKcfC:
  855|  2.41k|    ) throws {
  856|  2.41k|        self.allocator = allocator
  857|  2.41k|        self.funcTypeInterner = funcTypeInterner
  858|  2.41k|        self.type = type
  859|  2.41k|        self.module = module
  860|  2.41k|        self.iseqBuilder = ISeqBuilder(engineConfiguration: engineConfiguration)
  861|  2.41k|        self.controlStack = ControlStack()
  862|  2.41k|        self.stackLayout = try StackLayout(
  863|  2.41k|            type: type,
  864|  2.41k|            numberOfLocals: locals.count,
  865|  2.41k|            codeSize: codeSize
  866|  2.41k|        )
  867|  2.41k|        self.valueStack = ValueStack(stackLayout: stackLayout)
  868|  2.41k|        self.locals = Locals(types: type.parameters + locals)
  869|  2.41k|        self.functionIndex = functionIndex
  870|  2.41k|        self.intercepting = intercepting
  871|  2.41k|        self.constantSlots = ConstSlots(stackLayout: stackLayout)
  872|  2.41k|        self.validator = InstructionValidator(context: module)
  873|  2.41k|
  874|  2.41k|        do {
  875|  2.41k|            let endLabel = self.iseqBuilder.allocLabel()
  876|  2.41k|            let rootFrame = ControlStack.ControlFrame(
  877|  2.41k|                blockType: type,
  878|  2.41k|                stackHeight: 0,
  879|  2.41k|                continuation: endLabel,
  880|  2.41k|                kind: .block(root: true)
  881|  2.41k|            )
  882|  2.41k|            self.controlStack.pushFrame(rootFrame)
  883|  2.41k|        }
  884|  2.41k|    }
$s7WasmKit21InstructionTranslatorV9returnReg021_3C1F9FC595E9AC192A47J10B121D811E8LLys5Int16VSiF:
  886|    236|    private func returnReg(_ index: Int) -> VReg {
  887|    236|        return stackLayout.frameHeader.returnReg(index)
  888|    236|    }
$s7WasmKit21InstructionTranslatorV8localReg021_3C1F9FC595E9AC192A47J10B121D811E8LLys5Int16Vs6UInt32VF:
  889|  11.0k|    private func localReg(_ index: LocalIndex) -> VReg {
  890|  11.0k|        return stackLayout.localReg(index)
  891|  11.0k|    }
$s7WasmKit21InstructionTranslatorV4emit021_3C1F9FC595E9AC192A47I10B121D811E8LL_12resultRelinkyAA0C0O_AHs5Int16VcSgtF:
  893|   145k|    private mutating func emit(_ instruction: Instruction, resultRelink: ISeqBuilder.ResultRelink? = nil) {
  894|   145k|        iseqBuilder.emit(instruction, resultRelink: resultRelink)
  895|   145k|    }
$s7WasmKit21InstructionTranslatorV13emitCopyStack021_3C1F9FC595E9AC192A47K10B121D811E8LL4from2toSbs5Int16V_AItF:
  898|  6.23k|    private mutating func emitCopyStack(from source: VReg, to dest: VReg) -> Bool {
  899|  6.23k|        guard source != dest else { return false }
  900|  6.02k|        emit(.copyStack(Instruction.CopyStackOperand(source: LVReg(source), dest: LVReg(dest))))
  901|  6.02k|        return true
  902|  6.23k|    }
$s7WasmKit21InstructionTranslatorV15preserveOnStack021_3C1F9FC595E9AC192A47K10B121D811E8LL5depthySi_tF:
  904|  16.8k|    private mutating func preserveOnStack(depth: Int) {
  905|  16.8k|        preserveLocalsOnStack(depth: depth)
  906|  16.8k|        for (source, dest) in valueStack.preserveConstsOnStack(depth: depth) {
  907|  1.14k|            emitCopyStack(from: source, to: dest)
  908|  16.8k|        }
  909|  16.8k|    }
$s7WasmKit21InstructionTranslatorV21preserveLocalsOnStack021_3C1F9FC595E9AC192A47L10B121D811E8LLyys6UInt32VF:
  911|  9.12k|    private mutating func preserveLocalsOnStack(_ localIndex: LocalIndex) {
  912|  9.12k|        for copyTo in valueStack.preserveLocalsOnStack(localIndex) {
  913|  1.34k|            emitCopyStack(from: localReg(localIndex), to: copyTo)
  914|  9.12k|        }
  915|  9.12k|    }
$s7WasmKit21InstructionTranslatorV21preserveLocalsOnStack021_3C1F9FC595E9AC192A47L10B121D811E8LL5depthySi_tF:
  922|  20.9k|    private mutating func preserveLocalsOnStack(depth: Int) {
  923|  20.9k|        for (sourceLocal, destReg) in valueStack.preserveLocalsOnStack(depth: depth) {
  924|    518|            emitCopyStack(from: localReg(sourceLocal), to: destReg)
  925|  20.9k|        }
  926|  20.9k|    }
$s7WasmKit21InstructionTranslatorV14checkBeforePop021_3C1F9FC595E9AC192A47K10B121D811E8LL8typeHint5depth12controlFrameSb0A5Types9ValueTypeOSg_SiAC12ControlStackV0yU0Vyx__GtKF:
  932|   173k|    private func checkBeforePop(typeHint: ValueType?, depth: Int = 0, controlFrame: ControlStack.ControlFrame) throws -> Bool {
  933|   173k|        if _slowPath(valueStack.height - depth <= controlFrame.stackHeight) {
  934|  30.3k|            if controlFrame.reachable {
  935|     67|                throw ValidationError(.expectedTypeOnStackButEmpty(expected: typeHint))
  936|  30.2k|            }
  937|  30.2k|            // Too many pop on unreachable path is ignored
  938|  30.2k|            return false
  939|   142k|        }
  940|   142k|        return true
  941|   173k|    }
$s7WasmKit21InstructionTranslatorV14checkBeforePop021_3C1F9FC595E9AC192A47K10B121D811E8LL8typeHint5depthSb0A5Types9ValueTypeOSg_SitKF:
  942|   171k|    private func checkBeforePop(typeHint: ValueType?, depth: Int = 0) throws -> Bool {
  943|   171k|        let controlFrame = try controlStack.currentFrame()
  944|   171k|        return try self.checkBeforePop(typeHint: typeHint, depth: depth, controlFrame: controlFrame)
  945|   171k|    }
$s7WasmKit21InstructionTranslatorV12ensureOnVReg021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VAC11ValueSourceOyx_GF:
  946|   137k|    private mutating func ensureOnVReg(_ source: ValueSource) -> VReg {
  947|   137k|        // TODO: Copy to stack if source is on preg
  948|   137k|        // let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
  949|   137k|        switch source {
  950|   137k|        case .vreg(let register):
  951|   113k|            return register
  952|   137k|        case .local(let index):
  953|  7.15k|            return stackLayout.localReg(index)
  954|   137k|        case .const(let index, _):
  955|  16.9k|            return stackLayout.constReg(index)
  956|   137k|        }
  957|   137k|    }
$s7WasmKit21InstructionTranslatorV13ensureOnStack021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VAC11ValueSourceOyx_GF:
  958|    576|    private mutating func ensureOnStack(_ source: ValueSource) -> VReg {
  959|    576|        let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
  960|    576|        switch source {
  961|    576|        case .vreg(let vReg):
  962|    418|            return vReg
  963|    576|        case .local(let localIndex):
  964|     12|            emitCopyStack(from: localReg(localIndex), to: copyTo)
  965|     12|            return copyTo
  966|    576|        case .const(let index, _):
  967|    146|            emitCopyStack(from: stackLayout.constReg(index), to: copyTo)
  968|    146|            return copyTo
  969|    576|        }
  970|    576|    }
$s7WasmKit21InstructionTranslatorV10popOperand021_3C1F9FC595E9AC192A47J10B121D811E8LLyAC11ValueSourceOyx_GSg0A5Types0P4TypeOKF:
  971|   159k|    private mutating func popOperand(_ type: ValueType) throws -> ValueSource? {
  972|   159k|        guard try checkBeforePop(typeHint: type) else {
  973|  28.1k|            return nil
  974|   131k|        }
  975|   131k|        iseqBuilder.resetLastEmission()
  976|   131k|        return try valueStack.pop(type)
  977|   159k|    }
$s7WasmKit21InstructionTranslatorV17popOnStackOperand021_3C1F9FC595E9AC192A47L10B121D811E8LLys5Int16VSg0A5Types9ValueTypeOKF:
  979|    633|    private mutating func popOnStackOperand(_ type: ValueType) throws -> VReg? {
  980|    633|        guard let op = try popOperand(type) else { return nil }
  981|    576|        return ensureOnStack(op)
  982|    633|    }
$s7WasmKit21InstructionTranslatorV14popVRegOperand021_3C1F9FC595E9AC192A47K10B121D811E8LLys5Int16VSg0A5Types9ValueTypeOKF:
  984|   153k|    private mutating func popVRegOperand(_ type: ValueType) throws -> VReg? {
  985|   153k|        guard let op = try popOperand(type) else { return nil }
  986|   128k|        return ensureOnVReg(op)
  987|   153k|    }
$s7WasmKit21InstructionTranslatorV13popAnyOperand021_3C1F9FC595E9AC192A47K10B121D811E8LLAC9MetaValueOyx_G_AC0R6SourceOyx_GSgtyKF:
  989|  2.02k|    private mutating func popAnyOperand() throws -> (MetaValue, ValueSource?) {
  990|  2.02k|        guard try checkBeforePop(typeHint: nil) else {
  991|  1.50k|            return (.unknown, nil)
  992|  1.50k|        }
  993|    515|        iseqBuilder.resetLastEmission()
  994|    515|        return try valueStack.pop()
  995|  2.02k|    }
$s7WasmKit21InstructionTranslatorV13popPushValues021_3C1F9FC595E9AC192A47K10B121D811E8LLySiSay0A5Types9ValueTypeOGKF:
  998|  3.26k|    private mutating func popPushValues(_ valueTypes: [ValueType]) throws -> Int {
  999|  3.26k|        var values: [ValueSource?] = []
 1000|  3.26k|        for type in valueTypes.reversed() {
 1001|  2.73k|            values.append(try popOperand(type))
 1002|  3.26k|        }
 1003|  3.26k|        let stackHeight = self.valueStack.height
 1004|  3.26k|        for (type, value) in zip(valueTypes, values.reversed()) {
 1005|  2.73k|            switch value {
 1006|  2.73k|            case .local(let localIndex):
 1007|      0|                // Re-push local variables to the stack
 1008|      0|                _ = try valueStack.pushLocal(localIndex, locals: &locals)
 1009|  2.73k|            case .vreg, nil:
 1010|  2.68k|                _ = valueStack.push(type)
 1011|  2.73k|            case .const(let index, let type):
 1012|     44|                valueStack.pushConst(index, type: type)
 1013|  2.73k|            }
 1014|  3.26k|        }
 1015|  3.26k|        return stackHeight
 1016|  3.26k|    }
$s7WasmKit21InstructionTranslatorV13checkStackTop021_3C1F9FC595E9AC192A47K10B121D811E8LLyySay0A5Types9ValueTypeOGKF:
 1018|  2.60k|    private func checkStackTop(_ valueTypes: [ValueType]) throws {
 1019|  2.60k|        for (stackDepth, type) in valueTypes.reversed().enumerated() {
 1020|    598|            guard try checkBeforePop(typeHint: type, depth: stackDepth) else { return }
 1021|    383|            let actual = valueStack.peekType(depth: stackDepth)
 1022|    383|            switch actual {
 1023|    383|            case .some(let actualType):
 1024|    373|                guard actualType == type else {
 1025|      1|                    throw ValidationError(.expectedTypeOnStack(expected: type, actual: actualType))
 1026|      1|                }
 1027|    383|            case .unknown: break
 1028|    383|            }
 1029|  2.38k|        }
 1030|  2.38k|    }
$s7WasmKit21InstructionTranslatorV15visitReturnLike021_3C1F9FC595E9AC192A47K10B121D811E8LLyyKF:
 1032|  4.87k|    private mutating func visitReturnLike() throws {
 1033|  4.87k|        try copyValuesIntoResultSlots(self.type.results, frameHeader: stackLayout.frameHeader)
 1034|  4.87k|    }
$s7WasmKit21InstructionTranslatorV25copyValuesIntoResultSlots021_3C1F9FC595E9AC192A47M10B121D811E8LL_11frameHeaderySay0A5Types9ValueTypeOG_AA05FrameT6LayoutVtKF:
 1039|  4.97k|    private mutating func copyValuesIntoResultSlots(_ valueTypes: [ValueType], frameHeader: FrameHeaderLayout) throws {
 1040|  4.97k|        var copies: [(source: VReg, dest: VReg)] = []
 1041|  4.97k|        for (index, resultType) in valueTypes.enumerated().reversed() {
 1042|  1.44k|            guard let operand = try popOperand(resultType) else { continue }
 1043|    171|            var source = ensureOnVReg(operand)
 1044|    171|            if case .local(let localIndex) = operand, stackLayout.isParameter(localIndex) {
 1045|     10|                // Parameter space is shared with return values, so we need to copy it to the stack
 1046|     10|                // before copying to the return slot to avoid overwriting the parameter value.
 1047|     10|                let copyTo = valueStack.stackRegBase + VReg(valueStack.height)
 1048|     10|                emitCopyStack(from: localReg(localIndex), to: copyTo)
 1049|     10|                source = copyTo
 1050|     10|            }
 1051|    171|            let dest = frameHeader.returnReg(index)
 1052|    171|            copies.append((source, dest))
 1053|  4.97k|        }
 1054|  4.97k|        for (source, dest) in copies {
 1055|    169|            emitCopyStack(from: source, to: dest)
 1056|  4.97k|        }
 1057|  4.97k|    }
$s7WasmKit21InstructionTranslatorV12copyOnBranch021_3C1F9FC595E9AC192A47K10B121D811E8LL11targetFrameSbAC12ControlStackV0sR0Vyx__G_tKF:
 1060|  7.71k|    private mutating func copyOnBranch(targetFrame frame: ControlStack.ControlFrame) throws -> Bool {
 1061|  7.71k|        preserveOnStack(depth: min(Int(frame.copyCount), valueStack.height - frame.stackHeight))
 1062|  7.71k|        let copyCount = VReg(frame.copyCount)
 1063|  7.71k|        let sourceBase = valueStack.stackRegBase + VReg(valueStack.height)
 1064|  7.71k|        let destBase = valueStack.stackRegBase + VReg(frame.stackHeight)
 1065|  7.71k|        var emittedCopy = false
 1066|  7.71k|        for i in (0..<copyCount).reversed() {
 1067|  1.43k|            let source = sourceBase - 1 - VReg(i)
 1068|  1.43k|            let dest: VReg
 1069|  1.43k|            if case .block(root: true) = frame.kind {
 1070|    236|                dest = returnReg(Int(copyCount - 1 - i))
 1071|  1.19k|            } else {
 1072|  1.19k|                dest = destBase + copyCount - 1 - VReg(i)
 1073|  1.19k|            }
 1074|  1.43k|            let copied = emitCopyStack(from: source, to: dest)
 1075|  1.43k|            emittedCopy = emittedCopy || copied
 1076|  7.71k|        }
 1077|  7.71k|        return emittedCopy
 1078|  7.71k|    }
$s7WasmKit21InstructionTranslatorV12copyOnBranch021_3C1F9FC595E9AC192A47K10B121D811E8LL11targetFrameSbAC12ControlStackV0sR0Vyx__G_tKFSbyKXEfu_:
 1075|  1.37k|            emittedCopy = emittedCopy || copied
$s7WasmKit21InstructionTranslatorV15translateReturn021_3C1F9FC595E9AC192A47J10B121D811E8LLyyKF:
 1079|  4.87k|    private mutating func translateReturn() throws {
 1080|  4.87k|        if intercepting {
 1081|      0|            // Emit `onExit` instruction before every `return` instruction
 1082|      0|            emit(.onExit(functionIndex))
 1083|      0|        }
 1084|  4.87k|        try visitReturnLike()
 1085|  4.87k|        iseqBuilder.emit(._return)
 1086|  4.87k|    }
$s7WasmKit21InstructionTranslatorV15markUnreachable021_3C1F9FC595E9AC192A47J10B121D811E8LLyyKF:
 1087|  24.6k|    private mutating func markUnreachable() throws {
 1088|  24.6k|        try controlStack.markUnreachable()
 1089|  24.6k|        let currentFrame = try controlStack.currentFrame()
 1090|  24.6k|        try valueStack.truncate(height: currentFrame.stackHeight)
 1091|  24.6k|    }
$s7WasmKit21InstructionTranslatorV8finalize021_3C1F9FC595E9AC192A47I10B121D811E8LLAA0C8SequenceVyKF:
 1093|  1.34k|    private mutating func finalize() throws -> InstructionSequence {
 1094|  1.34k|        if controlStack.numberOfFrames > 1 {
 1095|     13|            throw ValidationError(.expectedMoreEndInstructions(count: controlStack.numberOfFrames - 1))
 1096|  1.33k|        }
 1097|  1.33k|        // Check dangling labels
 1098|  1.33k|        try iseqBuilder.assertDanglingLabels()
 1099|  1.32k|
 1100|  1.32k|        iseqBuilder.emit(._return)
 1101|  1.32k|        let instructions = iseqBuilder.finalize()
 1102|  1.32k|        // TODO: Figure out a way to avoid the copy here while keeping the execution performance.
 1103|  1.32k|        let buffer = allocator.allocateInstructions(capacity: instructions.count)
 1104|   239k|        for (idx, instruction) in instructions.enumerated() {
 1105|   239k|            buffer[idx] = instruction
 1106|   239k|        }
 1107|  1.32k|        let constants = allocator.allocateConstants(self.constantSlots.values)
 1108|  1.32k|        return InstructionSequence(
 1109|  1.32k|            instructions: buffer,
 1110|  1.32k|            maxStackHeight: Int(valueStack.stackRegBase) + valueStack.maxHeight,
 1111|  1.32k|            constants: constants
 1112|  1.32k|        )
 1113|  1.34k|    }
$s7WasmKit21InstructionTranslatorV9translate4code8instanceAA0C8SequenceV0A6Parser4CodeV_AA12EntityHandleVyAA08InstanceK0VGtKF:
 1121|  2.41k|    ) throws -> InstructionSequence {
 1122|  2.41k|        if intercepting {
 1123|      0|            // Emit `onEnter` instruction at the beginning of the function
 1124|      0|            emit(.onEnter(functionIndex))
 1125|      0|        }
 1126|  2.41k|        var parser = ExpressionParser(code: code)
 1127|  2.41k|        var offset = parser.offset
 1128|  2.41k|        do {
 1129|   219k|            while try parser.visit(visitor: &self) {
 1130|   217k|                offset = parser.offset
 1131|   217k|            }
 1132|  1.34k|        } catch var error as ValidationError {
 1133|    391|            error.offset = offset
 1134|    391|            throw error
 1135|  1.34k|        }
 1136|  1.34k|        return try finalize()
 1137|  2.41k|    }
$s7WasmKit21InstructionTranslatorV16visitUnreachableyyKF:
 1141|  15.1k|    mutating func visitUnreachable() throws -> Output {
 1142|  15.1k|        emit(.unreachable)
 1143|  15.1k|        try markUnreachable()
 1144|  15.1k|    }
$s7WasmKit21InstructionTranslatorV8visitNopyyF:
 1145|  2.76k|    mutating func visitNop() -> Output { emit(.nop) }
$s7WasmKit21InstructionTranslatorV10visitBlock9blockTypey0A6Parser0fH0O_tKF:
 1147|  2.93k|    mutating func visitBlock(blockType: WasmParser.BlockType) throws -> Output {
 1148|  2.93k|        let blockType = try module.resolveBlockType(blockType)
 1149|  2.91k|        let endLabel = iseqBuilder.allocLabel()
 1150|  2.91k|        self.preserveLocalsOnStack(depth: self.valueStack.height)
 1151|  2.91k|        let stackHeight = try popPushValues(blockType.parameters)
 1152|  2.91k|        controlStack.pushFrame(ControlStack.ControlFrame(blockType: blockType, stackHeight: stackHeight, continuation: endLabel, kind: .block))
 1153|  2.91k|    }
$s7WasmKit21InstructionTranslatorV9visitLoop9blockTypey0A6Parser05BlockH0O_tKF:
 1155|  3.08k|    mutating func visitLoop(blockType: WasmParser.BlockType) throws -> Output {
 1156|  3.08k|        let blockType = try module.resolveBlockType(blockType)
 1157|  3.07k|        preserveOnStack(depth: blockType.parameters.count)
 1158|  3.07k|        iseqBuilder.resetLastEmission()
 1159|  3.07k|        for param in blockType.parameters.reversed() {
 1160|    185|            _ = try popOperand(param)
 1161|  3.07k|        }
 1162|  3.07k|        let headLabel = iseqBuilder.putLabel()
 1163|  3.07k|        let stackHeight = self.valueStack.height
 1164|  3.07k|        for param in blockType.parameters {
 1165|    181|            _ = valueStack.push(param)
 1166|  3.07k|        }
 1167|  3.07k|        controlStack.pushFrame(ControlStack.ControlFrame(blockType: blockType, stackHeight: stackHeight, continuation: headLabel, kind: .loop))
 1168|  3.07k|    }
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKF:
 1170|  1.20k|    mutating func visitIf(blockType: WasmParser.BlockType) throws -> Output {
 1171|  1.20k|        // Pop condition value
 1172|  1.20k|        let condition = try popVRegOperand(.i32)
 1173|  1.19k|        let blockType = try module.resolveBlockType(blockType)
 1174|  1.19k|        self.preserveLocalsOnStack(depth: self.valueStack.height)
 1175|  1.19k|        preserveOnStack(depth: blockType.parameters.count)
 1176|  1.19k|        let endLabel = iseqBuilder.allocLabel()
 1177|  1.19k|        let elseLabel = iseqBuilder.allocLabel()
 1178|  1.19k|        for param in blockType.parameters.reversed() {
 1179|    654|            _ = try popOperand(param)
 1180|  1.19k|        }
 1181|  1.19k|        let stackHeight = self.valueStack.height
 1182|  1.19k|        for param in blockType.parameters {
 1183|    653|            _ = valueStack.push(param)
 1184|  1.19k|        }
 1185|  1.19k|        controlStack.pushFrame(
 1186|  1.19k|            ControlStack.ControlFrame(
 1187|  1.19k|                blockType: blockType, stackHeight: stackHeight, continuation: endLabel,
 1188|  1.19k|                kind: .if(elseLabel: elseLabel, endLabel: endLabel, isElse: false)
 1189|  1.19k|            )
 1190|  1.19k|        )
 1191|  1.19k|        guard let condition = condition else { return }
 1192|    674|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
 1193|    674|            let targetPC: MetaProgramCounter
 1194|    674|            if let elsePC = iseqBuilder.resolveLabel(elseLabel) {
 1195|    674|                targetPC = elsePC
 1196|    674|            } else {
 1197|    674|                targetPC = endPC
 1198|    674|            }
 1199|    674|            let elseOrEnd = UInt32(targetPC.offsetFromHead - selfPC.offsetFromHead)
 1200|    674|            return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(elseOrEnd))
 1201|    674|        }
 1202|    674|    }
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0OAJ02BrF7OperandVcAJmcfu_:
 1192|    674|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0OAJ02BrF7OperandVcAJmcfu_AjLcfu0_:
 1192|    312|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV7visitIf9blockTypey0A6Parser05BlockH0O_tKFAA0C0O02BrF7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47R10B121D811E8LLVyx_G_AA18MetaProgramCounterANLLVARtcfU_:
 1192|    312|        iseqBuilder.emitWithLabel(Instruction.brIfNot, endLabel) { iseqBuilder, selfPC, endPC in
 1193|    312|            let targetPC: MetaProgramCounter
 1194|    312|            if let elsePC = iseqBuilder.resolveLabel(elseLabel) {
 1195|    258|                targetPC = elsePC
 1196|    258|            } else {
 1197|     54|                targetPC = endPC
 1198|     54|            }
 1199|    312|            let elseOrEnd = UInt32(targetPC.offsetFromHead - selfPC.offsetFromHead)
 1200|    312|            return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(elseOrEnd))
 1201|    312|        }
$s7WasmKit21InstructionTranslatorV9visitElseyyKF:
 1204|    402|    mutating func visitElse() throws -> Output {
 1205|    402|        var frame = try controlStack.currentFrame()
 1206|    402|        guard case let .if(elseLabel, endLabel, _) = frame.kind else {
 1207|     41|            throw ValidationError(.expectedIfControlFrame)
 1208|    361|        }
 1209|    361|        preserveOnStack(depth: valueStack.height - frame.stackHeight)
 1210|    361|        try controlStack.resetReachability()
 1211|    361|        iseqBuilder.resetLastEmission()
 1212|    361|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
 1213|    361|            let offset = endPC.offsetFromHead - selfPC.offsetFromHead
 1214|    361|            return Int32(offset)
 1215|    361|        }
 1216|    365|        for result in frame.blockType.results.reversed() {
 1217|    365|            guard try checkBeforePop(typeHint: result, controlFrame: frame) else { continue }
 1218|    247|            _ = try valueStack.pop(result)
 1219|    358|        }
 1220|    358|        guard valueStack.height == frame.stackHeight else {
 1221|      2|            throw ValidationError(.valuesRemainingAtEndOfBlock)
 1222|    356|        }
 1223|    356|        _ = controlStack.popFrame()
 1224|    356|        frame.kind = .if(elseLabel: elseLabel, endLabel: endLabel, isElse: true)
 1225|    356|        frame.reachable = true
 1226|    356|        controlStack.pushFrame(frame)
 1227|    356|
 1228|    356|        // Re-push parameters
 1229|    356|        for parameter in frame.blockType.parameters {
 1230|    141|            _ = valueStack.push(parameter)
 1231|    356|        }
 1232|    356|        try iseqBuilder.pinLabelHere(elseLabel)
 1233|    355|    }
$s7WasmKit21InstructionTranslatorV9visitElseyyKFAA0C0Os5Int32VcAFmcfu_:
 1212|    361|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV9visitElseyyKFAA0C0Os5Int32VcAFmcfu_AfHcfu0_:
 1212|    285|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
$s7WasmKit21InstructionTranslatorV9visitElseyyKFs5Int32VAC11ISeqBuilder021_3C1F9FC595E9AC192A47M10B121D811E8LLVyx_G_AA18MetaProgramCounterAHLLVALtcfU_:
 1212|    285|        iseqBuilder.emitWithLabel(Instruction.br, endLabel) { _, selfPC, endPC in
 1213|    285|            let offset = endPC.offsetFromHead - selfPC.offsetFromHead
 1214|    285|            return Int32(offset)
 1215|    285|        }
$s7WasmKit21InstructionTranslatorV8visitEndyyKF:
 1235|  4.41k|    mutating func visitEnd() throws -> Output {
 1236|  4.41k|        let toBePopped = try controlStack.currentFrame()
 1237|  4.41k|        iseqBuilder.resetLastEmission()
 1238|  4.41k|        if case .block(root: true) = toBePopped.kind {
 1239|  1.33k|            try translateReturn()
 1240|  1.32k|            guard valueStack.height == toBePopped.stackHeight else {
 1241|     12|                throw ValidationError(.valuesRemainingAtEndOfBlock)
 1242|  1.31k|            }
 1243|  1.31k|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1244|  1.30k|            return
 1245|  3.08k|        }
 1246|  3.08k|
 1247|  3.08k|        if case .if(_, _, isElse: false) = toBePopped.kind {
 1248|    128|            let blockType = toBePopped.blockType
 1249|    128|            guard blockType.parameters == blockType.results else {
 1250|     24|                throw ValidationError(.parameterResultTypeMismatch(blockType: blockType))
 1251|    104|            }
 1252|  3.05k|        }
 1253|  3.05k|
 1254|  3.05k|        preserveOnStack(depth: Int(valueStack.height - toBePopped.stackHeight))
 1255|  3.05k|        switch toBePopped.kind {
 1256|  3.05k|        case .block:
 1257|  1.06k|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1258|  3.05k|        case .loop: break
 1259|  3.05k|        case .if:
 1260|    389|            try iseqBuilder.pinLabelHere(toBePopped.continuation)
 1261|  3.05k|        }
 1262|  3.05k|        for result in toBePopped.blockType.results.reversed() {
 1263|  1.68k|            guard try checkBeforePop(typeHint: result, controlFrame: toBePopped) else { continue }
 1264|  1.49k|            _ = try valueStack.pop(result)
 1265|  3.03k|        }
 1266|  3.03k|        guard valueStack.height == toBePopped.stackHeight else {
 1267|     47|            throw ValidationError(.valuesRemainingAtEndOfBlock)
 1268|  2.98k|        }
 1269|  2.98k|        for result in toBePopped.blockType.results {
 1270|  1.65k|            _ = valueStack.push(result)
 1271|  2.98k|        }
 1272|  2.98k|        _ = controlStack.popFrame()
 1273|  2.98k|    }
$s7WasmKit21InstructionTranslatorV15computePopCount021_3C1F9FC595E9AC192A47K10B121D811E8LL11destination12currentFrame0R6Heights6UInt32VAC12ControlStackV0vS0Vyx__G_AOSitKFZ:
 1279|  5.11k|    ) throws -> UInt32 {
 1280|  5.11k|        let popCount: UInt32
 1281|  5.11k|        if _fastPath(currentFrame.reachable) {
 1282|  2.40k|            let count = currentHeight - Int(destination.copyCount) - destination.stackHeight
 1283|  2.40k|            guard count >= 0 else {
 1284|      4|                throw ValidationError(.stackHeightUnderflow(available: currentHeight, required: destination.stackHeight + Int(destination.copyCount)))
 1285|  2.40k|            }
 1286|  2.40k|            popCount = UInt32(count)
 1287|  2.71k|        } else {
 1288|  2.71k|            // Slow path: This path is taken when "br" is placed after "unreachable"
 1289|  2.71k|            // It's ok to put the fake popCount because it will not be executed at runtime.
 1290|  2.71k|            popCount = 0
 1291|  5.11k|        }
 1292|  5.11k|        return popCount
 1293|  5.11k|    }
$s7WasmKit21InstructionTranslatorV10emitBranch021_3C1F9FC595E9AC192A47J10B121D811E8LL_13relativeDepth4makeyAA0C0Oqd__c_s6UInt32Vqd__s5Int32V_A2KtctKAA0C9ImmediateRd__lF:
 1299|  5.11k|    ) throws {
 1300|  5.11k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1301|  5.11k|        let copyCount = frame.copyCount
 1302|  5.11k|        let popCount = try Self.computePopCount(
 1303|  5.11k|            destination: frame,
 1304|  5.11k|            currentFrame: try controlStack.currentFrame(),
 1305|  5.11k|            currentHeight: valueStack.height
 1306|  5.11k|        )
 1307|  5.11k|        iseqBuilder.emitWithLabel(makeInstruction, frame.continuation) { _, selfPC, continuation in
 1308|  5.11k|            let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1309|  5.11k|            return make(Int32(relativeOffset), UInt32(copyCount), popCount)
 1310|  5.11k|        }
 1311|  5.11k|    }
$s7WasmKit21InstructionTranslatorV10emitBranch021_3C1F9FC595E9AC192A47J10B121D811E8LL_13relativeDepth4makeyAA0C0Oqd__c_s6UInt32Vqd__s5Int32V_A2KtctKAA0C9ImmediateRd__lFqd__AC11ISeqBuilderAELLVyx_G_AA18MetaProgramCounterAELLVAStcfU_:
 1307|  3.98k|        iseqBuilder.emitWithLabel(makeInstruction, frame.continuation) { _, selfPC, continuation in
 1308|  3.98k|            let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1309|  3.98k|            return make(Int32(relativeOffset), UInt32(copyCount), popCount)
 1310|  3.98k|        }
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKF:
 1312|  4.80k|    mutating func visitBr(relativeDepth: UInt32) throws -> Output {
 1313|  4.80k|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1314|  4.79k|
 1315|  4.79k|        // Copy from the stack top to the bottom to avoid overwrites
 1316|  4.79k|        //              [BLOCK1]
 1317|  4.79k|        //              [      ]
 1318|  4.79k|        //              [      ]
 1319|  4.79k|        //              [BLOCK2] () -> (i32, i64)
 1320|  4.79k|        // copy [1] +-->[  i32 ]
 1321|  4.79k|        //          +---[  i32 ]<--+ copy [2]
 1322|  4.79k|        //              [  i64 ]---+
 1323|  4.79k|        try copyOnBranch(targetFrame: frame)
 1324|  4.79k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1325|  4.79k|            return offset
 1326|  4.79k|        }
 1327|  4.79k|        for type in frame.copyTypes.reversed() {
 1328|    492|            _ = try popOperand(type)
 1329|  4.77k|        }
 1330|  4.77k|        try markUnreachable()
 1331|  4.77k|    }
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu_:
 1324|  4.79k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu_AiKcfu0_:
 1324|  3.85k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV7visitBr13relativeDepthys6UInt32V_tKFs5Int32VAI_A2GtcfU_:
 1324|  3.85k|        try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1325|  3.85k|            return offset
 1326|  3.85k|        }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKF:
 1333|    994|    mutating func visitBrIf(relativeDepth: UInt32) throws -> Output {
 1334|    994|        let frame = try controlStack.branchTarget(relativeDepth: relativeDepth)
 1335|    990|        let condition = try popVRegOperand(.i32)
 1336|    989|
 1337|    989|        if frame.copyCount == 0 {
 1338|    641|            guard let condition else { return }
 1339|    574|            // Optimization where we don't need copying values when the branch taken
 1340|    574|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
 1341|    574|                let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1342|    574|                return Instruction.BrIfOperand(
 1343|    574|                    condition: LVReg(condition), offset: Int32(relativeOffset)
 1344|    574|                )
 1345|    574|            }
 1346|    574|            return
 1347|    641|        }
 1348|    348|        preserveOnStack(depth: valueStack.height - frame.stackHeight)
 1349|    348|
 1350|    348|        if let condition {
 1351|    325|            // If branch taken, fallthrough to landing pad, copy stack values
 1352|    325|            // then branch to the actual place
 1353|    325|            // If branch not taken, branch to the next of the landing pad
 1354|    325|            //
 1355|    325|            // (block (result i32)
 1356|    325|            //   (i32.const 42)
 1357|    325|            //   (i32.const 24)
 1358|    325|            //   (local.get 0)
 1359|    325|            //   (br_if 0) ------+
 1360|    325|            //   (local.get 1)   |
 1361|    325|            // )         <-------+
 1362|    325|            //
 1363|    325|            // [0x00] (i32.const 42 reg:0)
 1364|    325|            // [0x01] (i32.const 24 reg:1)
 1365|    325|            // [0x02] (local.get 0 result=reg:2)
 1366|    325|            // [0x03] (br_if_z offset=+0x3 cond=reg:2) --+
 1367|    325|            // [0x04] (stack.copy reg:1 -> reg:0)        |
 1368|    325|            // [0x05] (br offset=+0x2) --------+         |
 1369|    325|            // [0x06] (local.get 1 reg:2) <----|---------+
 1370|    325|            // [0x07] ...              <-------+
 1371|    325|            let onBranchNotTaken = iseqBuilder.allocLabel()
 1372|    325|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
 1373|    325|                let relativeOffset = continuation.offsetFromHead - conditionCheckAt.offsetFromHead
 1374|    325|                return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(relativeOffset))
 1375|    325|            }
 1376|    325|            try copyOnBranch(targetFrame: frame)
 1377|    325|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1378|    325|                return offset
 1379|    325|            }
 1380|    323|            try iseqBuilder.pinLabelHere(onBranchNotTaken)
 1381|    346|        }
 1382|    346|        try popPushValues(frame.copyTypes)
 1383|    344|    }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu_:
 1340|    574|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu_AiKcfu0_:
 1340|    458|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0O0fG7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAMLLVAQtcfU_:
 1340|    458|            iseqBuilder.emitWithLabel(Instruction.brIf, frame.continuation) { _, selfPC, continuation in
 1341|    458|                let relativeOffset = continuation.offsetFromHead - selfPC.offsetFromHead
 1342|    458|                return Instruction.BrIfOperand(
 1343|    458|                    condition: LVReg(condition), offset: Int32(relativeOffset)
 1344|    458|                )
 1345|    458|            }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu1_:
 1372|    325|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0OAI0fG7OperandVcAImcfu1_AiKcfu2_:
 1372|    323|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0O0fG7OperandVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAMLLVAQtcfU0_:
 1372|    323|            iseqBuilder.emitWithLabel(Instruction.brIfNot, onBranchNotTaken) { _, conditionCheckAt, continuation in
 1373|    323|                let relativeOffset = continuation.offsetFromHead - conditionCheckAt.offsetFromHead
 1374|    323|                return Instruction.BrIfOperand(condition: LVReg(condition), offset: Int32(relativeOffset))
 1375|    323|            }
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu3_:
 1377|    325|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFAA0C0Os5Int32VcAImcfu3_AiKcfu4_:
 1377|    124|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
$s7WasmKit21InstructionTranslatorV9visitBrIf13relativeDepthys6UInt32V_tKFs5Int32VAI_A2GtcfU1_:
 1377|    124|            try emitBranch(Instruction.br, relativeDepth: relativeDepth) { offset, copyCount, popCount in
 1378|    124|                return offset
 1379|    124|            }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKF:
 1385|  1.14k|    mutating func visitBrTable(targets: WasmParser.BrTable) throws -> Output {
 1386|  1.14k|        guard let index = try popVRegOperand(.i32) else { return }
 1387|  1.00k|
 1388|  1.00k|        let defaultFrame = try controlStack.branchTarget(relativeDepth: targets.defaultIndex)
 1389|    999|
 1390|    999|        // If this instruction is unreachable, copyCount might be greater than the actual stack height
 1391|    999|        try preserveOnStack(
 1392|    999|            depth: min(
 1393|    999|                Int(defaultFrame.copyCount),
 1394|    999|                valueStack.height - controlStack.currentFrame().stackHeight
 1395|    999|            )
 1396|    999|        )
 1397|    999|        let allLabelIndices = targets.labelIndices + [targets.defaultIndex]
 1398|    999|        let tableBuffer = allocator.allocateBrTable(capacity: allLabelIndices.count)
 1399|    999|        let operand = Instruction.BrTableOperand(
 1400|    999|            baseAddress: tableBuffer.baseAddress!,
 1401|    999|            count: UInt16(tableBuffer.count), index: index
 1402|    999|        )
 1403|    999|        iseqBuilder.emit(.brTable(operand))
 1404|    999|        let brTableAt = iseqBuilder.insertingPC
 1405|    999|
 1406|    999|        //
 1407|    999|        // (block $l1 (result i32)
 1408|    999|        //   (i32.const 63)
 1409|    999|        //   (block $l2 (result i32)
 1410|    999|        //     (i32.const 42)
 1411|    999|        //     (i32.const 24)
 1412|    999|        //     (local.get 0)
 1413|    999|        //     (br_table $l1 $l2) ---+
 1414|    999|        //                           |
 1415|    999|        //   )               <-------+
 1416|    999|        //   (i32.const 36)          |
 1417|    999|        // )              <----------+
 1418|    999|        //
 1419|    999|        //
 1420|    999|        //           [0x00] (i32.const 63 reg:0)
 1421|    999|        //           [0x01] (i32.const 42 reg:1)
 1422|    999|        //           [0x02] (i32.const 24 reg:2)
 1423|    999|        //           [0x03] (local.get 0 result=reg:3)
 1424|    999|        //           [0x04] (br_table index=reg:3 offsets=[
 1425|    999|        //                    +0x01       -----------------+
 1426|    999|        //                    +0x03       -----------------|----+
 1427|    999|        //                  ])                             |    |
 1428|    999|        //           [0x05] (stack.copy reg:2 -> reg:0) <--+    |
 1429|    999|        //  +------- [0x06] (br offset=+0x03)                   |
 1430|    999|        //  |        [0x07] (stack.copy reg:2 -> reg:1)  <------+
 1431|    999|        //  |  +---- [0x08] (br offset=+0x03)
 1432|    999|        //  +--|---> [0x09] (i32.const 36 reg:2)
 1433|    999|        //     |     [0x0a] (stack.copy reg:2 -> reg:0)
 1434|    999|        //     +---> [0x0b] ...
 1435|  2.61k|        for (entryIndex, labelIndex) in allLabelIndices.enumerated() {
 1436|  2.61k|            let frame = try controlStack.branchTarget(relativeDepth: labelIndex)
 1437|  2.61k|
 1438|  2.61k|            // Check copyTypes consistency
 1439|  2.61k|            guard frame.copyTypes.count == defaultFrame.copyTypes.count else {
 1440|      8|                throw ValidationError(.expectedSameCopyTypes(frameCopyTypes: frame.copyTypes, defaultFrameCopyTypes: defaultFrame.copyTypes))
 1441|  2.60k|            }
 1442|  2.60k|            try checkStackTop(frame.copyTypes)
 1443|  2.60k|
 1444|  2.60k|            do {
 1445|  2.60k|                let relativeOffset = iseqBuilder.insertingPC.offsetFromHead - brTableAt.offsetFromHead
 1446|  2.60k|                tableBuffer[entryIndex] = Instruction.BrTableOperand.Entry(
 1447|  2.60k|                    offset: Int32(relativeOffset)
 1448|  2.60k|                )
 1449|  2.60k|            }
 1450|  2.60k|            let emittedCopy = try copyOnBranch(targetFrame: frame)
 1451|  2.60k|            if emittedCopy {
 1452|    511|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
 1453|    511|                    let relativeOffset = continuation.offsetFromHead - brAt.offsetFromHead
 1454|    511|                    return Int32(relativeOffset)
 1455|    511|                }
 1456|  2.09k|            } else {
 1457|  2.09k|                // Optimization: If no value is copied, we can directly jump to the target
 1458|  2.09k|                iseqBuilder.fillBrTableEntry(frame.continuation, table: tableBuffer, index: entryIndex) { _, continuation in
 1459|  2.09k|                    return Instruction.BrTableOperand.Entry(offset: Int32(continuation.offsetFromHead - brTableAt.offsetFromHead))
 1460|  2.09k|                }
 1461|  2.09k|            }
 1462|  2.60k|        }
 1463|    986|        // Pop branch copy values for type checking
 1464|    986|        for type in defaultFrame.copyTypes.reversed() {
 1465|    216|            _ = try popOperand(type)
 1466|    986|        }
 1467|    986|        try markUnreachable()
 1468|    986|    }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0Os5Int32VcAJmcfu_:
 1452|    511|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0Os5Int32VcAJmcfu_AjLcfu0_:
 1452|    175|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFs5Int32VAC11ISeqBuilder021_3C1F9FC595E9AC192A47P10B121D811E8LLVyx_G_AA18MetaProgramCounterALLLVAPtcfU_:
 1452|    175|                iseqBuilder.emitWithLabel(Instruction.br, frame.continuation) { _, brAt, continuation in
 1453|    175|                    let relativeOffset = continuation.offsetFromHead - brAt.offsetFromHead
 1454|    175|                    return Int32(relativeOffset)
 1455|    175|                }
$s7WasmKit21InstructionTranslatorV12visitBrTable7targetsy0A6Parser0fG0V_tKFAA0C0O0fG7OperandV5EntryVAC11ISeqBuilder021_3C1F9FC595E9AC192A47Q10B121D811E8LLVyx_G_AA18MetaProgramCounterAPLLVtcfU0_:
 1458|  1.69k|                iseqBuilder.fillBrTableEntry(frame.continuation, table: tableBuffer, index: entryIndex) { _, continuation in
 1459|  1.69k|                    return Instruction.BrTableOperand.Entry(offset: Int32(continuation.offsetFromHead - brTableAt.offsetFromHead))
 1460|  1.69k|                }
$s7WasmKit21InstructionTranslatorV11visitReturnyyKF:
 1470|  3.54k|    mutating func visitReturn() throws -> Output {
 1471|  3.54k|        try translateReturn()
 1472|  3.54k|        try markUnreachable()
 1473|  3.54k|    }
$s7WasmKit21InstructionTranslatorV13visitCallLike021_3C1F9FC595E9AC192A47K10B121D811E8LL10calleeTypes5Int16VSg0A5Types08FunctionR0V_tKF:
 1475|  4.05k|    private mutating func visitCallLike(calleeType: FunctionType) throws -> VReg? {
 1476|  4.05k|        for parameter in calleeType.parameters.reversed() {
 1477|    584|            guard (try popOnStackOperand(parameter)) != nil else { return nil }
 1478|  4.00k|        }
 1479|  4.00k|
 1480|  4.00k|        let spAddend =
 1481|  4.00k|            valueStack.stackRegBase + VReg(valueStack.height)
 1482|  4.00k|            + FrameHeaderLayout.size(of: calleeType)
 1483|  4.00k|
 1484|  4.00k|        for result in calleeType.results {
 1485|  1.70k|            _ = valueStack.push(result)
 1486|  4.00k|        }
 1487|  4.00k|        return VReg(spAddend)
 1488|  4.05k|    }
$s7WasmKit21InstructionTranslatorV9visitCall13functionIndexys6UInt32V_tKF:
 1489|  3.78k|    mutating func visitCall(functionIndex: UInt32) throws -> Output {
 1490|  3.78k|        let calleeType = try self.module.functionType(functionIndex, interner: funcTypeInterner)
 1491|  3.77k|        guard let spAddend = try visitCallLike(calleeType: calleeType) else { return }
 1492|  3.75k|        guard let callee = self.module.resolveCallee(functionIndex) else {
 1493|      0|            // Skip actual code emission if validation-only mode
 1494|      0|            return
 1495|  3.75k|        }
 1496|  3.75k|        if callee.isWasm {
 1497|  3.31k|            if module.isSameInstance(callee.wasm.instance) {
 1498|  3.31k|                emit(.compilingCall(Instruction.CallOperand(callee: callee, spAddend: spAddend)))
 1499|  3.31k|                return
 1500|  3.31k|            }
 1501|    435|        }
 1502|    435|        emit(.call(Instruction.CallOperand(callee: callee, spAddend: spAddend)))
 1503|    435|    }
$s7WasmKit21InstructionTranslatorV17visitCallIndirect9typeIndex05tableI0ys6UInt32V_AHtKF:
 1505|    283|    mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws -> Output {
 1506|    283|        let addressType = try module.addressType(tableIndex: tableIndex)
 1507|    280|        let address = try popVRegOperand(addressType)  // function address
 1508|    279|        let calleeType = try self.module.resolveType(typeIndex)
 1509|    278|        guard let spAddend = try visitCallLike(calleeType: calleeType) else { return }
 1510|    254|        guard let address = address else { return }
 1511|    172|        let internType = funcTypeInterner.intern(calleeType)
 1512|    172|        let operand = Instruction.CallIndirectOperand(
 1513|    172|            tableIndex: tableIndex,
 1514|    172|            type: internType,
 1515|    172|            index: address,
 1516|    172|            spAddend: spAddend
 1517|    172|        )
 1518|    172|        emit(.callIndirect(operand))
 1519|    172|    }
$s7WasmKit21InstructionTranslatorV31prepareFrameHeaderForReturnCall021_3C1F9FC595E9AC192A47N10B121D811E8LL10calleeType20stackTopHeightToCopyy0A5Types08FunctionU0V_SitKF:
 1531|    100|    private mutating func prepareFrameHeaderForReturnCall(calleeType: FunctionType, stackTopHeightToCopy: Int) throws {
 1532|    100|        let calleeFrameHeader = FrameHeaderLayout(type: calleeType)
 1533|    100|        if calleeType == self.type {
 1534|     40|            // Fast path: If the callee and the caller have the same signature, we can
 1535|     40|            // skip reconstructing the frame header and we can just copy the parameters.
 1536|     60|        } else {
 1537|     60|            // Ensure all parameters are on stack to avoid conflicting with the next resize.
 1538|     60|            preserveOnStack(depth: calleeType.parameters.count)
 1539|     60|            // Resize the current frame header while moving stack slots after the header
 1540|     60|            // to the resized positions
 1541|     60|            let newHeaderSize = FrameHeaderLayout.size(of: calleeType)
 1542|     60|            let delta = newHeaderSize - FrameHeaderLayout.size(of: type)
 1543|     60|            let sizeToCopy = VReg(FrameHeaderLayout.numberOfSavingSlots) + valueStack.stackRegBase + VReg(stackTopHeightToCopy)
 1544|     60|            emit(.resizeFrameHeader(Instruction.ResizeFrameHeaderOperand(delta: delta, sizeToCopy: sizeToCopy)))
 1545|     60|        }
 1546|    100|        try copyValuesIntoResultSlots(calleeType.parameters, frameHeader: calleeFrameHeader)
 1547|     98|    }
$s7WasmKit21InstructionTranslatorV15visitReturnCall13functionIndexys6UInt32V_tKF:
 1549|     66|    mutating func visitReturnCall(functionIndex: UInt32) throws {
 1550|     66|        let calleeType = try self.module.functionType(functionIndex, interner: funcTypeInterner)
 1551|     65|        try validator.validateReturnCallLike(calleeType: calleeType, callerType: type)
 1552|     64|
 1553|     64|        guard let callee = self.module.resolveCallee(functionIndex) else {
 1554|      0|            // Skip actual code emission if validation-only mode
 1555|      0|            return
 1556|     64|        }
 1557|     64|        try prepareFrameHeaderForReturnCall(calleeType: calleeType, stackTopHeightToCopy: valueStack.height)
 1558|     63|        emit(.returnCall(Instruction.ReturnCallOperand(callee: callee)))
 1559|     63|        try markUnreachable()
 1560|     63|    }
$s7WasmKit21InstructionTranslatorV23visitReturnCallIndirect9typeIndex05tableJ0ys6UInt32V_AHtKF:
 1562|     50|    mutating func visitReturnCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws {
 1563|     50|        let stackTopHeightToCopy = valueStack.height
 1564|     50|        let addressType = try module.addressType(tableIndex: tableIndex)
 1565|     49|        // Preserve function index slot on stack
 1566|     49|        let address = try popOnStackOperand(addressType)  // function address
 1567|     48|        guard let address = address else { return }
 1568|     37|
 1569|     37|        let calleeType = try self.module.resolveType(typeIndex)
 1570|     36|        let internType = funcTypeInterner.intern(calleeType)
 1571|     36|
 1572|     36|        try prepareFrameHeaderForReturnCall(
 1573|     36|            calleeType: calleeType,
 1574|     36|            // Keep the stack space including the function index slot to be
 1575|     36|            // accessible at the `return_call_indirect` instruction point.
 1576|     36|            stackTopHeightToCopy: stackTopHeightToCopy
 1577|     36|        )
 1578|     35|
 1579|     35|        let operand = Instruction.ReturnCallIndirectOperand(
 1580|     35|            tableIndex: tableIndex,
 1581|     35|            type: internType,
 1582|     35|            index: address
 1583|     35|        )
 1584|     35|        emit(.returnCallIndirect(operand))
 1585|     35|        try markUnreachable()
 1586|     35|    }
$s7WasmKit21InstructionTranslatorV9visitDropyyKF:
 1588|     83|    mutating func visitDrop() throws -> Output {
 1589|     83|        _ = try popAnyOperand()
 1590|     82|        iseqBuilder.resetLastEmission()
 1591|     82|    }
$s7WasmKit21InstructionTranslatorV11visitSelectyyKF:
 1592|    800|    mutating func visitSelect() throws -> Output {
 1593|    800|        let condition = try popVRegOperand(.i32)
 1594|    798|        let (value1Type, value1) = try popAnyOperand()
 1595|    797|        let (value2Type, value2) = try popAnyOperand()
 1596|    796|        switch (value1Type, value2Type) {
 1597|    796|        case (.some(.ref(_)), _), (_, .some(.ref(_))):
 1598|      2|            throw ValidationError(.cannotSelectOnReferenceTypes)
 1599|    796|        case let (.some(type1), .some(type2)):
 1600|    191|            guard type1 == type2 else {
 1601|      4|                throw ValidationError(.typeMismatchOnSelect(expected: type1, actual: type2))
 1602|      4|            }
 1603|    796|        case (.unknown, _), (_, .unknown):
 1604|    603|            break
 1605|    796|        }
 1606|    790|        let result = valueStack.push(value1Type)
 1607|    790|        if let condition = condition, let value1 = value1, let value2 = value2 {
 1608|    199|            let operand = Instruction.SelectOperand(
 1609|    199|                result: result,
 1610|    199|                condition: condition,
 1611|    199|                onTrue: ensureOnVReg(value2),
 1612|    199|                onFalse: ensureOnVReg(value1)
 1613|    199|            )
 1614|    199|            emit(.select(operand))
 1615|    199|        }
 1616|    790|    }
$s7WasmKit21InstructionTranslatorV16visitTypedSelect4typey0A5Types9ValueTypeO_tKF:
 1617|    176|    mutating func visitTypedSelect(type: WasmTypes.ValueType) throws -> Output {
 1618|    176|        let condition = try popVRegOperand(.i32)
 1619|    174|        let (value1Type, value1) = try popAnyOperand()
 1620|    173|        let (_, value2) = try popAnyOperand()
 1621|    172|        // TODO: Perform actual validation
 1622|    172|        // guard value1 == ValueType(type) else {
 1623|    172|        //     throw TranslationError("Type mismatch on `select`. Expected \(value1) and \(type) to be same")
 1624|    172|        // }
 1625|    172|        // guard value2 == ValueType(type) else {
 1626|    172|        //     throw TranslationError("Type mismatch on `select`. Expected \(value2) and \(type) to be same")
 1627|    172|        // }
 1628|    172|        let result = valueStack.push(value1Type)
 1629|    172|        if let condition = condition, let value1 = value1, let value2 = value2 {
 1630|     13|            let operand = Instruction.SelectOperand(
 1631|     13|                result: result,
 1632|     13|                condition: condition,
 1633|     13|                onTrue: ensureOnVReg(value2),
 1634|     13|                onFalse: ensureOnVReg(value1)
 1635|     13|            )
 1636|     13|            emit(.select(operand))
 1637|     13|        }
 1638|    172|    }
$s7WasmKit21InstructionTranslatorV13visitLocalGet10localIndexys6UInt32V_tKF:
 1639|  2.33k|    mutating func visitLocalGet(localIndex: UInt32) throws -> Output {
 1640|  2.33k|        iseqBuilder.resetLastEmission()
 1641|  2.33k|        try valueStack.pushLocal(localIndex, locals: &locals)
 1642|  2.32k|    }
$s7WasmKit21InstructionTranslatorV18visitLocalSetOrTee10localIndex02isI0ys6UInt32V_SbtKF:
 1643|  9.12k|    mutating func visitLocalSetOrTee(localIndex: UInt32, isTee: Bool) throws {
 1644|  9.12k|        preserveLocalsOnStack(localIndex)
 1645|  9.12k|        let type = try locals.type(of: localIndex)
 1646|  9.12k|        let result = localReg(localIndex)
 1647|  9.12k|
 1648|  9.12k|        guard try checkBeforePop(typeHint: type) else { return }
 1649|  9.02k|        let op = try valueStack.pop(type)
 1650|  9.02k|
 1651|  9.02k|        if case .const(let slotIndex, _) = op {
 1652|    695|            // Optimize (local.set $x (i32.const $c)) to reg:$x = 42 rather than through const slot
 1653|    695|            let value = constantSlots.values[slotIndex]
 1654|    695|            let is32Bit = type == .i32 || type == .f32
 1655|    695|            if is32Bit {
 1656|    647|                emit(.const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg(result))))
 1657|    647|            } else {
 1658|     48|                emit(.const64(Instruction.Const64Operand(value: value, result: LLVReg(result))))
 1659|     48|            }
 1660|    695|            return
 1661|  8.32k|        }
 1662|  8.32k|
 1663|  8.32k|        let value = ensureOnVReg(op)
 1664|  8.32k|        guard try controlStack.currentFrame().reachable else { return }
 1665|  2.02k|        if !isTee, iseqBuilder.relinkLastInstructionResult(result) {
 1666|    565|            // Good news, copyStack is optimized out :)
 1667|    565|            return
 1668|  1.46k|        }
 1669|  1.46k|        emitCopyStack(from: value, to: result)
 1670|  1.46k|    }
$s7WasmKit21InstructionTranslatorV18visitLocalSetOrTee10localIndex02isI0ys6UInt32V_SbtKFSbyKXEfu_:
 1654|    343|            let is32Bit = type == .i32 || type == .f32
$s7WasmKit21InstructionTranslatorV13visitLocalSet10localIndexys6UInt32V_tKF:
 1671|  1.64k|    mutating func visitLocalSet(localIndex: UInt32) throws -> Output {
 1672|  1.64k|        try visitLocalSetOrTee(localIndex: localIndex, isTee: false)
 1673|  1.63k|    }
$s7WasmKit21InstructionTranslatorV13visitLocalTee10localIndexys6UInt32V_tKF:
 1674|  7.48k|    mutating func visitLocalTee(localIndex: UInt32) throws -> Output {
 1675|  7.48k|        try visitLocalSetOrTee(localIndex: localIndex, isTee: true)
 1676|  7.48k|        _ = try valueStack.pushLocal(localIndex, locals: &locals)
 1677|  7.48k|    }
$s7WasmKit21InstructionTranslatorV14visitGlobalGet11globalIndexys6UInt32V_tKF:
 1678|  9.77k|    mutating func visitGlobalGet(globalIndex: UInt32) throws -> Output {
 1679|  9.77k|        let type = try module.globalType(globalIndex)
 1680|  9.74k|        let result = valueStack.push(type)
 1681|  9.74k|        guard let global = module.resolveGlobal(globalIndex) else {
 1682|      0|            // Skip actual code emission if validation-only mode
 1683|      0|            return
 1684|  9.74k|        }
 1685|  9.74k|        emit(.globalGet(Instruction.GlobalAndVRegOperand(reg: LLVReg(result), global: global)))
 1686|  9.74k|    }
$s7WasmKit21InstructionTranslatorV14visitGlobalSet11globalIndexys6UInt32V_tKF:
 1687|  6.42k|    mutating func visitGlobalSet(globalIndex: UInt32) throws -> Output {
 1688|  6.42k|        let type = try module.globalType(globalIndex)
 1689|  6.41k|        guard let value = try popVRegOperand(type) else { return }
 1690|  6.38k|        guard let global = module.resolveGlobal(globalIndex) else {
 1691|      0|            // Skip actual code emission if validation-only mode
 1692|      0|            return
 1693|  6.38k|        }
 1694|  6.38k|        try validator.validateGlobalSet(global.globalType)
 1695|  6.38k|        emit(.globalSet(Instruction.GlobalAndVRegOperand(reg: LLVReg(value), global: global)))
 1696|  6.38k|    }
$s7WasmKit21InstructionTranslatorV8pushEmit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0Os5Int16VctF:
 1701|  11.8k|    ) {
 1702|  11.8k|        let register = valueStack.push(type)
 1703|  11.8k|        emit(
 1704|  11.8k|            instruction(register),
 1705|  11.8k|            resultRelink: { newResult in
 1706|  11.8k|                instruction(newResult)
 1707|  11.8k|            })
 1708|  11.8k|    }
$s7WasmKit21InstructionTranslatorV8pushEmit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0Os5Int16VctFAjLcfU_:
 1705|     20|            resultRelink: { newResult in
 1706|     20|                instruction(newResult)
 1707|     20|            })
$s7WasmKit21InstructionTranslatorV11popPushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0Os5Int16V_AlC0R5StackVyx_GtctKF:
 1713|  81.0k|    ) throws {
 1714|  81.0k|        let value = try popVRegOperand(pop)
 1715|  80.8k|        let result = valueStack.push(push)
 1716|  80.8k|        if let value = value {
 1717|  71.5k|            emit(
 1718|  71.5k|                instruction(value, result, valueStack),
 1719|  71.5k|                resultRelink: { [valueStack] newResult in
 1720|  71.5k|                    instruction(value, newResult, valueStack)
 1721|  71.5k|                })
 1722|  71.5k|        }
 1723|  80.8k|    }
$s7WasmKit21InstructionTranslatorV11popPushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0Os5Int16V_AlC0R5StackVyx_GtctKFAjLcfU_:
 1719|    514|                resultRelink: { [valueStack] newResult in
 1720|    514|                    instruction(value, newResult, valueStack)
 1721|    514|                })
$s7WasmKit21InstructionTranslatorV8pop3Emit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_A2Ht_AA0C0Os5Int16V_A2Lt_AC0Q5StackVyx_GztXEtKF:
 1731|    225|    ) throws {
 1732|    225|        guard let pop1 = try popVRegOperand(pops.0),
 1733|    221|            let pop2 = try popVRegOperand(pops.1),
 1734|    220|            let pop3 = try popVRegOperand(pops.2)
 1735|    219|        else { return }
 1736|     30|        emit(instruction((pop1, pop2, pop3), &valueStack))
 1737|     30|    }
$s7WasmKit21InstructionTranslatorV8pop2Emit021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AHt_AA0C0Os5Int16V_ALt_AC0Q5StackVyx_GztXEtKF:
 1745|    111|    ) throws {
 1746|    111|        guard let pop1 = try popVRegOperand(pops.0),
 1747|    106|            let pop2 = try popVRegOperand(pops.1)
 1748|    105|        else { return }
 1749|     10|        emit(instruction((pop1, pop2), &valueStack))
 1750|     10|    }
$s7WasmKit21InstructionTranslatorV12pop2PushEmit021_3C1F9FC595E9AC192A47K10B121D811E8LLyy0A5Types9ValueTypeO_AHt_AhA0C0Os5Int16V_ALt_ALtctKF:
 1759|     34|    ) throws {
 1760|     34|        guard let pop1 = try popVRegOperand(pops.0),
 1761|     33|            let pop2 = try popVRegOperand(pops.1)
 1762|     32|        else { return }
 1763|      0|        let result = valueStack.push(push)
 1764|      0|        emit(
 1765|      0|            instruction((pop1, pop2), result),
 1766|      0|            resultRelink: { result in
 1767|      0|                instruction((pop1, pop2), result)
 1768|      0|            })
 1769|      0|    }
$s7WasmKit21InstructionTranslatorV9visitLoad021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVctKF:
 1776|  19.4k|    ) throws {
 1777|  19.4k|        let isMemory64 = try module.isMemory64(memoryIndex: 0)
 1778|  19.4k|        try validator.validateMemArg(memarg, naturalAlignment: naturalAlignment)
 1779|  19.4k|        try popPushEmit(.address(isMemory64: isMemory64), type) { value, result, stack in
 1780|  19.4k|            let loadOperand = Instruction.LoadOperand(
 1781|  19.4k|                offset: memarg.offset,
 1782|  19.4k|                pointer: value,
 1783|  19.4k|                result: result
 1784|  19.4k|            )
 1785|  19.4k|            return instruction(loadOperand)
 1786|  19.4k|        }
 1787|  19.4k|    }
$s7WasmKit21InstructionTranslatorV9visitLoad021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVctKFAMs5Int16V_AqC0T5StackVyx_GtcfU_:
 1779|  15.2k|        try popPushEmit(.address(isMemory64: isMemory64), type) { value, result, stack in
 1780|  15.2k|            let loadOperand = Instruction.LoadOperand(
 1781|  15.2k|                offset: memarg.offset,
 1782|  15.2k|                pointer: value,
 1783|  15.2k|                result: result
 1784|  15.2k|            )
 1785|  15.2k|            return instruction(loadOperand)
 1786|  15.2k|        }
$s7WasmKit21InstructionTranslatorV10visitStore021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A6Parser6MemArgV_0A5Types9ValueTypeOSiAA0C0OAM0F7OperandVXEtKF:
 1793|    452|    ) throws {
 1794|    452|        let isMemory64 = try module.isMemory64(memoryIndex: 0)
 1795|    446|        try validator.validateMemArg(memarg, naturalAlignment: naturalAlignment)
 1796|    435|        let value = try popVRegOperand(type)
 1797|    433|        let pointer = try popVRegOperand(.address(isMemory64: isMemory64))
 1798|    432|        if let value = value, let pointer = pointer {
 1799|    250|            let storeOperand = Instruction.StoreOperand(
 1800|    250|                offset: memarg.offset,
 1801|    250|                pointer: pointer,
 1802|    250|                value: value
 1803|    250|            )
 1804|    250|            emit(instruction(storeOperand))
 1805|    250|        }
 1806|    432|    }
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKF:
 1808|  19.4k|    mutating func visitLoad(_ load: WasmParser.Instruction.Load, memarg: MemArg) throws {
 1809|  19.4k|        let instruction: (Instruction.LoadOperand) -> Instruction
 1810|  19.4k|        switch load {
 1811|  19.4k|        case .i32Load: instruction = Instruction.i32Load
 1812|  19.4k|        case .i64Load: instruction = Instruction.i64Load
 1813|  19.4k|        case .f32Load: instruction = Instruction.f32Load
 1814|  19.4k|        case .f64Load: instruction = Instruction.f64Load
 1815|  19.4k|        case .i32Load8S: instruction = Instruction.i32Load8S
 1816|  19.4k|        case .i32Load8U: instruction = Instruction.i32Load8U
 1817|  19.4k|        case .i32Load16S: instruction = Instruction.i32Load16S
 1818|  19.4k|        case .i32Load16U: instruction = Instruction.i32Load16U
 1819|  19.4k|        case .i64Load8S: instruction = Instruction.i64Load8S
 1820|  19.4k|        case .i64Load8U: instruction = Instruction.i64Load8U
 1821|  19.4k|        case .i64Load16S: instruction = Instruction.i64Load16S
 1822|  19.4k|        case .i64Load16U: instruction = Instruction.i64Load16U
 1823|  19.4k|        case .i64Load32S: instruction = Instruction.i64Load32S
 1824|  19.4k|        case .i64Load32U: instruction = Instruction.i64Load32U
 1825|  19.4k|        }
 1826|  19.4k|        try visitLoad(memarg, load.type, load.naturalAlignment, instruction)
 1827|  19.4k|    }
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_:
 1811|    231|        case .i32Load: instruction = Instruction.i32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_AmOcfu0_:
 1811|    216|        case .i32Load: instruction = Instruction.i32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_:
 1812|    102|        case .i64Load: instruction = Instruction.i64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_AmOcfu2_:
 1812|    100|        case .i64Load: instruction = Instruction.i64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_:
 1813|  2.40k|        case .f32Load: instruction = Instruction.f32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_AmOcfu4_:
 1813|    119|        case .f32Load: instruction = Instruction.f32Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_:
 1814|  5.78k|        case .f64Load: instruction = Instruction.f64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_AmOcfu6_:
 1814|  4.02k|        case .f64Load: instruction = Instruction.f64Load
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_:
 1815|    925|        case .i32Load8S: instruction = Instruction.i32Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_AmOcfu8_:
 1815|    921|        case .i32Load8S: instruction = Instruction.i32Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_:
 1816|     37|        case .i32Load8U: instruction = Instruction.i32Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_AmOcfu10_:
 1816|     33|        case .i32Load8U: instruction = Instruction.i32Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_:
 1817|  1.03k|        case .i32Load16S: instruction = Instruction.i32Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_AmOcfu12_:
 1817|  1.01k|        case .i32Load16S: instruction = Instruction.i32Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_:
 1818|    390|        case .i32Load16U: instruction = Instruction.i32Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_AmOcfu14_:
 1818|    380|        case .i32Load16U: instruction = Instruction.i32Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_:
 1819|    209|        case .i64Load8S: instruction = Instruction.i64Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_AmOcfu16_:
 1819|    205|        case .i64Load8S: instruction = Instruction.i64Load8S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu17_:
 1820|    223|        case .i64Load8U: instruction = Instruction.i64Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu17_AmOcfu18_:
 1820|    213|        case .i64Load8U: instruction = Instruction.i64Load8U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu19_:
 1821|    357|        case .i64Load16S: instruction = Instruction.i64Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu19_AmOcfu20_:
 1821|    351|        case .i64Load16S: instruction = Instruction.i64Load16S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu21_:
 1822|    175|        case .i64Load16U: instruction = Instruction.i64Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu21_AmOcfu22_:
 1822|    170|        case .i64Load16U: instruction = Instruction.i64Load16U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu23_:
 1823|  7.41k|        case .i64Load32S: instruction = Instruction.i64Load32S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu23_AmOcfu24_:
 1823|  7.34k|        case .i64Load32S: instruction = Instruction.i64Load32S
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu25_:
 1824|    178|        case .i64Load32U: instruction = Instruction.i64Load32U
$s7WasmKit21InstructionTranslatorV9visitLoad_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu25_AmOcfu26_:
 1824|    105|        case .i64Load32U: instruction = Instruction.i64Load32U
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKF:
 1829|    452|    mutating func visitStore(_ store: WasmParser.Instruction.Store, memarg: MemArg) throws {
 1830|    452|        let instruction: (Instruction.StoreOperand) -> Instruction
 1831|    452|        switch store {
 1832|    452|        case .i32Store: instruction = Instruction.i32Store
 1833|    452|        case .i64Store: instruction = Instruction.i64Store
 1834|    452|        case .f32Store: instruction = Instruction.f32Store
 1835|    452|        case .f64Store: instruction = Instruction.f64Store
 1836|    452|        case .i32Store8: instruction = Instruction.i32Store8
 1837|    452|        case .i32Store16: instruction = Instruction.i32Store16
 1838|    452|        case .i64Store8: instruction = Instruction.i64Store8
 1839|    452|        case .i64Store16: instruction = Instruction.i64Store16
 1840|    452|        case .i64Store32: instruction = Instruction.i64Store32
 1841|    452|        }
 1842|    452|        try visitStore(memarg, store.type, store.naturalAlignment, instruction)
 1843|    432|    }
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_:
 1832|     81|        case .i32Store: instruction = Instruction.i32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu_AmOcfu0_:
 1832|     18|        case .i32Store: instruction = Instruction.i32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_:
 1833|     12|        case .i64Store: instruction = Instruction.i64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu1_AmOcfu2_:
 1833|      8|        case .i64Store: instruction = Instruction.i64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_:
 1834|    111|        case .f32Store: instruction = Instruction.f32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu3_AmOcfu4_:
 1834|     99|        case .f32Store: instruction = Instruction.f32Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_:
 1835|     13|        case .f64Store: instruction = Instruction.f64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu5_AmOcfu6_:
 1835|      3|        case .f64Store: instruction = Instruction.f64Store
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_:
 1836|     56|        case .i32Store8: instruction = Instruction.i32Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu7_AmOcfu8_:
 1836|     51|        case .i32Store8: instruction = Instruction.i32Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_:
 1837|     85|        case .i32Store16: instruction = Instruction.i32Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu9_AmOcfu10_:
 1837|     40|        case .i32Store16: instruction = Instruction.i32Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_:
 1838|     22|        case .i64Store8: instruction = Instruction.i64Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu11_AmOcfu12_:
 1838|     15|        case .i64Store8: instruction = Instruction.i64Store8
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_:
 1839|     55|        case .i64Store16: instruction = Instruction.i64Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu13_AmOcfu14_:
 1839|     10|        case .i64Store16: instruction = Instruction.i64Store16
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_:
 1840|     17|        case .i64Store32: instruction = Instruction.i64Store32
$s7WasmKit21InstructionTranslatorV10visitStore_6memargy0A6Parser0C0O0F0O_AF6MemArgVtKFAaGOAM0F7OperandVcAMmcfu15_AmOcfu16_:
 1840|      6|        case .i64Store32: instruction = Instruction.i64Store32
$s7WasmKit21InstructionTranslatorV15visitMemorySize6memoryys6UInt32V_tKF:
 1844|  10.2k|    mutating func visitMemorySize(memory: UInt32) throws -> Output {
 1845|  10.2k|        let sizeType: ValueType = try module.isMemory64(memoryIndex: memory) ? .i64 : .i32
 1846|  10.2k|        pushEmit(sizeType, { .memorySize(Instruction.MemorySizeOperand(memoryIndex: memory, result: LVReg($0))) })
 1847|  10.2k|    }
$s7WasmKit21InstructionTranslatorV15visitMemorySize6memoryys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 1846|  10.2k|        pushEmit(sizeType, { .memorySize(Instruction.MemorySizeOperand(memoryIndex: memory, result: LVReg($0))) })
$s7WasmKit21InstructionTranslatorV15visitMemoryGrow6memoryys6UInt32V_tKF:
 1848|  2.10k|    mutating func visitMemoryGrow(memory: UInt32) throws -> Output {
 1849|  2.10k|        let isMemory64 = try module.isMemory64(memoryIndex: memory)
 1850|  2.10k|        let sizeType = ValueType.address(isMemory64: isMemory64)
 1851|  2.10k|        // Just pop/push the same type (i64 or i32) value
 1852|  2.10k|        try popPushEmit(sizeType, sizeType) { value, result, stack in
 1853|  2.10k|            .memoryGrow(
 1854|  2.10k|                Instruction.MemoryGrowOperand(
 1855|  2.10k|                    result: result, delta: value, memory: memory
 1856|  2.10k|                ))
 1857|  2.10k|        }
 1858|  2.10k|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryGrow6memoryys6UInt32V_tKFAA0C0Os5Int16V_AkC10ValueStackVyx_GtcfU_:
 1852|  1.96k|        try popPushEmit(sizeType, sizeType) { value, result, stack in
 1853|  1.96k|            .memoryGrow(
 1854|  1.96k|                Instruction.MemoryGrowOperand(
 1855|  1.96k|                    result: result, delta: value, memory: memory
 1856|  1.96k|                ))
 1857|  1.96k|        }
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtF:
 1860|  23.7k|    private mutating func visitConst(_ type: ValueType, _ value: Value) {
 1861|  23.7k|        if let constSlotIndex = constantSlots.allocate(value) {
 1862|  22.3k|            valueStack.pushConst(constSlotIndex, type: type)
 1863|  22.3k|            iseqBuilder.resetLastEmission()
 1864|  22.3k|            return
 1865|  22.3k|        }
 1866|  1.40k|        let value = UntypedValue(value)
 1867|  1.40k|        let is32Bit = type == .i32 || type == .f32
 1868|  1.40k|        if is32Bit {
 1869|    863|            pushEmit(
 1870|    863|                type,
 1871|    863|                {
 1872|    863|                    .const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg($0)))
 1873|    863|                })
 1874|    863|        } else {
 1875|    537|            pushEmit(type, { .const64(Instruction.Const64Operand(value: value, result: LLVReg($0))) })
 1876|    537|        }
 1877|  1.40k|    }
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFSbyKXEfu_:
 1867|    894|        let is32Bit = type == .i32 || type == .f32
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFAA0C0Os5Int16VcfU_:
 1871|    872|                {
 1872|    872|                    .const32(Instruction.Const32Operand(value: UInt32(value.storage), result: LVReg($0)))
 1873|    872|                })
$s7WasmKit21InstructionTranslatorV10visitConst021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AF0Q0OtFAA0C0Os5Int16VcfU0_:
 1875|    548|            pushEmit(type, { .const64(Instruction.Const64Operand(value: value, result: LLVReg($0))) })
$s7WasmKit21InstructionTranslatorV13visitI32Const5valueys5Int32V_tF:
 1878|  8.12k|    mutating func visitI32Const(value: Int32) -> Output { visitConst(.i32, .i32(UInt32(bitPattern: value))) }
$s7WasmKit21InstructionTranslatorV13visitI64Const5valueys5Int64V_tF:
 1879|  9.40k|    mutating func visitI64Const(value: Int64) -> Output { visitConst(.i64, .i64(UInt64(bitPattern: value))) }
$s7WasmKit21InstructionTranslatorV13visitF32Const5valuey0A6Parser7IEEE754O7Float32V_tF:
 1880|  3.97k|    mutating func visitF32Const(value: IEEE754.Float32) -> Output { visitConst(.f32, .f32(value.bitPattern)) }
$s7WasmKit21InstructionTranslatorV13visitF64Const5valuey0A6Parser7IEEE754O7Float64V_tF:
 1881|  2.28k|    mutating func visitF64Const(value: IEEE754.Float64) -> Output { visitConst(.f64, .f64(value.bitPattern)) }
$s7WasmKit21InstructionTranslatorV12visitRefNull4typey0A5Types13ReferenceTypeO_tF:
 1882|     60|    mutating func visitRefNull(type: WasmTypes.ReferenceType) -> Output {
 1883|     60|        pushEmit(.ref(type), { .refNull(Instruction.RefNullOperand(result: $0, type: type)) })
 1884|     60|    }
$s7WasmKit21InstructionTranslatorV12visitRefNull4typey0A5Types13ReferenceTypeO_tFAA0C0Os5Int16VcfU_:
 1883|     60|        pushEmit(.ref(type), { .refNull(Instruction.RefNullOperand(result: $0, type: type)) })
$s7WasmKit21InstructionTranslatorV14visitRefIsNullyyKF:
 1885|     27|    mutating func visitRefIsNull() throws -> Output {
 1886|     27|        let value = try valueStack.popRef()
 1887|     20|        let result = valueStack.push(.i32)
 1888|     20|        emit(.refIsNull(Instruction.RefIsNullOperand(value: LVReg(ensureOnVReg(value)), result: LVReg(result))))
 1889|     20|    }
$s7WasmKit21InstructionTranslatorV12visitRefFunc13functionIndexys6UInt32V_tKF:
 1890|     79|    mutating func visitRefFunc(functionIndex: UInt32) throws -> Output {
 1891|     79|        try validator.validateRefFunc(functionIndex: functionIndex)
 1892|     77|        pushEmit(.ref(.funcRef), { .refFunc(Instruction.RefFuncOperand(index: functionIndex, result: LVReg($0))) })
 1893|     77|    }
$s7WasmKit21InstructionTranslatorV12visitRefFunc13functionIndexys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 1892|     77|        pushEmit(.ref(.funcRef), { .refFunc(Instruction.RefFuncOperand(index: functionIndex, result: LVReg($0))) })
$s7WasmKit21InstructionTranslatorV10visitUnary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ0F7OperandVctKF:
 1895|  26.2k|    private mutating func visitUnary(_ operand: ValueType, _ instruction: @escaping (Instruction.UnaryOperand) -> Instruction) throws {
 1896|  26.2k|        try popPushEmit(operand, operand) { value, result, stack in
 1897|  26.2k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1898|  26.2k|        }
 1899|  26.2k|    }
$s7WasmKit21InstructionTranslatorV10visitUnary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ0F7OperandVctKFAJs5Int16V_AnC0Q5StackVyx_GtcfU_:
 1896|  23.2k|        try popPushEmit(operand, operand) { value, result, stack in
 1897|  23.2k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1898|  23.2k|        }
$s7WasmKit21InstructionTranslatorV11visitBinary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ0F7OperandVctKF:
 1904|  29.9k|    ) throws {
 1905|  29.9k|        let rhs = try popVRegOperand(operand)
 1906|  29.7k|        let lhs = try popVRegOperand(operand)
 1907|  29.6k|        let result = valueStack.push(result)
 1908|  29.6k|        guard let lhs = lhs, let rhs = rhs else { return }
 1909|  17.0k|        emit(
 1910|  17.0k|            instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs)),
 1911|  17.0k|            resultRelink: { result in
 1912|  17.0k|                return instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs))
 1913|  17.0k|            }
 1914|  17.0k|        )
 1915|  17.0k|    }
$s7WasmKit21InstructionTranslatorV11visitBinary021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ0F7OperandVctKFAJs5Int16VcfU_:
 1911|     31|            resultRelink: { result in
 1912|     31|                return instruction(Instruction.BinaryOperand(result: LVReg(result), lhs: lhs, rhs: rhs))
 1913|     31|            }
$s7WasmKit21InstructionTranslatorV8visitCmp021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AA0C0OAJ13BinaryOperandVctKF:
 1916|  3.75k|    private mutating func visitCmp(_ operand: ValueType, _ instruction: @escaping (Instruction.BinaryOperand) -> Instruction) throws {
 1917|  3.75k|        try visitBinary(operand, .i32, instruction)
 1918|  3.66k|    }
$s7WasmKit21InstructionTranslatorV15visitConversion021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ12UnaryOperandVctKF:
 1919|  32.3k|    private mutating func visitConversion(_ from: ValueType, _ to: ValueType, _ instruction: @escaping (Instruction.UnaryOperand) -> Instruction) throws {
 1920|  32.3k|        try popPushEmit(from, to) { value, result, stack in
 1921|  32.3k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1922|  32.3k|        }
 1923|  32.2k|    }
$s7WasmKit21InstructionTranslatorV15visitConversion021_3C1F9FC595E9AC192A47J10B121D811E8LLyy0A5Types9ValueTypeO_AhA0C0OAJ12UnaryOperandVctKFAJs5Int16V_AnC0Q5StackVyx_GtcfU_:
 1920|  31.2k|        try popPushEmit(from, to) { value, result, stack in
 1921|  31.2k|            return instruction(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1922|  31.2k|        }
$s7WasmKit21InstructionTranslatorV11visitI32EqzyyKF:
 1924|    478|    mutating func visitI32Eqz() throws -> Output {
 1925|    478|        try popPushEmit(.i32, .i32) { value, result, stack in
 1926|    478|            .i32Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1927|    478|        }
 1928|    477|    }
$s7WasmKit21InstructionTranslatorV11visitI32EqzyyKFAA0C0Os5Int16V_AhC10ValueStackVyx_GtcfU_:
 1925|    221|        try popPushEmit(.i32, .i32) { value, result, stack in
 1926|    221|            .i32Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 1927|    221|        }
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKF:
 1929|  3.75k|    mutating func visitCmp(_ cmp: WasmParser.Instruction.Cmp) throws {
 1930|  3.75k|        let operand: ValueType
 1931|  3.75k|        let instruction: (Instruction.BinaryOperand) -> Instruction
 1932|  3.75k|        switch cmp {
 1933|  3.75k|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
 1934|  3.75k|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
 1935|  3.75k|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
 1936|  3.75k|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
 1937|  3.75k|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
 1938|  3.75k|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
 1939|  3.75k|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
 1940|  3.75k|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
 1941|  3.75k|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
 1942|  3.75k|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
 1943|  3.75k|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
 1944|  3.75k|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
 1945|  3.75k|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
 1946|  3.75k|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
 1947|  3.75k|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
 1948|  3.75k|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
 1949|  3.75k|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
 1950|  3.75k|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
 1951|  3.75k|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
 1952|  3.75k|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
 1953|  3.75k|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
 1954|  3.75k|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
 1955|  3.75k|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
 1956|  3.75k|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
 1957|  3.75k|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
 1958|  3.75k|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
 1959|  3.75k|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
 1960|  3.75k|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
 1961|  3.75k|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
 1962|  3.75k|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
 1963|  3.75k|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
 1964|  3.75k|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
 1965|  3.75k|        }
 1966|  3.75k|        try visitCmp(operand, instruction)
 1967|  3.66k|    }
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu_:
 1933|    204|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu_AjLcfu0_:
 1933|     94|        case .i32Eq: (operand, instruction) = (.i32, Instruction.i32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu1_:
 1934|    121|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu1_AjLcfu2_:
 1934|     60|        case .i32Ne: (operand, instruction) = (.i32, Instruction.i32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu3_:
 1935|    381|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu3_AjLcfu4_:
 1935|    286|        case .i32LtS: (operand, instruction) = (.i32, Instruction.i32LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu5_:
 1936|    175|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu5_AjLcfu6_:
 1936|     61|        case .i32LtU: (operand, instruction) = (.i32, Instruction.i32LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu7_:
 1937|    373|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu7_AjLcfu8_:
 1937|    158|        case .i32GtS: (operand, instruction) = (.i32, Instruction.i32GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu9_:
 1938|    366|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu9_AjLcfu10_:
 1938|    148|        case .i32GtU: (operand, instruction) = (.i32, Instruction.i32GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu11_:
 1939|    136|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu11_AjLcfu12_:
 1939|     89|        case .i32LeS: (operand, instruction) = (.i32, Instruction.i32LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu13_:
 1940|    103|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu13_AjLcfu14_:
 1940|     42|        case .i32LeU: (operand, instruction) = (.i32, Instruction.i32LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu15_:
 1941|    297|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu15_AjLcfu16_:
 1941|    201|        case .i32GeS: (operand, instruction) = (.i32, Instruction.i32GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu17_:
 1942|    189|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu17_AjLcfu18_:
 1942|    123|        case .i32GeU: (operand, instruction) = (.i32, Instruction.i32GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu19_:
 1943|     26|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu19_AjLcfu20_:
 1943|     20|        case .i64Eq: (operand, instruction) = (.i64, Instruction.i64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu21_:
 1944|     39|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu21_AjLcfu22_:
 1944|     32|        case .i64Ne: (operand, instruction) = (.i64, Instruction.i64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu23_:
 1945|     83|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu23_AjLcfu24_:
 1945|     89|        case .i64LtS: (operand, instruction) = (.i64, Instruction.i64LtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu25_:
 1946|     25|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu25_AjLcfu26_:
 1946|     22|        case .i64LtU: (operand, instruction) = (.i64, Instruction.i64LtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu27_:
 1947|     21|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu27_AjLcfu28_:
 1947|     20|        case .i64GtS: (operand, instruction) = (.i64, Instruction.i64GtS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu29_:
 1948|     27|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu29_AjLcfu30_:
 1948|     24|        case .i64GtU: (operand, instruction) = (.i64, Instruction.i64GtU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu31_:
 1949|     39|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu31_AjLcfu32_:
 1949|     38|        case .i64LeS: (operand, instruction) = (.i64, Instruction.i64LeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu33_:
 1950|     60|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu33_AjLcfu34_:
 1950|     57|        case .i64LeU: (operand, instruction) = (.i64, Instruction.i64LeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu35_:
 1951|     55|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu35_AjLcfu36_:
 1951|     32|        case .i64GeS: (operand, instruction) = (.i64, Instruction.i64GeS)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu37_:
 1952|    105|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu37_AjLcfu38_:
 1952|    104|        case .i64GeU: (operand, instruction) = (.i64, Instruction.i64GeU)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu39_:
 1953|     20|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu39_AjLcfu40_:
 1953|     10|        case .f32Eq: (operand, instruction) = (.f32, Instruction.f32Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu41_:
 1954|     87|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu41_AjLcfu42_:
 1954|     75|        case .f32Ne: (operand, instruction) = (.f32, Instruction.f32Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu43_:
 1955|     56|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu43_AjLcfu44_:
 1955|     16|        case .f32Lt: (operand, instruction) = (.f32, Instruction.f32Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu45_:
 1956|     42|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu45_AjLcfu46_:
 1956|     29|        case .f32Gt: (operand, instruction) = (.f32, Instruction.f32Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu47_:
 1957|    127|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu47_AjLcfu48_:
 1957|    110|        case .f32Le: (operand, instruction) = (.f32, Instruction.f32Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu49_:
 1958|     61|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu49_AjLcfu50_:
 1958|     26|        case .f32Ge: (operand, instruction) = (.f32, Instruction.f32Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu51_:
 1959|    272|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu51_AjLcfu52_:
 1959|    135|        case .f64Eq: (operand, instruction) = (.f64, Instruction.f64Eq)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu53_:
 1960|    141|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu53_AjLcfu54_:
 1960|    140|        case .f64Ne: (operand, instruction) = (.f64, Instruction.f64Ne)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu55_:
 1961|     45|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu55_AjLcfu56_:
 1961|     40|        case .f64Lt: (operand, instruction) = (.f64, Instruction.f64Lt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu57_:
 1962|     28|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu57_AjLcfu58_:
 1962|     11|        case .f64Gt: (operand, instruction) = (.f64, Instruction.f64Gt)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu59_:
 1963|     34|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu59_AjLcfu60_:
 1963|     21|        case .f64Le: (operand, instruction) = (.f64, Instruction.f64Le)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu61_:
 1964|     21|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
$s7WasmKit21InstructionTranslatorV8visitCmpyy0A6Parser0C0O0F0OKFAaFOAJ13BinaryOperandVcAJmcfu61_AjLcfu62_:
 1964|     13|        case .f64Ge: (operand, instruction) = (.f64, Instruction.f64Ge)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKF:
 1968|  26.1k|    public mutating func visitBinary(_ binary: WasmParser.Instruction.Binary) throws {
 1969|  26.1k|        let operand: ValueType
 1970|  26.1k|        let result: ValueType
 1971|  26.1k|        let instruction: (Instruction.BinaryOperand) -> Instruction
 1972|  26.1k|        switch binary {
 1973|  26.1k|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
 1974|  26.1k|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
 1975|  26.1k|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
 1976|  26.1k|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
 1977|  26.1k|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
 1978|  26.1k|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
 1979|  26.1k|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
 1980|  26.1k|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
 1981|  26.1k|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
 1982|  26.1k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
 1983|  26.1k|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
 1984|  26.1k|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
 1985|  26.1k|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
 1986|  26.1k|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
 1987|  26.1k|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
 1988|  26.1k|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
 1989|  26.1k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
 1990|  26.1k|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
 1991|  26.1k|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
 1992|  26.1k|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
 1993|  26.1k|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
 1994|  26.1k|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
 1995|  26.1k|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
 1996|  26.1k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
 1997|  26.1k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
 1998|  26.1k|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
 1999|  26.1k|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
 2000|  26.1k|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
 2001|  26.1k|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
 2002|  26.1k|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
 2003|  26.1k|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
 2004|  26.1k|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
 2005|  26.1k|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
 2006|  26.1k|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
 2007|  26.1k|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
 2008|  26.1k|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
 2009|  26.1k|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
 2010|  26.1k|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
 2011|  26.1k|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
 2012|  26.1k|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
 2013|  26.1k|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
 2014|  26.1k|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
 2015|  26.1k|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
 2016|  26.1k|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
 2017|  26.1k|        }
 2018|  26.1k|        try visitBinary(operand, result, instruction)
 2019|  25.9k|    }
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_:
 1973|    106|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_AjLcfu0_:
 1973|     50|        case .i32Add: (operand, result, instruction) = (.i32, .i32, Instruction.i32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_:
 1974|    158|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_AjLcfu2_:
 1974|     92|        case .i32Sub: (operand, result, instruction) = (.i32, .i32, Instruction.i32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_:
 1975|    276|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_AjLcfu4_:
 1975|     95|        case .i32Mul: (operand, result, instruction) = (.i32, .i32, Instruction.i32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_:
 1976|    215|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_AjLcfu6_:
 1976|     74|        case .i32DivS: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_:
 1977|  2.01k|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_AjLcfu8_:
 1977|    232|        case .i32DivU: (operand, result, instruction) = (.i32, .i32, Instruction.i32DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_:
 1978|    212|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_AjLcfu10_:
 1978|    122|        case .i32RemS: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_:
 1979|    704|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_AjLcfu12_:
 1979|    306|        case .i32RemU: (operand, result, instruction) = (.i32, .i32, Instruction.i32RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_:
 1980|    171|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_AjLcfu14_:
 1980|     90|        case .i32And: (operand, result, instruction) = (.i32, .i32, Instruction.i32And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_:
 1981|    126|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_AjLcfu16_:
 1981|     52|        case .i32Or: (operand, result, instruction) = (.i32, .i32, Instruction.i32Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_:
 1982|  3.32k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_AjLcfu18_:
 1982|  3.12k|        case .i32Xor: (operand, result, instruction) = (.i32, .i32, Instruction.i32Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_:
 1983|    281|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_AjLcfu20_:
 1983|     55|        case .i32Shl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_:
 1984|    402|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_AjLcfu22_:
 1984|    102|        case .i32ShrS: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_:
 1985|    600|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_AjLcfu24_:
 1985|    199|        case .i32ShrU: (operand, result, instruction) = (.i32, .i32, Instruction.i32ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_:
 1986|    344|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_AjLcfu26_:
 1986|    141|        case .i32Rotl: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_:
 1987|    342|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_AjLcfu28_:
 1987|    208|        case .i32Rotr: (operand, result, instruction) = (.i32, .i32, Instruction.i32Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_:
 1988|    268|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_AjLcfu30_:
 1988|     61|        case .i64Add: (operand, result, instruction) = (.i64, .i64, Instruction.i64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_:
 1989|  4.95k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_AjLcfu32_:
 1989|  2.77k|        case .i64Sub: (operand, result, instruction) = (.i64, .i64, Instruction.i64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_:
 1990|    207|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_AjLcfu34_:
 1990|     83|        case .i64Mul: (operand, result, instruction) = (.i64, .i64, Instruction.i64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_:
 1991|    405|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_AjLcfu36_:
 1991|    145|        case .i64DivS: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_:
 1992|    217|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_AjLcfu38_:
 1992|    107|        case .i64DivU: (operand, result, instruction) = (.i64, .i64, Instruction.i64DivU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_:
 1993|    193|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_AjLcfu40_:
 1993|     98|        case .i64RemS: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_:
 1994|    295|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_AjLcfu42_:
 1994|    174|        case .i64RemU: (operand, result, instruction) = (.i64, .i64, Instruction.i64RemU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_:
 1995|    207|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_AjLcfu44_:
 1995|     87|        case .i64And: (operand, result, instruction) = (.i64, .i64, Instruction.i64And)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_:
 1996|  3.54k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_AjLcfu46_:
 1996|  3.39k|        case .i64Or: (operand, result, instruction) = (.i64, .i64, Instruction.i64Or)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_:
 1997|  3.31k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_AjLcfu48_:
 1997|  1.98k|        case .i64Xor: (operand, result, instruction) = (.i64, .i64, Instruction.i64Xor)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu49_:
 1998|    299|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu49_AjLcfu50_:
 1998|     35|        case .i64Shl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Shl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu51_:
 1999|    246|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu51_AjLcfu52_:
 1999|    174|        case .i64ShrS: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrS)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu53_:
 2000|    151|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu53_AjLcfu54_:
 2000|     70|        case .i64ShrU: (operand, result, instruction) = (.i64, .i64, Instruction.i64ShrU)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu55_:
 2001|    279|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu55_AjLcfu56_:
 2001|    139|        case .i64Rotl: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotl)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu57_:
 2002|    124|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu57_AjLcfu58_:
 2002|     34|        case .i64Rotr: (operand, result, instruction) = (.i64, .i64, Instruction.i64Rotr)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu59_:
 2003|    160|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu59_AjLcfu60_:
 2003|     52|        case .f32Add: (operand, result, instruction) = (.f32, .f32, Instruction.f32Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu61_:
 2004|    231|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu61_AjLcfu62_:
 2004|     25|        case .f32Sub: (operand, result, instruction) = (.f32, .f32, Instruction.f32Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu63_:
 2005|    148|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu63_AjLcfu64_:
 2005|     48|        case .f32Mul: (operand, result, instruction) = (.f32, .f32, Instruction.f32Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu65_:
 2006|    154|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu65_AjLcfu66_:
 2006|     48|        case .f32Div: (operand, result, instruction) = (.f32, .f32, Instruction.f32Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu67_:
 2007|    145|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu67_AjLcfu68_:
 2007|     66|        case .f32Min: (operand, result, instruction) = (.f32, .f32, Instruction.f32Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu69_:
 2008|    178|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu69_AjLcfu70_:
 2008|     29|        case .f32Max: (operand, result, instruction) = (.f32, .f32, Instruction.f32Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu71_:
 2009|    170|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu71_AjLcfu72_:
 2009|     41|        case .f32Copysign: (operand, result, instruction) = (.f32, .f32, Instruction.f32CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu73_:
 2010|    132|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu73_AjLcfu74_:
 2010|      6|        case .f64Add: (operand, result, instruction) = (.f64, .f64, Instruction.f64Add)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu75_:
 2011|    258|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu75_AjLcfu76_:
 2011|     13|        case .f64Sub: (operand, result, instruction) = (.f64, .f64, Instruction.f64Sub)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu77_:
 2012|     85|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu77_AjLcfu78_:
 2012|     10|        case .f64Mul: (operand, result, instruction) = (.f64, .f64, Instruction.f64Mul)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu79_:
 2013|    200|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu79_AjLcfu80_:
 2013|    107|        case .f64Div: (operand, result, instruction) = (.f64, .f64, Instruction.f64Div)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu81_:
 2014|    108|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu81_AjLcfu82_:
 2014|     13|        case .f64Min: (operand, result, instruction) = (.f64, .f64, Instruction.f64Min)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu83_:
 2015|     90|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu83_AjLcfu84_:
 2015|     10|        case .f64Max: (operand, result, instruction) = (.f64, .f64, Instruction.f64Max)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu85_:
 2016|    108|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
$s7WasmKit21InstructionTranslatorV11visitBinaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu85_AjLcfu86_:
 2016|     10|        case .f64Copysign: (operand, result, instruction) = (.f64, .f64, Instruction.f64CopySign)
$s7WasmKit21InstructionTranslatorV11visitI64EqzyyKF:
 2020|    307|    mutating func visitI64Eqz() throws -> Output {
 2021|    307|        try popPushEmit(.i64, .i32) { value, result, stack in
 2022|    307|            .i64Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 2023|    307|        }
 2024|    306|    }
$s7WasmKit21InstructionTranslatorV11visitI64EqzyyKFAA0C0Os5Int16V_AhC10ValueStackVyx_GtcfU_:
 2021|    258|        try popPushEmit(.i64, .i32) { value, result, stack in
 2022|    258|            .i64Eqz(Instruction.UnaryOperand(result: LVReg(result), input: LVReg(value)))
 2023|    258|        }
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKF:
 2025|  26.2k|    mutating func visitUnary(_ unary: WasmParser.Instruction.Unary) throws {
 2026|  26.2k|        let operand: ValueType
 2027|  26.2k|        let instruction: (Instruction.UnaryOperand) -> Instruction
 2028|  26.2k|        switch unary {
 2029|  26.2k|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
 2030|  26.2k|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
 2031|  26.2k|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
 2032|  26.2k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
 2033|  26.2k|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
 2034|  26.2k|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
 2035|  26.2k|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
 2036|  26.2k|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
 2037|  26.2k|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
 2038|  26.2k|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
 2039|  26.2k|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
 2040|  26.2k|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
 2041|  26.2k|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
 2042|  26.2k|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
 2043|  26.2k|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
 2044|  26.2k|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
 2045|  26.2k|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
 2046|  26.2k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
 2047|  26.2k|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
 2048|  26.2k|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
 2049|  26.2k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
 2050|  26.2k|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
 2051|  26.2k|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
 2052|  26.2k|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
 2053|  26.2k|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
 2054|  26.2k|        }
 2055|  26.2k|        try visitUnary(operand, instruction)
 2056|  26.2k|    }
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_:
 2029|    392|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu_AjLcfu0_:
 2029|    387|        case .i32Clz: (operand, instruction) = (.i32, Instruction.i32Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_:
 2030|    377|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu1_AjLcfu2_:
 2030|    443|        case .i32Ctz: (operand, instruction) = (.i32, Instruction.i32Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_:
 2031|    352|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu3_AjLcfu4_:
 2031|    334|        case .i32Popcnt: (operand, instruction) = (.i32, Instruction.i32Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_:
 2032|  4.48k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu5_AjLcfu6_:
 2032|  4.33k|        case .i64Clz: (operand, instruction) = (.i64, Instruction.i64Clz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_:
 2033|    751|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu7_AjLcfu8_:
 2033|    696|        case .i64Ctz: (operand, instruction) = (.i64, Instruction.i64Ctz)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_:
 2034|    639|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu9_AjLcfu10_:
 2034|    548|        case .i64Popcnt: (operand, instruction) = (.i64, Instruction.i64Popcnt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_:
 2035|    616|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu11_AjLcfu12_:
 2035|    475|        case .f32Abs: (operand, instruction) = (.f32, Instruction.f32Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_:
 2036|    183|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu13_AjLcfu14_:
 2036|    177|        case .f32Neg: (operand, instruction) = (.f32, Instruction.f32Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_:
 2037|    387|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu15_AjLcfu16_:
 2037|    365|        case .f32Ceil: (operand, instruction) = (.f32, Instruction.f32Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_:
 2038|    518|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu17_AjLcfu18_:
 2038|    473|        case .f32Floor: (operand, instruction) = (.f32, Instruction.f32Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_:
 2039|    670|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu19_AjLcfu20_:
 2039|    647|        case .f32Trunc: (operand, instruction) = (.f32, Instruction.f32Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_:
 2040|    357|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu21_AjLcfu22_:
 2040|    338|        case .f32Nearest: (operand, instruction) = (.f32, Instruction.f32Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_:
 2041|    498|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu23_AjLcfu24_:
 2041|    479|        case .f32Sqrt: (operand, instruction) = (.f32, Instruction.f32Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_:
 2042|    742|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu25_AjLcfu26_:
 2042|    730|        case .f64Abs: (operand, instruction) = (.f64, Instruction.f64Abs)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_:
 2043|    622|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu27_AjLcfu28_:
 2043|    752|        case .f64Neg: (operand, instruction) = (.f64, Instruction.f64Neg)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_:
 2044|    162|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu29_AjLcfu30_:
 2044|    157|        case .f64Ceil: (operand, instruction) = (.f64, Instruction.f64Ceil)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_:
 2045|    571|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu31_AjLcfu32_:
 2045|    544|        case .f64Floor: (operand, instruction) = (.f64, Instruction.f64Floor)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_:
 2046|  4.03k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu33_AjLcfu34_:
 2046|  3.97k|        case .f64Trunc: (operand, instruction) = (.f64, Instruction.f64Trunc)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_:
 2047|    559|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu35_AjLcfu36_:
 2047|    525|        case .f64Nearest: (operand, instruction) = (.f64, Instruction.f64Nearest)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_:
 2048|    467|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu37_AjLcfu38_:
 2048|    462|        case .f64Sqrt: (operand, instruction) = (.f64, Instruction.f64Sqrt)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_:
 2049|  6.34k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu39_AjLcfu40_:
 2049|  4.03k|        case .i32Extend8S: (operand, instruction) = (.i32, Instruction.i32Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_:
 2050|    883|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu41_AjLcfu42_:
 2050|    809|        case .i32Extend16S: (operand, instruction) = (.i32, Instruction.i32Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_:
 2051|    773|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu43_AjLcfu44_:
 2051|    698|        case .i64Extend8S: (operand, instruction) = (.i64, Instruction.i64Extend8S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_:
 2052|    511|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu45_AjLcfu46_:
 2052|    495|        case .i64Extend16S: (operand, instruction) = (.i64, Instruction.i64Extend16S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_:
 2053|    358|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
$s7WasmKit21InstructionTranslatorV10visitUnaryyy0A6Parser0C0O0F0OKFAaFOAJ0F7OperandVcAJmcfu47_AjLcfu48_:
 2053|    338|        case .i64Extend32S: (operand, instruction) = (.i64, Instruction.i64Extend32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKF:
 2057|  32.3k|    mutating func visitConversion(_ conversion: WasmParser.Instruction.Conversion) throws {
 2058|  32.3k|        let from: ValueType
 2059|  32.3k|        let to: ValueType
 2060|  32.3k|        let instruction: (Instruction.UnaryOperand) -> Instruction
 2061|  32.3k|        switch conversion {
 2062|  32.3k|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
 2063|  32.3k|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
 2064|  32.3k|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
 2065|  32.3k|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
 2066|  32.3k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
 2067|  32.3k|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
 2068|  32.3k|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
 2069|  32.3k|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
 2070|  32.3k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
 2071|  32.3k|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
 2072|  32.3k|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
 2073|  32.3k|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
 2074|  32.3k|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
 2075|  32.3k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
 2076|  32.3k|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
 2077|  32.3k|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
 2078|  32.3k|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
 2079|  32.3k|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
 2080|  32.3k|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
 2081|  32.3k|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
 2082|  32.3k|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
 2083|  32.3k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
 2084|  32.3k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
 2085|  32.3k|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
 2086|  32.3k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
 2087|  32.3k|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
 2088|  32.3k|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
 2089|  32.3k|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
 2090|  32.3k|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
 2091|  32.3k|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
 2092|  32.3k|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
 2093|  32.3k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
 2094|  32.3k|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
 2095|  32.3k|        }
 2096|  32.3k|        try visitConversion(from, to, instruction)
 2097|  32.2k|    }
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu_:
 2062|    649|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu_AjLcfu0_:
 2062|    641|        case .i32WrapI64: (from, to, instruction) = (.i64, .i32, Instruction.i32WrapI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu1_:
 2063|     91|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu1_AjLcfu2_:
 2063|     91|        case .i32TruncF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu3_:
 2064|    351|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu3_AjLcfu4_:
 2064|    344|        case .i32TruncF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu5_:
 2065|    136|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu5_AjLcfu6_:
 2065|    129|        case .i32TruncF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu7_:
 2066|  4.57k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu7_AjLcfu8_:
 2066|  4.65k|        case .i32TruncF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu9_:
 2067|    220|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu9_AjLcfu10_:
 2067|    218|        case .i64ExtendI32S: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu11_:
 2068|    198|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu11_AjLcfu12_:
 2068|    194|        case .i64ExtendI32U: (from, to, instruction) = (.i32, .i64, Instruction.i64ExtendI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu13_:
 2069|    438|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu13_AjLcfu14_:
 2069|    437|        case .i64TruncF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu15_:
 2070|  2.99k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu15_AjLcfu16_:
 2070|  2.99k|        case .i64TruncF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu17_:
 2071|    516|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu17_AjLcfu18_:
 2071|    387|        case .i64TruncF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu19_:
 2072|     32|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu19_AjLcfu20_:
 2072|     22|        case .i64TruncF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu21_:
 2073|    415|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu21_AjLcfu22_:
 2073|    410|        case .f32ConvertI32S: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu23_:
 2074|    108|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu23_AjLcfu24_:
 2074|    104|        case .f32ConvertI32U: (from, to, instruction) = (.i32, .f32, Instruction.f32ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu25_:
 2075|  3.43k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu25_AjLcfu26_:
 2075|  3.42k|        case .f32ConvertI64S: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu27_:
 2076|    238|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu27_AjLcfu28_:
 2076|    159|        case .f32ConvertI64U: (from, to, instruction) = (.i64, .f32, Instruction.f32ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu29_:
 2077|    154|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu29_AjLcfu30_:
 2077|    133|        case .f32DemoteF64: (from, to, instruction) = (.f64, .f32, Instruction.f32DemoteF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu31_:
 2078|    426|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu31_AjLcfu32_:
 2078|    424|        case .f64ConvertI32S: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu33_:
 2079|     74|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu33_AjLcfu34_:
 2079|     58|        case .f64ConvertI32U: (from, to, instruction) = (.i32, .f64, Instruction.f64ConvertI32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu35_:
 2080|    634|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu35_AjLcfu36_:
 2080|    617|        case .f64ConvertI64S: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu37_:
 2081|    240|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu37_AjLcfu38_:
 2081|    168|        case .f64ConvertI64U: (from, to, instruction) = (.i64, .f64, Instruction.f64ConvertI64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu39_:
 2082|    560|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu39_AjLcfu40_:
 2082|    721|        case .f64PromoteF32: (from, to, instruction) = (.f32, .f64, Instruction.f64PromoteF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu41_:
 2083|  2.00k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu41_AjLcfu42_:
 2083|  1.30k|        case .i32ReinterpretF32: (from, to, instruction) = (.f32, .i32, Instruction.i32ReinterpretF32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu43_:
 2084|  1.19k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu43_AjLcfu44_:
 2084|  1.04k|        case .i64ReinterpretF64: (from, to, instruction) = (.f64, .i64, Instruction.i64ReinterpretF64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu45_:
 2085|    461|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu45_AjLcfu46_:
 2085|    454|        case .f32ReinterpretI32: (from, to, instruction) = (.i32, .f32, Instruction.f32ReinterpretI32)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu47_:
 2086|  5.23k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu47_AjLcfu48_:
 2086|  5.19k|        case .f64ReinterpretI64: (from, to, instruction) = (.i64, .f64, Instruction.f64ReinterpretI64)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu49_:
 2087|     41|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu49_AjLcfu50_:
 2087|     38|        case .i32TruncSatF32S: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu51_:
 2088|    431|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu51_AjLcfu52_:
 2088|    424|        case .i32TruncSatF32U: (from, to, instruction) = (.f32, .i32, Instruction.i32TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu53_:
 2089|     64|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu53_AjLcfu54_:
 2089|     61|        case .i32TruncSatF64S: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu55_:
 2090|    195|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu55_AjLcfu56_:
 2090|    194|        case .i32TruncSatF64U: (from, to, instruction) = (.f64, .i32, Instruction.i32TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu57_:
 2091|    788|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu57_AjLcfu58_:
 2091|    726|        case .i64TruncSatF32S: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu59_:
 2092|    279|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu59_AjLcfu60_:
 2092|    270|        case .i64TruncSatF32U: (from, to, instruction) = (.f32, .i64, Instruction.i64TruncSatF32U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu61_:
 2093|  5.06k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu61_AjLcfu62_:
 2093|  5.05k|        case .i64TruncSatF64S: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64S)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu63_:
 2094|    117|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitConversionyy0A6Parser0C0O0F0OKFAaFOAJ12UnaryOperandVcAJmcfu63_AjLcfu64_:
 2094|    116|        case .i64TruncSatF64U: (from, to, instruction) = (.f64, .i64, Instruction.i64TruncSatF64U)
$s7WasmKit21InstructionTranslatorV15visitMemoryInit9dataIndexys6UInt32V_tKF:
 2099|      1|    mutating func visitMemoryInit(dataIndex: UInt32) throws -> Output {
 2100|      1|        try self.validator.validateDataSegment(dataIndex)
 2101|      0|        let addressType = try module.addressType(memoryIndex: 0)
 2102|      0|        try pop3Emit((.i32, .i32, addressType)) { values, stack in
 2103|      0|            let (size, sourceOffset, destOffset) = values
 2104|      0|            return .memoryInit(
 2105|      0|                Instruction.MemoryInitOperand(
 2106|      0|                    segmentIndex: dataIndex,
 2107|      0|                    destOffset: destOffset,
 2108|      0|                    sourceOffset: sourceOffset,
 2109|      0|                    size: size
 2110|      0|                )
 2111|      0|            )
 2112|      0|        }
 2113|      0|    }
$s7WasmKit21InstructionTranslatorV13visitDataDrop9dataIndexys6UInt32V_tKF:
 2114|      1|    mutating func visitDataDrop(dataIndex: UInt32) throws -> Output {
 2115|      1|        try self.validator.validateDataSegment(dataIndex)
 2116|      0|        emit(.memoryDataDrop(Instruction.MemoryDataDropOperand(segmentIndex: dataIndex)))
 2117|      0|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryCopy6dstMem03srcI0ys6UInt32V_AHtKF:
 2118|     88|    mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws -> Output {
 2119|     88|        //     C.mems[0] = it limits
 2120|     88|        // -----------------------------
 2121|     88|        // C ⊦ memory.fill : [it i32 it] → []
 2122|     88|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2123|     88|        let addressType = try module.addressType(memoryIndex: 0)
 2124|     87|        try pop3Emit((addressType, addressType, addressType)) { values, stack in
 2125|     87|            let (size, sourceOffset, destOffset) = values
 2126|     87|            return .memoryCopy(
 2127|     87|                Instruction.MemoryCopyOperand(
 2128|     87|                    destOffset: destOffset,
 2129|     87|                    sourceOffset: sourceOffset,
 2130|     87|                    size: LVReg(size)
 2131|     87|                )
 2132|     87|            )
 2133|     87|        }
 2134|     86|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryCopy6dstMem03srcI0ys6UInt32V_AHtKFAA0C0Os5Int16V_A2Lt_AC10ValueStackVyx_GztXEfU_:
 2124|     10|        try pop3Emit((addressType, addressType, addressType)) { values, stack in
 2125|     10|            let (size, sourceOffset, destOffset) = values
 2126|     10|            return .memoryCopy(
 2127|     10|                Instruction.MemoryCopyOperand(
 2128|     10|                    destOffset: destOffset,
 2129|     10|                    sourceOffset: sourceOffset,
 2130|     10|                    size: LVReg(size)
 2131|     10|                )
 2132|     10|            )
 2133|     10|        }
$s7WasmKit21InstructionTranslatorV15visitMemoryFill6memoryys6UInt32V_tKF:
 2135|     69|    mutating func visitMemoryFill(memory: UInt32) throws -> Output {
 2136|     69|        //     C.mems[0] = it limits
 2137|     69|        // -----------------------------
 2138|     69|        // C ⊦ memory.fill : [it i32 it] → []
 2139|     69|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2140|     69|        let addressType = try module.addressType(memoryIndex: 0)
 2141|     68|        try pop3Emit((addressType, .i32, addressType)) { values, stack in
 2142|     68|            let (size, value, destOffset) = values
 2143|     68|            return .memoryFill(
 2144|     68|                Instruction.MemoryFillOperand(
 2145|     68|                    destOffset: destOffset,
 2146|     68|                    value: value,
 2147|     68|                    size: LVReg(size)
 2148|     68|                )
 2149|     68|            )
 2150|     68|        }
 2151|     65|    }
$s7WasmKit21InstructionTranslatorV15visitMemoryFill6memoryys6UInt32V_tKFAA0C0Os5Int16V_A2Kt_AC10ValueStackVyx_GztXEfU_:
 2141|     10|        try pop3Emit((addressType, .i32, addressType)) { values, stack in
 2142|     10|            let (size, value, destOffset) = values
 2143|     10|            return .memoryFill(
 2144|     10|                Instruction.MemoryFillOperand(
 2145|     10|                    destOffset: destOffset,
 2146|     10|                    value: value,
 2147|     10|                    size: LVReg(size)
 2148|     10|                )
 2149|     10|            )
 2150|     10|        }
$s7WasmKit21InstructionTranslatorV14visitTableInit9elemIndex5tableys6UInt32V_AHtKF:
 2152|      3|    mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws -> Output {
 2153|      3|        try validator.validateTableInit(elemIndex: elemIndex, table: table)
 2154|      0|
 2155|      0|        try pop3Emit((.i32, .i32, module.addressType(tableIndex: table))) { values, stack in
 2156|      0|            let (size, sourceOffset, destOffset) = values
 2157|      0|            return .tableInit(
 2158|      0|                Instruction.TableInitOperand(
 2159|      0|                    tableIndex: table,
 2160|      0|                    segmentIndex: elemIndex,
 2161|      0|                    destOffset: destOffset,
 2162|      0|                    sourceOffset: sourceOffset,
 2163|      0|                    size: size
 2164|      0|                )
 2165|      0|            )
 2166|      0|        }
 2167|      0|    }
$s7WasmKit21InstructionTranslatorV13visitElemDrop9elemIndexys6UInt32V_tKF:
 2168|      1|    mutating func visitElemDrop(elemIndex: UInt32) throws -> Output {
 2169|      1|        try self.module.validateElementSegment(elemIndex)
 2170|      0|        emit(.tableElementDrop(Instruction.TableElementDropOperand(index: elemIndex)))
 2171|      0|    }
$s7WasmKit21InstructionTranslatorV14visitTableCopy03dstF003srcF0ys6UInt32V_AHtKF:
 2172|     61|    mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws -> Output {
 2173|     61|        //   C.tables[d] = iN limits t   C.tables[s] = iM limits t    K = min {N, M}
 2174|     61|        // -----------------------------------------------------------------------------
 2175|     61|        // C ⊦ table.copy d s : [iN iM iK] → []
 2176|     61|        // https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md
 2177|     61|        try validator.validateTableCopy(dest: dstTable, source: srcTable)
 2178|     58|        let destIsMemory64 = try module.isMemory64(tableIndex: dstTable)
 2179|     58|        let sourceIsMemory64 = try module.isMemory64(tableIndex: srcTable)
 2180|     58|        let lengthIsMemory64 = destIsMemory64 && sourceIsMemory64
 2181|     58|        try pop3Emit(
 2182|     58|            (
 2183|     58|                .address(isMemory64: lengthIsMemory64),
 2184|     58|                .address(isMemory64: sourceIsMemory64),
 2185|     58|                .address(isMemory64: destIsMemory64)
 2186|     58|            )
 2187|     58|        ) { values, stack in
 2188|     58|            let (size, sourceOffset, destOffset) = values
 2189|     58|            return .tableCopy(
 2190|     58|                Instruction.TableCopyOperand(
 2191|     58|                    sourceIndex: srcTable,
 2192|     58|                    destIndex: dstTable,
 2193|     58|                    destOffset: destOffset,
 2194|     58|                    sourceOffset: sourceOffset,
 2195|     58|                    size: size
 2196|     58|                )
 2197|     58|            )
 2198|     58|        }
 2199|     57|    }
$s7WasmKit21InstructionTranslatorV14visitTableCopy03dstF003srcF0ys6UInt32V_AHtKFAA0C0Os5Int16V_A2Lt_AC10ValueStackVyx_GztXEfU_:
 2187|     10|        ) { values, stack in
 2188|     10|            let (size, sourceOffset, destOffset) = values
 2189|     10|            return .tableCopy(
 2190|     10|                Instruction.TableCopyOperand(
 2191|     10|                    sourceIndex: srcTable,
 2192|     10|                    destIndex: dstTable,
 2193|     10|                    destOffset: destOffset,
 2194|     10|                    sourceOffset: sourceOffset,
 2195|     10|                    size: size
 2196|     10|                )
 2197|     10|            )
 2198|     10|        }
$s7WasmKit21InstructionTranslatorV14visitTableFill5tableys6UInt32V_tKF:
 2200|     13|    mutating func visitTableFill(table: UInt32) throws -> Output {
 2201|     13|        let address = try module.addressType(tableIndex: table)
 2202|     12|        let type = try module.tableType(table)
 2203|     12|        try pop3Emit((address, .ref(type.elementType), address)) { values, stack in
 2204|     12|            let (size, value, destOffset) = values
 2205|     12|            return .tableFill(
 2206|     12|                Instruction.TableFillOperand(
 2207|     12|                    tableIndex: table,
 2208|     12|                    destOffset: destOffset,
 2209|     12|                    value: value,
 2210|     12|                    size: size
 2211|     12|                )
 2212|     12|            )
 2213|     12|        }
 2214|     11|    }
$s7WasmKit21InstructionTranslatorV13visitTableGet5tableys6UInt32V_tKF:
 2215|    101|    mutating func visitTableGet(table: UInt32) throws -> Output {
 2216|    101|        let type = try module.tableType(table)
 2217|     99|        try popPushEmit(
 2218|     99|            module.addressType(tableIndex: table),
 2219|     99|            .ref(type.elementType)
 2220|     99|        ) { index, result, stack in
 2221|     99|            return .tableGet(
 2222|     99|                Instruction.TableGetOperand(
 2223|     99|                    index: index,
 2224|     99|                    result: result,
 2225|     99|                    tableIndex: table
 2226|     99|                )
 2227|     99|            )
 2228|     99|        }
 2229|     98|    }
$s7WasmKit21InstructionTranslatorV13visitTableGet5tableys6UInt32V_tKFAA0C0Os5Int16V_AkC10ValueStackVyx_GtcfU_:
 2220|     24|        ) { index, result, stack in
 2221|     24|            return .tableGet(
 2222|     24|                Instruction.TableGetOperand(
 2223|     24|                    index: index,
 2224|     24|                    result: result,
 2225|     24|                    tableIndex: table
 2226|     24|                )
 2227|     24|            )
 2228|     24|        }
$s7WasmKit21InstructionTranslatorV13visitTableSet5tableys6UInt32V_tKF:
 2230|    114|    mutating func visitTableSet(table: UInt32) throws -> Output {
 2231|    114|        let type = try module.tableType(table)
 2232|    111|        try pop2Emit((.ref(type.elementType), module.addressType(tableIndex: table))) { values, stack in
 2233|    111|            let (value, index) = values
 2234|    111|            return .tableSet(
 2235|    111|                Instruction.TableSetOperand(
 2236|    111|                    index: index,
 2237|    111|                    value: value,
 2238|    111|                    tableIndex: table
 2239|    111|                )
 2240|    111|            )
 2241|    111|        }
 2242|    105|    }
$s7WasmKit21InstructionTranslatorV13visitTableSet5tableys6UInt32V_tKFAA0C0Os5Int16V_AKt_AC10ValueStackVyx_GztXEfU_:
 2232|     10|        try pop2Emit((.ref(type.elementType), module.addressType(tableIndex: table))) { values, stack in
 2233|     10|            let (value, index) = values
 2234|     10|            return .tableSet(
 2235|     10|                Instruction.TableSetOperand(
 2236|     10|                    index: index,
 2237|     10|                    value: value,
 2238|     10|                    tableIndex: table
 2239|     10|                )
 2240|     10|            )
 2241|     10|        }
$s7WasmKit21InstructionTranslatorV14visitTableGrow5tableys6UInt32V_tKF:
 2243|     35|    mutating func visitTableGrow(table: UInt32) throws -> Output {
 2244|     35|        let address = try module.addressType(tableIndex: table)
 2245|     34|        let type = try module.tableType(table)
 2246|     34|        try pop2PushEmit((address, .ref(type.elementType)), address) { values, result in
 2247|     34|            let (delta, value) = values
 2248|     34|            return .tableGrow(
 2249|     34|                Instruction.TableGrowOperand(
 2250|     34|                    tableIndex: table,
 2251|     34|                    result: result,
 2252|     34|                    delta: delta,
 2253|     34|                    value: value
 2254|     34|                )
 2255|     34|            )
 2256|     34|        }
 2257|     32|    }
$s7WasmKit21InstructionTranslatorV14visitTableSize5tableys6UInt32V_tKF:
 2258|     20|    mutating func visitTableSize(table: UInt32) throws -> Output {
 2259|     20|        pushEmit(try module.addressType(tableIndex: table)) { result in
 2260|     19|            return .tableSize(Instruction.TableSizeOperand(tableIndex: table, result: LVReg(result)))
 2261|     19|        }
 2262|     19|    }
$s7WasmKit21InstructionTranslatorV14visitTableSize5tableys6UInt32V_tKFAA0C0Os5Int16VcfU_:
 2259|     19|        pushEmit(try module.addressType(tableIndex: table)) { result in
 2260|     19|            return .tableSize(Instruction.TableSizeOperand(tableIndex: table, result: LVReg(result)))
 2261|     19|        }
$s7WasmKit16TranslationErrorVyACSScfC:
 2268|    450|    init(_ description: String) {
 2269|    450|        self.description = description
 2270|    450|    }
$s9WasmTypes12FunctionTypeV0A3KitE05blockD011typeSectionAC0A6Parser05BlockD0O_SayACGtKc021_3C1F9FC595E9AC192A47N10B121D811E8LlfC:
 2274|  7.21k|    fileprivate init(blockType: WasmParser.BlockType, typeSection: [FunctionType]) throws {
 2275|  7.21k|        switch blockType {
 2276|  7.21k|        case .type(let valueType):
 2277|  2.39k|            self.init(parameters: [], results: [valueType])
 2278|  7.21k|        case .empty:
 2279|  3.00k|            self.init(parameters: [], results: [])
 2280|  7.21k|        case let .funcType(typeIndex):
 2281|  1.82k|            let typeIndex = Int(typeIndex)
 2282|  1.82k|            guard typeIndex < typeSection.count else {
 2283|     31|                throw ValidationError(.indexOutOfBounds("type", typeIndex, max: typeSection.count))
 2284|  1.78k|            }
 2285|  1.78k|            let funcType = typeSection[typeIndex]
 2286|  1.78k|            self.init(
 2287|  1.78k|                parameters: funcType.parameters,
 2288|  1.78k|                results: funcType.results
 2289|  1.78k|            )
 2290|  7.21k|        }
 2291|  7.18k|    }
$s9WasmTypes9ValueTypeO0A3KitE7address021_3C1F9FC595E9AC192A47J10B121D811E8LL10isMemory64ACSb_tFZ:
 2295|  22.1k|    fileprivate static func address(isMemory64: Bool) -> ValueType {
 2296|  22.1k|        return isMemory64 ? .i64 : .i32
 2297|  22.1k|    }

$s7WasmKit15ValidationErrorV7MessageVyAESScfC:
    9|    541|        init(_ text: String) {
   10|    541|            self.text = text
   11|    541|        }
$s7WasmKit15ValidationErrorVyA2C7MessageVcfC:
   30|    541|    init(_ message: Message) {
   31|    541|        self.message = message
   32|    541|    }
$s7WasmKit15ValidationErrorV7MessageV22invalidMemArgAlignment6memarg07naturalI0AE0A6Parser0gH0V_SitFZ:
   36|     27|    static func invalidMemArgAlignment(memarg: MemArg, naturalAlignment: Int) -> Self {
   37|     27|        Self("alignment 2**\(memarg.align) is out of limit \(naturalAlignment)")
   38|     27|    }
$s7WasmKit15ValidationErrorV7MessageV17globalSetConstantAEvgZ:
   40|      1|    static var globalSetConstant: Self {
   41|      1|        Self("cannot set a constant global")
   42|      1|    }
$s7WasmKit15ValidationErrorV7MessageV28multipleMemoriesNotPermittedAEvgZ:
   44|     11|    static var multipleMemoriesNotPermitted: Self {
   45|     11|        Self("multiple memories are not permitted")
   46|     11|    }
$s7WasmKit15ValidationErrorV7MessageV30startFunctionInvalidParametersAEyFZ:
   48|      2|    static func startFunctionInvalidParameters() -> Self {
   49|      2|        Self("start function must have no parameters and no results")
   50|      2|    }
$s7WasmKit15ValidationErrorV7MessageV19sizeMinimumExceeded3maxAEs6UInt64V_tFZ:
   56|      1|    static func sizeMinimumExceeded(max: UInt64) -> Self {
   57|      1|        Self("size minimum must not be greater than \(max)")
   58|      1|    }
$s7WasmKit15ValidationErrorV7MessageV19sizeMaximumExceeded3maxAEs6UInt64V_tFZ:
   60|      2|    static func sizeMaximumExceeded(max: UInt64) -> Self {
   61|      2|        Self("size maximum must not be greater than \(max)")
   62|      2|    }
$s7WasmKit15ValidationErrorV7MessageV24dataCountSectionRequiredAEvgZ:
   72|      2|    static var dataCountSectionRequired: Self {
   73|      2|        Self("data count section is required but not found")
   74|      2|    }
$s7WasmKit15ValidationErrorV7MessageV16indexOutOfBounds__3maxAEs12StaticStringV_xq_tSjRzSjR_r0_lFZ:
   76|    162|    static func indexOutOfBounds<Index: Numeric, Max: Numeric>(_ entity: StaticString, _ index: Index, max: Max) -> Self {
   77|    162|        Self("\(entity) index out of bounds: \(index) (max: \(max))")
   78|    162|    }
$s7WasmKit15ValidationErrorV7MessageV16expectTypeButGot8expected3gotAESS_SStFZ:
   84|     22|    static func expectTypeButGot(expected: String, got: String) -> Self {
   85|     22|        Self("expect \(expected) but got \(got)")
   86|     22|    }
$s7WasmKit15ValidationErrorV7MessageV31sizeMinimumMustNotExceedMaximumAEvgZ:
   88|      2|    static var sizeMinimumMustNotExceedMaximum: Self {
   89|      2|        Self("size minimum must not be greater than maximum")
   90|      2|    }
$s7WasmKit15ValidationErrorV7MessageV24functionIndexNotDeclared5indexAEs6UInt32V_tFZ:
   92|      1|    static func functionIndexNotDeclared(index: FunctionIndex) -> Self {
   93|      1|        Self("function index \(index) is not declared but referenced as a function reference")
   94|      1|    }
$s7WasmKit15ValidationErrorV7MessageV19duplicateExportName4nameAESS_tFZ:
   96|      2|    static func duplicateExportName(name: String) -> Self {
   97|      2|        Self("duplicate export name: \(name)")
   98|      2|    }
$s7WasmKit15ValidationErrorV7MessageV23relativeDepthOutOfRange0fG0AEs6UInt32V_tFZ:
  111|     19|    static func relativeDepthOutOfRange(relativeDepth: UInt32) -> Self {
  112|     19|        Self("relative depth \(relativeDepth) is out of range")
  113|     19|    }
$s7WasmKit15ValidationErrorV7MessageV22expectedIfControlFrameAEvgZ:
  115|     41|    static var expectedIfControlFrame: Self {
  116|     41|        Self("expected `if` control frame on top of the stack for `else`")
  117|     41|    }
$s7WasmKit15ValidationErrorV7MessageV27valuesRemainingAtEndOfBlockAEvgZ:
  119|     61|    static var valuesRemainingAtEndOfBlock: Self {
  120|     61|        Self("values remaining on stack at end of block")
  121|     61|    }
$s7WasmKit15ValidationErrorV7MessageV27parameterResultTypeMismatch05blockH0AE0A5Types08FunctionH0V_tFZ:
  123|     24|    static func parameterResultTypeMismatch(blockType: FunctionType) -> Self {
  124|     24|        Self("expected the same parameter and result types for `if` block but got \(blockType)")
  125|     24|    }
$s7WasmKit15ValidationErrorV7MessageV20stackHeightUnderflow9available8requiredAESi_SitFZ:
  127|      4|    static func stackHeightUnderflow(available: Int, required: Int) -> Self {
  128|      4|        Self("stack height underflow: available \(available), required \(required)")
  129|      4|    }
$s7WasmKit15ValidationErrorV7MessageV19expectedTypeOnStack0F06actualAE0A5Types05ValueG0O_AKtFZ:
  131|      1|    static func expectedTypeOnStack(expected: ValueType, actual: ValueType) -> Self {
  132|      1|        Self("expected \(expected) on the stack top but got \(actual)")
  133|      1|    }
$s7WasmKit15ValidationErrorV7MessageV27expectedTypeOnStackButEmpty0F0AE0A5Types05ValueG0OSg_tFZ:
  135|     67|    static func expectedTypeOnStackButEmpty(expected: ValueType?) -> Self {
  136|     67|        let typeHint = expected.map(String.init(describing:)) ?? "a value"
  137|     67|        return Self("expected \(typeHint) on the stack top but it's empty")
  138|     67|    }
$s7WasmKit15ValidationErrorV7MessageV27expectedTypeOnStackButEmpty0F0AE0A5Types05ValueG0OSg_tFZSSAJcfu_:
  136|     62|        let typeHint = expected.map(String.init(describing:)) ?? "a value"
$s7WasmKit15ValidationErrorV7MessageV27expectedTypeOnStackButEmpty0F0AE0A5Types05ValueG0OSg_tFZSSyKXEfu0_:
  136|      5|        let typeHint = expected.map(String.init(describing:)) ?? "a value"
$s7WasmKit15ValidationErrorV7MessageV27expectedMoreEndInstructions5countAESi_tFZ:
  140|     13|    static func expectedMoreEndInstructions(count: Int) -> Self {
  141|     13|        Self("expect \(count) more `end` instructions")
  142|     13|    }
$s7WasmKit15ValidationErrorV7MessageV21expectedSameCopyTypes05framehI0012defaultFramehI0AESay0aI09ValueTypeOG_ALtFZ:
  147|      8|    ) -> Self {
  148|      8|        Self("expected the same copy types for all branches in `br_table` but got \(frameCopyTypes) and \(defaultFrameCopyTypes)")
  149|      8|    }
$s7WasmKit15ValidationErrorV7MessageV28cannotSelectOnReferenceTypesAEvgZ:
  151|      2|    static var cannotSelectOnReferenceTypes: Self {
  152|      2|        Self("cannot `select` on reference types")
  153|      2|    }
$s7WasmKit15ValidationErrorV7MessageV20typeMismatchOnSelect8expected6actualAE0A5Types9ValueTypeO_AKtFZ:
  155|      4|    static func typeMismatchOnSelect(expected: ValueType, actual: ValueType) -> Self {
  156|      4|        Self("type mismatch on `select`. Expected \(expected) and \(actual) to be same")
  157|      4|    }
$s7WasmKit15ValidationErrorV7MessageV28unexpectedElementInitializer10expressionAESS_tFZ:
  163|     44|    static func unexpectedElementInitializer(expression: String) -> Self {
  164|     44|        Self("unexpected element initializer expression: \(expression)")
  165|     44|    }
$s7WasmKit15ValidationErrorV7MessageV29expectedEndAtOffsetExpressionAEvgZ:
  171|      4|    static var expectedEndAtOffsetExpression: Self {
  172|      4|        Self("expect `end` at the end of offset expression")
  173|      4|    }
$s7WasmKit15ValidationErrorV7MessageV33illegalConstExpressionInstructionyAE0A6Parser0I0OFZ:
  175|      8|    static func illegalConstExpressionInstruction(_ constInst: WasmParser.Instruction) -> Self {
  176|      8|        Self("illegal const expression instruction: \(constInst)")
  177|      8|    }
$s7WasmKit15ValidationErrorV7MessageV33inconsistentFunctionAndCodeLength13functionCount04codeL0AESi_SitFZ:
  179|      2|    static func inconsistentFunctionAndCodeLength(functionCount: Int, codeCount: Int) -> Self {
  180|      2|        Self("Inconsistent function and code length: \(functionCount) vs \(codeCount)")
  181|      2|    }
$s7WasmKit15ValidationErrorV7MessageV024inconsistentDataCountAndG13SectionLength04dataH00lJ0AEs6UInt32V_SitFZ:
  183|      3|    static func inconsistentDataCountAndDataSectionLength(dataCount: UInt32, dataSection: Int) -> Self {
  184|      3|        Self("Inconsistent data count and data section length: \(dataCount) vs \(dataSection)")
  185|      3|    }
$s7WasmKit15ValidationErrorV7MessageV24typeMismatchOnReturnCall8expected6actualAESay0A5Types9ValueTypeOG_ALtFZ:
  187|      1|    static func typeMismatchOnReturnCall(expected: [ValueType], actual: [ValueType]) -> Self {
  188|      1|        Self("return signatures have inconsistent types: expected \(expected) but got \(actual)")
  189|      1|    }
$s7WasmKit20InstructionValidatorV14validateMemArg_16naturalAlignmenty0A6Parser0fG0V_SitKF:
  196|  19.8k|    func validateMemArg(_ memarg: MemArg, naturalAlignment: Int) throws {
  197|  19.8k|        if memarg.align > naturalAlignment {
  198|     27|            throw ValidationError(.invalidMemArgAlignment(memarg: memarg, naturalAlignment: naturalAlignment))
  199|  19.8k|        }
  200|  19.8k|    }
$s7WasmKit20InstructionValidatorV17validateGlobalSetyy0A6Parser0F4TypeVKF:
  202|  6.38k|    func validateGlobalSet(_ type: GlobalType) throws {
  203|  6.38k|        switch type.mutability {
  204|  6.38k|        case .constant:
  205|      1|            throw ValidationError(.globalSetConstant)
  206|  6.38k|        case .variable:
  207|  6.38k|            break
  208|  6.38k|        }
  209|  6.38k|    }
$s7WasmKit20InstructionValidatorV17validateTableInit9elemIndex5tableys6UInt32V_AHtKF:
  211|      3|    func validateTableInit(elemIndex: UInt32, table: UInt32) throws {
  212|      3|        let tableType = try context.tableType(table)
  213|      2|        let elementType = try context.elementType(elemIndex)
  214|      0|        guard tableType.elementType == elementType else {
  215|      0|            throw ValidationError(.tableElementTypeMismatch(tableType: "\(tableType.elementType)", elementType: "\(elementType)"))
  216|      0|        }
  217|      0|    }
$s7WasmKit20InstructionValidatorV17validateTableCopy4dest6sourceys6UInt32V_AHtKF:
  219|     61|    func validateTableCopy(dest: UInt32, source: UInt32) throws {
  220|     61|        let tableType1 = try context.tableType(source)
  221|     60|        let tableType2 = try context.tableType(dest)
  222|     58|        guard tableType1.elementType == tableType2.elementType else {
  223|      0|            throw ValidationError(.tableElementTypeMismatch(tableType: "\(tableType1.elementType)", elementType: "\(tableType2.elementType)"))
  224|     58|        }
  225|     58|    }
$s7WasmKit20InstructionValidatorV15validateRefFunc13functionIndexys6UInt32V_tKF:
  227|     79|    func validateRefFunc(functionIndex: UInt32) throws {
  228|     79|        try context.validateFunctionIndex(functionIndex)
  229|     77|    }
$s7WasmKit20InstructionValidatorV19validateDataSegmentyys6UInt32VKF:
  231|      2|    func validateDataSegment(_ dataIndex: DataIndex) throws {
  232|      2|        guard let dataCount = context.dataCount else {
  233|      2|            throw ValidationError(.dataCountSectionRequired)
  234|      2|        }
  235|      0|        guard dataIndex < dataCount else {
  236|      0|            throw ValidationError(.indexOutOfBounds("data", dataIndex, max: dataCount))
  237|      0|        }
  238|      0|    }
$s7WasmKit20InstructionValidatorV22validateReturnCallLike10calleeType06callerJ0y0A5Types08FunctionJ0V_AItKF:
  240|     65|    func validateReturnCallLike(calleeType: FunctionType, callerType: FunctionType) throws {
  241|     65|        guard calleeType.results == callerType.results else {
  242|      1|            throw ValidationError(.typeMismatchOnReturnCall(expected: callerType.results, actual: calleeType.results))
  243|     64|        }
  244|     64|    }
$s7WasmKit15ModuleValidatorV6moduleAcA0C0V_tcfC:
  250|  1.85k|    init(module: Module) {
  251|  1.85k|        self.module = module
  252|  1.85k|    }
$s7WasmKit15ModuleValidatorV8validateyyKF:
  254|  1.85k|    func validate() throws {
  255|  1.85k|        if module.memoryTypes.count > 1 {
  256|     11|            throw ValidationError(.multipleMemoriesNotPermitted)
  257|  1.84k|        }
  258|  1.84k|        for memoryType in module.memoryTypes {
  259|    997|            try Self.checkMemoryType(memoryType, features: module.features)
  260|  1.84k|        }
  261|  1.84k|        for tableType in module.tableTypes {
  262|    313|            try Self.checkTableType(tableType, features: module.features)
  263|  1.84k|        }
  264|  1.84k|        try checkStartFunction()
  265|  1.83k|    }
$s7WasmKit15ModuleValidatorV18checkStartFunctionyyKF:
  267|  1.84k|    func checkStartFunction() throws {
  268|  1.84k|        if let startFunction = module.start {
  269|    619|            let type = try module.resolveFunctionType(startFunction)
  270|    616|            guard type.parameters.isEmpty, type.results.isEmpty else {
  271|      2|                throw ValidationError(.startFunctionInvalidParameters())
  272|    614|            }
  273|  1.83k|        }
  274|  1.83k|    }
$s7WasmKit15ModuleValidatorV15checkMemoryType_8featuresy0A6Parser6LimitsV_AF0A10FeatureSetVtKFZ:
  276|  1.10k|    static func checkMemoryType(_ type: MemoryType, features: WasmFeatureSet) throws {
  277|  1.10k|        try checkLimit(type)
  278|  1.09k|
  279|  1.09k|        if type.isMemory64 {
  280|      0|            guard features.contains(.memory64) else {
  281|      0|                throw ValidationError(.memory64FeatureRequired)
  282|      0|            }
  283|  1.09k|        }
  284|  1.09k|
  285|  1.09k|        let hardMax = MemoryEntity.maxPageCount(isMemory64: type.isMemory64)
  286|  1.09k|
  287|  1.09k|        if type.min > hardMax {
  288|      1|            throw ValidationError(.sizeMinimumExceeded(max: hardMax))
  289|  1.09k|        }
  290|  1.09k|
  291|  1.09k|        if let max = type.max, max > hardMax {
  292|      2|            throw ValidationError(.sizeMaximumExceeded(max: hardMax))
  293|  1.09k|        }
  294|  1.09k|
  295|  1.09k|        if type.shared {
  296|      0|            guard features.contains(.threads) else {
  297|      0|                throw ValidationError(.referenceTypesFeatureRequiredForSharedMemories)
  298|      0|            }
  299|  1.09k|        }
  300|  1.09k|    }
$s7WasmKit15ModuleValidatorV14checkTableType_8featuresy0A6Parser0fG0V_AF0A10FeatureSetVtKFZ:
  302|    313|    static func checkTableType(_ type: TableType, features: WasmFeatureSet) throws {
  303|    313|        if type.elementType != .funcRef, !features.contains(.referenceTypes) {
  304|      0|            throw ValidationError(.referenceTypesFeatureRequiredForNonFuncrefTables)
  305|    313|        }
  306|    313|        try checkLimit(type.limits)
  307|    312|
  308|    312|        if type.limits.isMemory64 {
  309|      0|            guard features.contains(.memory64) else {
  310|      0|                throw ValidationError(.memory64FeatureRequired)
  311|      0|            }
  312|    312|        }
  313|    312|
  314|    312|        let hardMax = TableEntity.maxSize(isMemory64: type.limits.isMemory64)
  315|    312|
  316|    312|        if type.limits.min > hardMax {
  317|      0|            throw ValidationError(.sizeMinimumExceeded(max: hardMax))
  318|    312|        }
  319|    312|
  320|    312|        if let max = type.limits.max, max > hardMax {
  321|      0|            throw ValidationError(.sizeMaximumExceeded(max: hardMax))
  322|    312|        }
  323|    312|    }
$s7WasmKit15ModuleValidatorV10checkLimit33_9F66C7BE5EF9F2BC43AA30FD76E78754LLyy0A6Parser6LimitsVKFZ:
  325|  1.41k|    private static func checkLimit(_ limit: Limits) throws {
  326|  1.41k|        guard let max = limit.max else { return }
  327|    718|        if limit.min > max {
  328|      2|            throw ValidationError(.sizeMinimumMustNotExceedMaximum)
  329|    716|        }
  330|    716|    }
$s9WasmTypes9ReferenceO0A3KitE9checkTypeyyAA0cF0OKF:
  335|     17|    func checkType(_ type: WasmTypes.ReferenceType) throws {
  336|     17|        switch (self, type) {
  337|     17|        case (.function, .funcRef): return
  338|     17|        case (.extern, .externRef): return
  339|     17|        default:
  340|      1|            throw ValidationError(.expectTypeButGot(expected: "\(type)", got: "\(self)"))
  341|     17|        }
  342|     17|    }
$s9WasmTypes5ValueO0A3KitE9checkTypeyyAA0cF0OKF:
  347|  15.1k|    func checkType(_ type: WasmTypes.ValueType) throws {
  348|  15.1k|        switch (self, type) {
  349|  15.1k|        case (.i32, .i32): return
  350|  15.1k|        case (.i64, .i64): return
  351|  15.1k|        case (.f32, .f32): return
  352|  15.1k|        case (.f64, .f64): return
  353|  15.1k|        case (.ref(let ref), .ref(let refType)):
  354|     17|            try ref.checkType(refType)
  355|  15.1k|        default:
  356|     21|            throw ValidationError(.expectTypeButGot(expected: "\(type)", got: "\(self)"))
  357|  15.1k|        }
  358|     16|    }

$s10WasmParser22parseBinaryInstruction7visitor7decoderSbxz_q_ztKAA0E7VisitorRzAA0dE7DecoderR_r0_lF:
   91|   287k|func parseBinaryInstruction<V: InstructionVisitor, D: BinaryInstructionDecoder>(visitor: inout V, decoder: inout D) throws -> Bool {
   92|   287k|    let opcode0 = try decoder.claimNextByte()
   93|   285k|    switch opcode0 {
   94|   285k|    case 0x00:
   95|  17.2k|        try visitor.visitUnreachable()
   96|   285k|    case 0x01:
   97|  3.53k|        try visitor.visitNop()
   98|   285k|    case 0x02:
   99|  3.69k|        let (blockType) = try decoder.visitBlock()
  100|  3.68k|        try visitor.visitBlock(blockType: blockType)
  101|   285k|    case 0x03:
  102|  3.94k|        let (blockType) = try decoder.visitLoop()
  103|  3.93k|        try visitor.visitLoop(blockType: blockType)
  104|   285k|    case 0x04:
  105|  1.51k|        let (blockType) = try decoder.visitIf()
  106|  1.51k|        try visitor.visitIf(blockType: blockType)
  107|   285k|    case 0x05:
  108|    678|        try visitor.visitElse()
  109|   285k|    case 0x0B:
  110|  13.7k|        try visitor.visitEnd()
  111|  13.6k|        return true
  112|   285k|    case 0x0C:
  113|  5.03k|        let (relativeDepth) = try decoder.visitBr()
  114|  5.03k|        try visitor.visitBr(relativeDepth: relativeDepth)
  115|   285k|    case 0x0D:
  116|  1.31k|        let (relativeDepth) = try decoder.visitBrIf()
  117|  1.31k|        try visitor.visitBrIf(relativeDepth: relativeDepth)
  118|   285k|    case 0x0E:
  119|  1.44k|        let (targets) = try decoder.visitBrTable()
  120|  1.42k|        try visitor.visitBrTable(targets: targets)
  121|   285k|    case 0x0F:
  122|  3.82k|        try visitor.visitReturn()
  123|   285k|    case 0x10:
  124|  4.03k|        let (functionIndex) = try decoder.visitCall()
  125|  4.03k|        try visitor.visitCall(functionIndex: functionIndex)
  126|   285k|    case 0x11:
  127|    480|        let (typeIndex, tableIndex) = try decoder.visitCallIndirect()
  128|    478|        try visitor.visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
  129|   285k|    case 0x12:
  130|    262|        let (functionIndex) = try decoder.visitReturnCall()
  131|    261|        try visitor.visitReturnCall(functionIndex: functionIndex)
  132|   285k|    case 0x13:
  133|    246|        let (typeIndex, tableIndex) = try decoder.visitReturnCallIndirect()
  134|    244|        try visitor.visitReturnCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
  135|   285k|    case 0x1A:
  136|    277|        try visitor.visitDrop()
  137|   285k|    case 0x1B:
  138|    994|        try visitor.visitSelect()
  139|   285k|    case 0x1C:
  140|    391|        let (type) = try decoder.visitTypedSelect()
  141|    373|        try visitor.visitTypedSelect(type: type)
  142|   285k|    case 0x20:
  143|  2.80k|        let (localIndex) = try decoder.visitLocalGet()
  144|  2.80k|        try visitor.visitLocalGet(localIndex: localIndex)
  145|   285k|    case 0x21:
  146|  1.86k|        let (localIndex) = try decoder.visitLocalSet()
  147|  1.86k|        try visitor.visitLocalSet(localIndex: localIndex)
  148|   285k|    case 0x22:
  149|  7.68k|        let (localIndex) = try decoder.visitLocalTee()
  150|  7.68k|        try visitor.visitLocalTee(localIndex: localIndex)
  151|   285k|    case 0x23:
  152|  10.0k|        let (globalIndex) = try decoder.visitGlobalGet()
  153|  10.0k|        try visitor.visitGlobalGet(globalIndex: globalIndex)
  154|   285k|    case 0x24:
  155|  6.62k|        let (globalIndex) = try decoder.visitGlobalSet()
  156|  6.62k|        try visitor.visitGlobalSet(globalIndex: globalIndex)
  157|   285k|    case 0x25:
  158|    317|        let (table) = try decoder.visitTableGet()
  159|    313|        try visitor.visitTableGet(table: table)
  160|   285k|    case 0x26:
  161|    573|        let (table) = try decoder.visitTableSet()
  162|    571|        try visitor.visitTableSet(table: table)
  163|   285k|    case 0x28:
  164|    488|        let (memarg) = try decoder.visitLoad(.i32Load)
  165|    486|        try visitor.visitLoad(.i32Load, memarg: memarg)
  166|   285k|    case 0x29:
  167|    335|        let (memarg) = try decoder.visitLoad(.i64Load)
  168|    330|        try visitor.visitLoad(.i64Load, memarg: memarg)
  169|   285k|    case 0x2A:
  170|  2.60k|        let (memarg) = try decoder.visitLoad(.f32Load)
  171|  2.60k|        try visitor.visitLoad(.f32Load, memarg: memarg)
  172|   285k|    case 0x2B:
  173|  6.03k|        let (memarg) = try decoder.visitLoad(.f64Load)
  174|  6.02k|        try visitor.visitLoad(.f64Load, memarg: memarg)
  175|   285k|    case 0x2C:
  176|  1.12k|        let (memarg) = try decoder.visitLoad(.i32Load8S)
  177|  1.12k|        try visitor.visitLoad(.i32Load8S, memarg: memarg)
  178|   285k|    case 0x2D:
  179|    233|        let (memarg) = try decoder.visitLoad(.i32Load8U)
  180|    232|        try visitor.visitLoad(.i32Load8U, memarg: memarg)
  181|   285k|    case 0x2E:
  182|  1.25k|        let (memarg) = try decoder.visitLoad(.i32Load16S)
  183|  1.25k|        try visitor.visitLoad(.i32Load16S, memarg: memarg)
  184|   285k|    case 0x2F:
  185|    622|        let (memarg) = try decoder.visitLoad(.i32Load16U)
  186|    619|        try visitor.visitLoad(.i32Load16U, memarg: memarg)
  187|   285k|    case 0x30:
  188|    440|        let (memarg) = try decoder.visitLoad(.i64Load8S)
  189|    437|        try visitor.visitLoad(.i64Load8S, memarg: memarg)
  190|   285k|    case 0x31:
  191|    423|        let (memarg) = try decoder.visitLoad(.i64Load8U)
  192|    421|        try visitor.visitLoad(.i64Load8U, memarg: memarg)
  193|   285k|    case 0x32:
  194|    592|        let (memarg) = try decoder.visitLoad(.i64Load16S)
  195|    591|        try visitor.visitLoad(.i64Load16S, memarg: memarg)
  196|   285k|    case 0x33:
  197|    377|        let (memarg) = try decoder.visitLoad(.i64Load16U)
  198|    376|        try visitor.visitLoad(.i64Load16U, memarg: memarg)
  199|   285k|    case 0x34:
  200|  7.74k|        let (memarg) = try decoder.visitLoad(.i64Load32S)
  201|  7.74k|        try visitor.visitLoad(.i64Load32S, memarg: memarg)
  202|   285k|    case 0x35:
  203|    454|        let (memarg) = try decoder.visitLoad(.i64Load32U)
  204|    453|        try visitor.visitLoad(.i64Load32U, memarg: memarg)
  205|   285k|    case 0x36:
  206|    339|        let (memarg) = try decoder.visitStore(.i32Store)
  207|    338|        try visitor.visitStore(.i32Store, memarg: memarg)
  208|   285k|    case 0x37:
  209|    291|        let (memarg) = try decoder.visitStore(.i64Store)
  210|    289|        try visitor.visitStore(.i64Store, memarg: memarg)
  211|   285k|    case 0x38:
  212|    310|        let (memarg) = try decoder.visitStore(.f32Store)
  213|    309|        try visitor.visitStore(.f32Store, memarg: memarg)
  214|   285k|    case 0x39:
  215|    209|        let (memarg) = try decoder.visitStore(.f64Store)
  216|    207|        try visitor.visitStore(.f64Store, memarg: memarg)
  217|   285k|    case 0x3A:
  218|    427|        let (memarg) = try decoder.visitStore(.i32Store8)
  219|    425|        try visitor.visitStore(.i32Store8, memarg: memarg)
  220|   285k|    case 0x3B:
  221|    283|        let (memarg) = try decoder.visitStore(.i32Store16)
  222|    281|        try visitor.visitStore(.i32Store16, memarg: memarg)
  223|   285k|    case 0x3C:
  224|    225|        let (memarg) = try decoder.visitStore(.i64Store8)
  225|    224|        try visitor.visitStore(.i64Store8, memarg: memarg)
  226|   285k|    case 0x3D:
  227|    262|        let (memarg) = try decoder.visitStore(.i64Store16)
  228|    261|        try visitor.visitStore(.i64Store16, memarg: memarg)
  229|   285k|    case 0x3E:
  230|    325|        let (memarg) = try decoder.visitStore(.i64Store32)
  231|    324|        try visitor.visitStore(.i64Store32, memarg: memarg)
  232|   285k|    case 0x3F:
  233|  10.3k|        let (memory) = try decoder.visitMemorySize()
  234|  10.3k|        try visitor.visitMemorySize(memory: memory)
  235|   285k|    case 0x40:
  236|  2.30k|        let (memory) = try decoder.visitMemoryGrow()
  237|  2.29k|        try visitor.visitMemoryGrow(memory: memory)
  238|   285k|    case 0x41:
  239|  13.5k|        let (value) = try decoder.visitI32Const()
  240|  13.5k|        try visitor.visitI32Const(value: value)
  241|   285k|    case 0x42:
  242|  12.7k|        let (value) = try decoder.visitI64Const()
  243|  12.7k|        try visitor.visitI64Const(value: value)
  244|   285k|    case 0x43:
  245|  4.48k|        let (value) = try decoder.visitF32Const()
  246|  4.48k|        try visitor.visitF32Const(value: value)
  247|   285k|    case 0x44:
  248|  2.97k|        let (value) = try decoder.visitF64Const()
  249|  2.96k|        try visitor.visitF64Const(value: value)
  250|   285k|    case 0x45:
  251|    695|        try visitor.visitI32Eqz()
  252|   285k|    case 0x46:
  253|    535|        try visitor.visitCmp(.i32Eq)
  254|   285k|    case 0x47:
  255|    321|        try visitor.visitCmp(.i32Ne)
  256|   285k|    case 0x48:
  257|    651|        try visitor.visitCmp(.i32LtS)
  258|   285k|    case 0x49:
  259|    423|        try visitor.visitCmp(.i32LtU)
  260|   285k|    case 0x4A:
  261|    572|        try visitor.visitCmp(.i32GtS)
  262|   285k|    case 0x4B:
  263|    560|        try visitor.visitCmp(.i32GtU)
  264|   285k|    case 0x4C:
  265|    332|        try visitor.visitCmp(.i32LeS)
  266|   285k|    case 0x4D:
  267|    316|        try visitor.visitCmp(.i32LeU)
  268|   285k|    case 0x4E:
  269|    500|        try visitor.visitCmp(.i32GeS)
  270|   285k|    case 0x4F:
  271|    400|        try visitor.visitCmp(.i32GeU)
  272|   285k|    case 0x50:
  273|    501|        try visitor.visitI64Eqz()
  274|   285k|    case 0x51:
  275|    222|        try visitor.visitCmp(.i64Eq)
  276|   285k|    case 0x52:
  277|    234|        try visitor.visitCmp(.i64Ne)
  278|   285k|    case 0x53:
  279|    277|        try visitor.visitCmp(.i64LtS)
  280|   285k|    case 0x54:
  281|    281|        try visitor.visitCmp(.i64LtU)
  282|   285k|    case 0x55:
  283|    216|        try visitor.visitCmp(.i64GtS)
  284|   285k|    case 0x56:
  285|    224|        try visitor.visitCmp(.i64GtU)
  286|   285k|    case 0x57:
  287|    249|        try visitor.visitCmp(.i64LeS)
  288|   285k|    case 0x58:
  289|    255|        try visitor.visitCmp(.i64LeU)
  290|   285k|    case 0x59:
  291|    314|        try visitor.visitCmp(.i64GeS)
  292|   285k|    case 0x5A:
  293|    364|        try visitor.visitCmp(.i64GeU)
  294|   285k|    case 0x5B:
  295|    258|        try visitor.visitCmp(.f32Eq)
  296|   285k|    case 0x5C:
  297|    281|        try visitor.visitCmp(.f32Ne)
  298|   285k|    case 0x5D:
  299|    283|        try visitor.visitCmp(.f32Lt)
  300|   285k|    case 0x5E:
  301|    236|        try visitor.visitCmp(.f32Gt)
  302|   285k|    case 0x5F:
  303|    321|        try visitor.visitCmp(.f32Le)
  304|   285k|    case 0x60:
  305|    286|        try visitor.visitCmp(.f32Ge)
  306|   285k|    case 0x61:
  307|    634|        try visitor.visitCmp(.f64Eq)
  308|   285k|    case 0x62:
  309|    335|        try visitor.visitCmp(.f64Ne)
  310|   285k|    case 0x63:
  311|    241|        try visitor.visitCmp(.f64Lt)
  312|   285k|    case 0x64:
  313|    247|        try visitor.visitCmp(.f64Gt)
  314|   285k|    case 0x65:
  315|    232|        try visitor.visitCmp(.f64Le)
  316|   285k|    case 0x66:
  317|    216|        try visitor.visitCmp(.f64Ge)
  318|   285k|    case 0x67:
  319|    640|        try visitor.visitUnary(.i32Clz)
  320|   285k|    case 0x68:
  321|    572|        try visitor.visitUnary(.i32Ctz)
  322|   285k|    case 0x69:
  323|    596|        try visitor.visitUnary(.i32Popcnt)
  324|   285k|    case 0x6A:
  325|    302|        try visitor.visitBinary(.i32Add)
  326|   285k|    case 0x6B:
  327|    352|        try visitor.visitBinary(.i32Sub)
  328|   285k|    case 0x6C:
  329|    470|        try visitor.visitBinary(.i32Mul)
  330|   285k|    case 0x6D:
  331|    439|        try visitor.visitBinary(.i32DivS)
  332|   285k|    case 0x6E:
  333|  2.21k|        try visitor.visitBinary(.i32DivU)
  334|   285k|    case 0x6F:
  335|    508|        try visitor.visitBinary(.i32RemS)
  336|   285k|    case 0x70:
  337|    957|        try visitor.visitBinary(.i32RemU)
  338|   285k|    case 0x71:
  339|    399|        try visitor.visitBinary(.i32And)
  340|   285k|    case 0x72:
  341|    322|        try visitor.visitBinary(.i32Or)
  342|   285k|    case 0x73:
  343|  3.55k|        try visitor.visitBinary(.i32Xor)
  344|   285k|    case 0x74:
  345|    478|        try visitor.visitBinary(.i32Shl)
  346|   285k|    case 0x75:
  347|    639|        try visitor.visitBinary(.i32ShrS)
  348|   285k|    case 0x76:
  349|    864|        try visitor.visitBinary(.i32ShrU)
  350|   285k|    case 0x77:
  351|    538|        try visitor.visitBinary(.i32Rotl)
  352|   285k|    case 0x78:
  353|    538|        try visitor.visitBinary(.i32Rotr)
  354|   285k|    case 0x79:
  355|  4.68k|        try visitor.visitUnary(.i64Clz)
  356|   285k|    case 0x7A:
  357|  1.01k|        try visitor.visitUnary(.i64Ctz)
  358|   285k|    case 0x7B:
  359|    933|        try visitor.visitUnary(.i64Popcnt)
  360|   285k|    case 0x7C:
  361|    489|        try visitor.visitBinary(.i64Add)
  362|   285k|    case 0x7D:
  363|  5.15k|        try visitor.visitBinary(.i64Sub)
  364|   285k|    case 0x7E:
  365|    498|        try visitor.visitBinary(.i64Mul)
  366|   285k|    case 0x7F:
  367|    761|        try visitor.visitBinary(.i64DivS)
  368|   285k|    case 0x80:
  369|    473|        try visitor.visitBinary(.i64DivU)
  370|   285k|    case 0x81:
  371|    399|        try visitor.visitBinary(.i64RemS)
  372|   285k|    case 0x82:
  373|    491|        try visitor.visitBinary(.i64RemU)
  374|   285k|    case 0x83:
  375|    424|        try visitor.visitBinary(.i64And)
  376|   285k|    case 0x84:
  377|  3.73k|        try visitor.visitBinary(.i64Or)
  378|   285k|    case 0x85:
  379|  3.51k|        try visitor.visitBinary(.i64Xor)
  380|   285k|    case 0x86:
  381|    496|        try visitor.visitBinary(.i64Shl)
  382|   285k|    case 0x87:
  383|    440|        try visitor.visitBinary(.i64ShrS)
  384|   285k|    case 0x88:
  385|    345|        try visitor.visitBinary(.i64ShrU)
  386|   285k|    case 0x89:
  387|    473|        try visitor.visitBinary(.i64Rotl)
  388|   285k|    case 0x8A:
  389|    379|        try visitor.visitBinary(.i64Rotr)
  390|   285k|    case 0x8B:
  391|    859|        try visitor.visitUnary(.f32Abs)
  392|   285k|    case 0x8C:
  393|    421|        try visitor.visitUnary(.f32Neg)
  394|   285k|    case 0x8D:
  395|    606|        try visitor.visitUnary(.f32Ceil)
  396|   285k|    case 0x8E:
  397|    724|        try visitor.visitUnary(.f32Floor)
  398|   285k|    case 0x8F:
  399|    866|        try visitor.visitUnary(.f32Trunc)
  400|   285k|    case 0x90:
  401|    568|        try visitor.visitUnary(.f32Nearest)
  402|   285k|    case 0x91:
  403|    692|        try visitor.visitUnary(.f32Sqrt)
  404|   285k|    case 0x92:
  405|    354|        try visitor.visitBinary(.f32Add)
  406|   285k|    case 0x93:
  407|    435|        try visitor.visitBinary(.f32Sub)
  408|   285k|    case 0x94:
  409|    347|        try visitor.visitBinary(.f32Mul)
  410|   285k|    case 0x95:
  411|    363|        try visitor.visitBinary(.f32Div)
  412|   285k|    case 0x96:
  413|    341|        try visitor.visitBinary(.f32Min)
  414|   285k|    case 0x97:
  415|    388|        try visitor.visitBinary(.f32Max)
  416|   285k|    case 0x98:
  417|    369|        try visitor.visitBinary(.f32Copysign)
  418|   285k|    case 0x99:
  419|    979|        try visitor.visitUnary(.f64Abs)
  420|   285k|    case 0x9A:
  421|    816|        try visitor.visitUnary(.f64Neg)
  422|   285k|    case 0x9B:
  423|    573|        try visitor.visitUnary(.f64Ceil)
  424|   285k|    case 0x9C:
  425|    765|        try visitor.visitUnary(.f64Floor)
  426|   285k|    case 0x9D:
  427|  4.23k|        try visitor.visitUnary(.f64Trunc)
  428|   285k|    case 0x9E:
  429|    830|        try visitor.visitUnary(.f64Nearest)
  430|   285k|    case 0x9F:
  431|    661|        try visitor.visitUnary(.f64Sqrt)
  432|   285k|    case 0xA0:
  433|    332|        try visitor.visitBinary(.f64Add)
  434|   285k|    case 0xA1:
  435|    458|        try visitor.visitBinary(.f64Sub)
  436|   285k|    case 0xA2:
  437|    280|        try visitor.visitBinary(.f64Mul)
  438|   285k|    case 0xA3:
  439|    403|        try visitor.visitBinary(.f64Div)
  440|   285k|    case 0xA4:
  441|    302|        try visitor.visitBinary(.f64Min)
  442|   285k|    case 0xA5:
  443|    290|        try visitor.visitBinary(.f64Max)
  444|   285k|    case 0xA6:
  445|    312|        try visitor.visitBinary(.f64Copysign)
  446|   285k|    case 0xA7:
  447|    888|        try visitor.visitConversion(.i32WrapI64)
  448|   285k|    case 0xA8:
  449|    285|        try visitor.visitConversion(.i32TruncF32S)
  450|   285k|    case 0xA9:
  451|    548|        try visitor.visitConversion(.i32TruncF32U)
  452|   285k|    case 0xAA:
  453|    373|        try visitor.visitConversion(.i32TruncF64S)
  454|   285k|    case 0xAB:
  455|  4.82k|        try visitor.visitConversion(.i32TruncF64U)
  456|   285k|    case 0xAC:
  457|    513|        try visitor.visitConversion(.i64ExtendI32S)
  458|   285k|    case 0xAD:
  459|    582|        try visitor.visitConversion(.i64ExtendI32U)
  460|   285k|    case 0xAE:
  461|    638|        try visitor.visitConversion(.i64TruncF32S)
  462|   285k|    case 0xAF:
  463|  3.19k|        try visitor.visitConversion(.i64TruncF32U)
  464|   285k|    case 0xB0:
  465|    715|        try visitor.visitConversion(.i64TruncF64S)
  466|   285k|    case 0xB1:
  467|    227|        try visitor.visitConversion(.i64TruncF64U)
  468|   285k|    case 0xB2:
  469|    647|        try visitor.visitConversion(.f32ConvertI32S)
  470|   285k|    case 0xB3:
  471|    312|        try visitor.visitConversion(.f32ConvertI32U)
  472|   285k|    case 0xB4:
  473|  3.64k|        try visitor.visitConversion(.f32ConvertI64S)
  474|   285k|    case 0xB5:
  475|    433|        try visitor.visitConversion(.f32ConvertI64U)
  476|   285k|    case 0xB6:
  477|    374|        try visitor.visitConversion(.f32DemoteF64)
  478|   285k|    case 0xB7:
  479|    635|        try visitor.visitConversion(.f64ConvertI32S)
  480|   285k|    case 0xB8:
  481|    279|        try visitor.visitConversion(.f64ConvertI32U)
  482|   285k|    case 0xB9:
  483|    912|        try visitor.visitConversion(.f64ConvertI64S)
  484|   285k|    case 0xBA:
  485|    434|        try visitor.visitConversion(.f64ConvertI64U)
  486|   285k|    case 0xBB:
  487|    755|        try visitor.visitConversion(.f64PromoteF32)
  488|   285k|    case 0xBC:
  489|  2.19k|        try visitor.visitConversion(.i32ReinterpretF32)
  490|   285k|    case 0xBD:
  491|  1.39k|        try visitor.visitConversion(.i64ReinterpretF64)
  492|   285k|    case 0xBE:
  493|    769|        try visitor.visitConversion(.f32ReinterpretI32)
  494|   285k|    case 0xBF:
  495|  5.47k|        try visitor.visitConversion(.f64ReinterpretI64)
  496|   285k|    case 0xC0:
  497|  6.61k|        try visitor.visitUnary(.i32Extend8S)
  498|   285k|    case 0xC1:
  499|  1.11k|        try visitor.visitUnary(.i32Extend16S)
  500|   285k|    case 0xC2:
  501|    970|        try visitor.visitUnary(.i64Extend8S)
  502|   285k|    case 0xC3:
  503|    708|        try visitor.visitUnary(.i64Extend16S)
  504|   285k|    case 0xC4:
  505|    556|        try visitor.visitUnary(.i64Extend32S)
  506|   285k|    case 0xD0:
  507|    134|        let (type) = try decoder.visitRefNull()
  508|    126|        try visitor.visitRefNull(type: type)
  509|   285k|    case 0xD1:
  510|    221|        try visitor.visitRefIsNull()
  511|   285k|    case 0xD2:
  512|    292|        let (functionIndex) = try decoder.visitRefFunc()
  513|    291|        try visitor.visitRefFunc(functionIndex: functionIndex)
  514|   285k|    case 0xFC:
  515|  9.84k|
  516|  9.84k|        let opcode1 = try decoder.claimNextByte()
  517|  9.84k|        switch opcode1 {
  518|  9.84k|        case 0x00:
  519|    250|            try visitor.visitConversion(.i32TruncSatF32S)
  520|  9.84k|        case 0x01:
  521|    497|            try visitor.visitConversion(.i32TruncSatF32U)
  522|  9.84k|        case 0x02:
  523|    130|            try visitor.visitConversion(.i32TruncSatF64S)
  524|  9.84k|        case 0x03:
  525|    408|            try visitor.visitConversion(.i32TruncSatF64U)
  526|  9.84k|        case 0x04:
  527|    854|            try visitor.visitConversion(.i64TruncSatF32S)
  528|  9.84k|        case 0x05:
  529|    345|            try visitor.visitConversion(.i64TruncSatF32U)
  530|  9.84k|        case 0x06:
  531|  5.17k|            try visitor.visitConversion(.i64TruncSatF64S)
  532|  9.84k|        case 0x07:
  533|    183|            try visitor.visitConversion(.i64TruncSatF64U)
  534|  9.84k|        case 0x08:
  535|    113|            let (dataIndex) = try decoder.visitMemoryInit()
  536|    110|            try visitor.visitMemoryInit(dataIndex: dataIndex)
  537|  9.84k|        case 0x09:
  538|    196|            let (dataIndex) = try decoder.visitDataDrop()
  539|    195|            try visitor.visitDataDrop(dataIndex: dataIndex)
  540|  9.84k|        case 0x0A:
  541|    190|            let (dstMem, srcMem) = try decoder.visitMemoryCopy()
  542|    186|            try visitor.visitMemoryCopy(dstMem: dstMem, srcMem: srcMem)
  543|  9.84k|        case 0x0B:
  544|    137|            let (memory) = try decoder.visitMemoryFill()
  545|    135|            try visitor.visitMemoryFill(memory: memory)
  546|  9.84k|        case 0x0C:
  547|    333|            let (elemIndex, table) = try decoder.visitTableInit()
  548|    331|            try visitor.visitTableInit(elemIndex: elemIndex, table: table)
  549|  9.84k|        case 0x0D:
  550|    199|            let (elemIndex) = try decoder.visitElemDrop()
  551|    198|            try visitor.visitElemDrop(elemIndex: elemIndex)
  552|  9.84k|        case 0x0E:
  553|    134|            let (dstTable, srcTable) = try decoder.visitTableCopy()
  554|    127|            try visitor.visitTableCopy(dstTable: dstTable, srcTable: srcTable)
  555|  9.84k|        case 0x0F:
  556|    238|            let (table) = try decoder.visitTableGrow()
  557|    237|            try visitor.visitTableGrow(table: table)
  558|  9.84k|        case 0x10:
  559|    215|            let (table) = try decoder.visitTableSize()
  560|    214|            try visitor.visitTableSize(table: table)
  561|  9.84k|        case 0x11:
  562|    240|            let (table) = try decoder.visitTableFill()
  563|    239|            try visitor.visitTableFill(table: table)
  564|  9.84k|        default:
  565|      8|            try decoder.visitUnknown([opcode0, opcode1])
  566|  9.84k|        }
  567|   285k|    default:
  568|    149|        try decoder.visitUnknown([opcode0])
  569|   285k|    }
  570|   270k|    return false
  571|   287k|}

$s10WasmParser21AnyInstructionVisitorPAAE16visitUnreachableyyKF:
  238|  2.10k|    public mutating func visitUnreachable() throws { return try self.visit(.unreachable) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitNopyyKF:
  239|    772|    public mutating func visitNop() throws { return try self.visit(.nop) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitBlock9blockTypeyAA0gI0O_tKF:
  240|    748|    public mutating func visitBlock(blockType: BlockType) throws { return try self.visit(.block(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitLoop9blockTypeyAA05BlockI0O_tKF:
  241|    856|    public mutating func visitLoop(blockType: BlockType) throws { return try self.visit(.loop(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE7visitIf9blockTypeyAA05BlockI0O_tKF:
  242|    315|    public mutating func visitIf(blockType: BlockType) throws { return try self.visit(.if(blockType: blockType)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitElseyyKF:
  243|    276|    public mutating func visitElse() throws { return try self.visit(.else) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitEndyyKF:
  244|  9.30k|    public mutating func visitEnd() throws { return try self.visit(.end) }
$s10WasmParser21AnyInstructionVisitorPAAE7visitBr13relativeDepthys6UInt32V_tKF:
  245|    234|    public mutating func visitBr(relativeDepth: UInt32) throws { return try self.visit(.br(relativeDepth: relativeDepth)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitBrIf13relativeDepthys6UInt32V_tKF:
  246|    318|    public mutating func visitBrIf(relativeDepth: UInt32) throws { return try self.visit(.brIf(relativeDepth: relativeDepth)) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitBrTable7targetsyAA0gH0V_tKF:
  247|    289|    public mutating func visitBrTable(targets: BrTable) throws { return try self.visit(.brTable(targets: targets)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitReturnyyKF:
  248|    279|    public mutating func visitReturn() throws { return try self.visit(.return) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitCall13functionIndexys6UInt32V_tKF:
  249|    253|    public mutating func visitCall(functionIndex: UInt32) throws { return try self.visit(.call(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE17visitCallIndirect9typeIndex05tableJ0ys6UInt32V_AHtKF:
  250|    195|    public mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try self.visit(.callIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitReturnCall13functionIndexys6UInt32V_tKF:
  251|    195|    public mutating func visitReturnCall(functionIndex: UInt32) throws { return try self.visit(.returnCall(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE23visitReturnCallIndirect9typeIndex05tableK0ys6UInt32V_AHtKF:
  252|    194|    public mutating func visitReturnCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try self.visit(.returnCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitDropyyKF:
  253|    194|    public mutating func visitDrop() throws { return try self.visit(.drop) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitSelectyyKF:
  254|    194|    public mutating func visitSelect() throws { return try self.visit(.select) }
$s10WasmParser21AnyInstructionVisitorPAAE16visitTypedSelect4typey0A5Types9ValueTypeO_tKF:
  255|    197|    public mutating func visitTypedSelect(type: ValueType) throws { return try self.visit(.typedSelect(type: type)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalGet10localIndexys6UInt32V_tKF:
  256|    474|    public mutating func visitLocalGet(localIndex: UInt32) throws { return try self.visit(.localGet(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalSet10localIndexys6UInt32V_tKF:
  257|    223|    public mutating func visitLocalSet(localIndex: UInt32) throws { return try self.visit(.localSet(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitLocalTee10localIndexys6UInt32V_tKF:
  258|    197|    public mutating func visitLocalTee(localIndex: UInt32) throws { return try self.visit(.localTee(localIndex: localIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitGlobalGet11globalIndexys6UInt32V_tKF:
  259|    289|    public mutating func visitGlobalGet(globalIndex: UInt32) throws { return try self.visit(.globalGet(globalIndex: globalIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitGlobalSet11globalIndexys6UInt32V_tKF:
  260|    195|    public mutating func visitGlobalSet(globalIndex: UInt32) throws { return try self.visit(.globalSet(globalIndex: globalIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE9visitLoad_6memargyAA0D0O0G0O_AA6MemArgVtKF:
  261|  3.22k|    public mutating func visitLoad(_ load: Instruction.Load, memarg: MemArg) throws { return try self.visit(.load(load, memarg: memarg)) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitStore_6memargyAA0D0O0G0O_AA6MemArgVtKF:
  262|  2.20k|    public mutating func visitStore(_ store: Instruction.Store, memarg: MemArg) throws { return try self.visit(.store(store, memarg: memarg)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemorySize6memoryys6UInt32V_tKF:
  263|     69|    public mutating func visitMemorySize(memory: UInt32) throws { return try self.visit(.memorySize(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryGrow6memoryys6UInt32V_tKF:
  264|    194|    public mutating func visitMemoryGrow(memory: UInt32) throws { return try self.visit(.memoryGrow(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitI32Const5valueys5Int32V_tKF:
  265|  5.38k|    public mutating func visitI32Const(value: Int32) throws { return try self.visit(.i32Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitI64Const5valueys5Int64V_tKF:
  266|  3.32k|    public mutating func visitI64Const(value: Int64) throws { return try self.visit(.i64Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitF32Const5valueyAA7IEEE754O7Float32V_tKF:
  267|    511|    public mutating func visitF32Const(value: IEEE754.Float32) throws { return try self.visit(.f32Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitF64Const5valueyAA7IEEE754O7Float64V_tKF:
  268|    675|    public mutating func visitF64Const(value: IEEE754.Float64) throws { return try self.visit(.f64Const(value: value)) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitRefNull4typey0A5Types13ReferenceTypeO_tKF:
  269|     66|    public mutating func visitRefNull(type: ReferenceType) throws { return try self.visit(.refNull(type: type)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitRefIsNullyyKF:
  270|    194|    public mutating func visitRefIsNull() throws { return try self.visit(.refIsNull) }
$s10WasmParser21AnyInstructionVisitorPAAE12visitRefFunc13functionIndexys6UInt32V_tKF:
  271|    212|    public mutating func visitRefFunc(functionIndex: UInt32) throws { return try self.visit(.refFunc(functionIndex: functionIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitI32EqzyyKF:
  272|    217|    public mutating func visitI32Eqz() throws { return try self.visit(.i32Eqz) }
$s10WasmParser21AnyInstructionVisitorPAAE8visitCmpyyAA0D0O0G0OKF:
  273|  7.05k|    public mutating func visitCmp(_ cmp: Instruction.Cmp) throws { return try self.visit(.cmp(cmp)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitI64EqzyyKF:
  274|    194|    public mutating func visitI64Eqz() throws { return try self.visit(.i64Eqz) }
$s10WasmParser21AnyInstructionVisitorPAAE10visitUnaryyyAA0D0O0G0OKF:
  275|  5.73k|    public mutating func visitUnary(_ unary: Instruction.Unary) throws { return try self.visit(.unary(unary)) }
$s10WasmParser21AnyInstructionVisitorPAAE11visitBinaryyyAA0D0O0G0OKF:
  276|  9.46k|    public mutating func visitBinary(_ binary: Instruction.Binary) throws { return try self.visit(.binary(binary)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitConversionyyAA0D0O0G0OKF:
  277|  6.54k|    public mutating func visitConversion(_ conversion: Instruction.Conversion) throws { return try self.visit(.conversion(conversion)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryInit9dataIndexys6UInt32V_tKF:
  278|    109|    public mutating func visitMemoryInit(dataIndex: UInt32) throws { return try self.visit(.memoryInit(dataIndex: dataIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitDataDrop9dataIndexys6UInt32V_tKF:
  279|    194|    public mutating func visitDataDrop(dataIndex: UInt32) throws { return try self.visit(.dataDrop(dataIndex: dataIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryCopy6dstMem03srcJ0ys6UInt32V_AHtKF:
  280|     98|    public mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws { return try self.visit(.memoryCopy(dstMem: dstMem, srcMem: srcMem)) }
$s10WasmParser21AnyInstructionVisitorPAAE15visitMemoryFill6memoryys6UInt32V_tKF:
  281|     66|    public mutating func visitMemoryFill(memory: UInt32) throws { return try self.visit(.memoryFill(memory: memory)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableInit9elemIndex5tableys6UInt32V_AHtKF:
  282|    328|    public mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws { return try self.visit(.tableInit(elemIndex: elemIndex, table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitElemDrop9elemIndexys6UInt32V_tKF:
  283|    197|    public mutating func visitElemDrop(elemIndex: UInt32) throws { return try self.visit(.elemDrop(elemIndex: elemIndex)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableCopy03dstG003srcG0ys6UInt32V_AHtKF:
  284|     66|    public mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws { return try self.visit(.tableCopy(dstTable: dstTable, srcTable: srcTable)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableFill5tableys6UInt32V_tKF:
  285|    226|    public mutating func visitTableFill(table: UInt32) throws { return try self.visit(.tableFill(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitTableGet5tableys6UInt32V_tKF:
  286|    212|    public mutating func visitTableGet(table: UInt32) throws { return try self.visit(.tableGet(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE13visitTableSet5tableys6UInt32V_tKF:
  287|    457|    public mutating func visitTableSet(table: UInt32) throws { return try self.visit(.tableSet(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableGrow5tableys6UInt32V_tKF:
  288|    202|    public mutating func visitTableGrow(table: UInt32) throws { return try self.visit(.tableGrow(table: table)) }
$s10WasmParser21AnyInstructionVisitorPAAE14visitTableSize5tableys6UInt32V_tKF:
  289|    194|    public mutating func visitTableSize(table: UInt32) throws { return try self.visit(.tableSize(table: table)) }

$s10WasmParser12decodeLEB1286streamxq__tKs17FixedWidthIntegerRzSURzAA10ByteStreamR_r0_lF:
   11|   175k|) throws -> IntType where IntType: FixedWidthInteger, IntType: UnsignedInteger, Stream: ByteStream {
   12|   175k|    let firstByte = try stream.consumeAny()
   13|   174k|    var result: IntType = IntType(firstByte & 0b0111_1111)
   14|   174k|    if _fastPath(firstByte & 0b1000_0000 == 0) {
   15|   152k|        return result
   16|   152k|    }
   17|  22.7k|
   18|  22.7k|    var shift: UInt = 7
   19|  22.7k|
   20|  60.6k|    while true {
   21|  60.6k|        let byte = try stream.consumeAny()
   22|  60.6k|        let slice = IntType(byte & 0b0111_1111)
   23|  60.6k|        let nextShift = shift + 7
   24|  60.6k|        if nextShift >= IntType.bitWidth, (byte >> (UInt(IntType.bitWidth) - shift)) != 0 {
   25|     14|            throw LEBError.integerRepresentationTooLong
   26|  60.6k|        }
   27|  60.6k|        result |= slice << shift
   28|  60.6k|        shift = nextShift
   29|  60.6k|
   30|  60.6k|        guard byte & 0b1000_0000 != 0 else { break }
   31|  37.9k|    }
   32|  22.6k|
   33|  22.6k|    return result
   34|   175k|}
$s10WasmParser12decodeLEB1286stream8bitWidthxq__SitKAA16RawSignedIntegerRzAA10ByteStreamR_r0_lF:
   39|  28.6k|) throws -> IntType where IntType: FixedWidthInteger, IntType: RawSignedInteger, Stream: ByteStream {
   40|  28.6k|    let firstByte = try stream.consumeAny()
   41|  28.6k|    var result = IntType.Unsigned(firstByte & 0b0111_1111)
   42|  28.6k|    if _fastPath(firstByte & 0b1000_0000 == 0) {
   43|  13.1k|        // Interpret Int${Self.bitWidth-1} as Int${Self.bitWidth}
   44|  13.1k|        return (IntType(bitPattern: result) << (IntType.bitWidth - 7)) >> (IntType.bitWidth - 7)
   45|  15.4k|    }
   46|  15.4k|
   47|  15.4k|    var shift: IntType = 7
   48|  15.4k|
   49|  15.4k|    var byte: UInt8
   50|  83.8k|    repeat {
   51|  83.8k|        byte = try stream.consumeAny()
   52|  83.8k|
   53|  83.8k|        let slice = IntType.Unsigned(byte & 0b0111_1111)
   54|  83.8k|        result |= slice << shift
   55|  83.8k|
   56|  83.8k|        // When we don't have enough bit width
   57|  83.8k|        if shift > (bitWidth - 7) {
   58|  8.98k|            let remainingBitWidth = bitWidth - Int(shift)
   59|  8.98k|            let continuationBit = (byte & 0b1000_0000) != 0
   60|  8.98k|            // When a next byte is expected
   61|  8.98k|            if continuationBit {
   62|      4|                throw LEBError.integerRepresentationTooLong
   63|  8.97k|            }
   64|  8.97k|
   65|  8.97k|            let signAndDiscardingBits = Int8(bitPattern: byte << 1) >> remainingBitWidth
   66|  8.97k|            // When meaningful bits are discarded
   67|  8.97k|            if signAndDiscardingBits != 0 && signAndDiscardingBits != -1 {
   68|      4|                throw LEBError.overflow
   69|  8.97k|            }
   70|  8.97k|            return IntType(bitPattern: result)
   71|  74.8k|        }
   72|  74.8k|
   73|  74.8k|        shift += 7
   74|  74.8k|    } while byte & 0b1000_0000 != 0
   75|  6.48k|
   76|  6.48k|    // Sign flag is second high-order bit
   77|  6.48k|    if byte & 0b0100_0000 != 0 {
   78|  1.25k|        // Sign extend
   79|  1.25k|        result |= IntType.Unsigned(bitPattern: ~0) << shift
   80|  1.25k|    }
   81|  6.48k|
   82|  6.48k|    return IntType(bitPattern: result)
   83|  28.6k|}
$s10WasmParser12decodeLEB1286stream8bitWidthxq__SitKAA16RawSignedIntegerRzAA10ByteStreamR_r0_lFSbyKXEfu_:
   67|  2.88k|            if signAndDiscardingBits != 0 && signAndDiscardingBits != -1 {

$s10WasmParser13ParsingLimitsV7defaultACvgZ:
    9|  6.49k|    static var `default`: ParsingLimits {
   10|  6.49k|        return ParsingLimits(maxFunctionLocals: 100000)
   11|  6.49k|    }

$s10WasmParser16StaticByteStreamC5bytesACSays5UInt8VG_tcfc:
    7|  4.08k|    public init(bytes: [UInt8]) {
    8|  4.08k|        self.bytes = ArraySlice(bytes)
    9|  4.08k|        currentIndex = bytes.startIndex
   10|  4.08k|    }
$s10WasmParser16StaticByteStreamC5bytesACs10ArraySliceVys5UInt8VG_tcfc:
   12|  2.41k|    public init(bytes: ArraySlice<UInt8>) {
   13|  2.41k|        self.bytes = bytes
   14|  2.41k|        currentIndex = bytes.startIndex
   15|  2.41k|    }
$s10WasmParser16StaticByteStreamC10consumeAnys5UInt8VyKF:
   18|   717k|    public func consumeAny() throws -> UInt8 {
   19|   717k|        guard bytes.indices.contains(currentIndex) else {
   20|  2.06k|            throw StreamError<Element>.unexpectedEnd(expected: nil)
   21|   715k|        }
   22|   715k|
   23|   715k|        let consumed = bytes[currentIndex]
   24|   715k|        currentIndex = bytes.index(after: currentIndex)
   25|   715k|        return consumed
   26|   717k|    }
$s10WasmParser16StaticByteStreamC7consumeys5UInt8VShyAFGKF:
   29|  2.24k|    public func consume(_ expected: Set<UInt8>) throws -> UInt8 {
   30|  2.24k|        guard bytes.indices.contains(currentIndex) else {
   31|      4|            throw StreamError<Element>.unexpectedEnd(expected: Set(expected))
   32|  2.24k|        }
   33|  2.24k|
   34|  2.24k|        let consumed = bytes[currentIndex]
   35|  2.24k|        guard expected.contains(consumed) else {
   36|      2|            throw StreamError<Element>.unexpected(consumed, index: currentIndex, expected: Set(expected))
   37|  2.24k|        }
   38|  2.24k|
   39|  2.24k|        currentIndex = bytes.index(after: currentIndex)
   40|  2.24k|        return consumed
   41|  2.24k|    }
$s10WasmParser16StaticByteStreamC7consume5counts10ArraySliceVys5UInt8VGSi_tKF:
   43|  22.2k|    public func consume(count: Int) throws -> ArraySlice<UInt8> {
   44|  22.2k|        guard count > 0 else { return [] }
   45|  21.3k|        let updatedIndex = currentIndex + count
   46|  21.3k|
   47|  21.3k|        guard bytes.indices.contains(updatedIndex - 1) else {
   48|     27|            throw StreamError<Element>.unexpectedEnd(expected: nil)
   49|  21.2k|        }
   50|  21.2k|
   51|  21.2k|        defer { currentIndex = updatedIndex }
   52|  21.2k|
   53|  21.2k|        return bytes[currentIndex..<updatedIndex]
   54|  22.2k|    }
$s10WasmParser16StaticByteStreamC4peeks5UInt8VSgyF:
   56|   242k|    public func peek() -> UInt8? {
   57|   242k|        guard bytes.indices.contains(currentIndex) else {
   58|  3.26k|            return nil
   59|   239k|        }
   60|   239k|        return bytes[currentIndex]
   61|   242k|    }

$s10WasmParser6StreamPAAE13hasReachedEndSbyKF:
   25|   233k|    func hasReachedEnd() throws -> Bool {
   26|   233k|        try peek() == nil
   27|   233k|    }

$s10WasmParser0B0V13orderTrackingAC05OrderD0Vyx_Gvpfi:
   17|  6.49k|    @usableFromInline var orderTracking = OrderTracking()
$s10WasmParser0B0V6offsetSivg:
   28|   222k|    public var offset: Int {
   29|   222k|        return stream.currentIndex
   30|   222k|    }
$s10WasmParser0B0V6stream8featuresACyxGx_AA0A10FeatureSetVtcfC:
   32|  6.49k|    public init(stream: Stream, features: WasmFeatureSet = .default) {
   33|  6.49k|        self.stream = stream
   34|  6.49k|        self.features = features
   35|  6.49k|        self.nextParseTarget = .header
   36|  6.49k|        self.limits = .default
   37|  6.49k|    }
$s10WasmParser0B0V9makeErroryAA0abD0VAF7MessageVF:
   40|    277|    internal func makeError(_ message: WasmParserError.Message) -> WasmParserError {
   41|    277|        return WasmParserError(message, offset: offset)
   42|    277|    }
$s10WasmParser010ExpressionB0V6offsetSivg:
  149|   219k|    public var offset: Int {
  150|   219k|        self.codeOffset + self.parser.offset - self.initialStreamOffset
  151|   219k|    }
$s10WasmParser010ExpressionB0V4codeAcA4CodeV_tcfC:
  153|  2.41k|    public init(code: Code) {
  154|  2.41k|        self.parser = Parser(
  155|  2.41k|            stream: StaticByteStream(bytes: code.expression),
  156|  2.41k|            features: code.features
  157|  2.41k|        )
  158|  2.41k|        self.codeOffset = code.offset
  159|  2.41k|        self.initialStreamOffset = self.parser.offset
  160|  2.41k|    }
$s10WasmParser010ExpressionB0V5visit7visitorSbxz_tKAA18InstructionVisitorRzlF:
  163|   219k|    public mutating func visit<V: InstructionVisitor>(visitor: inout V) throws -> Bool {
  164|   219k|        isLastEnd = try parser.parseInstruction(visitor: &visitor)
  165|   218k|        let shouldContinue = try !parser.stream.hasReachedEnd()
  166|   218k|        if !shouldContinue {
  167|  1.37k|            guard isLastEnd == true else {
  168|     33|                throw WasmParserError(.endOpcodeExpected, offset: offset)
  169|  1.34k|            }
  170|   218k|        }
  171|   218k|        return shouldContinue
  172|   219k|    }
$s10WasmParser0A10FeatureSetV8rawValueACSi_tcfC:
  183|  90.0k|    public init(rawValue: Int) {
  184|  90.0k|        self.rawValue = rawValue
  185|  90.0k|    }
$s10WasmParser0A10FeatureSetV8memory64ACvgZ:
  189|   109k|    public static var memory64: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 0) }
$s10WasmParser0A10FeatureSetV14referenceTypesACvgZ:
  192|  1.93k|    public static var referenceTypes: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 1) }
$s10WasmParser0A10FeatureSetV7threadsACvgZ:
  195|  8.30k|    public static var threads: WasmFeatureSet { WasmFeatureSet(rawValue: 1 << 2) }
$s10WasmParser0aB5ErrorV7MessageVyAESScfC:
  212|    257|        init(_ text: String) {
  213|    257|            self.text = text
  214|    257|        }
$s10WasmParser0aB5ErrorV_6offsetA2C7MessageV_SitcfC:
  221|    314|    init(_ message: Message, offset: Int) {
  222|    314|        self.message = message
  223|    314|        self.offset = offset
  224|    314|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidMagicNumberyAESays5UInt8VGFZ:
  235|      3|    static func invalidMagicNumber(_ bytes: [UInt8]) -> Self {
  236|      3|        Self("magic header not detected: expected \(WASM_MAGIC) but got \(bytes)")
  237|      3|    }
$s10WasmParser0aB5ErrorV7MessageV14unknownVersionyAESays5UInt8VGFZ:
  240|      1|    static func unknownVersion(_ bytes: [UInt8]) -> Self {
  241|      1|        Self("unknown binary version: \(bytes)")
  242|      1|    }
$s10WasmParser0aB5ErrorV7MessageV11invalidUTF8yAESays5UInt8VGFZ:
  244|      4|    static func invalidUTF8(_ bytes: [UInt8]) -> Self {
  245|      4|        Self("malformed UTF-8 encoding: \(bytes)")
  246|      4|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidSectionSizeyAEs6UInt32VFZ:
  249|      6|    static func invalidSectionSize(_ size: UInt32) -> Self {
  250|      6|        // TODO: Remove size parameter
  251|      6|        Self("unexpected end-of-file")
  252|      6|    }
$s10WasmParser0aB5ErrorV7MessageV18malformedSectionIDyAEs5UInt8VFZ:
  255|      3|    static func malformedSectionID(_ id: UInt8) -> Self {
  256|      3|        Self("malformed section id: \(id)")
  257|      3|    }
$s10WasmParser0aB5ErrorV7MessageV12zeroExpected6actualAEs5UInt8V_tFZ:
  259|     16|    @usableFromInline static func zeroExpected(actual: UInt8) -> Self {
  260|     16|        Self("Zero expected but got \(actual)")
  261|     16|    }
$s10WasmParser0aB5ErrorV7MessageV13tooManyLocals_5limitAEs6UInt64V_AItFZ:
  264|      1|    static func tooManyLocals(_ count: UInt64, limit: UInt64) -> Self {
  265|      1|        Self("Too many locals: \(count) vs \(limit)")
  266|      1|    }
$s10WasmParser0aB5ErrorV7MessageV15expectedRefType6actualAE0A5Types05ValueG0O_tFZ:
  268|      8|    @usableFromInline static func expectedRefType(actual: ValueType) -> Self {
  269|      8|        Self("Expected reference type but got \(actual)")
  270|      8|    }
$s10WasmParser0aB5ErrorV7MessageV21unexpectedElementKind8expected6actualAEs6UInt32V_AJtFZ:
  273|      2|    static func unexpectedElementKind(expected: UInt32, actual: UInt32) -> Self {
  274|      2|        Self("Unexpected element kind: expected \(expected) but got \(actual)")
  275|      2|    }
$s10WasmParser0aB5ErrorV7MessageV19sectionSizeMismatch8expected6actualAESi_SitFZ:
  287|     36|    static func sectionSizeMismatch(expected: Int, actual: Int) -> Self {
  288|     36|        Self("Section size mismatch: expected \(expected) but got \(actual)")
  289|     36|    }
$s10WasmParser0aB5ErrorV7MessageV13illegalOpcodeyAESays5UInt8VGFZ:
  291|    157|    @usableFromInline static func illegalOpcode(_ opcode: [UInt8]) -> Self {
  292|    157|        Self("Illegal opcode: \(opcode)")
  293|    157|    }
$s10WasmParser0aB5ErrorV7MessageV19malformedMutabilityyAEs5UInt8VFZ:
  296|      1|    static func malformedMutability(_ byte: UInt8) -> Self {
  297|      1|        Self("Malformed mutability: \(byte)")
  298|      1|    }
$s10WasmParser0aB5ErrorV7MessageV21malformedFunctionTypeyAEs5UInt8VFZ:
  301|      1|    static func malformedFunctionType(_ byte: UInt8) -> Self {
  302|      1|        Self("Malformed function type: \(byte)")
  303|      1|    }
$s10WasmParser0aB5ErrorV7MessageV14malformedLimityAEs5UInt8VFZ:
  309|      4|    static func malformedLimit(_ byte: UInt8) -> Self {
  310|      4|        Self("Malformed limit: \(byte)")
  311|      4|    }
$s10WasmParser0aB5ErrorV7MessageV24malformedDataSegmentKindyAEs6UInt32VFZ:
  315|      1|    @usableFromInline static func malformedDataSegmentKind(_ kind: UInt32) -> Self {
  316|      1|        Self("Malformed data segment kind: \(kind)")
  317|      1|    }
$s10WasmParser0aB5ErrorV7MessageV18invalidResultArity8expected6actualAESi_SitFZ:
  319|      1|    @usableFromInline static func invalidResultArity(expected: Int, actual: Int) -> Self {
  320|      1|        Self("invalid result arity: expected \(expected) but got \(actual)")
  321|      1|    }
$s10WasmParser0aB5ErrorV7MessageV19invalidFunctionTypeyAEs5Int64VFZ:
  323|      8|    @usableFromInline static func invalidFunctionType(_ index: Int64) -> Self {
  324|      8|        Self("invalid function type index: \(index), expected a unsigned 32-bit integer")
  325|      8|    }
$s10WasmParser10ByteStreamPAAE11parseVector7contentSayqd__Gqd__yKXE_tKlF:
  332|  32.3k|    func parseVector<Content>(content parser: () throws -> Content) throws -> [Content] {
  333|  32.3k|        var contents = [Content]()
  334|  32.3k|        let count: UInt32 = try parseUnsigned()
  335|  51.2k|        for _ in 0..<count {
  336|  51.2k|            try contents.append(parser())
  337|  49.0k|        }
  338|  30.0k|        return contents
  339|  32.3k|    }
$s10WasmParser10ByteStreamPAAE13parseUnsignedyqd__qd__mKAA03RawF7IntegerRd__lF:
  346|   175k|    func parseUnsigned<T: RawUnsignedInteger>(_: T.Type = T.self) throws -> T {
  347|   175k|        try decodeLEB128(stream: self)
  348|   174k|    }
$s10WasmParser10ByteStreamPAAE11parseSignedqd__yKAA03RawF7IntegerRd__lF:
  351|  26.2k|    func parseSigned<T: FixedWidthInteger & RawSignedInteger>() throws -> T {
  352|  26.2k|        try decodeLEB128(stream: self)
  353|  26.2k|    }
$s10WasmParser10ByteStreamPAAE16parseVarSigned33s5Int64VyKF:
  356|  2.41k|    func parseVarSigned33() throws -> Int64 {
  357|  2.41k|        try decodeLEB128(stream: self, bitWidth: 33)
  358|  2.40k|    }
$s10WasmParser10ByteStreamPAAE9parseName33_266B39EE9A5BCC72156BAE2430A75AC9LLSSyKF:
  364|  3.87k|    fileprivate func parseName() throws -> String {
  365|  3.87k|        let bytes = try parseVector { () -> UInt8 in
  366|  3.87k|            try consumeAny()
  367|  3.87k|        }
  368|  3.82k|
  369|  3.82k|        // TODO(optimize): Utilize ASCII fast path in UTF8 decoder
  370|  3.82k|        var name = ""
  371|  3.82k|
  372|  3.82k|        var iterator = bytes.makeIterator()
  373|  3.82k|        var decoder = UTF8()
  374|  6.41k|        Decode: while true {
  375|  6.41k|            switch decoder.decode(&iterator) {
  376|  6.41k|            case let .scalarValue(scalar): name.append(Character(scalar))
  377|  6.41k|            case .emptyInput: break Decode
  378|  6.41k|            case .error: throw WasmParserError(.invalidUTF8(bytes), offset: currentIndex)
  379|  6.41k|            }
  380|  3.81k|        }
  381|  3.81k|
  382|  3.81k|        return name
  383|  3.87k|    }
$s10WasmParser10ByteStreamPAAE9parseName33_266B39EE9A5BCC72156BAE2430A75AC9LLSSyKFs5UInt8VyKXEfU_:
  365|  2.77k|        let bytes = try parseVector { () -> UInt8 in
  366|  2.77k|            try consumeAny()
  367|  2.76k|        }
$s10WasmParser0B0V11parseVector7contentSayqd__Gqd__yKXE_tKlF:
  388|  28.4k|    func parseVector<Content>(content parser: () throws -> Content) throws -> [Content] {
  389|  28.4k|        try stream.parseVector(content: parser)
  390|  26.2k|    }
$s10WasmParser0B0V13parseUnsignedyqd__qd__mKAA03RawD7IntegerRd__lF:
  394|   142k|    func parseUnsigned<T: RawUnsignedInteger>(_: T.Type = T.self) throws -> T {
  395|   142k|        try stream.parseUnsigned(T.self)
  396|   142k|    }
$s10WasmParser0B0V12parseIntegerqd__yKAA011RawUnsignedD0Rd__lF:
  399|  26.2k|    func parseInteger<T: RawUnsignedInteger>() throws -> T {
  400|  26.2k|        let signed: T.Signed = try stream.parseSigned()
  401|  26.2k|        return T(bitPattern: signed)
  402|  26.2k|    }
$s10WasmParser0B0V9parseNameSSyKF:
  404|  3.87k|    func parseName() throws -> String {
  405|  3.87k|        try stream.parseName()
  406|  3.81k|    }
$s10WasmParser0B0V10parseFloats6UInt32VyKF:
  413|  4.48k|    func parseFloat() throws -> UInt32 {
  414|  4.48k|        let consumedLittleEndian = try stream.consume(count: 4).reversed()
  415|  4.48k|        let bitPattern = consumedLittleEndian.reduce(UInt32(0)) { acc, byte in
  416|  4.48k|            acc << 8 + UInt32(byte)
  417|  4.48k|        }
  418|  4.48k|        return bitPattern
  419|  4.48k|    }
$s10WasmParser0B0V10parseFloats6UInt32VyKFA2F_s5UInt8VtXEfU_:
  415|  17.9k|        let bitPattern = consumedLittleEndian.reduce(UInt32(0)) { acc, byte in
  416|  17.9k|            acc << 8 + UInt32(byte)
  417|  17.9k|        }
$s10WasmParser0B0V11parseDoubles6UInt64VyKF:
  422|  2.97k|    func parseDouble() throws -> UInt64 {
  423|  2.97k|        let consumedLittleEndian = try stream.consume(count: 8).reversed()
  424|  2.96k|        let bitPattern = consumedLittleEndian.reduce(UInt64(0)) { acc, byte in
  425|  2.96k|            acc << 8 + UInt64(byte)
  426|  2.96k|        }
  427|  2.96k|        return bitPattern
  428|  2.97k|    }
$s10WasmParser0B0V11parseDoubles6UInt64VyKFA2F_s5UInt8VtXEfU_:
  424|  23.6k|        let bitPattern = consumedLittleEndian.reduce(UInt64(0)) { acc, byte in
  425|  23.6k|            acc << 8 + UInt64(byte)
  426|  23.6k|        }
$s10WasmParser0B0V14parseValueType0A5Types0dE0OyKF:
  437|  25.0k|    func parseValueType() throws -> ValueType {
  438|  25.0k|        let b = try stream.consumeAny()
  439|  24.9k|
  440|  24.9k|        switch b {
  441|  24.9k|        case 0x7F: return .i32
  442|  24.9k|        case 0x7E: return .i64
  443|  24.9k|        case 0x7D: return .f32
  444|  24.9k|        case 0x7C: return .f64
  445|  24.9k|        case 0x7B: return .f64
  446|  24.9k|        case 0x70: return .ref(.funcRef)
  447|  24.9k|        case 0x6F: return .ref(.externRef)
  448|  24.9k|        default:
  449|     11|            throw StreamError<Stream.Element>.unexpected(b, index: offset, expected: Set(0x7C...0x7F))
  450|  24.9k|        }
  451|  24.9k|    }
$s10WasmParser0B0V15parseResultTypeAA05BlockE0OyKF:
  456|  9.15k|    func parseResultType() throws -> BlockType {
  457|  9.15k|        guard let nextByte = try stream.peek() else {
  458|      9|            throw makeError(.unexpectedEnd)
  459|  9.14k|        }
  460|  9.14k|        switch nextByte {
  461|  9.14k|        case 0x40:
  462|  3.35k|            _ = try stream.consumeAny()
  463|  3.35k|            return .empty
  464|  9.14k|        case 0x7C...0x7F, 0x70, 0x6F:
  465|  3.38k|            return try .type(parseValueType())
  466|  9.14k|        default:
  467|  2.41k|            let rawIndex = try stream.parseVarSigned33()
  468|  2.40k|            guard let index = TypeIndex(exactly: rawIndex) else {
  469|      8|                throw makeError(.invalidFunctionType(rawIndex))
  470|  2.39k|            }
  471|  2.39k|            return .funcType(index)
  472|  9.14k|        }
  473|  9.14k|    }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKF:
  478|  3.42k|    func parseFunctionType() throws -> FunctionType {
  479|  3.42k|        let opcode = try stream.consumeAny()
  480|  3.42k|
  481|  3.42k|        // XXX: spectest expects the first byte should be parsed as a LEB128 with 1 byte limit
  482|  3.42k|        // but the spec itself doesn't require it, so just check the continue bit of LEB128 here.
  483|  3.42k|        guard opcode & 0b10000000 == 0 else {
  484|      1|            throw makeError(.integerRepresentationTooLong)
  485|  3.42k|        }
  486|  3.42k|        guard opcode == 0x60 else {
  487|      1|            throw makeError(.malformedFunctionType(opcode))
  488|  3.42k|        }
  489|  3.42k|
  490|  3.42k|        let parameters = try parseVector { try parseValueType() }
  491|  3.39k|        let results = try parseVector { try parseValueType() }
  492|  3.37k|        return FunctionType(parameters: parameters, results: results)
  493|  3.42k|    }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKFAE05ValueE0OyKXEfU_:
  490|  3.90k|        let parameters = try parseVector { try parseValueType() }
$s10WasmParser0B0V17parseFunctionType0A5Types0dE0VyKFAE05ValueE0OyKXEfU0_:
  491|  1.74k|        let results = try parseVector { try parseValueType() }
$s10WasmParser0B0V11parseLimitsAA0D0VyKF:
  498|  2.09k|    func parseLimits() throws -> Limits {
  499|  2.09k|        let b = try stream.consumeAny()
  500|  2.07k|        let sharedMask: UInt8 = 0b0010
  501|  2.07k|        let isMemory64Mask: UInt8 = 0b0100
  502|  2.07k|
  503|  2.07k|        let hasMax = b & 0b0001 != 0
  504|  2.07k|        let shared = b & sharedMask != 0
  505|  2.07k|        let isMemory64 = b & isMemory64Mask != 0
  506|  2.07k|
  507|  2.07k|        var flagMask: UInt8 = 0b0001
  508|  2.07k|        if features.contains(.threads) {
  509|      0|            flagMask |= sharedMask
  510|      0|        }
  511|  2.07k|        if features.contains(.memory64) {
  512|      0|            flagMask |= isMemory64Mask
  513|      0|        }
  514|  2.07k|        guard (b & ~flagMask) == 0 else {
  515|      4|            throw makeError(.malformedLimit(b))
  516|  2.07k|        }
  517|  2.07k|
  518|  2.07k|        let min: UInt64
  519|  2.07k|        if isMemory64 {
  520|      0|            min = try parseUnsigned(UInt64.self)
  521|  2.07k|        } else {
  522|  2.07k|            min = try UInt64(parseUnsigned(UInt32.self))
  523|  2.06k|        }
  524|  2.06k|        var max: UInt64?
  525|  2.06k|        if hasMax {
  526|    773|            if isMemory64 {
  527|      0|                max = try parseUnsigned(UInt64.self)
  528|    773|            } else {
  529|    773|                max = try UInt64(parseUnsigned(UInt32.self))
  530|    772|            }
  531|  2.06k|        }
  532|  2.06k|        return Limits(min: min, max: max, isMemory64: isMemory64, shared: shared)
  533|  2.09k|    }
$s10WasmParser0B0V15parseMemoryTypeAA6LimitsVyKF:
  537|    188|    func parseMemoryType() throws -> MemoryType {
  538|    188|        return try parseLimits()
  539|    188|    }
$s10WasmParser0B0V14parseTableTypeAA0dE0VyKF:
  544|    576|    func parseTableType() throws -> TableType {
  545|    576|        let elementType: ReferenceType
  546|    576|        let b = try stream.consumeAny()
  547|    567|
  548|    567|        switch b {
  549|    567|        case 0x70:
  550|    496|            elementType = .funcRef
  551|    567|        case 0x6F:
  552|     70|            elementType = .externRef
  553|    567|        default:
  554|      1|            throw StreamError.unexpected(b, index: offset, expected: [0x6F, 0x70])
  555|    567|        }
  556|    566|
  557|    566|        let limits = try parseLimits()
  558|    557|        return TableType(elementType: elementType, limits: limits)
  559|    576|    }
$s10WasmParser0B0V15parseGlobalTypeAA0dE0VyKF:
  564|  8.79k|    func parseGlobalType() throws -> GlobalType {
  565|  8.79k|        let valueType = try parseValueType()
  566|  8.78k|        let mutability = try parseMutability()
  567|  8.78k|        return GlobalType(mutability: mutability, valueType: valueType)
  568|  8.79k|    }
$s10WasmParser0B0V15parseMutabilityAA0D0OyKF:
  571|  8.78k|    func parseMutability() throws -> Mutability {
  572|  8.78k|        let b = try stream.consumeAny()
  573|  8.78k|        switch b {
  574|  8.78k|        case 0x00:
  575|  1.58k|            return .constant
  576|  8.78k|        case 0x01:
  577|  7.19k|            return .variable
  578|  8.78k|        default:
  579|      1|            throw makeError(.malformedMutability(b))
  580|  8.78k|        }
  581|  8.78k|    }
$s10WasmParser0B0V11parseMemargAA6MemArgVyKF:
  586|  25.3k|    func parseMemarg() throws -> MemArg {
  587|  25.3k|        let align: UInt32 = try parseUnsigned()
  588|  25.3k|        let offset: UInt64 = try features.contains(.memory64) ? parseUnsigned(UInt64.self) : UInt64(parseUnsigned(UInt32.self))
  589|  25.3k|        return MemArg(offset: offset, align: align)
  590|  25.3k|    }
$s10WasmParser0B0V16parseVectorBytess10ArraySliceVys5UInt8VGyKF:
  592|    383|    @inlinable func parseVectorBytes() throws -> ArraySlice<UInt8> {
  593|    383|        let count: UInt32 = try parseUnsigned()
  594|    379|        return try stream.consume(count: Int(count))
  595|    383|    }
$s10WasmParser0B0V16parseMemoryIndexs6UInt32VyKF:
  601|  13.1k|    @inlinable func parseMemoryIndex() throws -> UInt32 {
  602|  13.1k|        let zero = try stream.consumeAny()
  603|  13.1k|        guard zero == 0x00 else {
  604|     15|            throw makeError(.zeroExpected(actual: zero))
  605|  13.1k|        }
  606|  13.1k|        return 0
  607|  13.1k|    }
$s10WasmParser0B0V12visitUnknownyySays5UInt8VGKF:
  609|    157|    @inlinable func visitUnknown(_ opcode: [UInt8]) throws {
  610|    157|        throw makeError(.illegalOpcode(opcode))
  611|    157|    }
$s10WasmParser0B0V10visitBlockAA0D4TypeOyKF:
  613|  3.69k|    @inlinable mutating func visitBlock() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V9visitLoopAA9BlockTypeOyKF:
  614|  3.94k|    @inlinable mutating func visitLoop() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V7visitIfAA9BlockTypeOyKF:
  615|  1.51k|    @inlinable mutating func visitIf() throws -> BlockType { try parseResultType() }
$s10WasmParser0B0V7visitBrs6UInt32VyKF:
  616|  5.03k|    @inlinable mutating func visitBr() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V9visitBrIfs6UInt32VyKF:
  617|  1.31k|    @inlinable mutating func visitBrIf() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V12visitBrTableAA0dE0VyKF:
  618|  1.44k|    @inlinable mutating func visitBrTable() throws -> BrTable {
  619|  1.44k|        let labelIndices: [UInt32] = try parseVector { try parseUnsigned() }
  620|  1.43k|        let labelIndex: UInt32 = try parseUnsigned()
  621|  1.42k|        return BrTable(labelIndices: labelIndices, defaultIndex: labelIndex)
  622|  1.44k|    }
$s10WasmParser0B0V12visitBrTableAA0dE0VyKFs6UInt32VyKXEfU_:
  619|  2.97k|        let labelIndices: [UInt32] = try parseVector { try parseUnsigned() }
$s10WasmParser0B0V9visitCalls6UInt32VyKF:
  623|  4.03k|    @inlinable mutating func visitCall() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V17visitCallIndirects6UInt32V9typeIndex_AF05tableH0tyKF:
  625|    480|    @inlinable mutating func visitCallIndirect() throws -> (typeIndex: UInt32, tableIndex: UInt32) {
  626|    480|        let typeIndex: TypeIndex = try parseUnsigned()
  627|    479|        if try !features.contains(.referenceTypes) && stream.peek() != 0 {
  628|      0|            // Check that reserved byte is zero when reference-types is disabled
  629|      0|            throw makeError(.malformedIndirectCall)
  630|    479|        }
  631|    479|        let tableIndex: TableIndex = try parseUnsigned()
  632|    478|        return (typeIndex, tableIndex)
  633|    480|    }
$s10WasmParser0B0V15visitReturnCalls6UInt32VyKF:
  635|    262|    @inlinable mutating func visitReturnCall() throws -> UInt32 {
  636|    262|        try parseUnsigned()
  637|    261|    }
$s10WasmParser0B0V23visitReturnCallIndirects6UInt32V9typeIndex_AF05tableI0tyKF:
  639|    246|    @inlinable mutating func visitReturnCallIndirect() throws -> (typeIndex: UInt32, tableIndex: UInt32) {
  640|    246|        let typeIndex: TypeIndex = try parseUnsigned()
  641|    245|        let tableIndex: TableIndex = try parseUnsigned()
  642|    244|        return (typeIndex, tableIndex)
  643|    246|    }
$s10WasmParser0B0V16visitTypedSelect0A5Types9ValueTypeOyKF:
  645|    391|    @inlinable mutating func visitTypedSelect() throws -> WasmTypes.ValueType {
  646|    391|        let results = try parseVector { try parseValueType() }
  647|    374|        guard results.count == 1 else {
  648|      1|            throw makeError(.invalidResultArity(expected: 1, actual: results.count))
  649|    373|        }
  650|    373|        return results[0]
  651|    391|    }
$s10WasmParser0B0V16visitTypedSelect0A5Types9ValueTypeOyKFAGyKXEfU_:
  646|    583|        let results = try parseVector { try parseValueType() }
$s10WasmParser0B0V13visitLocalGets6UInt32VyKF:
  653|  2.80k|    @inlinable mutating func visitLocalGet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V13visitLocalSets6UInt32VyKF:
  654|  1.86k|    @inlinable mutating func visitLocalSet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V13visitLocalTees6UInt32VyKF:
  655|  7.68k|    @inlinable mutating func visitLocalTee() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V14visitGlobalGets6UInt32VyKF:
  656|  10.0k|    @inlinable mutating func visitGlobalGet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V14visitGlobalSets6UInt32VyKF:
  657|  6.62k|    @inlinable mutating func visitGlobalSet() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V9visitLoadyAA6MemArgVAA11InstructionO0D0OKF:
  658|  22.7k|    @inlinable mutating func visitLoad(_: Instruction.Load) throws -> MemArg { try parseMemarg() }
$s10WasmParser0B0V10visitStoreyAA6MemArgVAA11InstructionO0D0OKF:
  659|  2.67k|    @inlinable mutating func visitStore(_: Instruction.Store) throws -> MemArg { try parseMemarg() }
$s10WasmParser0B0V15visitMemorySizes6UInt32VyKF:
  660|  10.3k|    @inlinable mutating func visitMemorySize() throws -> UInt32 {
  661|  10.3k|        try parseMemoryIndex()
  662|  10.3k|    }
$s10WasmParser0B0V15visitMemoryGrows6UInt32VyKF:
  663|  2.30k|    @inlinable mutating func visitMemoryGrow() throws -> UInt32 {
  664|  2.30k|        try parseMemoryIndex()
  665|  2.29k|    }
$s10WasmParser0B0V13visitI32Consts5Int32VyKF:
  666|  13.5k|    @inlinable mutating func visitI32Const() throws -> Int32 {
  667|  13.5k|        let n: UInt32 = try parseInteger()
  668|  13.5k|        return Int32(bitPattern: n)
  669|  13.5k|    }
$s10WasmParser0B0V13visitI64Consts5Int64VyKF:
  670|  12.7k|    @inlinable mutating func visitI64Const() throws -> Int64 {
  671|  12.7k|        let n: UInt64 = try parseInteger()
  672|  12.7k|        return Int64(bitPattern: n)
  673|  12.7k|    }
$s10WasmParser0B0V13visitF32ConstAA7IEEE754O7Float32VyKF:
  674|  4.48k|    @inlinable mutating func visitF32Const() throws -> IEEE754.Float32 {
  675|  4.48k|        let n = try parseFloat()
  676|  4.48k|        return IEEE754.Float32(bitPattern: n)
  677|  4.48k|    }
$s10WasmParser0B0V13visitF64ConstAA7IEEE754O7Float64VyKF:
  678|  2.97k|    @inlinable mutating func visitF64Const() throws -> IEEE754.Float64 {
  679|  2.97k|        let n = try parseDouble()
  680|  2.96k|        return IEEE754.Float64(bitPattern: n)
  681|  2.97k|    }
$s10WasmParser0B0V12visitRefNull0A5Types13ReferenceTypeOyKF:
  682|    134|    @inlinable mutating func visitRefNull() throws -> WasmTypes.ReferenceType {
  683|    134|        let type = try parseValueType()
  684|    130|        guard case let .ref(refType) = type else {
  685|      4|            throw makeError(.expectedRefType(actual: type))
  686|    126|        }
  687|    126|        return refType
  688|    134|    }
$s10WasmParser0B0V12visitRefFuncs6UInt32VyKF:
  690|    292|    @inlinable mutating func visitRefFunc() throws -> UInt32 { try parseUnsigned() }
$s10WasmParser0B0V15visitMemoryInits6UInt32VyKF:
  691|    113|    @inlinable mutating func visitMemoryInit() throws -> UInt32 {
  692|    113|        let dataIndex: DataIndex = try parseUnsigned()
  693|    112|        _ = try parseMemoryIndex()
  694|    110|        return dataIndex
  695|    113|    }
$s10WasmParser0B0V13visitDataDrops6UInt32VyKF:
  697|    196|    @inlinable mutating func visitDataDrop() throws -> UInt32 {
  698|    196|        try parseUnsigned()
  699|    195|    }
$s10WasmParser0B0V15visitMemoryCopys6UInt32V6dstMem_AF03srcH0tyKF:
  701|    190|    @inlinable mutating func visitMemoryCopy() throws -> (dstMem: UInt32, srcMem: UInt32) {
  702|    190|        _ = try parseMemoryIndex()
  703|    188|        _ = try parseMemoryIndex()
  704|    186|        return (0, 0)
  705|    190|    }
$s10WasmParser0B0V15visitMemoryFills6UInt32VyKF:
  707|    137|    @inlinable mutating func visitMemoryFill() throws -> UInt32 {
  708|    137|        let zero = try stream.consumeAny()
  709|    136|        guard zero == 0x00 else {
  710|      1|            throw makeError(.zeroExpected(actual: zero))
  711|    135|        }
  712|    135|        return 0
  713|    137|    }
$s10WasmParser0B0V14visitTableInits6UInt32V9elemIndex_AF5tabletyKF:
  715|    333|    @inlinable mutating func visitTableInit() throws -> (elemIndex: UInt32, table: UInt32) {
  716|    333|        let elementIndex: ElementIndex = try parseUnsigned()
  717|    332|        let tableIndex: TableIndex = try parseUnsigned()
  718|    331|        return (elementIndex, tableIndex)
  719|    333|    }
$s10WasmParser0B0V13visitElemDrops6UInt32VyKF:
  720|    199|    @inlinable mutating func visitElemDrop() throws -> UInt32 {
  721|    199|        try parseUnsigned()
  722|    198|    }
$s10WasmParser0B0V14visitTableCopys6UInt32V03dstD0_AF03srcD0tyKF:
  723|    134|    @inlinable mutating func visitTableCopy() throws -> (dstTable: UInt32, srcTable: UInt32) {
  724|    134|        let destination: TableIndex = try parseUnsigned()
  725|    133|        let source: TableIndex = try parseUnsigned()
  726|    127|        return (destination, source)
  727|    134|    }
$s10WasmParser0B0V14visitTableFills6UInt32VyKF:
  728|    240|    @inlinable mutating func visitTableFill() throws -> UInt32 {
  729|    240|        try parseUnsigned()
  730|    239|    }
$s10WasmParser0B0V13visitTableGets6UInt32VyKF:
  731|    317|    @inlinable mutating func visitTableGet() throws -> UInt32 {
  732|    317|        try parseUnsigned()
  733|    313|    }
$s10WasmParser0B0V13visitTableSets6UInt32VyKF:
  734|    573|    @inlinable mutating func visitTableSet() throws -> UInt32 {
  735|    573|        try parseUnsigned()
  736|    571|    }
$s10WasmParser0B0V14visitTableGrows6UInt32VyKF:
  737|    238|    @inlinable mutating func visitTableGrow() throws -> UInt32 {
  738|    238|        try parseUnsigned()
  739|    237|    }
$s10WasmParser0B0V14visitTableSizes6UInt32VyKF:
  740|    215|    @inlinable mutating func visitTableSize() throws -> UInt32 {
  741|    215|        try parseUnsigned()
  742|    214|    }
$s10WasmParser0B0V13claimNextBytes5UInt8VyKF:
  743|   297k|    @inlinable func claimNextByte() throws -> UInt8 {
  744|   297k|        return try stream.consumeAny()
  745|   297k|    }
$s10WasmParser0B0V16parseInstruction7visitorSbqd__z_tKAA0D7VisitorRd__lF:
  749|   287k|    mutating func parseInstruction<V: InstructionVisitor>(visitor v: inout V) throws -> Bool {
  750|   287k|        return try parseBinaryInstruction(visitor: &v, decoder: &self)
  751|   287k|    }
$s10WasmParser0B0V18InstructionFactoryV5instsSayAA0C0OGvpfi:
  755|  11.0k|        @usableFromInline var insts: [Instruction] = []
$s10WasmParser0B0V18InstructionFactoryVAEyx_GycfC:
  757|  11.0k|        @inlinable init() {}
$s10WasmParser0B0V18InstructionFactoryV5visityyAA0C0OKF:
  760|  65.9k|        mutating func visit(_ instruction: Instruction) throws {
  761|  65.9k|            insts.append(instruction)
  762|  65.9k|        }
$s10WasmParser0B0V20parseConstExpressionSayAA11InstructionOGyKF:
  766|  11.0k|    mutating func parseConstExpression() throws -> ConstExpression {
  767|  11.0k|        var factory = InstructionFactory()
  768|  11.0k|        var isEnd: Bool
  769|  67.7k|        repeat {
  770|  67.7k|            isEnd = try self.parseInstruction(visitor: &factory)
  771|  67.7k|        } while !isEnd
  772|  9.30k|        return factory.insts
  773|  11.0k|    }
$s10WasmParser0B0V18parseCustomSection4sizeAA0dE0Vs6UInt32V_tKF:
  782|    806|    func parseCustomSection(size: UInt32) throws -> CustomSection {
  783|    806|        let preNameIndex = stream.currentIndex
  784|    806|        let name = try parseName()
  785|    799|        let nameSize = stream.currentIndex - preNameIndex
  786|    799|        let contentSize = Int(size) - nameSize
  787|    799|
  788|    799|        guard contentSize >= 0 else {
  789|      6|            throw makeError(.invalidSectionSize(size))
  790|    793|        }
  791|    793|
  792|    793|        let bytes = try stream.consume(count: contentSize)
  793|    788|
  794|    788|        return CustomSection(name: name, bytes: bytes)
  795|    806|    }
$s10WasmParser0B0V16parseTypeSectionSay0A5Types08FunctionD0VGyKF:
  800|  1.83k|    func parseTypeSection() throws -> [FunctionType] {
  801|  1.83k|        return try parseVector { try parseFunctionType() }
  802|  1.83k|    }
$s10WasmParser0B0V16parseTypeSectionSay0A5Types08FunctionD0VGyKFAGyKXEfU_:
  801|  3.42k|        return try parseVector { try parseFunctionType() }
$s10WasmParser0B0V18parseImportSectionSayAA0D0VGyKF:
  807|  1.15k|    func parseImportSection() throws -> [Import] {
  808|  1.15k|        return try parseVector {
  809|  1.15k|            let module = try parseName()
  810|  1.15k|            let name = try parseName()
  811|  1.15k|            let descriptor = try parseImportDescriptor()
  812|  1.15k|            return Import(module: module, name: name, descriptor: descriptor)
  813|  1.15k|        }
  814|  1.15k|    }
$s10WasmParser0B0V18parseImportSectionSayAA0D0VGyKFAFyKXEfU_:
  808|    795|        return try parseVector {
  809|    795|            let module = try parseName()
  810|    771|            let name = try parseName()
  811|    765|            let descriptor = try parseImportDescriptor()
  812|    755|            return Import(module: module, name: name, descriptor: descriptor)
  813|    795|        }
$s10WasmParser0B0V21parseImportDescriptorAA0dE0OyKF:
  818|    765|    func parseImportDescriptor() throws -> ImportDescriptor {
  819|    765|        let b = try stream.consume(Set(0x00...0x03))
  820|    761|        switch b {
  821|    761|        case 0x00: return try .function(parseUnsigned())
  822|    761|        case 0x01: return try .table(parseTableType())
  823|    761|        case 0x02: return try .memory(parseMemoryType())
  824|    761|        case 0x03: return try .global(parseGlobalType())
  825|    761|        default:
  826|      0|            preconditionFailure("should never reach here")
  827|    761|        }
  828|      0|    }
$s10WasmParser0B0V20parseFunctionSectionSays6UInt32VGyKF:
  833|  1.75k|    func parseFunctionSection() throws -> [TypeIndex] {
  834|  1.75k|        return try parseVector { try parseUnsigned() }
  835|  1.75k|    }
$s10WasmParser0B0V20parseFunctionSectionSays6UInt32VGyKFAFyKXEfU_:
  834|  6.26k|        return try parseVector { try parseUnsigned() }
$s10WasmParser0B0V17parseTableSectionSayAA0D0VGyKF:
  840|    339|    func parseTableSection() throws -> [Table] {
  841|    339|        return try parseVector { try Table(type: parseTableType()) }
  842|    339|    }
$s10WasmParser0B0V17parseTableSectionSayAA0D0VGyKFAFyKXEfU_:
  841|    454|        return try parseVector { try Table(type: parseTableType()) }
$s10WasmParser0B0V18parseMemorySectionSayAA0D0VGyKF:
  847|    974|    func parseMemorySection() throws -> [Memory] {
  848|    974|        return try parseVector { try Memory(type: parseLimits()) }
  849|    974|    }
$s10WasmParser0B0V18parseMemorySectionSayAA0D0VGyKFAFyKXEfU_:
  848|  1.34k|        return try parseVector { try Memory(type: parseLimits()) }
$s10WasmParser0B0V18parseGlobalSectionSayAA0D0VGyKF:
  854|  2.34k|    mutating func parseGlobalSection() throws -> [Global] {
  855|  2.34k|        return try parseVector {
  856|  2.34k|            let type = try parseGlobalType()
  857|  2.34k|            let expression = try parseConstExpression()
  858|  2.34k|            return Global(type: type, initializer: expression)
  859|  2.34k|        }
  860|  2.34k|    }
$s10WasmParser0B0V18parseGlobalSectionSayAA0D0VGyKFAFyKXEfU_:
  855|  8.66k|        return try parseVector {
  856|  8.66k|            let type = try parseGlobalType()
  857|  8.64k|            let expression = try parseConstExpression()
  858|  7.74k|            return Global(type: type, initializer: expression)
  859|  8.66k|        }
$s10WasmParser0B0V18parseExportSectionSayAA0D0VGyKF:
  865|    369|    func parseExportSection() throws -> [Export] {
  866|    369|        return try parseVector {
  867|    369|            let name = try parseName()
  868|    369|            let descriptor = try parseExportDescriptor()
  869|    369|            return Export(name: name, descriptor: descriptor)
  870|    369|        }
  871|    369|    }
$s10WasmParser0B0V18parseExportSectionSayAA0D0VGyKFAFyKXEfU_:
  866|  1.50k|        return try parseVector {
  867|  1.50k|            let name = try parseName()
  868|  1.48k|            let descriptor = try parseExportDescriptor()
  869|  1.47k|            return Export(name: name, descriptor: descriptor)
  870|  1.50k|        }
$s10WasmParser0B0V21parseExportDescriptorAA0dE0OyKF:
  875|  1.48k|    func parseExportDescriptor() throws -> ExportDescriptor {
  876|  1.48k|        let b = try stream.consume(Set(0x00...0x03))
  877|  1.47k|        switch b {
  878|  1.47k|        case 0x00: return try .function(parseUnsigned())
  879|  1.47k|        case 0x01: return try .table(parseUnsigned())
  880|  1.47k|        case 0x02: return try .memory(parseUnsigned())
  881|  1.47k|        case 0x03: return try .global(parseUnsigned())
  882|  1.47k|        default:
  883|      0|            preconditionFailure("should never reach here")
  884|  1.47k|        }
  885|      0|    }
$s10WasmParser0B0V17parseStartSections6UInt32VyKF:
  890|    627|    func parseStartSection() throws -> FunctionIndex {
  891|    627|        return try parseUnsigned()
  892|    627|    }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKF:
  897|    691|    mutating func parseElementSection() throws -> [ElementSegment] {
  898|    691|        return try parseVector {
  899|    691|            let flag = try ElementSegment.Flag(rawValue: parseUnsigned())
  900|    691|
  901|    691|            let type: ReferenceType
  902|    691|            let initializer: [ConstExpression]
  903|    691|            let mode: ElementSegment.Mode
  904|    691|
  905|    691|            if flag.contains(.isPassiveOrDeclarative) {
  906|    691|                if flag.contains(.isDeclarative) {
  907|    691|                    mode = .declarative
  908|    691|                } else {
  909|    691|                    mode = .passive
  910|    691|                }
  911|    691|            } else {
  912|    691|                let table: TableIndex
  913|    691|
  914|    691|                if flag.contains(.hasTableIndex) {
  915|    691|                    table = try parseUnsigned()
  916|    691|                } else {
  917|    691|                    table = 0
  918|    691|                }
  919|    691|
  920|    691|                let offset = try parseConstExpression()
  921|    691|                mode = .active(table: table, offset: offset)
  922|    691|            }
  923|    691|
  924|    691|            if flag.segmentHasRefType {
  925|    691|                let valueType = try parseValueType()
  926|    691|
  927|    691|                guard case let .ref(refType) = valueType else {
  928|    691|                    throw makeError(.expectedRefType(actual: valueType))
  929|    691|                }
  930|    691|
  931|    691|                type = refType
  932|    691|            } else {
  933|    691|                type = .funcRef
  934|    691|            }
  935|    691|
  936|    691|            if flag.segmentHasElemKind {
  937|    691|                // `elemkind` parsing as defined in the spec
  938|    691|                let elemKind = try parseUnsigned() as UInt32
  939|    691|                guard elemKind == 0x00 else {
  940|    691|                    throw makeError(.unexpectedElementKind(expected: 0x00, actual: elemKind))
  941|    691|                }
  942|    691|            }
  943|    691|
  944|    691|            if flag.contains(.usesExpressions) {
  945|    691|                initializer = try parseVector { try parseConstExpression() }
  946|    691|            } else {
  947|    691|                initializer = try parseVector {
  948|    691|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  949|    691|                }
  950|    691|            }
  951|    691|
  952|    691|            return ElementSegment(type: type, initializer: initializer, mode: mode)
  953|    691|        }
  954|    691|    }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_:
  898|  3.31k|        return try parseVector {
  899|  3.31k|            let flag = try ElementSegment.Flag(rawValue: parseUnsigned())
  900|  3.29k|
  901|  3.29k|            let type: ReferenceType
  902|  3.29k|            let initializer: [ConstExpression]
  903|  3.29k|            let mode: ElementSegment.Mode
  904|  3.29k|
  905|  3.29k|            if flag.contains(.isPassiveOrDeclarative) {
  906|  1.54k|                if flag.contains(.isDeclarative) {
  907|    486|                    mode = .declarative
  908|  1.05k|                } else {
  909|  1.05k|                    mode = .passive
  910|  1.05k|                }
  911|  1.75k|            } else {
  912|  1.75k|                let table: TableIndex
  913|  1.75k|
  914|  1.75k|                if flag.contains(.hasTableIndex) {
  915|     84|                    table = try parseUnsigned()
  916|  1.66k|                } else {
  917|  1.66k|                    table = 0
  918|  1.75k|                }
  919|  1.75k|
  920|  1.75k|                let offset = try parseConstExpression()
  921|  1.21k|                mode = .active(table: table, offset: offset)
  922|  2.75k|            }
  923|  2.75k|
  924|  2.75k|            if flag.segmentHasRefType {
  925|     83|                let valueType = try parseValueType()
  926|     78|
  927|     78|                guard case let .ref(refType) = valueType else {
  928|      4|                    throw makeError(.expectedRefType(actual: valueType))
  929|     74|                }
  930|     74|
  931|     74|                type = refType
  932|  2.67k|            } else {
  933|  2.67k|                type = .funcRef
  934|  2.74k|            }
  935|  2.74k|
  936|  2.74k|            if flag.segmentHasElemKind {
  937|  1.52k|                // `elemkind` parsing as defined in the spec
  938|  1.52k|                let elemKind = try parseUnsigned() as UInt32
  939|  1.50k|                guard elemKind == 0x00 else {
  940|      2|                    throw makeError(.unexpectedElementKind(expected: 0x00, actual: elemKind))
  941|  1.50k|                }
  942|  2.72k|            }
  943|  2.72k|
  944|  2.72k|            if flag.contains(.usesExpressions) {
  945|    392|                initializer = try parseVector { try parseConstExpression() }
  946|  2.33k|            } else {
  947|  2.33k|                initializer = try parseVector {
  948|  2.33k|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  949|  2.33k|                }
  950|  2.69k|            }
  951|  2.69k|
  952|  2.69k|            return ElementSegment(type: type, initializer: initializer, mode: mode)
  953|  3.31k|        }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_SayAA11InstructionOGyKXEfU_:
  945|    187|                initializer = try parseVector { try parseConstExpression() }
$s10WasmParser0B0V19parseElementSectionSayAA0D7SegmentVGyKFAFyKXEfU_SayAA11InstructionOGyKXEfU0_:
  947|    668|                initializer = try parseVector {
  948|    668|                    try [Instruction.refFunc(functionIndex: parseUnsigned() as UInt32)]
  949|    659|                }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKF:
  959|  1.74k|    func parseCodeSection() throws -> [Code] {
  960|  1.74k|        return try parseVector {
  961|  1.74k|            let size = try parseUnsigned() as UInt32
  962|  1.74k|            let bodyStart = stream.currentIndex
  963|  1.74k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  964|  1.74k|                let n: UInt32 = try parseUnsigned()
  965|  1.74k|                let t = try parseValueType()
  966|  1.74k|                return (n, t)
  967|  1.74k|            }
  968|  1.74k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
  969|  1.74k|            guard totalLocals < limits.maxFunctionLocals else {
  970|  1.74k|                throw makeError(.tooManyLocals(totalLocals, limit: limits.maxFunctionLocals))
  971|  1.74k|            }
  972|  1.74k|
  973|  1.74k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  974|  1.74k|                return Array(repeating: type, count: Int(n))
  975|  1.74k|            }
  976|  1.74k|            let expressionStart = stream.currentIndex
  977|  1.74k|            let expressionBytes = try stream.consume(
  978|  1.74k|                count: Int(size) - (expressionStart - bodyStart)
  979|  1.74k|            )
  980|  1.74k|            return Code(
  981|  1.74k|                locals: locals, expression: expressionBytes,
  982|  1.74k|                offset: expressionStart, features: features
  983|  1.74k|            )
  984|  1.74k|        }
  985|  1.74k|    }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_:
  960|  5.48k|        return try parseVector {
  961|  5.48k|            let size = try parseUnsigned() as UInt32
  962|  5.46k|            let bodyStart = stream.currentIndex
  963|  5.46k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  964|  5.46k|                let n: UInt32 = try parseUnsigned()
  965|  5.46k|                let t = try parseValueType()
  966|  5.46k|                return (n, t)
  967|  5.46k|            }
  968|  5.45k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
  969|  5.45k|            guard totalLocals < limits.maxFunctionLocals else {
  970|      1|                throw makeError(.tooManyLocals(totalLocals, limit: limits.maxFunctionLocals))
  971|  5.45k|            }
  972|  5.45k|
  973|  5.45k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  974|  5.45k|                return Array(repeating: type, count: Int(n))
  975|  5.45k|            }
  976|  5.45k|            let expressionStart = stream.currentIndex
  977|  5.45k|            let expressionBytes = try stream.consume(
  978|  5.45k|                count: Int(size) - (expressionStart - bodyStart)
  979|  5.45k|            )
  980|  5.45k|            return Code(
  981|  5.45k|                locals: locals, expression: expressionBytes,
  982|  5.45k|                offset: expressionStart, features: features
  983|  5.45k|            )
  984|  5.48k|        }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_s6UInt32V1n_0A5Types9ValueTypeO4typetyKXEfU_:
  963|  6.40k|            let localTypes = try parseVector { () -> (n: UInt32, type: ValueType) in
  964|  6.40k|                let n: UInt32 = try parseUnsigned()
  965|  6.40k|                let t = try parseValueType()
  966|  6.39k|                return (n, t)
  967|  6.40k|            }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_s6UInt64VAI_s6UInt32V1n_0A5Types9ValueTypeO4typettXEfU0_:
  968|  6.34k|            let totalLocals = localTypes.reduce(UInt64(0)) { $0 + UInt64($1.n) }
$s10WasmParser0B0V16parseCodeSectionSayAA0D0VGyKFAFyKXEfU_Say0A5Types9ValueTypeOGs6UInt32V_AJtXEfU1_:
  973|  6.33k|            let locals = localTypes.flatMap { (n: UInt32, type: ValueType) in
  974|  6.33k|                return Array(repeating: type, count: Int(n))
  975|  6.33k|            }
$s10WasmParser0B0V16parseDataSectionSayAA0D7SegmentOGyKF:
  990|    380|    mutating func parseDataSection() throws -> [DataSegment] {
  991|    380|        return try parseVector {
  992|    380|            let kind: UInt32 = try parseUnsigned()
  993|    380|            switch kind {
  994|    380|            case 0:
  995|    380|                let offset = try parseConstExpression()
  996|    380|                let initializer = try parseVectorBytes()
  997|    380|                return .active(.init(index: 0, offset: offset, initializer: initializer))
  998|    380|
  999|    380|            case 1:
 1000|    380|                return try .passive(parseVectorBytes())
 1001|    380|
 1002|    380|            case 2:
 1003|    380|                let index: UInt32 = try parseUnsigned()
 1004|    380|                let offset = try parseConstExpression()
 1005|    380|                let initializer = try parseVectorBytes()
 1006|    380|                return .active(.init(index: index, offset: offset, initializer: initializer))
 1007|    380|            default:
 1008|    380|                throw makeError(.malformedDataSegmentKind(kind))
 1009|    380|            }
 1010|    380|        }
 1011|    380|    }
$s10WasmParser0B0V16parseDataSectionSayAA0D7SegmentOGyKFAFyKXEfU_:
  991|    733|        return try parseVector {
  992|    733|            let kind: UInt32 = try parseUnsigned()
  993|    711|            switch kind {
  994|    711|            case 0:
  995|    425|                let offset = try parseConstExpression()
  996|    104|                let initializer = try parseVectorBytes()
  997|    103|                return .active(.init(index: 0, offset: offset, initializer: initializer))
  998|    711|
  999|    711|            case 1:
 1000|    208|                return try .passive(parseVectorBytes())
 1001|    711|
 1002|    711|            case 2:
 1003|     77|                let index: UInt32 = try parseUnsigned()
 1004|     76|                let offset = try parseConstExpression()
 1005|     71|                let initializer = try parseVectorBytes()
 1006|     70|                return .active(.init(index: index, offset: offset, initializer: initializer))
 1007|    711|            default:
 1008|      1|                throw makeError(.malformedDataSegmentKind(kind))
 1009|    711|            }
 1010|    711|        }
$s10WasmParser0B0V21parseDataCountSections6UInt32VyKF:
 1016|     10|    func parseDataCountSection() throws -> UInt32 {
 1017|     10|        return try parseUnsigned()
 1018|     10|    }
$s10WasmParser0B0V16parseMagicNumberyyKF:
 1044|  4.08k|    func parseMagicNumber() throws {
 1045|  4.08k|        let magicNumber = try stream.consume(count: 4)
 1046|  4.07k|        guard magicNumber.elementsEqual(WASM_MAGIC) else {
 1047|      3|            throw makeError(.invalidMagicNumber(.init(magicNumber)))
 1048|  4.07k|        }
 1049|  4.07k|    }
$s10WasmParser0B0V12parseVersionSays5UInt8VGyKF:
 1054|  4.07k|    func parseVersion() throws -> [UInt8] {
 1055|  4.07k|        let version = try Array(stream.consume(count: 4))
 1056|  4.07k|        guard version == [0x01, 0x00, 0x00, 0x00] else {
 1057|      1|            throw makeError(.unknownVersion(.init(version)))
 1058|  4.07k|        }
 1059|  4.07k|        return version
 1060|  4.07k|    }
$s10WasmParser0B0V13OrderTrackingV4lastAE0C0Oyx__Gvpfi:
 1083|  6.49k|        var last: Order = .initial
$s10WasmParser0B0V13OrderTrackingV5track5order6parseryAE0C0Oyx__G_ACyxGtKF:
 1086|  10.1k|        mutating func track(order: Order, parser: Parser) throws {
 1087|  10.1k|            guard last.rawValue < order.rawValue else {
 1088|     18|                throw parser.makeError(.sectionOutOfOrder)
 1089|  10.1k|            }
 1090|  10.1k|            last = order
 1091|  10.1k|        }
$s10WasmParser0B0V9parseNextAA14ParsingPayloadOSgyKF:
 1123|  19.0k|    public mutating func parseNext() throws -> ParsingPayload? {
 1124|  19.0k|        switch nextParseTarget {
 1125|  19.0k|        case .header:
 1126|  4.08k|            try parseMagicNumber()
 1127|  4.07k|            let version = try parseVersion()
 1128|  4.07k|            self.nextParseTarget = .section
 1129|  4.07k|            return .header(version: version)
 1130|  19.0k|        case .section:
 1131|  14.9k|            guard try !stream.hasReachedEnd() else {
 1132|  1.87k|                return nil
 1133|  13.0k|            }
 1134|  13.0k|            let sectionID = try stream.consumeAny()
 1135|  13.0k|            let sectionSize: UInt32 = try parseUnsigned()
 1136|  13.0k|            let sectionStart = stream.currentIndex
 1137|  13.0k|
 1138|  13.0k|            let payload: ParsingPayload
 1139|  13.0k|            let order: OrderTracking.Order?
 1140|  13.0k|            switch sectionID {
 1141|  13.0k|            case 0:
 1142|    806|                order = nil
 1143|    806|                payload = .customSection(try parseCustomSection(size: sectionSize))
 1144|  13.0k|            case 1:
 1145|  1.83k|                order = .type
 1146|  1.83k|                payload = .typeSection(try parseTypeSection())
 1147|  13.0k|            case 2:
 1148|  1.15k|                order = ._import
 1149|  1.15k|                payload = .importSection(try parseImportSection())
 1150|  13.0k|            case 3:
 1151|  1.75k|                order = .function
 1152|  1.75k|                payload = .functionSection(try parseFunctionSection())
 1153|  13.0k|            case 4:
 1154|    339|                order = .table
 1155|    339|                payload = .tableSection(try parseTableSection())
 1156|  13.0k|            case 5:
 1157|    974|                order = .memory
 1158|    974|                payload = .memorySection(try parseMemorySection())
 1159|  13.0k|            case 6:
 1160|  2.34k|                order = .global
 1161|  2.34k|                payload = .globalSection(try parseGlobalSection())
 1162|  13.0k|            case 7:
 1163|    369|                order = .export
 1164|    369|                payload = .exportSection(try parseExportSection())
 1165|  13.0k|            case 8:
 1166|    627|                order = .start
 1167|    627|                payload = .startSection(try parseStartSection())
 1168|  13.0k|            case 9:
 1169|    691|                order = .element
 1170|    691|                payload = .elementSection(try parseElementSection())
 1171|  13.0k|            case 10:
 1172|  1.74k|                order = .code
 1173|  1.74k|                payload = .codeSection(try parseCodeSection())
 1174|  13.0k|            case 11:
 1175|    380|                order = .data
 1176|    380|                payload = .dataSection(try parseDataSection())
 1177|  13.0k|            case 12:
 1178|     10|                order = .dataCount
 1179|     10|                payload = .dataCount(try parseDataCountSection())
 1180|  13.0k|            default:
 1181|      3|                throw makeError(.malformedSectionID(sectionID))
 1182|  13.0k|            }
 1183|  10.9k|            if let order = order {
 1184|  10.1k|                try orderTracking.track(order: order, parser: self)
 1185|  10.8k|            }
 1186|  10.8k|            let expectedSectionEnd = sectionStart + Int(sectionSize)
 1187|  10.8k|            guard expectedSectionEnd == stream.currentIndex else {
 1188|     36|                throw makeError(.sectionSizeMismatch(expected: expectedSectionEnd, actual: offset))
 1189|  10.8k|            }
 1190|  10.8k|            return payload
 1191|  19.0k|        }
 1192|  19.0k|    }

$s10WasmParser4CodeV6locals10expression6offset8featuresACSay0A5Types9ValueTypeOG_s10ArraySliceVys5UInt8VGSiAA0A10FeatureSetVtcfC:
   19|  5.45k|    init(locals: [ValueType], expression: ArraySlice<UInt8>, offset: Int, features: WasmFeatureSet) {
   20|  5.45k|        self.locals = locals
   21|  5.45k|        self.expression = expression
   22|  5.45k|        self.offset = offset
   23|  5.45k|        self.features = features
   24|  5.45k|    }
$s10WasmParser6MemArgV6offset5alignACs6UInt64V_s6UInt32VtcfC:
   37|  25.3k|    public init(offset: UInt64, align: UInt32) {
   38|  25.3k|        self.offset = offset
   39|  25.3k|        self.align = align
   40|  25.3k|    }
$s10WasmParser6LimitsV3min3max10isMemory646sharedACs6UInt64V_AISgS2btcfC:
   57|  2.06k|    public init(min: UInt64, max: UInt64? = nil, isMemory64: Bool = false, shared: Bool = false) {
   58|  2.06k|        self.min = min
   59|  2.06k|        self.max = max
   60|  2.06k|        self.isMemory64 = isMemory64
   61|  2.06k|        self.shared = shared
   62|  2.06k|    }
$s10WasmParser9TableTypeV07elementD06limitsAC0A5Types09ReferenceD0O_AA6LimitsVtcfC:
   75|    557|    public init(elementType: ReferenceType, limits: Limits) {
   76|    557|        self.elementType = elementType
   77|    557|        self.limits = limits
   78|    557|    }
$s10WasmParser10GlobalTypeV10mutability05valueD0AcA10MutabilityO_0A5Types05ValueD0OtcfC:
   94|  8.78k|    public init(mutability: Mutability, valueType: ValueType) {
   95|  8.78k|        self.mutability = mutability
   96|  8.78k|        self.valueType = valueType
   97|  8.78k|    }
$s10WasmParser7IEEE754O7Float32V10bitPatternAEs6UInt32V_tcfC:
  113|  4.48k|        public init(bitPattern: UInt32) {
  114|  4.48k|            self.bitPattern = bitPattern
  115|  4.48k|        }
$s10WasmParser7IEEE754O7Float64V10bitPatternAEs6UInt64V_tcfC:
  120|  2.96k|        public init(bitPattern: UInt64) {
  121|  2.96k|            self.bitPattern = bitPattern
  122|  2.96k|        }
$s10WasmParser7BrTableV12labelIndices12defaultIndexACSays6UInt32VG_AGtcfC:
  130|  1.42k|    public init(labelIndices: [UInt32], defaultIndex: UInt32) {
  131|  1.42k|        self.labelIndices = labelIndices
  132|  1.42k|        self.defaultIndex = defaultIndex
  133|  1.42k|    }
$s10WasmParser5TableV4typeAcA0C4TypeV_tcfC:
  168|    437|    public init(type: TableType) {
  169|    437|        self.type = type
  170|    437|    }
$s10WasmParser14ElementSegmentV4FlagV8rawValueAEs6UInt32V_tcfC:
  196|  32.9k|        init(rawValue: UInt32) {
  197|  32.9k|            self.rawValue = rawValue
  198|  32.9k|        }
$s10WasmParser14ElementSegmentV4FlagV18segmentHasElemKindSbvg:
  200|  2.74k|        @inlinable var segmentHasElemKind: Bool {
  201|  2.74k|            !contains(.usesExpressions) && rawValue != 0
  202|  2.74k|        }
$s10WasmParser14ElementSegmentV4FlagV18segmentHasElemKindSbvgSbyKXEfu_:
  201|  2.35k|            !contains(.usesExpressions) && rawValue != 0
$s10WasmParser14ElementSegmentV4FlagV17segmentHasRefTypeSbvg:
  204|  2.75k|        @inlinable var segmentHasRefType: Bool {
  205|  2.75k|            contains(.usesExpressions) && rawValue != 4
  206|  2.75k|        }
$s10WasmParser14ElementSegmentV4FlagV17segmentHasRefTypeSbvgSbyKXEfu_:
  205|    401|            contains(.usesExpressions) && rawValue != 4
$s10WasmParser14ElementSegmentV4type11initializer4modeAC0A5Types13ReferenceTypeO_SaySayAA11InstructionOGGAC4ModeOtcfC:
  224|  2.69k|    public init(type: ReferenceType, initializer: [ConstExpression], mode: Mode) {
  225|  2.69k|        self.type = type
  226|  2.69k|        self.initializer = initializer
  227|  2.69k|        self.mode = mode
  228|  2.69k|    }
$s10WasmParser11DataSegmentO6ActiveV5index6offset11initializerAEs6UInt32V_SayAA11InstructionOGs10ArraySliceVys5UInt8VGtcfC:
  240|    173|        @inlinable init(index: UInt32, offset: ConstExpression, initializer: ArraySlice<UInt8>) {
  241|    173|            self.index = index
  242|    173|            self.offset = offset
  243|    173|            self.initializer = initializer
  244|    173|        }
$s10WasmParser6ExportV4name10descriptorACSS_AA0C10DescriptorOtcfC:
  260|  1.47k|    public init(name: String, descriptor: ExportDescriptor) {
  261|  1.47k|        self.name = name
  262|  1.47k|        self.descriptor = descriptor
  263|  1.47k|    }
$s10WasmParser6ImportV6module4name10descriptorACSS_SSAA0C10DescriptorOtcfC:
  289|    755|    public init(module: String, name: String, descriptor: ImportDescriptor) {
  290|    755|        self.module = module
  291|    755|        self.name = name
  292|    755|        self.descriptor = descriptor
  293|    755|    }
$s10WasmParser11InstructionO4LoadO16naturalAlignmentSivg:
  351|  77.8k|    public var naturalAlignment: Int {
  352|  77.8k|        switch self {
  353|  77.8k|        case .i32Load: return 2
  354|  77.8k|        case .i64Load: return 3
  355|  77.8k|        case .f32Load: return 2
  356|  77.8k|        case .f64Load: return 3
  357|  77.8k|        case .i32Load8S: return 0
  358|  77.8k|        case .i32Load8U: return 0
  359|  77.8k|        case .i32Load16S: return 1
  360|  77.8k|        case .i32Load16U: return 1
  361|  77.8k|        case .i64Load8S: return 0
  362|  77.8k|        case .i64Load8U: return 0
  363|  77.8k|        case .i64Load16S: return 1
  364|  77.8k|        case .i64Load16U: return 1
  365|  77.8k|        case .i64Load32S: return 2
  366|  77.8k|        case .i64Load32U: return 2
  367|  77.8k|        }
  368|  77.8k|    }
$s10WasmParser11InstructionO4LoadO4type0A5Types9ValueTypeOvg:
  372|  77.8k|    public var type: ValueType {
  373|  77.8k|        switch self {
  374|  77.8k|        case .i32Load: return .i32
  375|  77.8k|        case .i64Load: return .i64
  376|  77.8k|        case .f32Load: return .f32
  377|  77.8k|        case .f64Load: return .f64
  378|  77.8k|        case .i32Load8S: return .i32
  379|  77.8k|        case .i32Load8U: return .i32
  380|  77.8k|        case .i32Load16S: return .i32
  381|  77.8k|        case .i32Load16U: return .i32
  382|  77.8k|        case .i64Load8S: return .i64
  383|  77.8k|        case .i64Load8U: return .i64
  384|  77.8k|        case .i64Load16S: return .i64
  385|  77.8k|        case .i64Load16U: return .i64
  386|  77.8k|        case .i64Load32S: return .i64
  387|  77.8k|        case .i64Load32U: return .i64
  388|  77.8k|        }
  389|  77.8k|    }
$s10WasmParser11InstructionO5StoreO16naturalAlignmentSivg:
  396|  1.80k|    public var naturalAlignment: Int {
  397|  1.80k|        switch self {
  398|  1.80k|        case .i32Store: return 2
  399|  1.80k|        case .i64Store: return 3
  400|  1.80k|        case .f32Store: return 2
  401|  1.80k|        case .f64Store: return 3
  402|  1.80k|        case .i32Store8: return 0
  403|  1.80k|        case .i32Store16: return 1
  404|  1.80k|        case .i64Store8: return 0
  405|  1.80k|        case .i64Store16: return 1
  406|  1.80k|        case .i64Store32: return 2
  407|  1.80k|        }
  408|  1.80k|    }
$s10WasmParser11InstructionO5StoreO4type0A5Types9ValueTypeOvg:
  412|  1.80k|    public var type: ValueType {
  413|  1.80k|        switch self {
  414|  1.80k|        case .i32Store: return .i32
  415|  1.80k|        case .i64Store: return .i64
  416|  1.80k|        case .f32Store: return .f32
  417|  1.80k|        case .f64Store: return .f64
  418|  1.80k|        case .i32Store8: return .i32
  419|  1.80k|        case .i32Store16: return .i32
  420|  1.80k|        case .i64Store8: return .i64
  421|  1.80k|        case .i64Store16: return .i64
  422|  1.80k|        case .i64Store32: return .i64
  423|  1.80k|        }
  424|  1.80k|    }

$s9WasmTypes12FunctionTypeV10parameters7resultsACSayAA05ValueD0OG_AHtcfC:
    6|  10.5k|    public init(parameters: [ValueType], results: [ValueType] = []) {
    7|  10.5k|        self.parameters = parameters
    8|  10.5k|        self.results = results
    9|  10.5k|    }

